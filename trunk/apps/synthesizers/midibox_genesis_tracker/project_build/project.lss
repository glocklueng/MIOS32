
project_build/project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .mios32_bsl   00004000  08000000  08000000  00008000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   00000188  08004000  08004000  0000c000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bdb8  08010000  08010000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000018f0  0801bdb8  0801bdb8  0001bdb8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000068  20000000  0801d6a8  00020000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00011c28  20000068  0801d710  00020068  2**3  ALLOC
  6 ._usrstack    00000100  20011c90  0801d710  00021c90  2**0  ALLOC
  7 .comment      00000070  00000000  00000000  00020068  2**0  CONTENTS, READONLY
  8 .ARM.attributes 00000033  00000000  00000000  000200d8  2**0  CONTENTS, READONLY
  9 .debug_aranges 000028b0  00000000  00000000  0002010b  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000478b5  00000000  00000000  000229bb  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ace5  00000000  00000000  0006a270  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000123e1  00000000  00000000  00074f55  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00006180  00000000  00000000  00087338  2**2  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000e5c3  00000000  00000000  0008d4b8  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001fb2c  00000000  00000000  0009ba7b  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002e58  00000000  00000000  000bb5a7  2**0  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <VgmPlayerLL_GetVGMTime>:

u32 VgmPlayerLL_GetHRTime(){
    return TIM2->CNT;
}
u32 VgmPlayerLL_GetVGMTime(){
    return TIM5->CNT;
 8010000:	4b01      	ldr	r3, [pc, #4]	; (8010008 <VgmPlayerLL_GetVGMTime+0x8>)
 8010002:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop
 8010008:	40000c00 	.word	0x40000c00

0801000c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 801000c:	b510      	push	{r4, lr}
    if(TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET){
 801000e:	4c10      	ldr	r4, [pc, #64]	; (8010050 <TIM3_IRQHandler+0x44>)
 8010010:	2101      	movs	r1, #1
 8010012:	4620      	mov	r0, r4
 8010014:	f005 f953 	bl	80152be <TIM_GetITStatus>
 8010018:	b1c0      	cbz	r0, 801004c <TIM3_IRQHandler+0x40>
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 801001a:	4620      	mov	r0, r4
 801001c:	2101      	movs	r1, #1
 801001e:	f005 f959 	bl	80152d4 <TIM_ClearITPendingBit>
        TIM_Cmd(TIM3, DISABLE);
 8010022:	4620      	mov	r0, r4
 8010024:	2100      	movs	r1, #0
 8010026:	f005 f935 	bl	8015294 <TIM_Cmd>
        u16 nextdelay = _vgm_work(TIM2->CNT, TIM5->CNT);
 801002a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801002e:	4a09      	ldr	r2, [pc, #36]	; (8010054 <TIM3_IRQHandler+0x48>)
 8010030:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010032:	f8d3 1c24 	ldr.w	r1, [r3, #3108]	; 0xc24
 8010036:	6813      	ldr	r3, [r2, #0]
 8010038:	4798      	blx	r3
        TIM3->CNT = 0;
 801003a:	2100      	movs	r1, #0
 801003c:	6261      	str	r1, [r4, #36]	; 0x24
        TIM3->ARR = nextdelay;
 801003e:	62e0      	str	r0, [r4, #44]	; 0x2c
        TIM_Cmd(TIM3, ENABLE);
 8010040:	2101      	movs	r1, #1
 8010042:	4620      	mov	r0, r4
    }
}
 8010044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
        TIM_Cmd(TIM3, DISABLE);
        u16 nextdelay = _vgm_work(TIM2->CNT, TIM5->CNT);
        TIM3->CNT = 0;
        TIM3->ARR = nextdelay;
        TIM_Cmd(TIM3, ENABLE);
 8010048:	f005 b924 	b.w	8015294 <TIM_Cmd>
 801004c:	bd10      	pop	{r4, pc}
 801004e:	bf00      	nop
 8010050:	40000400 	.word	0x40000400
 8010054:	20000068 	.word	0x20000068

08010058 <VgmPlayerLL_RegisterCallback>:
    }
}

void VgmPlayerLL_RegisterCallback(u16 (*_vgm_work_callback)(u32 hr_time, u32 vgm_time)){
    _vgm_work = _vgm_work_callback;
 8010058:	4b01      	ldr	r3, [pc, #4]	; (8010060 <VgmPlayerLL_RegisterCallback+0x8>)
 801005a:	6018      	str	r0, [r3, #0]
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop
 8010060:	20000068 	.word	0x20000068

08010064 <VgmPlayerLL_Init>:
}

void VgmPlayerLL_Init(){
 8010064:	b5f0      	push	{r4, r5, r6, r7, lr}
    ////////////////////////////////////////////////////////////////////////////
    // Setup Timer 2: hr_time, max resolution (168 MHz / 2 = 84 MHz)
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); //Enable timer clock
 8010066:	2001      	movs	r0, #1

void VgmPlayerLL_RegisterCallback(u16 (*_vgm_work_callback)(u32 hr_time, u32 vgm_time)){
    _vgm_work = _vgm_work_callback;
}

void VgmPlayerLL_Init(){
 8010068:	b085      	sub	sp, #20
    ////////////////////////////////////////////////////////////////////////////
    // Setup Timer 2: hr_time, max resolution (168 MHz / 2 = 84 MHz)
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); //Enable timer clock
 801006a:	4601      	mov	r1, r0
 801006c:	f004 ff80 	bl	8014f70 <RCC_APB1PeriphClockCmd>
    TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE); //Disable interrupts
 8010070:	2200      	movs	r2, #0
 8010072:	2101      	movs	r1, #1
 8010074:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8010078:	f005 f918 	bl	80152ac <TIM_ITConfig>
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF; //maximum length
    TIM_TimeBaseStructure.TIM_Prescaler = 1; //maximum speed
 801007c:	2401      	movs	r4, #1
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //maximum accuracy
 801007e:	2500      	movs	r5, #0
    // Setup Timer 2: hr_time, max resolution (168 MHz / 2 = 84 MHz)
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); //Enable timer clock
    TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE); //Disable interrupts
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF; //maximum length
 8010080:	f04f 37ff 	mov.w	r7, #4294967295
    TIM_TimeBaseStructure.TIM_Prescaler = 1; //maximum speed
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //maximum accuracy
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //normal
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8010084:	a901      	add	r1, sp, #4
 8010086:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    TIM_Cmd(TIM2, ENABLE); //Start counting!
    ////////////////////////////////////////////////////////////////////////////
    // Setup Timer 5: VGM Sample Clock 44.1 kHz
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE); //Enable timer clock
    TIM_ITConfig(TIM5, TIM_IT_Update, DISABLE); //Disable interrupts
 801008a:	4e2a      	ldr	r6, [pc, #168]	; (8010134 <VgmPlayerLL_Init+0xd0>)
    // Setup Timer 2: hr_time, max resolution (168 MHz / 2 = 84 MHz)
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); //Enable timer clock
    TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE); //Disable interrupts
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF; //maximum length
 801008c:	9702      	str	r7, [sp, #8]
    TIM_TimeBaseStructure.TIM_Prescaler = 1; //maximum speed
 801008e:	f8ad 4004 	strh.w	r4, [sp, #4]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //maximum accuracy
 8010092:	f8ad 500c 	strh.w	r5, [sp, #12]
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //normal
 8010096:	f8ad 5006 	strh.w	r5, [sp, #6]
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 801009a:	f005 f8b1 	bl	8015200 <TIM_TimeBaseInit>
    TIM_Cmd(TIM2, ENABLE); //Start counting!
 801009e:	4621      	mov	r1, r4
 80100a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80100a4:	f005 f8f6 	bl	8015294 <TIM_Cmd>
    ////////////////////////////////////////////////////////////////////////////
    // Setup Timer 5: VGM Sample Clock 44.1 kHz
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE); //Enable timer clock
 80100a8:	2008      	movs	r0, #8
 80100aa:	4621      	mov	r1, r4
 80100ac:	f004 ff60 	bl	8014f70 <RCC_APB1PeriphClockCmd>
    TIM_ITConfig(TIM5, TIM_IT_Update, DISABLE); //Disable interrupts
 80100b0:	462a      	mov	r2, r5
 80100b2:	4630      	mov	r0, r6
 80100b4:	4621      	mov	r1, r4
 80100b6:	f005 f8f9 	bl	80152ac <TIM_ITConfig>
    TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF; //maximum length
    TIM_TimeBaseStructure.TIM_Prescaler = (VGMP_HRTICKSPERSAMPLE-1); //(TIM_PERIPHERAL_FRQ/44100)-1; //44.1 kHz
 80100ba:	f44f 63ee 	mov.w	r3, #1904	; 0x770
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //maximum accuracy
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //normal
    TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);
 80100be:	4630      	mov	r0, r6
 80100c0:	a901      	add	r1, sp, #4
    // Setup Timer 5: VGM Sample Clock 44.1 kHz
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE); //Enable timer clock
    TIM_ITConfig(TIM5, TIM_IT_Update, DISABLE); //Disable interrupts
    TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF; //maximum length
    TIM_TimeBaseStructure.TIM_Prescaler = (VGMP_HRTICKSPERSAMPLE-1); //(TIM_PERIPHERAL_FRQ/44100)-1; //44.1 kHz
 80100c2:	f8ad 3004 	strh.w	r3, [sp, #4]
    ////////////////////////////////////////////////////////////////////////////
    // Setup Timer 5: VGM Sample Clock 44.1 kHz
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE); //Enable timer clock
    TIM_ITConfig(TIM5, TIM_IT_Update, DISABLE); //Disable interrupts
    TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF; //maximum length
 80100c6:	9702      	str	r7, [sp, #8]
    TIM_TimeBaseStructure.TIM_Prescaler = (VGMP_HRTICKSPERSAMPLE-1); //(TIM_PERIPHERAL_FRQ/44100)-1; //44.1 kHz
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //maximum accuracy
 80100c8:	f8ad 500c 	strh.w	r5, [sp, #12]
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //normal
 80100cc:	f8ad 5006 	strh.w	r5, [sp, #6]
    TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);
 80100d0:	f005 f896 	bl	8015200 <TIM_TimeBaseInit>
    TIM_Cmd(TIM5, ENABLE); //Start counting!
 80100d4:	4630      	mov	r0, r6
 80100d6:	4621      	mov	r1, r4
    ////////////////////////////////////////////////////////////////////////////
    // Setup Timer 3: Work Timer, hr_ticks also, interrupts, variable length
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //Enable timer clock
    TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE); //Disable interrupts for now
 80100d8:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
    TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF; //maximum length
    TIM_TimeBaseStructure.TIM_Prescaler = (VGMP_HRTICKSPERSAMPLE-1); //(TIM_PERIPHERAL_FRQ/44100)-1; //44.1 kHz
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //maximum accuracy
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //normal
    TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);
    TIM_Cmd(TIM5, ENABLE); //Start counting!
 80100dc:	f005 f8da 	bl	8015294 <TIM_Cmd>
    ////////////////////////////////////////////////////////////////////////////
    // Setup Timer 3: Work Timer, hr_ticks also, interrupts, variable length
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //Enable timer clock
 80100e0:	2002      	movs	r0, #2
 80100e2:	4621      	mov	r1, r4
 80100e4:	f004 ff44 	bl	8014f70 <RCC_APB1PeriphClockCmd>
    TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE); //Disable interrupts for now
 80100e8:	462a      	mov	r2, r5
 80100ea:	4630      	mov	r0, r6
 80100ec:	4621      	mov	r1, r4
 80100ee:	f005 f8dd 	bl	80152ac <TIM_ITConfig>
    TIM_TimeBaseStructure.TIM_Period = (VGMP_MAXDELAY-1); //Will be changed
 80100f2:	f240 30e7 	movw	r0, #999	; 0x3e7
 80100f6:	9002      	str	r0, [sp, #8]
    TIM_TimeBaseStructure.TIM_Prescaler = 1; //maximum speed
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //maximum accuracy
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //normal
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80100f8:	a901      	add	r1, sp, #4
 80100fa:	4630      	mov	r0, r6
    // Setup Timer 3: Work Timer, hr_ticks also, interrupts, variable length
    ////////////////////////////////////////////////////////////////////////////
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //Enable timer clock
    TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE); //Disable interrupts for now
    TIM_TimeBaseStructure.TIM_Period = (VGMP_MAXDELAY-1); //Will be changed
    TIM_TimeBaseStructure.TIM_Prescaler = 1; //maximum speed
 80100fc:	f8ad 4004 	strh.w	r4, [sp, #4]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //maximum accuracy
 8010100:	f8ad 500c 	strh.w	r5, [sp, #12]
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //normal
 8010104:	f8ad 5006 	strh.w	r5, [sp, #6]
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8010108:	f005 f87a 	bl	8015200 <TIM_TimeBaseInit>
    TIM_ARRPreloadConfig(TIM3, DISABLE);
 801010c:	4630      	mov	r0, r6
 801010e:	4629      	mov	r1, r5
 8010110:	f005 f8b4 	bl	801527c <TIM_ARRPreloadConfig>
    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE); //Enable interrupts
 8010114:	4630      	mov	r0, r6
 8010116:	4621      	mov	r1, r4
 8010118:	4622      	mov	r2, r4
 801011a:	f005 f8c7 	bl	80152ac <TIM_ITConfig>
    MIOS32_IRQ_Install(TIM3_IRQn, MIOS32_IRQ_PRIO_LOW); //MIOS32_IRQ_PRIO_INSANE);
 801011e:	210c      	movs	r1, #12
 8010120:	201d      	movs	r0, #29
 8010122:	f002 fd65 	bl	8012bf0 <MIOS32_IRQ_Install>
    TIM_Cmd(TIM3, ENABLE); //Start counting!
 8010126:	4630      	mov	r0, r6
 8010128:	4621      	mov	r1, r4
 801012a:	f005 f8b3 	bl	8015294 <TIM_Cmd>
}
 801012e:	b005      	add	sp, #20
 8010130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010132:	bf00      	nop
 8010134:	40000c00 	.word	0x40000c00

08010138 <SRIO_ServiceFinish>:

/////////////////////////////////////////////////////////////////////////////
// Application Tick Hook (called by FreeRTOS each mS)
/////////////////////////////////////////////////////////////////////////////
void SRIO_ServiceFinish(void)
{
 8010138:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_SRIO

# ifndef MIOS32_DONT_USE_ENC
  // update encoder states
  MIOS32_ENC_UpdateStates();
 801013a:	f000 ffcb 	bl	80110d4 <MIOS32_ENC_UpdateStates>
# endif

  // notify application about finished SRIO scan
  APP_SRIO_ServiceFinish();
#endif
}
 801013e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // update encoder states
  MIOS32_ENC_UpdateStates();
# endif

  // notify application about finished SRIO scan
  APP_SRIO_ServiceFinish();
 8010142:	f00b b979 	b.w	801b438 <APP_SRIO_ServiceFinish>
	...

08010148 <TASK_Hooks>:

/////////////////////////////////////////////////////////////////////////////
// Remaining application hooks
/////////////////////////////////////////////////////////////////////////////
static void TASK_Hooks(void *pvParameters)
{
 8010148:	b507      	push	{r0, r1, r2, lr}
  portTickType xLastExecutionTime;

  // Initialise the xLastExecutionTime variable on task entry
  xLastExecutionTime = xTaskGetTickCount();
 801014a:	f000 faa7 	bl	801069c <xTaskGetTickCount>
 801014e:	9001      	str	r0, [sp, #4]

  while( 1 ) {
    vTaskDelayUntil(&xLastExecutionTime, 1 / portTICK_RATE_MS);
 8010150:	2101      	movs	r1, #1
 8010152:	a801      	add	r0, sp, #4
 8010154:	f000 fbba 	bl	80108cc <vTaskDelayUntil>

    // skip delay gap if we had to wait for more than 5 ticks to avoid 
    // unnecessary repeats until xLastExecutionTime reached xTaskGetTickCount() again
    portTickType xCurrentTickCount = xTaskGetTickCount();
 8010158:	f000 faa0 	bl	801069c <xTaskGetTickCount>
    if( xLastExecutionTime < (xCurrentTickCount-5) )
 801015c:	9b01      	ldr	r3, [sp, #4]
 801015e:	1f42      	subs	r2, r0, #5
 8010160:	4293      	cmp	r3, r2
      xLastExecutionTime = xCurrentTickCount;
 8010162:	bf38      	it	cc
 8010164:	9001      	strcc	r0, [sp, #4]

#if !defined(MIOS32_DONT_USE_DIN) && !defined(MIOS32_DONT_USE_SRIO)
    // check for DIN pin changes, call APP_DIN_NotifyToggle on each toggled pin
    MIOS32_DIN_Handler(APP_DIN_NotifyToggle);
 8010166:	4807      	ldr	r0, [pc, #28]	; (8010184 <TASK_Hooks+0x3c>)
 8010168:	f000 ff3e 	bl	8010fe8 <MIOS32_DIN_Handler>

    // check for encoder changes, call APP_ENC_NotifyChanged on each change
# ifndef MIOS32_DONT_USE_ENC
    MIOS32_ENC_Handler(APP_ENC_NotifyChange);
 801016c:	4806      	ldr	r0, [pc, #24]	; (8010188 <TASK_Hooks+0x40>)
 801016e:	f001 f8e7 	bl	8011340 <MIOS32_ENC_Handler>
# endif
#endif

#if !defined(MIOS32_DONT_USE_AIN) && !defined(MIOS32_DONT_SERVICE_AIN)
    // check for AIN pin changes, call APP_AIN_NotifyChange on each pin change
    MIOS32_AIN_Handler(APP_AIN_NotifyChange);
 8010172:	4806      	ldr	r0, [pc, #24]	; (801018c <TASK_Hooks+0x44>)
 8010174:	f003 fbdd 	bl	8013932 <MIOS32_AIN_Handler>
#endif

#if !defined(MIOS32_DONT_USE_COM)
    // check for incoming COM messages
    MIOS32_COM_Receive_Handler();
 8010178:	f001 ffe3 	bl	8012142 <MIOS32_COM_Receive_Handler>
#endif

    // optional APP_Tick() hook
    // helps to save memory (re-use the TASK_Hooks for other purposes...)
    APP_Tick();
 801017c:	f00b f958 	bl	801b430 <APP_Tick>
  }
 8010180:	e7e6      	b.n	8010150 <TASK_Hooks+0x8>
 8010182:	bf00      	nop
 8010184:	0801b43b 	.word	0x0801b43b
 8010188:	0801b43d 	.word	0x0801b43d
 801018c:	0801b43f 	.word	0x0801b43f

08010190 <TASK_MIDI_Hooks>:
// MIDI task (separated from TASK_Hooks() to ensure parallel handling of
// MIDI events if a hook in TASK_Hooks() blocks)
/////////////////////////////////////////////////////////////////////////////
#if !defined(MIOS32_DONT_USE_MIDI)
static void TASK_MIDI_Hooks(void *pvParameters)
{
 8010190:	b507      	push	{r0, r1, r2, lr}
  portTickType xLastExecutionTime;

  // Initialise the xLastExecutionTime variable on task entry
  xLastExecutionTime = xTaskGetTickCount();
 8010192:	f000 fa83 	bl	801069c <xTaskGetTickCount>
 8010196:	9001      	str	r0, [sp, #4]

  while( 1 ) {
    vTaskDelayUntil(&xLastExecutionTime, 1 / portTICK_RATE_MS);
 8010198:	2101      	movs	r1, #1
 801019a:	a801      	add	r0, sp, #4
 801019c:	f000 fb96 	bl	80108cc <vTaskDelayUntil>

    // skip delay gap if we had to wait for more than 5 ticks to avoid 
    // unnecessary repeats until xLastExecutionTime reached xTaskGetTickCount() again
    portTickType xCurrentTickCount = xTaskGetTickCount();
 80101a0:	f000 fa7c 	bl	801069c <xTaskGetTickCount>
    if( xLastExecutionTime < (xCurrentTickCount-5) )
 80101a4:	9b01      	ldr	r3, [sp, #4]
 80101a6:	1f42      	subs	r2, r0, #5
 80101a8:	4293      	cmp	r3, r2
      xLastExecutionTime = xCurrentTickCount;
 80101aa:	bf38      	it	cc
 80101ac:	9001      	strcc	r0, [sp, #4]

    // handle timeout/expire counters and USB packages
    MIOS32_MIDI_Periodic_mS();
 80101ae:	f001 fc41 	bl	8011a34 <MIOS32_MIDI_Periodic_mS>

    // check for incoming MIDI packages and call hook
    MIOS32_MIDI_Receive_Handler(APP_MIDI_NotifyPackage);
 80101b2:	4803      	ldr	r0, [pc, #12]	; (80101c0 <TASK_MIDI_Hooks+0x30>)
 80101b4:	f001 fef2 	bl	8011f9c <MIOS32_MIDI_Receive_Handler>

    // optional application specific hook
    // helps to save memory (re-use the TASK_Hooks for other purposes...)
    APP_MIDI_Tick();
 80101b8:	f00b f93b 	bl	801b432 <APP_MIDI_Tick>
  }
 80101bc:	e7ec      	b.n	8010198 <TASK_MIDI_Hooks+0x8>
 80101be:	bf00      	nop
 80101c0:	0801b435 	.word	0x0801b435

080101c4 <main>:

/////////////////////////////////////////////////////////////////////////////
// Main function
/////////////////////////////////////////////////////////////////////////////
int main(void)
{
 80101c4:	b530      	push	{r4, r5, lr}
  // initialize hardware and MIOS32 modules
#ifndef MIOS32_DONT_USE_SYS
  MIOS32_SYS_Init(0);
 80101c6:	2000      	movs	r0, #0

/////////////////////////////////////////////////////////////////////////////
// Main function
/////////////////////////////////////////////////////////////////////////////
int main(void)
{
 80101c8:	b085      	sub	sp, #20
  // initialize hardware and MIOS32 modules
#ifndef MIOS32_DONT_USE_SYS
  MIOS32_SYS_Init(0);
 80101ca:	f002 fc51 	bl	8012a70 <MIOS32_SYS_Init>
#endif
#ifndef MIOS32_DONT_USE_DELAY
  MIOS32_DELAY_Init(0);
 80101ce:	2000      	movs	r0, #0
 80101d0:	f003 fb7e 	bl	80138d0 <MIOS32_DELAY_Init>
#endif
#ifndef MIOS32_DONT_USE_TIMESTAMP
  MIOS32_TIMESTAMP_Init(0);
 80101d4:	2000      	movs	r0, #0
 80101d6:	f002 fb79 	bl	80128cc <MIOS32_TIMESTAMP_Init>
#endif
#ifndef MIOS32_DONT_USE_BOARD
  MIOS32_BOARD_Init(0);
 80101da:	2000      	movs	r0, #0
 80101dc:	f003 f980 	bl	80134e0 <MIOS32_BOARD_Init>
#endif
#ifndef MIOS32_DONT_USE_SPI
  MIOS32_SPI_Init(0);
 80101e0:	2000      	movs	r0, #0
 80101e2:	f002 ff53 	bl	801308c <MIOS32_SPI_Init>
#endif
#ifndef MIOS32_DONT_USE_SRIO
  MIOS32_SRIO_Init(0);
 80101e6:	2000      	movs	r0, #0
 80101e8:	f000 fe3e 	bl	8010e68 <MIOS32_SRIO_Init>
#endif
#if !defined(MIOS32_DONT_USE_DIN) && !defined(MIOS32_DONT_USE_SRIO)
  MIOS32_DIN_Init(0);
 80101ec:	2000      	movs	r0, #0
 80101ee:	f000 fecf 	bl	8010f90 <MIOS32_DIN_Init>
#endif
#if !defined(MIOS32_DONT_USE_DOUT) && !defined(MIOS32_DONT_USE_SRIO)
  MIOS32_DOUT_Init(0);
 80101f2:	2000      	movs	r0, #0
 80101f4:	f000 ff2a 	bl	801104c <MIOS32_DOUT_Init>
#endif
#if !defined(MIOS32_DONT_USE_ENC) && !defined(MIOS32_DONT_USE_SRIO)
  MIOS32_ENC_Init(0);
 80101f8:	2000      	movs	r0, #0
 80101fa:	f000 ff35 	bl	8011068 <MIOS32_ENC_Init>
#endif
#if !defined(MIOS32_DONT_USE_MF)
  MIOS32_MF_Init(0);
 80101fe:	2000      	movs	r0, #0
 8010200:	f002 f962 	bl	80124c8 <MIOS32_MF_Init>
#endif
#if !defined(MIOS32_DONT_USE_AIN)
  MIOS32_AIN_Init(0);
 8010204:	2000      	movs	r0, #0
 8010206:	f003 fb91 	bl	801392c <MIOS32_AIN_Init>
#endif
#ifndef MIOS32_DONT_USE_IIC_BS
  MIOS32_IIC_BS_Init(0);
 801020a:	2000      	movs	r0, #0
 801020c:	f002 f959 	bl	80124c2 <MIOS32_IIC_BS_Init>
#endif
#ifndef MIOS32_DONT_USE_MIDI
  MIOS32_MIDI_Init(0);
 8010210:	2000      	movs	r0, #0
 8010212:	f001 f9df 	bl	80115d4 <MIOS32_MIDI_Init>
#endif
#ifndef MIOS32_DONT_USE_USB
  MIOS32_USB_Init(0);
 8010216:	2000      	movs	r0, #0
 8010218:	f003 fd2e 	bl	8013c78 <MIOS32_USB_Init>
#endif
#ifndef MIOS32_DONT_USE_OSC
  MIOS32_OSC_Init(0);
 801021c:	2000      	movs	r0, #0
 801021e:	f001 ff59 	bl	80120d4 <MIOS32_OSC_Init>
#endif
#ifndef MIOS32_DONT_USE_COM
  MIOS32_COM_Init(0);
 8010222:	2000      	movs	r0, #0
 8010224:	f001 ff5c 	bl	80120e0 <MIOS32_COM_Init>
#endif
#ifndef MIOS32_DONT_USE_LCD
  MIOS32_LCD_Init(0);
 8010228:	2000      	movs	r0, #0
 801022a:	f001 f937 	bl	801149c <MIOS32_LCD_Init>

# if defined(MIOS32_BOARD_MBHP_CORE_STM32) || defined(MIOS32_BOARD_MBHP_CORE_LPC17) || defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
  // init second LCD as well (if available)
  MIOS32_LCD_DeviceSet(1);
 801022e:	2001      	movs	r0, #1
 8010230:	f001 f8e2 	bl	80113f8 <MIOS32_LCD_DeviceSet>
  APP_LCD_Init(0);
 8010234:	2000      	movs	r0, #0
 8010236:	f009 f9d7 	bl	80195e8 <APP_LCD_Init>
  MIOS32_LCD_DeviceSet(0);
 801023a:	2000      	movs	r0, #0
 801023c:	f001 f8dc 	bl	80113f8 <MIOS32_LCD_DeviceSet>
#ifdef MIOS32_USE_I2S
  MIOS32_I2S_Init(0);
#endif

  // call C++ constructors
  __libc_init_array();
 8010240:	f00b fd5e 	bl	801bd00 <__libc_init_array>

  // initialize application
  APP_Init();
 8010244:	f00b f86e 	bl	801b324 <APP_Init>

#if MIOS32_LCD_BOOT_MSG_DELAY
  // print boot message
# ifndef MIOS32_DONT_USE_LCD
  MIOS32_LCD_PrintBootMessage();
 8010248:	f001 f990 	bl	801156c <MIOS32_LCD_PrintBootMessage>
 801024c:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0

  // wait for given delay (usually 2 seconds)
# ifndef MIOS32_DONT_USE_DELAY
  int delay = 0;
  for(delay=0; delay<MIOS32_LCD_BOOT_MSG_DELAY; ++delay)
    MIOS32_DELAY_Wait_uS(1000);
 8010250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010254:	f003 fb5e 	bl	8013914 <MIOS32_DELAY_Wait_uS>
# endif

  // wait for given delay (usually 2 seconds)
# ifndef MIOS32_DONT_USE_DELAY
  int delay = 0;
  for(delay=0; delay<MIOS32_LCD_BOOT_MSG_DELAY; ++delay)
 8010258:	3c01      	subs	r4, #1
 801025a:	d1f9      	bne.n	8010250 <main+0x8c>
    MIOS32_DELAY_Wait_uS(1000);
# endif
#endif

  // start the task which calls the application hooks
  xTaskCreate(TASK_Hooks, (signed portCHAR *)"Hooks", configMINIMAL_STACK_SIZE, NULL, PRIORITY_TASK_HOOKS, NULL);
 801025c:	2503      	movs	r5, #3
 801025e:	4623      	mov	r3, r4
 8010260:	9500      	str	r5, [sp, #0]
 8010262:	9401      	str	r4, [sp, #4]
 8010264:	9402      	str	r4, [sp, #8]
 8010266:	9403      	str	r4, [sp, #12]
 8010268:	490a      	ldr	r1, [pc, #40]	; (8010294 <main+0xd0>)
 801026a:	480b      	ldr	r0, [pc, #44]	; (8010298 <main+0xd4>)
 801026c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010270:	f000 f91c 	bl	80104ac <xTaskGenericCreate>
#if !defined(MIOS32_DONT_USE_MIDI)
  xTaskCreate(TASK_MIDI_Hooks, (signed portCHAR *)"MIDI_Hooks", configMINIMAL_STACK_SIZE, NULL, PRIORITY_TASK_HOOKS, NULL);
 8010274:	4909      	ldr	r1, [pc, #36]	; (801029c <main+0xd8>)
 8010276:	9500      	str	r5, [sp, #0]
 8010278:	f44f 7280 	mov.w	r2, #256	; 0x100
 801027c:	4623      	mov	r3, r4
 801027e:	9401      	str	r4, [sp, #4]
 8010280:	9402      	str	r4, [sp, #8]
 8010282:	9403      	str	r4, [sp, #12]
 8010284:	4806      	ldr	r0, [pc, #24]	; (80102a0 <main+0xdc>)
 8010286:	f000 f911 	bl	80104ac <xTaskGenericCreate>
#endif

  // start the scheduler
  vTaskStartScheduler();
 801028a:	f000 f9d9 	bl	8010640 <vTaskStartScheduler>

  // Will only get here if there was not enough heap space to create the idle task
  return 0;
}
 801028e:	4620      	mov	r0, r4
 8010290:	b005      	add	sp, #20
 8010292:	bd30      	pop	{r4, r5, pc}
 8010294:	0801bdbd 	.word	0x0801bdbd
 8010298:	08010149 	.word	0x08010149
 801029c:	0801bdb8 	.word	0x0801bdb8
 80102a0:	08010191 	.word	0x08010191

080102a4 <vApplicationTickHook>:
  APP_SRIO_ServiceFinish();
#endif
}

void vApplicationTickHook(void)
{
 80102a4:	b508      	push	{r3, lr}
#if !defined(MIOS32_DONT_USE_TIMESTAMP)
  MIOS32_TIMESTAMP_Inc();
 80102a6:	f002 fb1b 	bl	80128e0 <MIOS32_TIMESTAMP_Inc>
#endif

#if !defined(MIOS32_DONT_USE_SRIO) && !defined(MIOS32_DONT_SERVICE_SRIO_SCAN)
  // notify application about SRIO scan start
  APP_SRIO_ServicePrepare();
 80102aa:	f00b f8c4 	bl	801b436 <APP_SRIO_ServicePrepare>

  // start next SRIO scan - IRQ notification to SRIO_ServiceFinish()
  MIOS32_SRIO_ScanStart(SRIO_ServiceFinish);
 80102ae:	4802      	ldr	r0, [pc, #8]	; (80102b8 <vApplicationTickHook+0x14>)
#endif
}
 80102b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if !defined(MIOS32_DONT_USE_SRIO) && !defined(MIOS32_DONT_SERVICE_SRIO_SCAN)
  // notify application about SRIO scan start
  APP_SRIO_ServicePrepare();

  // start next SRIO scan - IRQ notification to SRIO_ServiceFinish()
  MIOS32_SRIO_ScanStart(SRIO_ServiceFinish);
 80102b4:	f000 be30 	b.w	8010f18 <MIOS32_SRIO_ScanStart>
 80102b8:	08010139 	.word	0x08010139

080102bc <vApplicationIdleHook>:
/////////////////////////////////////////////////////////////////////////////
// Idle Hook (called by FreeRTOS when nothing else to do)
/////////////////////////////////////////////////////////////////////////////
void vApplicationIdleHook(void)
{
  APP_Background();
 80102bc:	f00b b846 	b.w	801b34c <APP_Background>

080102c0 <_abort>:
// This function aborts any operations, but keeps MIDI alive (for uploading
// a new firmware)
// If MIDI isn't enabled, the status LED will be flashed
/////////////////////////////////////////////////////////////////////////////
void _abort(void)
{
 80102c0:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_MIDI
  // keep MIDI alive, so that program code can be updated
  u32 delay_ctr = 0;
 80102c2:	2400      	movs	r4, #0
  while( 1 ) {
    ++delay_ctr;
 80102c4:	3401      	adds	r4, #1

    if( (delay_ctr % 100) == 0 ) {
 80102c6:	2364      	movs	r3, #100	; 0x64
 80102c8:	fbb4 f2f3 	udiv	r2, r4, r3
 80102cc:	fb03 4012 	mls	r0, r3, r2, r4
 80102d0:	b908      	cbnz	r0, 80102d6 <_abort+0x16>
      // handle timeout/expire counters and USB packages
      MIOS32_MIDI_Periodic_mS();
 80102d2:	f001 fbaf 	bl	8011a34 <MIOS32_MIDI_Periodic_mS>
    }

    // check for incoming MIDI packages and call hook
    MIOS32_MIDI_Receive_Handler(APP_MIDI_NotifyPackage);
 80102d6:	4809      	ldr	r0, [pc, #36]	; (80102fc <_abort+0x3c>)
 80102d8:	f001 fe60 	bl	8011f9c <MIOS32_MIDI_Receive_Handler>

    if( (delay_ctr % 10000) == 0 ) {
 80102dc:	f242 7110 	movw	r1, #10000	; 0x2710
 80102e0:	fbb4 f3f1 	udiv	r3, r4, r1
 80102e4:	fb01 4213 	mls	r2, r1, r3, r4
 80102e8:	2a00      	cmp	r2, #0
 80102ea:	d1eb      	bne.n	80102c4 <_abort+0x4>
      // toggle board LED
      MIOS32_BOARD_LED_Set(1, ~MIOS32_BOARD_LED_Get());
 80102ec:	f003 f964 	bl	80135b8 <MIOS32_BOARD_LED_Get>
 80102f0:	43c1      	mvns	r1, r0
 80102f2:	2001      	movs	r0, #1
 80102f4:	f003 f92e 	bl	8013554 <MIOS32_BOARD_LED_Set>
 80102f8:	e7e4      	b.n	80102c4 <_abort+0x4>
 80102fa:	bf00      	nop
 80102fc:	0801b435 	.word	0x0801b435

08010300 <HardFault_Handler_c>:

/////////////////////////////////////////////////////////////////////////////
// Customized HardFault Handler which prints out debugging informations
/////////////////////////////////////////////////////////////////////////////
void HardFault_Handler_c(unsigned int * hardfault_args)
{
 8010300:	b510      	push	{r4, lr}
  volatile unsigned int stacked_r12;
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 8010302:	6803      	ldr	r3, [r0, #0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 8010304:	6841      	ldr	r1, [r0, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 8010306:	6882      	ldr	r2, [r0, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 8010308:	68c4      	ldr	r4, [r0, #12]

/////////////////////////////////////////////////////////////////////////////
// Customized HardFault Handler which prints out debugging informations
/////////////////////////////////////////////////////////////////////////////
void HardFault_Handler_c(unsigned int * hardfault_args)
{
 801030a:	b088      	sub	sp, #32
  volatile unsigned int stacked_r12;
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 801030c:	9300      	str	r3, [sp, #0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 801030e:	6903      	ldr	r3, [r0, #16]
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 8010310:	9101      	str	r1, [sp, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 8010312:	9202      	str	r2, [sp, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 8010314:	6941      	ldr	r1, [r0, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 8010316:	6982      	ldr	r2, [r0, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 8010318:	69c0      	ldr	r0, [r0, #28]
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 801031a:	9403      	str	r4, [sp, #12]

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 801031c:	9304      	str	r3, [sp, #16]
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
  stacked_psr = ((unsigned long) hardfault_args[7]);
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
  MIOS32_MIDI_SendDebugMessage("==================\n");
 801031e:	4c33      	ldr	r4, [pc, #204]	; (80103ec <HardFault_Handler_c+0xec>)
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 8010320:	9105      	str	r1, [sp, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 8010322:	9206      	str	r2, [sp, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 8010324:	9007      	str	r0, [sp, #28]
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
 8010326:	9906      	ldr	r1, [sp, #24]
 8010328:	4831      	ldr	r0, [pc, #196]	; (80103f0 <HardFault_Handler_c+0xf0>)
 801032a:	f001 fb33 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("==================\n");
 801032e:	4620      	mov	r0, r4
 8010330:	f001 fb30 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("!!! HARD FAULT !!!\n");
 8010334:	482f      	ldr	r0, [pc, #188]	; (80103f4 <HardFault_Handler_c+0xf4>)
 8010336:	f001 fb2d 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("==================\n");
 801033a:	4620      	mov	r0, r4
 801033c:	f001 fb2a 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R0 = %08x\n", stacked_r0);
 8010340:	9900      	ldr	r1, [sp, #0]
 8010342:	482d      	ldr	r0, [pc, #180]	; (80103f8 <HardFault_Handler_c+0xf8>)
  MIOS32_MIDI_SendDebugMessage("PSR = %08x\n", stacked_psr);
  MIOS32_MIDI_SendDebugMessage("BFAR = %08x\n", (*((volatile unsigned long *)(0xE000ED38))));
  MIOS32_MIDI_SendDebugMessage("CFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED28))));
  MIOS32_MIDI_SendDebugMessage("HFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED2C))));
  MIOS32_MIDI_SendDebugMessage("DFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED30))));
  MIOS32_MIDI_SendDebugMessage("AFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED3C))));
 8010344:	4c2d      	ldr	r4, [pc, #180]	; (80103fc <HardFault_Handler_c+0xfc>)
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
  MIOS32_MIDI_SendDebugMessage("==================\n");
  MIOS32_MIDI_SendDebugMessage("!!! HARD FAULT !!!\n");
  MIOS32_MIDI_SendDebugMessage("==================\n");
  MIOS32_MIDI_SendDebugMessage("R0 = %08x\n", stacked_r0);
 8010346:	f001 fb25 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R1 = %08x\n", stacked_r1);
 801034a:	9901      	ldr	r1, [sp, #4]
 801034c:	482c      	ldr	r0, [pc, #176]	; (8010400 <HardFault_Handler_c+0x100>)
 801034e:	f001 fb21 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R2 = %08x\n", stacked_r2);
 8010352:	9902      	ldr	r1, [sp, #8]
 8010354:	482b      	ldr	r0, [pc, #172]	; (8010404 <HardFault_Handler_c+0x104>)
 8010356:	f001 fb1d 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R3 = %08x\n", stacked_r3);
 801035a:	9903      	ldr	r1, [sp, #12]
 801035c:	482a      	ldr	r0, [pc, #168]	; (8010408 <HardFault_Handler_c+0x108>)
 801035e:	f001 fb19 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R12 = %08x\n", stacked_r12);
 8010362:	9904      	ldr	r1, [sp, #16]
 8010364:	4829      	ldr	r0, [pc, #164]	; (801040c <HardFault_Handler_c+0x10c>)
 8010366:	f001 fb15 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("LR = %08x\n", stacked_lr);
 801036a:	9905      	ldr	r1, [sp, #20]
 801036c:	4828      	ldr	r0, [pc, #160]	; (8010410 <HardFault_Handler_c+0x110>)
 801036e:	f001 fb11 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("PC = %08x\n", stacked_pc);
 8010372:	9906      	ldr	r1, [sp, #24]
 8010374:	4827      	ldr	r0, [pc, #156]	; (8010414 <HardFault_Handler_c+0x114>)
 8010376:	f001 fb0d 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("PSR = %08x\n", stacked_psr);
 801037a:	9907      	ldr	r1, [sp, #28]
 801037c:	4826      	ldr	r0, [pc, #152]	; (8010418 <HardFault_Handler_c+0x118>)
 801037e:	f001 fb09 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("BFAR = %08x\n", (*((volatile unsigned long *)(0xE000ED38))));
 8010382:	4b26      	ldr	r3, [pc, #152]	; (801041c <HardFault_Handler_c+0x11c>)
 8010384:	4826      	ldr	r0, [pc, #152]	; (8010420 <HardFault_Handler_c+0x120>)
 8010386:	6819      	ldr	r1, [r3, #0]
 8010388:	f001 fb04 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("CFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED28))));
 801038c:	4925      	ldr	r1, [pc, #148]	; (8010424 <HardFault_Handler_c+0x124>)
 801038e:	4826      	ldr	r0, [pc, #152]	; (8010428 <HardFault_Handler_c+0x128>)
 8010390:	6809      	ldr	r1, [r1, #0]
 8010392:	f001 faff 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("HFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED2C))));
 8010396:	4a25      	ldr	r2, [pc, #148]	; (801042c <HardFault_Handler_c+0x12c>)
 8010398:	4825      	ldr	r0, [pc, #148]	; (8010430 <HardFault_Handler_c+0x130>)
 801039a:	6811      	ldr	r1, [r2, #0]
 801039c:	f001 fafa 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("DFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED30))));
 80103a0:	4824      	ldr	r0, [pc, #144]	; (8010434 <HardFault_Handler_c+0x134>)
 80103a2:	6801      	ldr	r1, [r0, #0]
 80103a4:	4824      	ldr	r0, [pc, #144]	; (8010438 <HardFault_Handler_c+0x138>)
 80103a6:	f001 faf5 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("AFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED3C))));
 80103aa:	6821      	ldr	r1, [r4, #0]
 80103ac:	4823      	ldr	r0, [pc, #140]	; (801043c <HardFault_Handler_c+0x13c>)
 80103ae:	f001 faf1 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>

#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 80103b2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80103b6:	f001 f909 	bl	80115cc <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 80103ba:	2000      	movs	r0, #0
 80103bc:	f001 f908 	bl	80115d0 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 80103c0:	2000      	movs	r0, #0
 80103c2:	f001 f819 	bl	80113f8 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 80103c6:	f001 f867 	bl	8011498 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 80103ca:	2000      	movs	r0, #0
 80103cc:	4601      	mov	r1, r0
 80103ce:	f001 f819 	bl	8011404 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("!! HARD FAULT !!");
 80103d2:	481b      	ldr	r0, [pc, #108]	; (8010440 <HardFault_Handler_c+0x140>)
 80103d4:	f001 f8be 	bl	8011554 <MIOS32_LCD_PrintString>
  MIOS32_LCD_CursorSet(0, 1);
 80103d8:	2101      	movs	r1, #1
 80103da:	2000      	movs	r0, #0
 80103dc:	f001 f812 	bl	8011404 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintFormattedString("at PC=0x%08x", stacked_pc);
 80103e0:	9906      	ldr	r1, [sp, #24]
 80103e2:	4818      	ldr	r0, [pc, #96]	; (8010444 <HardFault_Handler_c+0x144>)
 80103e4:	f001 f8e0 	bl	80115a8 <MIOS32_LCD_PrintFormattedString>
#endif

  _abort();
 80103e8:	f7ff ff6a 	bl	80102c0 <_abort>
 80103ec:	0801be2f 	.word	0x0801be2f
 80103f0:	0801be19 	.word	0x0801be19
 80103f4:	0801be43 	.word	0x0801be43
 80103f8:	0801be57 	.word	0x0801be57
 80103fc:	e000ed3c 	.word	0xe000ed3c
 8010400:	0801be62 	.word	0x0801be62
 8010404:	0801be6d 	.word	0x0801be6d
 8010408:	0801be78 	.word	0x0801be78
 801040c:	0801be83 	.word	0x0801be83
 8010410:	0801be8f 	.word	0x0801be8f
 8010414:	0801be24 	.word	0x0801be24
 8010418:	0801be9a 	.word	0x0801be9a
 801041c:	e000ed38 	.word	0xe000ed38
 8010420:	0801bea6 	.word	0x0801bea6
 8010424:	e000ed28 	.word	0xe000ed28
 8010428:	0801beb3 	.word	0x0801beb3
 801042c:	e000ed2c 	.word	0xe000ed2c
 8010430:	0801bec0 	.word	0x0801bec0
 8010434:	e000ed30 	.word	0xe000ed30
 8010438:	0801becd 	.word	0x0801becd
 801043c:	0801beda 	.word	0x0801beda
 8010440:	0801bee7 	.word	0x0801bee7
 8010444:	0801bef8 	.word	0x0801bef8

08010448 <HardFault_Handler>:
}


void HardFault_Handler(void)
{
  __asm("TST LR, #4");
 8010448:	f01e 0f04 	tst.w	lr, #4
  __asm("ITE EQ");
 801044c:	bf0c      	ite	eq
  __asm("MRSEQ R0, MSP");
 801044e:	f3ef 8008 	mrseq	r0, MSP
  __asm("MRSNE R0, PSP");
 8010452:	f3ef 8009 	mrsne	r0, PSP
  __asm("B HardFault_Handler_c");
 8010456:	f7ff bf53 	b.w	8010300 <HardFault_Handler_c>
 801045a:	4770      	bx	lr

0801045c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 801045c:	4b0e      	ldr	r3, [pc, #56]	; (8010498 <prvAddCurrentTaskToDelayedList+0x3c>)
 801045e:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8010460:	b510      	push	{r4, lr}
 8010462:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8010464:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 8010466:	480d      	ldr	r0, [pc, #52]	; (801049c <prvAddCurrentTaskToDelayedList+0x40>)
 8010468:	6801      	ldr	r1, [r0, #0]
 801046a:	428c      	cmp	r4, r1
 801046c:	d207      	bcs.n	801047e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 801046e:	4a0c      	ldr	r2, [pc, #48]	; (80104a0 <prvAddCurrentTaskToDelayedList+0x44>)
 8010470:	6810      	ldr	r0, [r2, #0]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	1d19      	adds	r1, r3, #4
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 8010476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 801047a:	f000 baa8 	b.w	80109ce <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 801047e:	4a09      	ldr	r2, [pc, #36]	; (80104a4 <prvAddCurrentTaskToDelayedList+0x48>)
 8010480:	6810      	ldr	r0, [r2, #0]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	1d19      	adds	r1, r3, #4
 8010486:	f000 faa2 	bl	80109ce <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 801048a:	4807      	ldr	r0, [pc, #28]	; (80104a8 <prvAddCurrentTaskToDelayedList+0x4c>)
 801048c:	6801      	ldr	r1, [r0, #0]
 801048e:	428c      	cmp	r4, r1
		{
			xNextTaskUnblockTime = xTimeToWake;
 8010490:	bf38      	it	cc
 8010492:	6004      	strcc	r4, [r0, #0]
 8010494:	bd10      	pop	{r4, pc}
 8010496:	bf00      	nop
 8010498:	20000124 	.word	0x20000124
 801049c:	2000013c 	.word	0x2000013c
 80104a0:	20000140 	.word	0x20000140
 80104a4:	20000084 	.word	0x20000084
 80104a8:	20000000 	.word	0x20000000

080104ac <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80104ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b0:	4683      	mov	fp, r0
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80104b2:	2048      	movs	r0, #72	; 0x48
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80104b4:	4688      	mov	r8, r1
 80104b6:	4617      	mov	r7, r2
 80104b8:	469a      	mov	sl, r3
 80104ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80104bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80104c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80104c2:	f000 fbc3 	bl	8010c4c <pvPortMalloc>

	if( pxNewTCB != NULL )
 80104c6:	4604      	mov	r4, r0
 80104c8:	2800      	cmp	r0, #0
 80104ca:	f000 8099 	beq.w	8010600 <xTaskGenericCreate+0x154>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 80104ce:	b91d      	cbnz	r5, 80104d8 <xTaskGenericCreate+0x2c>
 80104d0:	00b8      	lsls	r0, r7, #2
 80104d2:	f000 fbbb 	bl	8010c4c <pvPortMalloc>
 80104d6:	4605      	mov	r5, r0
 80104d8:	6325      	str	r5, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80104da:	b91d      	cbnz	r5, 80104e4 <xTaskGenericCreate+0x38>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80104dc:	4620      	mov	r0, r4
 80104de:	f000 fb7b 	bl	8010bd8 <vPortFree>
 80104e2:	e08d      	b.n	8010600 <xTaskGenericCreate+0x154>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 80104e4:	00ba      	lsls	r2, r7, #2
 80104e6:	4628      	mov	r0, r5
 80104e8:	21a5      	movs	r1, #165	; 0xa5
 80104ea:	f00b fc38 	bl	801bd5e <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80104ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80104f0:	3f01      	subs	r7, #1
 80104f2:	eb03 0087 	add.w	r0, r3, r7, lsl #2
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 80104f6:	2210      	movs	r2, #16
 80104f8:	4641      	mov	r1, r8
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 80104fa:	f020 0707 	bic.w	r7, r0, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 80104fe:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8010502:	f00b fc44 	bl	801bd8e <strncpy>
 8010506:	2e04      	cmp	r6, #4
 8010508:	bf34      	ite	cc
 801050a:	4635      	movcc	r5, r6
 801050c:	2504      	movcs	r5, #4
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 801050e:	2100      	movs	r1, #0
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8010510:	f104 0804 	add.w	r8, r4, #4
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8010514:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8010518:	4640      	mov	r0, r8
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
 801051a:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 801051c:	6465      	str	r5, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 801051e:	f000 fa46 	bl	80109ae <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8010522:	f104 0018 	add.w	r0, r4, #24
 8010526:	f000 fa42 	bl	80109ae <vListInitialiseItem>
	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 801052a:	f1c5 0205 	rsb	r2, r5, #5
 801052e:	61a2      	str	r2, [r4, #24]
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8010530:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8010532:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010534:	4638      	mov	r0, r7
 8010536:	4659      	mov	r1, fp
 8010538:	4652      	mov	r2, sl
 801053a:	f000 fa7b 	bl	8010a34 <pxPortInitialiseStack>
 801053e:	6020      	str	r0, [r4, #0]
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8010540:	f1b9 0f00 	cmp.w	r9, #0
 8010544:	d001      	beq.n	801054a <xTaskGenericCreate+0x9e>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8010546:	f8c9 4000 	str.w	r4, [r9]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 801054a:	f000 fa9f 	bl	8010a8c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 801054e:	482e      	ldr	r0, [pc, #184]	; (8010608 <xTaskGenericCreate+0x15c>)
 8010550:	6803      	ldr	r3, [r0, #0]
 8010552:	1c59      	adds	r1, r3, #1
			if( pxCurrentTCB == NULL )
 8010554:	4b2d      	ldr	r3, [pc, #180]	; (801060c <xTaskGenericCreate+0x160>)

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8010556:	6001      	str	r1, [r0, #0]
			if( pxCurrentTCB == NULL )
 8010558:	681d      	ldr	r5, [r3, #0]
 801055a:	bb15      	cbnz	r5, 80105a2 <xTaskGenericCreate+0xf6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 801055c:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 801055e:	6803      	ldr	r3, [r0, #0]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d126      	bne.n	80105b2 <xTaskGenericCreate+0x106>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8010564:	482a      	ldr	r0, [pc, #168]	; (8010610 <xTaskGenericCreate+0x164>)
 8010566:	2714      	movs	r7, #20
 8010568:	fb07 0005 	mla	r0, r7, r5, r0

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 801056c:	3501      	adds	r5, #1
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 801056e:	f000 fa13 	bl	8010998 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8010572:	2d05      	cmp	r5, #5
 8010574:	d1f6      	bne.n	8010564 <xTaskGenericCreate+0xb8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8010576:	4f27      	ldr	r7, [pc, #156]	; (8010614 <xTaskGenericCreate+0x168>)
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8010578:	4d27      	ldr	r5, [pc, #156]	; (8010618 <xTaskGenericCreate+0x16c>)
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 801057a:	4638      	mov	r0, r7
 801057c:	f000 fa0c 	bl	8010998 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8010580:	4628      	mov	r0, r5
 8010582:	f000 fa09 	bl	8010998 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8010586:	4825      	ldr	r0, [pc, #148]	; (801061c <xTaskGenericCreate+0x170>)
 8010588:	f000 fa06 	bl	8010998 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 801058c:	4824      	ldr	r0, [pc, #144]	; (8010620 <xTaskGenericCreate+0x174>)
 801058e:	f000 fa03 	bl	8010998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8010592:	4824      	ldr	r0, [pc, #144]	; (8010624 <xTaskGenericCreate+0x178>)
 8010594:	f000 fa00 	bl	8010998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010598:	4923      	ldr	r1, [pc, #140]	; (8010628 <xTaskGenericCreate+0x17c>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801059a:	4a24      	ldr	r2, [pc, #144]	; (801062c <xTaskGenericCreate+0x180>)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801059c:	600f      	str	r7, [r1, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801059e:	6015      	str	r5, [r2, #0]
 80105a0:	e007      	b.n	80105b2 <xTaskGenericCreate+0x106>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80105a2:	4a23      	ldr	r2, [pc, #140]	; (8010630 <xTaskGenericCreate+0x184>)
 80105a4:	6810      	ldr	r0, [r2, #0]
 80105a6:	b920      	cbnz	r0, 80105b2 <xTaskGenericCreate+0x106>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80105a8:	6819      	ldr	r1, [r3, #0]
 80105aa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80105ac:	42b2      	cmp	r2, r6
					{
						pxCurrentTCB = pxNewTCB;
 80105ae:	bf98      	it	ls
 80105b0:	601c      	strls	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80105b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80105b4:	4c1f      	ldr	r4, [pc, #124]	; (8010634 <xTaskGenericCreate+0x188>)
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
			}

			uxTaskNumber++;
 80105b6:	4a20      	ldr	r2, [pc, #128]	; (8010638 <xTaskGenericCreate+0x18c>)
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80105b8:	6820      	ldr	r0, [r4, #0]
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
			}

			uxTaskNumber++;
 80105ba:	6811      	ldr	r1, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80105bc:	4283      	cmp	r3, r0
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 80105be:	bf88      	it	hi
 80105c0:	6023      	strhi	r3, [r4, #0]
			}

			uxTaskNumber++;
 80105c2:	1c4c      	adds	r4, r1, #1
 80105c4:	6014      	str	r4, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
 80105c6:	4a1d      	ldr	r2, [pc, #116]	; (801063c <xTaskGenericCreate+0x190>)
 80105c8:	2401      	movs	r4, #1
 80105ca:	6811      	ldr	r1, [r2, #0]
 80105cc:	fa04 f003 	lsl.w	r0, r4, r3
 80105d0:	4301      	orrs	r1, r0
 80105d2:	6011      	str	r1, [r2, #0]
 80105d4:	4a0e      	ldr	r2, [pc, #56]	; (8010610 <xTaskGenericCreate+0x164>)
 80105d6:	2014      	movs	r0, #20
 80105d8:	fb00 2003 	mla	r0, r0, r3, r2
 80105dc:	4641      	mov	r1, r8
 80105de:	f000 f9e9 	bl	80109b4 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80105e2:	f000 fa61 	bl	8010aa8 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 80105e6:	4b12      	ldr	r3, [pc, #72]	; (8010630 <xTaskGenericCreate+0x184>)
 80105e8:	6819      	ldr	r1, [r3, #0]
 80105ea:	b131      	cbz	r1, 80105fa <xTaskGenericCreate+0x14e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80105ec:	4807      	ldr	r0, [pc, #28]	; (801060c <xTaskGenericCreate+0x160>)
 80105ee:	6802      	ldr	r2, [r0, #0]
 80105f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80105f2:	42b3      	cmp	r3, r6
 80105f4:	d201      	bcs.n	80105fa <xTaskGenericCreate+0x14e>
			{
				portYIELD_WITHIN_API();
 80105f6:	f000 fa39 	bl	8010a6c <vPortYieldFromISR>
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
 80105fa:	4620      	mov	r0, r4
 80105fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010600:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
 8010604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010608:	20000164 	.word	0x20000164
 801060c:	20000124 	.word	0x20000124
 8010610:	200000b8 	.word	0x200000b8
 8010614:	2000014c 	.word	0x2000014c
 8010618:	200000a4 	.word	0x200000a4
 801061c:	20000128 	.word	0x20000128
 8010620:	20000090 	.word	0x20000090
 8010624:	20000070 	.word	0x20000070
 8010628:	20000084 	.word	0x20000084
 801062c:	20000140 	.word	0x20000140
 8010630:	20000088 	.word	0x20000088
 8010634:	20000168 	.word	0x20000168
 8010638:	20000148 	.word	0x20000148
 801063c:	20000144 	.word	0x20000144

08010640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010640:	b530      	push	{r4, r5, lr}
 8010642:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8010644:	2400      	movs	r4, #0
 8010646:	9400      	str	r4, [sp, #0]
 8010648:	9401      	str	r4, [sp, #4]
 801064a:	9402      	str	r4, [sp, #8]
 801064c:	9403      	str	r4, [sp, #12]
 801064e:	480b      	ldr	r0, [pc, #44]	; (801067c <vTaskStartScheduler+0x3c>)
 8010650:	490b      	ldr	r1, [pc, #44]	; (8010680 <vTaskStartScheduler+0x40>)
 8010652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010656:	4623      	mov	r3, r4
 8010658:	f7ff ff28 	bl	80104ac <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801065c:	2801      	cmp	r0, #1
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 801065e:	4605      	mov	r5, r0
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010660:	d10a      	bne.n	8010678 <vTaskStartScheduler+0x38>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8010662:	f000 fa0b 	bl	8010a7c <ulPortSetInterruptMask>

		xSchedulerRunning = pdTRUE;
 8010666:	4b07      	ldr	r3, [pc, #28]	; (8010684 <vTaskStartScheduler+0x44>)
		xTickCount = ( portTickType ) 0U;
 8010668:	4807      	ldr	r0, [pc, #28]	; (8010688 <vTaskStartScheduler+0x48>)

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();

		xSchedulerRunning = pdTRUE;
 801066a:	601d      	str	r5, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 801066c:	6004      	str	r4, [r0, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 801066e:	b005      	add	sp, #20
 8010670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010674:	f000 ba5c 	b.w	8010b30 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8010678:	b005      	add	sp, #20
 801067a:	bd30      	pop	{r4, r5, pc}
 801067c:	08010865 	.word	0x08010865
 8010680:	0801bf05 	.word	0x0801bf05
 8010684:	20000088 	.word	0x20000088
 8010688:	2000013c 	.word	0x2000013c

0801068c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 801068c:	4b02      	ldr	r3, [pc, #8]	; (8010698 <vTaskSuspendAll+0xc>)
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	1c50      	adds	r0, r2, #1
 8010692:	6018      	str	r0, [r3, #0]
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop
 8010698:	2000011c 	.word	0x2000011c

0801069c <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 801069c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 801069e:	f000 f9f5 	bl	8010a8c <vPortEnterCritical>
	{
		xTicks = xTickCount;
 80106a2:	4b03      	ldr	r3, [pc, #12]	; (80106b0 <xTaskGetTickCount+0x14>)
 80106a4:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80106a6:	f000 f9ff 	bl	8010aa8 <vPortExitCritical>

	return xTicks;
}
 80106aa:	4620      	mov	r0, r4
 80106ac:	bd10      	pop	{r4, pc}
 80106ae:	bf00      	nop
 80106b0:	2000013c 	.word	0x2000013c

080106b4 <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 80106b4:	b538      	push	{r3, r4, r5, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80106b6:	4b31      	ldr	r3, [pc, #196]	; (801077c <vTaskIncrementTick+0xc8>)
 80106b8:	6818      	ldr	r0, [r3, #0]
 80106ba:	2800      	cmp	r0, #0
 80106bc:	d14f      	bne.n	801075e <vTaskIncrementTick+0xaa>
	{
		++xTickCount;
 80106be:	4830      	ldr	r0, [pc, #192]	; (8010780 <vTaskIncrementTick+0xcc>)
 80106c0:	6801      	ldr	r1, [r0, #0]
 80106c2:	1c4a      	adds	r2, r1, #1
 80106c4:	6002      	str	r2, [r0, #0]
		if( xTickCount == ( portTickType ) 0U )
 80106c6:	6803      	ldr	r3, [r0, #0]
 80106c8:	b9ab      	cbnz	r3, 80106f6 <vTaskIncrementTick+0x42>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
 80106ca:	4b2e      	ldr	r3, [pc, #184]	; (8010784 <vTaskIncrementTick+0xd0>)
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 80106cc:	4a2e      	ldr	r2, [pc, #184]	; (8010788 <vTaskIncrementTick+0xd4>)
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
 80106ce:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 80106d0:	6810      	ldr	r0, [r2, #0]
 80106d2:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 80106d4:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
 80106d6:	4a2d      	ldr	r2, [pc, #180]	; (801078c <vTaskIncrementTick+0xd8>)
 80106d8:	6811      	ldr	r1, [r2, #0]
 80106da:	1c48      	adds	r0, r1, #1
 80106dc:	6010      	str	r0, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	482b      	ldr	r0, [pc, #172]	; (8010790 <vTaskIncrementTick+0xdc>)
 80106e2:	6811      	ldr	r1, [r2, #0]
 80106e4:	b911      	cbnz	r1, 80106ec <vTaskIncrementTick+0x38>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 80106e6:	f04f 33ff 	mov.w	r3, #4294967295
 80106ea:	e003      	b.n	80106f4 <vTaskIncrementTick+0x40>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	68da      	ldr	r2, [r3, #12]
 80106f0:	68d1      	ldr	r1, [r2, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80106f2:	684b      	ldr	r3, [r1, #4]
 80106f4:	6003      	str	r3, [r0, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 80106f6:	4822      	ldr	r0, [pc, #136]	; (8010780 <vTaskIncrementTick+0xcc>)
 80106f8:	4925      	ldr	r1, [pc, #148]	; (8010790 <vTaskIncrementTick+0xdc>)
 80106fa:	6802      	ldr	r2, [r0, #0]
 80106fc:	680b      	ldr	r3, [r1, #0]
 80106fe:	429a      	cmp	r2, r3
 8010700:	d333      	bcc.n	801076a <vTaskIncrementTick+0xb6>
 8010702:	4820      	ldr	r0, [pc, #128]	; (8010784 <vTaskIncrementTick+0xd0>)
 8010704:	6802      	ldr	r2, [r0, #0]
 8010706:	6811      	ldr	r1, [r2, #0]
 8010708:	b921      	cbnz	r1, 8010714 <vTaskIncrementTick+0x60>
 801070a:	4821      	ldr	r0, [pc, #132]	; (8010790 <vTaskIncrementTick+0xdc>)
 801070c:	f04f 31ff 	mov.w	r1, #4294967295
 8010710:	6001      	str	r1, [r0, #0]
 8010712:	e02a      	b.n	801076a <vTaskIncrementTick+0xb6>
 8010714:	6804      	ldr	r4, [r0, #0]
 8010716:	4a1a      	ldr	r2, [pc, #104]	; (8010780 <vTaskIncrementTick+0xcc>)
 8010718:	68e3      	ldr	r3, [r4, #12]
 801071a:	68dc      	ldr	r4, [r3, #12]
 801071c:	6811      	ldr	r1, [r2, #0]
 801071e:	6860      	ldr	r0, [r4, #4]
 8010720:	4281      	cmp	r1, r0
 8010722:	d202      	bcs.n	801072a <vTaskIncrementTick+0x76>
 8010724:	4b1a      	ldr	r3, [pc, #104]	; (8010790 <vTaskIncrementTick+0xdc>)
 8010726:	6018      	str	r0, [r3, #0]
 8010728:	e01f      	b.n	801076a <vTaskIncrementTick+0xb6>
 801072a:	1d25      	adds	r5, r4, #4
 801072c:	4628      	mov	r0, r5
 801072e:	f000 f966 	bl	80109fe <uxListRemove>
 8010732:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010734:	b11b      	cbz	r3, 801073e <vTaskIncrementTick+0x8a>
 8010736:	f104 0018 	add.w	r0, r4, #24
 801073a:	f000 f960 	bl	80109fe <uxListRemove>
 801073e:	4a15      	ldr	r2, [pc, #84]	; (8010794 <vTaskIncrementTick+0xe0>)
 8010740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010742:	6810      	ldr	r0, [r2, #0]
 8010744:	2101      	movs	r1, #1
 8010746:	fa01 f103 	lsl.w	r1, r1, r3
 801074a:	4301      	orrs	r1, r0
 801074c:	6011      	str	r1, [r2, #0]
 801074e:	4a12      	ldr	r2, [pc, #72]	; (8010798 <vTaskIncrementTick+0xe4>)
 8010750:	2014      	movs	r0, #20
 8010752:	fb00 2003 	mla	r0, r0, r3, r2
 8010756:	4629      	mov	r1, r5
 8010758:	f000 f92c 	bl	80109b4 <vListInsertEnd>
 801075c:	e7d1      	b.n	8010702 <vTaskIncrementTick+0x4e>
	}
	else
	{
		++uxMissedTicks;
 801075e:	490f      	ldr	r1, [pc, #60]	; (801079c <vTaskIncrementTick+0xe8>)
 8010760:	680a      	ldr	r2, [r1, #0]
 8010762:	1c53      	adds	r3, r2, #1
 8010764:	600b      	str	r3, [r1, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8010766:	f7ff fd9d 	bl	80102a4 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 801076a:	4a0c      	ldr	r2, [pc, #48]	; (801079c <vTaskIncrementTick+0xe8>)
 801076c:	6813      	ldr	r3, [r2, #0]
 801076e:	b91b      	cbnz	r3, 8010778 <vTaskIncrementTick+0xc4>
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
 8010770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
		{
			vApplicationTickHook();
 8010774:	f7ff bd96 	b.w	80102a4 <vApplicationTickHook>
 8010778:	bd38      	pop	{r3, r4, r5, pc}
 801077a:	bf00      	nop
 801077c:	2000011c 	.word	0x2000011c
 8010780:	2000013c 	.word	0x2000013c
 8010784:	20000084 	.word	0x20000084
 8010788:	20000140 	.word	0x20000140
 801078c:	20000120 	.word	0x20000120
 8010790:	20000000 	.word	0x20000000
 8010794:	20000144 	.word	0x20000144
 8010798:	200000b8 	.word	0x200000b8
 801079c:	2000006c 	.word	0x2000006c

080107a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80107a0:	b570      	push	{r4, r5, r6, lr}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80107a2:	f000 f973 	bl	8010a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80107a6:	4b27      	ldr	r3, [pc, #156]	; (8010844 <xTaskResumeAll+0xa4>)
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	1e50      	subs	r0, r2, #1
 80107ac:	6018      	str	r0, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80107ae:	681d      	ldr	r5, [r3, #0]
 80107b0:	b10d      	cbz	r5, 80107b6 <xTaskResumeAll+0x16>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80107b2:	2400      	movs	r4, #0
 80107b4:	e041      	b.n	801083a <xTaskResumeAll+0x9a>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 80107b6:	4924      	ldr	r1, [pc, #144]	; (8010848 <xTaskResumeAll+0xa8>)
 80107b8:	680c      	ldr	r4, [r1, #0]
 80107ba:	2c00      	cmp	r4, #0
 80107bc:	d0f9      	beq.n	80107b2 <xTaskResumeAll+0x12>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 80107be:	4b23      	ldr	r3, [pc, #140]	; (801084c <xTaskResumeAll+0xac>)
 80107c0:	681a      	ldr	r2, [r3, #0]
 80107c2:	b302      	cbz	r2, 8010806 <xTaskResumeAll+0x66>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 80107c4:	68de      	ldr	r6, [r3, #12]
 80107c6:	68f4      	ldr	r4, [r6, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
					uxListRemove( &( pxTCB->xGenericListItem ) );
 80107c8:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
 80107ca:	f104 0018 	add.w	r0, r4, #24
 80107ce:	f000 f916 	bl	80109fe <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
 80107d2:	4630      	mov	r0, r6
 80107d4:	f000 f913 	bl	80109fe <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 80107d8:	4a1d      	ldr	r2, [pc, #116]	; (8010850 <xTaskResumeAll+0xb0>)
 80107da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80107dc:	6810      	ldr	r0, [r2, #0]
 80107de:	2101      	movs	r1, #1
 80107e0:	fa01 f103 	lsl.w	r1, r1, r3
 80107e4:	4301      	orrs	r1, r0
 80107e6:	6011      	str	r1, [r2, #0]
 80107e8:	4a1a      	ldr	r2, [pc, #104]	; (8010854 <xTaskResumeAll+0xb4>)
 80107ea:	2014      	movs	r0, #20
 80107ec:	fb00 2003 	mla	r0, r0, r3, r2
 80107f0:	4631      	mov	r1, r6
 80107f2:	f000 f8df 	bl	80109b4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107f6:	4b18      	ldr	r3, [pc, #96]	; (8010858 <xTaskResumeAll+0xb8>)
 80107f8:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80107fa:	6819      	ldr	r1, [r3, #0]
 80107fc:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
 80107fe:	4284      	cmp	r4, r0
 8010800:	bf28      	it	cs
 8010802:	2501      	movcs	r5, #1
 8010804:	e7db      	b.n	80107be <xTaskResumeAll+0x1e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8010806:	4815      	ldr	r0, [pc, #84]	; (801085c <xTaskResumeAll+0xbc>)
 8010808:	6801      	ldr	r1, [r0, #0]
 801080a:	b141      	cbz	r1, 801081e <xTaskResumeAll+0x7e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 801080c:	4c13      	ldr	r4, [pc, #76]	; (801085c <xTaskResumeAll+0xbc>)
 801080e:	6822      	ldr	r2, [r4, #0]
 8010810:	b13a      	cbz	r2, 8010822 <xTaskResumeAll+0x82>
					{
						vTaskIncrementTick();
 8010812:	f7ff ff4f 	bl	80106b4 <vTaskIncrementTick>
						--uxMissedTicks;
 8010816:	6823      	ldr	r3, [r4, #0]
 8010818:	1e5a      	subs	r2, r3, #1
 801081a:	6022      	str	r2, [r4, #0]
 801081c:	e7f6      	b.n	801080c <xTaskResumeAll+0x6c>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 801081e:	2d01      	cmp	r5, #1
 8010820:	d106      	bne.n	8010830 <xTaskResumeAll+0x90>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
 8010822:	490f      	ldr	r1, [pc, #60]	; (8010860 <xTaskResumeAll+0xc0>)
 8010824:	2000      	movs	r0, #0
 8010826:	6008      	str	r0, [r1, #0]
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
 8010828:	2401      	movs	r4, #1
					xMissedYield = pdFALSE;
					portYIELD_WITHIN_API();
 801082a:	f000 f91f 	bl	8010a6c <vPortYieldFromISR>
 801082e:	e004      	b.n	801083a <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8010830:	4c0b      	ldr	r4, [pc, #44]	; (8010860 <xTaskResumeAll+0xc0>)
 8010832:	6823      	ldr	r3, [r4, #0]
 8010834:	2b01      	cmp	r3, #1
 8010836:	d1bc      	bne.n	80107b2 <xTaskResumeAll+0x12>
 8010838:	e7f3      	b.n	8010822 <xTaskResumeAll+0x82>
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 801083a:	f000 f935 	bl	8010aa8 <vPortExitCritical>

	return xAlreadyYielded;
}
 801083e:	4620      	mov	r0, r4
 8010840:	bd70      	pop	{r4, r5, r6, pc}
 8010842:	bf00      	nop
 8010844:	2000011c 	.word	0x2000011c
 8010848:	20000164 	.word	0x20000164
 801084c:	20000128 	.word	0x20000128
 8010850:	20000144 	.word	0x20000144
 8010854:	200000b8 	.word	0x200000b8
 8010858:	20000124 	.word	0x20000124
 801085c:	2000006c 	.word	0x2000006c
 8010860:	20000160 	.word	0x20000160

08010864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010864:	b570      	push	{r4, r5, r6, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8010866:	4c15      	ldr	r4, [pc, #84]	; (80108bc <prvIdleTask+0x58>)
 8010868:	6823      	ldr	r3, [r4, #0]
 801086a:	b1f3      	cbz	r3, 80108aa <prvIdleTask+0x46>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 801086c:	4d14      	ldr	r5, [pc, #80]	; (80108c0 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
 801086e:	f7ff ff0d 	bl	801068c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010872:	682e      	ldr	r6, [r5, #0]
			xTaskResumeAll();
 8010874:	f7ff ff94 	bl	80107a0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8010878:	2e00      	cmp	r6, #0
 801087a:	d0f4      	beq.n	8010866 <prvIdleTask+0x2>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 801087c:	f000 f906 	bl	8010a8c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8010880:	68ea      	ldr	r2, [r5, #12]
 8010882:	68d5      	ldr	r5, [r2, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
 8010884:	1d28      	adds	r0, r5, #4
 8010886:	f000 f8ba 	bl	80109fe <uxListRemove>
					--uxCurrentNumberOfTasks;
 801088a:	4b0e      	ldr	r3, [pc, #56]	; (80108c4 <prvIdleTask+0x60>)
 801088c:	6818      	ldr	r0, [r3, #0]
 801088e:	1e41      	subs	r1, r0, #1
 8010890:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
 8010892:	6826      	ldr	r6, [r4, #0]
 8010894:	1e72      	subs	r2, r6, #1
 8010896:	6022      	str	r2, [r4, #0]
				}
				taskEXIT_CRITICAL();
 8010898:	f000 f906 	bl	8010aa8 <vPortExitCritical>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 801089c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801089e:	f000 f99b 	bl	8010bd8 <vPortFree>
		vPortFree( pxTCB );
 80108a2:	4628      	mov	r0, r5
 80108a4:	f000 f998 	bl	8010bd8 <vPortFree>
 80108a8:	e7dd      	b.n	8010866 <prvIdleTask+0x2>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 80108aa:	4807      	ldr	r0, [pc, #28]	; (80108c8 <prvIdleTask+0x64>)
 80108ac:	6801      	ldr	r1, [r0, #0]
 80108ae:	2901      	cmp	r1, #1
 80108b0:	d901      	bls.n	80108b6 <prvIdleTask+0x52>
			{
				taskYIELD();
 80108b2:	f000 f8db 	bl	8010a6c <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80108b6:	f7ff fd01 	bl	80102bc <vApplicationIdleHook>
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 80108ba:	e7d4      	b.n	8010866 <prvIdleTask+0x2>
 80108bc:	2000008c 	.word	0x2000008c
 80108c0:	20000090 	.word	0x20000090
 80108c4:	20000164 	.word	0x20000164
 80108c8:	200000b8 	.word	0x200000b8

080108cc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 80108cc:	b538      	push	{r3, r4, r5, lr}
 80108ce:	460c      	mov	r4, r1
 80108d0:	4605      	mov	r5, r0
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
 80108d2:	f7ff fedb 	bl	801068c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xTickCount < *pxPreviousWakeTime )
 80108d6:	4a18      	ldr	r2, [pc, #96]	; (8010938 <vTaskDelayUntil+0x6c>)
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80108d8:	682b      	ldr	r3, [r5, #0]

			if( xTickCount < *pxPreviousWakeTime )
 80108da:	6811      	ldr	r1, [r2, #0]
 80108dc:	4299      	cmp	r1, r3
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80108de:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
 80108e0:	d202      	bcs.n	80108e8 <vTaskDelayUntil+0x1c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 80108e2:	429c      	cmp	r4, r3
 80108e4:	d208      	bcs.n	80108f8 <vTaskDelayUntil+0x2c>
 80108e6:	e001      	b.n	80108ec <vTaskDelayUntil+0x20>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 80108e8:	429c      	cmp	r4, r3
 80108ea:	d307      	bcc.n	80108fc <vTaskDelayUntil+0x30>
 80108ec:	6810      	ldr	r0, [r2, #0]
 80108ee:	4284      	cmp	r4, r0
 80108f0:	bf94      	ite	ls
 80108f2:	2000      	movls	r0, #0
 80108f4:	2001      	movhi	r0, #1
 80108f6:	e002      	b.n	80108fe <vTaskDelayUntil+0x32>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 80108f8:	2000      	movs	r0, #0
 80108fa:	e000      	b.n	80108fe <vTaskDelayUntil+0x32>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
				{
					xShouldDelay = pdTRUE;
 80108fc:	2001      	movs	r0, #1
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80108fe:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
 8010900:	b190      	cbz	r0, 8010928 <vTaskDelayUntil+0x5c>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8010902:	4d0e      	ldr	r5, [pc, #56]	; (801093c <vTaskDelayUntil+0x70>)
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	1d18      	adds	r0, r3, #4
 8010908:	f000 f879 	bl	80109fe <uxListRemove>
 801090c:	b948      	cbnz	r0, 8010922 <vTaskDelayUntil+0x56>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801090e:	4b0c      	ldr	r3, [pc, #48]	; (8010940 <vTaskDelayUntil+0x74>)
 8010910:	6819      	ldr	r1, [r3, #0]
 8010912:	682a      	ldr	r2, [r5, #0]
 8010914:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010916:	2001      	movs	r0, #1
 8010918:	fa00 f202 	lsl.w	r2, r0, r2
 801091c:	ea21 0102 	bic.w	r1, r1, r2
 8010920:	6019      	str	r1, [r3, #0]
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010922:	4620      	mov	r0, r4
 8010924:	f7ff fd9a 	bl	801045c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010928:	f7ff ff3a 	bl	80107a0 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801092c:	b918      	cbnz	r0, 8010936 <vTaskDelayUntil+0x6a>
		{
			portYIELD_WITHIN_API();
		}
	}
 801092e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8010932:	f000 b89b 	b.w	8010a6c <vPortYieldFromISR>
 8010936:	bd38      	pop	{r3, r4, r5, pc}
 8010938:	2000013c 	.word	0x2000013c
 801093c:	20000124 	.word	0x20000124
 8010940:	20000144 	.word	0x20000144

08010944 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8010944:	4b0f      	ldr	r3, [pc, #60]	; (8010984 <vTaskSwitchContext+0x40>)
 8010946:	6818      	ldr	r0, [r3, #0]
 8010948:	b110      	cbz	r0, 8010950 <vTaskSwitchContext+0xc>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 801094a:	2201      	movs	r2, #1
 801094c:	4b0e      	ldr	r3, [pc, #56]	; (8010988 <vTaskSwitchContext+0x44>)
 801094e:	e016      	b.n	801097e <vTaskSwitchContext+0x3a>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010950:	490e      	ldr	r1, [pc, #56]	; (801098c <vTaskSwitchContext+0x48>)
 8010952:	680a      	ldr	r2, [r1, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline unsigned char ucPortCountLeadingZeros( unsigned long ulBitmap )
	{
	unsigned char ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8010954:	fab2 f382 	clz	r3, r2
 8010958:	4a0d      	ldr	r2, [pc, #52]	; (8010990 <vTaskSwitchContext+0x4c>)
 801095a:	b2d8      	uxtb	r0, r3
 801095c:	2114      	movs	r1, #20
 801095e:	f1c0 031f 	rsb	r3, r0, #31
 8010962:	fb01 2003 	mla	r0, r1, r3, r2
 8010966:	f100 0108 	add.w	r1, r0, #8
 801096a:	6843      	ldr	r3, [r0, #4]
 801096c:	685a      	ldr	r2, [r3, #4]
 801096e:	4b09      	ldr	r3, [pc, #36]	; (8010994 <vTaskSwitchContext+0x50>)
 8010970:	6042      	str	r2, [r0, #4]
 8010972:	428a      	cmp	r2, r1
 8010974:	bf04      	itt	eq
 8010976:	6852      	ldreq	r2, [r2, #4]
 8010978:	6042      	streq	r2, [r0, #4]
 801097a:	6840      	ldr	r0, [r0, #4]
 801097c:	68c2      	ldr	r2, [r0, #12]
 801097e:	601a      	str	r2, [r3, #0]
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	2000011c 	.word	0x2000011c
 8010988:	20000160 	.word	0x20000160
 801098c:	20000144 	.word	0x20000144
 8010990:	200000b8 	.word	0x200000b8
 8010994:	20000124 	.word	0x20000124

08010998 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8010998:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801099c:	f04f 32ff 	mov.w	r2, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 80109a0:	2100      	movs	r1, #0
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80109a2:	6082      	str	r2, [r0, #8]
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 80109a4:	6043      	str	r3, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 80109a6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 80109a8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 80109aa:	6001      	str	r1, [r0, #0]
 80109ac:	4770      	bx	lr

080109ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80109ae:	2300      	movs	r3, #0
 80109b0:	6103      	str	r3, [r0, #16]
 80109b2:	4770      	bx	lr

080109b4 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 80109b4:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
 80109b6:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 80109b8:	608b      	str	r3, [r1, #8]
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;

	pxNewListItem->pxNext = pxIndex->pxNext;
 80109ba:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80109bc:	685a      	ldr	r2, [r3, #4]
 80109be:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80109c0:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80109c2:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80109c4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80109c6:	6801      	ldr	r1, [r0, #0]
 80109c8:	1c4b      	adds	r3, r1, #1
 80109ca:	6003      	str	r3, [r0, #0]
 80109cc:	4770      	bx	lr

080109ce <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 80109ce:	680a      	ldr	r2, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80109d0:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 80109d2:	b510      	push	{r4, lr}
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80109d4:	d101      	bne.n	80109da <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80109d6:	6903      	ldr	r3, [r0, #16]
 80109d8:	e007      	b.n	80109ea <vListInsert+0x1c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80109da:	f100 0308 	add.w	r3, r0, #8
 80109de:	685c      	ldr	r4, [r3, #4]
 80109e0:	6824      	ldr	r4, [r4, #0]
 80109e2:	4294      	cmp	r4, r2
 80109e4:	d801      	bhi.n	80109ea <vListInsert+0x1c>
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	e7f9      	b.n	80109de <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80109ea:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80109ec:	6108      	str	r0, [r1, #16]
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80109ee:	6091      	str	r1, [r2, #8]
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80109f0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 80109f2:	6059      	str	r1, [r3, #4]
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
 80109f4:	608b      	str	r3, [r1, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80109f6:	6801      	ldr	r1, [r0, #0]
 80109f8:	1c4b      	adds	r3, r1, #1
 80109fa:	6003      	str	r3, [r0, #0]
 80109fc:	bd10      	pop	{r4, pc}

080109fe <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80109fe:	6843      	ldr	r3, [r0, #4]
 8010a00:	6882      	ldr	r2, [r0, #8]
 8010a02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a04:	6882      	ldr	r2, [r0, #8]
 8010a06:	6053      	str	r3, [r2, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8010a08:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010a0a:	6859      	ldr	r1, [r3, #4]
 8010a0c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010a0e:	bf08      	it	eq
 8010a10:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8010a12:	2200      	movs	r2, #0
 8010a14:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010a16:	6818      	ldr	r0, [r3, #0]
 8010a18:	1e41      	subs	r1, r0, #1
 8010a1a:	6019      	str	r1, [r3, #0]

	return pxList->uxNumberOfItems;
 8010a1c:	6818      	ldr	r0, [r3, #0]
}
 8010a1e:	4770      	bx	lr

08010a20 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8010a20:	4803      	ldr	r0, [pc, #12]	; (8010a30 <prvPortStartFirstTask+0x10>)
 8010a22:	6800      	ldr	r0, [r0, #0]
 8010a24:	6800      	ldr	r0, [r0, #0]
 8010a26:	f380 8808 	msr	MSP, r0
 8010a2a:	b662      	cpsie	i
 8010a2c:	df00      	svc	0
 8010a2e:	bf00      	nop
 8010a30:	e000ed08 	.word	0xe000ed08

08010a34 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8010a38:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8010a42:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8010a46:	3840      	subs	r0, #64	; 0x40
 8010a48:	4770      	bx	lr
	...

08010a4c <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010a4c:	4b06      	ldr	r3, [pc, #24]	; (8010a68 <pxCurrentTCBConst2>)
 8010a4e:	6819      	ldr	r1, [r3, #0]
 8010a50:	6808      	ldr	r0, [r1, #0]
 8010a52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010a56:	f380 8809 	msr	PSP, r0
 8010a5a:	f04f 0000 	mov.w	r0, #0
 8010a5e:	f380 8811 	msr	BASEPRI, r0
 8010a62:	f04e 0e0d 	orr.w	lr, lr, #13
 8010a66:	4770      	bx	lr

08010a68 <pxCurrentTCBConst2>:
 8010a68:	20000124 	.word	0x20000124

08010a6c <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a6c:	4b02      	ldr	r3, [pc, #8]	; (8010a78 <vPortYieldFromISR+0xc>)
 8010a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a72:	601a      	str	r2, [r3, #0]
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop
 8010a78:	e000ed04 	.word	0xe000ed04

08010a7c <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8010a7c:	f3ef 8011 	mrs	r0, BASEPRI
 8010a80:	f04f 01bf 	mov.w	r1, #191	; 0xbf
 8010a84:	f381 8811 	msr	BASEPRI, r1
 8010a88:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 8010a8a:	2000      	movs	r0, #0

08010a8c <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010a8c:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 8010a8e:	f7ff fff5 	bl	8010a7c <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8010a92:	4b02      	ldr	r3, [pc, #8]	; (8010a9c <vPortEnterCritical+0x10>)
 8010a94:	681a      	ldr	r2, [r3, #0]
 8010a96:	1c50      	adds	r0, r2, #1
 8010a98:	6018      	str	r0, [r3, #0]
 8010a9a:	bd08      	pop	{r3, pc}
 8010a9c:	20000004 	.word	0x20000004

08010aa0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8010aa0:	f380 8811 	msr	BASEPRI, r0
 8010aa4:	4770      	bx	lr
	...

08010aa8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	uxCriticalNesting--;
 8010aa8:	4b03      	ldr	r3, [pc, #12]	; (8010ab8 <vPortExitCritical+0x10>)
 8010aaa:	6818      	ldr	r0, [r3, #0]
 8010aac:	3801      	subs	r0, #1
 8010aae:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 8010ab0:	b908      	cbnz	r0, 8010ab6 <vPortExitCritical+0xe>
	{
		portENABLE_INTERRUPTS();
 8010ab2:	f7ff bff5 	b.w	8010aa0 <vPortClearInterruptMask>
 8010ab6:	4770      	bx	lr
 8010ab8:	20000004 	.word	0x20000004

08010abc <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010abc:	f3ef 8009 	mrs	r0, PSP
 8010ac0:	4b0c      	ldr	r3, [pc, #48]	; (8010af4 <pxCurrentTCBConst>)
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010ac8:	6010      	str	r0, [r2, #0]
 8010aca:	e92d 4008 	stmdb	sp!, {r3, lr}
 8010ace:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8010ad2:	f380 8811 	msr	BASEPRI, r0
 8010ad6:	f7ff ff35 	bl	8010944 <vTaskSwitchContext>
 8010ada:	f04f 0000 	mov.w	r0, #0
 8010ade:	f380 8811 	msr	BASEPRI, r0
 8010ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010ae6:	6819      	ldr	r1, [r3, #0]
 8010ae8:	6808      	ldr	r0, [r1, #0]
 8010aea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010aee:	f380 8809 	msr	PSP, r0
 8010af2:	4770      	bx	lr

08010af4 <pxCurrentTCBConst>:
 8010af4:	20000124 	.word	0x20000124

08010af8 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010af8:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010afa:	4b06      	ldr	r3, [pc, #24]	; (8010b14 <xPortSysTickHandler+0x1c>)
 8010afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b00:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8010b02:	f7ff ffbb 	bl	8010a7c <ulPortSetInterruptMask>
	{
		vTaskIncrementTick();
 8010b06:	f7ff fdd5 	bl	80106b4 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8010b0a:	2000      	movs	r0, #0
}
 8010b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		vTaskIncrementTick();
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8010b10:	f7ff bfc6 	b.w	8010aa0 <vPortClearInterruptMask>
 8010b14:	e000ed04 	.word	0xe000ed04

08010b18 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8010b18:	4b03      	ldr	r3, [pc, #12]	; (8010b28 <vPortSetupTimerInterrupt+0x10>)
 8010b1a:	4a04      	ldr	r2, [pc, #16]	; (8010b2c <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8010b1c:	2007      	movs	r0, #7
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8010b1e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8010b20:	f843 0c04 	str.w	r0, [r3, #-4]
 8010b24:	4770      	bx	lr
 8010b26:	bf00      	nop
 8010b28:	e000e014 	.word	0xe000e014
 8010b2c:	0002903f 	.word	0x0002903f

08010b30 <xPortStartScheduler>:
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b30:	4b09      	ldr	r3, [pc, #36]	; (8010b58 <xPortStartScheduler+0x28>)
 8010b32:	681a      	ldr	r2, [r3, #0]
 8010b34:	f442 007f 	orr.w	r0, r2, #16711680	; 0xff0000

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8010b38:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b3a:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b3c:	6819      	ldr	r1, [r3, #0]
 8010b3e:	f041 447f 	orr.w	r4, r1, #4278190080	; 0xff000000
 8010b42:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b44:	f7ff ffe8 	bl	8010b18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b48:	4b04      	ldr	r3, [pc, #16]	; (8010b5c <xPortStartScheduler+0x2c>)
 8010b4a:	2400      	movs	r4, #0
 8010b4c:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010b4e:	f7ff ff67 	bl	8010a20 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
}
 8010b52:	4620      	mov	r0, r4
 8010b54:	bd10      	pop	{r4, pc}
 8010b56:	bf00      	nop
 8010b58:	e000ed20 	.word	0xe000ed20
 8010b5c:	20000004 	.word	0x20000004

08010b60 <umm_disconnect_from_free_list>:
     UMM_NBLOCK(c)                                = (c+blocks) | freemask;
}

// ----------------------------------------------------------------------------

static void umm_disconnect_from_free_list( unsigned short int c ) {
 8010b60:	b530      	push	{r4, r5, lr}
    // Disconnect this block from the FREE list

    UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 8010b62:	4a09      	ldr	r2, [pc, #36]	; (8010b88 <umm_disconnect_from_free_list+0x28>)
 8010b64:	210c      	movs	r1, #12
 8010b66:	4348      	muls	r0, r1
 8010b68:	1813      	adds	r3, r2, r0
 8010b6a:	88dc      	ldrh	r4, [r3, #6]
 8010b6c:	889d      	ldrh	r5, [r3, #4]
 8010b6e:	fb01 2404 	mla	r4, r1, r4, r2
 8010b72:	80a5      	strh	r5, [r4, #4]
    UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 8010b74:	889d      	ldrh	r5, [r3, #4]
 8010b76:	88dc      	ldrh	r4, [r3, #6]
 8010b78:	fb01 2105 	mla	r1, r1, r5, r2
 8010b7c:	80cc      	strh	r4, [r1, #6]

    // And clear the free block indicator

    UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 8010b7e:	881b      	ldrh	r3, [r3, #0]
 8010b80:	0459      	lsls	r1, r3, #17
 8010b82:	0c4b      	lsrs	r3, r1, #17
 8010b84:	5213      	strh	r3, [r2, r0]
 8010b86:	bd30      	pop	{r4, r5, pc}
 8010b88:	20000a90 	.word	0x20000a90

08010b8c <umm_assimilate_up>:

// ----------------------------------------------------------------------------

// static int foo = 0;

static void umm_assimilate_up( unsigned short int c ) {
 8010b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8010b90:	250c      	movs	r5, #12
 8010b92:	4c10      	ldr	r4, [pc, #64]	; (8010bd4 <umm_assimilate_up+0x48>)
 8010b94:	fb05 f700 	mul.w	r7, r5, r0
 8010b98:	19e6      	adds	r6, r4, r7

// ----------------------------------------------------------------------------

// static int foo = 0;

static void umm_assimilate_up( unsigned short int c ) {
 8010b9a:	4680      	mov	r8, r0

  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8010b9c:	8830      	ldrh	r0, [r6, #0]
 8010b9e:	fb05 4300 	mla	r3, r5, r0, r4
 8010ba2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010ba6:	2900      	cmp	r1, #0
 8010ba8:	da12      	bge.n	8010bd0 <umm_assimilate_up+0x44>

    DBG_LOG_DEBUG( "Assimilate up to next block, which is FREE\n" );

    // Disconnect the next block from the FREE list

    umm_disconnect_from_free_list( UMM_NBLOCK(c) );
 8010baa:	f7ff ffd9 	bl	8010b60 <umm_disconnect_from_free_list>

    // Assimilate the next block with this one

    UMM_PBLOCK(UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK) = c;
 8010bae:	8830      	ldrh	r0, [r6, #0]
 8010bb0:	fb05 4200 	mla	r2, r5, r0, r4
 8010bb4:	8813      	ldrh	r3, [r2, #0]
 8010bb6:	0459      	lsls	r1, r3, #17
 8010bb8:	0c48      	lsrs	r0, r1, #17
 8010bba:	fb05 4200 	mla	r2, r5, r0, r4
 8010bbe:	f8a2 8002 	strh.w	r8, [r2, #2]
    UMM_NBLOCK(c) = UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK;
 8010bc2:	8833      	ldrh	r3, [r6, #0]
 8010bc4:	fb05 4503 	mla	r5, r5, r3, r4
 8010bc8:	8829      	ldrh	r1, [r5, #0]
 8010bca:	0448      	lsls	r0, r1, #17
 8010bcc:	0c42      	lsrs	r2, r0, #17
 8010bce:	53e2      	strh	r2, [r4, r7]
 8010bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bd4:	20000a90 	.word	0x20000a90

08010bd8 <vPortFree>:
    return( UMM_PBLOCK(c) );
}

// ----------------------------------------------------------------------------

void umm_free( void *ptr ) {
 8010bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  unsigned short int c;

  // If we're being asked to free a NULL pointer, well that's just silly!

  if( (void *)0 == ptr ) {
 8010bda:	4607      	mov	r7, r0
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	d032      	beq.n	8010c46 <vPortFree+0x6e>
  //
  UMM_CRITICAL_ENTRY();

  // Figure out which block we're in. Note the use of truncated division...

  c = (ptr-(void *)(&(umm_heap[0])))/sizeof(umm_block);
 8010be0:	4c19      	ldr	r4, [pc, #100]	; (8010c48 <vPortFree+0x70>)
 8010be2:	250c      	movs	r5, #12
 8010be4:	1b3f      	subs	r7, r7, r4
  // NOTE:  See the new umm_info() function that you can use to see if a ptr is
  //        on the free list!

  // Protect the critical section...
  //
  UMM_CRITICAL_ENTRY();
 8010be6:	f7ff fd51 	bl	801068c <vTaskSuspendAll>

  // Figure out which block we're in. Note the use of truncated division...

  c = (ptr-(void *)(&(umm_heap[0])))/sizeof(umm_block);
 8010bea:	fbb7 f0f5 	udiv	r0, r7, r5
 8010bee:	b286      	uxth	r6, r0
  // Release the critical section...
  //
  UMM_CRITICAL_EXIT();

  return( ptr );
}
 8010bf0:	4637      	mov	r7, r6

  umm_assimilate_up( c );

  // Then assimilate with the previous block if possible

  if( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MASK ) {
 8010bf2:	436f      	muls	r7, r5

  DBG_LOG_DEBUG( "Freeing block %6d\n", c );

  // Now let's assimilate this block with the next one if possible.

  umm_assimilate_up( c );
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	f7ff ffc9 	bl	8010b8c <umm_assimilate_up>

  // Then assimilate with the previous block if possible

  if( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MASK ) {
 8010bfa:	19e3      	adds	r3, r4, r7
 8010bfc:	8859      	ldrh	r1, [r3, #2]
 8010bfe:	4369      	muls	r1, r5
 8010c00:	5e62      	ldrsh	r2, [r4, r1]
 8010c02:	2a00      	cmp	r2, #0
 8010c04:	da0b      	bge.n	8010c1e <vPortFree+0x46>

// ----------------------------------------------------------------------------

static unsigned short int umm_assimilate_down( unsigned short int c, unsigned short int freemask ) {

    UMM_NBLOCK(UMM_PBLOCK(c)) = UMM_NBLOCK(c) | freemask;
 8010c06:	881a      	ldrh	r2, [r3, #0]
 8010c08:	ea6f 4042 	mvn.w	r0, r2, lsl #17
 8010c0c:	ea6f 4250 	mvn.w	r2, r0, lsr #17
 8010c10:	5262      	strh	r2, [r4, r1]
    UMM_PBLOCK(UMM_NBLOCK(c)) = UMM_PBLOCK(c);
 8010c12:	8859      	ldrh	r1, [r3, #2]
 8010c14:	881b      	ldrh	r3, [r3, #0]
 8010c16:	fb05 4403 	mla	r4, r5, r3, r4
 8010c1a:	8061      	strh	r1, [r4, #2]
 8010c1c:	e00f      	b.n	8010c3e <vPortFree+0x66>
    // The previous block is not a free block, so add this one to the head
    // of the free list

    DBG_LOG_DEBUG( "Just add to head of free list\n" );

    UMM_PFREE(UMM_NFREE(0)) = c;
 8010c1e:	88a0      	ldrh	r0, [r4, #4]
 8010c20:	b281      	uxth	r1, r0
 8010c22:	fb05 4501 	mla	r5, r5, r1, r4
    UMM_NFREE(c)            = UMM_NFREE(0);
    UMM_PFREE(c)            = 0;
 8010c26:	2200      	movs	r2, #0
    // The previous block is not a free block, so add this one to the head
    // of the free list

    DBG_LOG_DEBUG( "Just add to head of free list\n" );

    UMM_PFREE(UMM_NFREE(0)) = c;
 8010c28:	80ee      	strh	r6, [r5, #6]
    UMM_NFREE(c)            = UMM_NFREE(0);
 8010c2a:	8098      	strh	r0, [r3, #4]
    UMM_PFREE(c)            = 0;
 8010c2c:	719a      	strb	r2, [r3, #6]
 8010c2e:	71da      	strb	r2, [r3, #7]
    UMM_NFREE(0)            = c;
 8010c30:	80a6      	strh	r6, [r4, #4]

    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 8010c32:	881b      	ldrh	r3, [r3, #0]
 8010c34:	ea6f 4043 	mvn.w	r0, r3, lsl #17
 8010c38:	ea6f 4150 	mvn.w	r1, r0, lsr #17
 8010c3c:	53e1      	strh	r1, [r4, r7]
#endif

  // Release the critical section...
  //
  UMM_CRITICAL_EXIT();
}
 8010c3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  }
#endif

  // Release the critical section...
  //
  UMM_CRITICAL_EXIT();
 8010c42:	f7ff bdad 	b.w	80107a0 <xTaskResumeAll>
 8010c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c48:	20000a90 	.word	0x20000a90

08010c4c <pvPortMalloc>:
}

// ----------------------------------------------------------------------------

void *umm_malloc( size_t size ) {
 8010c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // the very first thing we do is figure out if we're being asked to allocate
  // a size of 0 - and if we are we'll simply return a null pointer. if not
  // then reduce the size by 1 byte so that the subsequent calculations on
  // the number of blocks to allocate are easier...

  if( 0 == size ) {
 8010c4e:	4604      	mov	r4, r0
 8010c50:	2800      	cmp	r0, #0
 8010c52:	f000 8084 	beq.w	8010d5e <pvPortMalloc+0x112>
    return( (void *)NULL );
  }

  // Protect the critical section...
  //
  UMM_CRITICAL_ENTRY();
 8010c56:	f7ff fd19 	bl	801068c <vTaskSuspendAll>
  //
  // When a block removed from the free list, the space used by the free
  // pointers is available for data. That's what the first calculation
  // of size is doing.

  if( size <= (sizeof(((umm_block *)0)->body)) )
 8010c5a:	2c08      	cmp	r4, #8
 8010c5c:	d907      	bls.n	8010c6e <pvPortMalloc+0x22>
    return( 1 );

  // If it's for more than that, then we need to figure out the number of
  // additional whole blocks the size of an umm_block are required.

  size -= ( 1 + (sizeof(((umm_block *)0)->body)) );
 8010c5e:	f1a4 0109 	sub.w	r1, r4, #9

  return( 2 + size/(sizeof(umm_block)) );
 8010c62:	230c      	movs	r3, #12
 8010c64:	fbb1 f0f3 	udiv	r0, r1, r3
 8010c68:	1c82      	adds	r2, r0, #2
 8010c6a:	b291      	uxth	r1, r2
 8010c6c:	e000      	b.n	8010c70 <pvPortMalloc+0x24>
  // When a block removed from the free list, the space used by the free
  // pointers is available for data. That's what the first calculation
  // of size is doing.

  if( size <= (sizeof(((umm_block *)0)->body)) )
    return( 1 );
 8010c6e:	2101      	movs	r1, #1
  // enough to hold the number of blocks we need.
  //
  // This part may be customized to be a best-fit, worst-fit, or first-fit
  // algorithm

  cf = UMM_NFREE(0);
 8010c70:	4c3b      	ldr	r4, [pc, #236]	; (8010d60 <pvPortMalloc+0x114>)
 8010c72:	88a2      	ldrh	r2, [r4, #4]

  bestBlock = UMM_NFREE(0);
  bestSize  = 0x7FFF;
 8010c74:	f647 76ff 	movw	r6, #32767	; 0x7fff
  // This part may be customized to be a best-fit, worst-fit, or first-fit
  // algorithm

  cf = UMM_NFREE(0);

  bestBlock = UMM_NFREE(0);
 8010c78:	4614      	mov	r4, r2
// ----------------------------------------------------------------------------

void *umm_malloc( size_t size ) {

  unsigned short int blocks;
  unsigned short int blockSize = 0;
 8010c7a:	2000      	movs	r0, #0
  cf = UMM_NFREE(0);

  bestBlock = UMM_NFREE(0);
  bestSize  = 0x7FFF;

  while( UMM_NFREE(cf) ) {
 8010c7c:	4b38      	ldr	r3, [pc, #224]	; (8010d60 <pvPortMalloc+0x114>)
 8010c7e:	250c      	movs	r5, #12
 8010c80:	fb05 3e02 	mla	lr, r5, r2, r3
 8010c84:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8010c88:	b16f      	cbz	r7, 8010ca6 <pvPortMalloc+0x5a>
    blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) - cf;
 8010c8a:	f8be 5000 	ldrh.w	r5, [lr]
 8010c8e:	046b      	lsls	r3, r5, #17
 8010c90:	ebc2 4053 	rsb	r0, r2, r3, lsr #17
 8010c94:	b280      	uxth	r0, r0
#if defined UMM_FIRST_FIT
    // This is the first block that fits!
    if( (blockSize >= blocks) )
        break;
#elif defined UMM_BEST_FIT
    if( (blockSize >= blocks) && (blockSize < bestSize) ) {
 8010c96:	4288      	cmp	r0, r1
 8010c98:	d303      	bcc.n	8010ca2 <pvPortMalloc+0x56>
 8010c9a:	42b0      	cmp	r0, r6
 8010c9c:	bf3c      	itt	cc
 8010c9e:	4614      	movcc	r4, r2
 8010ca0:	4606      	movcc	r6, r0
 8010ca2:	463a      	mov	r2, r7
 8010ca4:	e7ea      	b.n	8010c7c <pvPortMalloc+0x30>
#endif

    cf = UMM_NFREE(cf);
  }

  if( 0x7FFF != bestSize ) {
 8010ca6:	f647 77ff 	movw	r7, #32767	; 0x7fff
 8010caa:	42be      	cmp	r6, r7
 8010cac:	bf08      	it	eq
 8010cae:	4614      	moveq	r4, r2
    cf        = bestBlock;
    blockSize = bestSize;
  }

  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK ) {
 8010cb0:	fb05 3204 	mla	r2, r5, r4, r3
#endif

    cf = UMM_NFREE(cf);
  }

  if( 0x7FFF != bestSize ) {
 8010cb4:	bf18      	it	ne
 8010cb6:	4630      	movne	r0, r6
    cf        = bestBlock;
    blockSize = bestSize;
  }

  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK ) {
 8010cb8:	8817      	ldrh	r7, [r2, #0]
 8010cba:	047a      	lsls	r2, r7, #17
 8010cbc:	46a4      	mov	ip, r4
 8010cbe:	0c57      	lsrs	r7, r2, #17
 8010cc0:	b1e2      	cbz	r2, 8010cfc <pvPortMalloc+0xb0>
    // This is an existing block in the memory heap, we just need to split off
    // what we need, unlink it from the free list and mark it as in use, and
    // link the rest of the block back into the freelist as if it was a new
    // block on the free list...

    if( blockSize == blocks ) {
 8010cc2:	4288      	cmp	r0, r1
 8010cc4:	d103      	bne.n	8010cce <pvPortMalloc+0x82>
      // It's an exact fit and we don't neet to split off a block.
      DBG_LOG_DEBUG( "Allocating %6d blocks starting at %6d - exact\n", blocks, cf );

      // Disconnect this block from the FREE list

      umm_disconnect_from_free_list( cf );
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	f7ff ff4a 	bl	8010b60 <umm_disconnect_from_free_list>
 8010ccc:	e03f      	b.n	8010d4e <pvPortMalloc+0x102>

    } else {
     // It's not an exact fit and we need to split off a block.
     DBG_LOG_DEBUG( "Allocating %6d blocks starting at %6d - existing\n", blocks, cf );

     umm_make_new_block( cf, blockSize-blocks, UMM_FREELIST_MASK );
 8010cce:	1a40      	subs	r0, r0, r1

static void umm_make_new_block( unsigned short int c,
                                unsigned short int blocks,
                                unsigned short int freemask ) {

     UMM_NBLOCK(c+blocks) = UMM_NBLOCK(c) & UMM_BLOCKNO_MASK;
 8010cd0:	fa14 f080 	uxtah	r0, r4, r0
 8010cd4:	fb05 f200 	mul.w	r2, r5, r0
 8010cd8:	1899      	adds	r1, r3, r2
 8010cda:	529f      	strh	r7, [r3, r2]
     UMM_PBLOCK(c+blocks) = c;
 8010cdc:	804c      	strh	r4, [r1, #2]

     UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (c+blocks);
 8010cde:	b284      	uxth	r4, r0
 8010ce0:	fb05 f00c 	mul.w	r0, r5, ip
 8010ce4:	5a1a      	ldrh	r2, [r3, r0]
 8010ce6:	0451      	lsls	r1, r2, #17
 8010ce8:	0c4a      	lsrs	r2, r1, #17
 8010cea:	fb05 3502 	mla	r5, r5, r2, r3
     UMM_NBLOCK(c)                                = (c+blocks) | freemask;
 8010cee:	ea6f 4144 	mvn.w	r1, r4, lsl #17
 8010cf2:	ea6f 4251 	mvn.w	r2, r1, lsr #17
                                unsigned short int freemask ) {

     UMM_NBLOCK(c+blocks) = UMM_NBLOCK(c) & UMM_BLOCKNO_MASK;
     UMM_PBLOCK(c+blocks) = c;

     UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (c+blocks);
 8010cf6:	806c      	strh	r4, [r5, #2]
     UMM_NBLOCK(c)                                = (c+blocks) | freemask;
 8010cf8:	521a      	strh	r2, [r3, r0]
 8010cfa:	e028      	b.n	8010d4e <pvPortMalloc+0x102>
    // We're at the end of the heap - allocate a new block, but check to see if
    // there's enough memory left for the requested block! Actually, we may need
    // one more than that if we're initializing the umm_heap for the first
    // time, which happens in the next conditional...

    if( UMM_NUMBLOCKS <= cf+blocks+1 ) {
 8010cfc:	1860      	adds	r0, r4, r1
 8010cfe:	f241 5253 	movw	r2, #5459	; 0x1553
 8010d02:	4290      	cmp	r0, r2
 8010d04:	dd07      	ble.n	8010d16 <pvPortMalloc+0xca>
      DBG_LOG_WARNING(  "Can't allocate %5d blocks at %5d\n", blocks, cf );
 8010d06:	4622      	mov	r2, r4
 8010d08:	4816      	ldr	r0, [pc, #88]	; (8010d64 <pvPortMalloc+0x118>)
 8010d0a:	f000 fe43 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>

      // Release the critical section...
      //
      UMM_CRITICAL_EXIT();
 8010d0e:	f7ff fd47 	bl	80107a0 <xTaskResumeAll>

      return( (void *)NULL );
 8010d12:	4638      	mov	r0, r7
 8010d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    // Now check to see if we need to initialize the free list...this assumes
    // that the BSS is set to 0 on startup. We should rarely get to the end of
    // the free list so this is the "cheapest" place to put the initialization!

    if( 0 == cf ) {
 8010d16:	b92c      	cbnz	r4, 8010d24 <pvPortMalloc+0xd8>
      DBG_LOG_DEBUG( "Initializing malloc free block pointer\n" );
      UMM_NBLOCK(0) = 1;
 8010d18:	2501      	movs	r5, #1
 8010d1a:	705c      	strb	r4, [r3, #1]
      UMM_NFREE(0)  = 1;
 8010d1c:	715c      	strb	r4, [r3, #5]
    // that the BSS is set to 0 on startup. We should rarely get to the end of
    // the free list so this is the "cheapest" place to put the initialization!

    if( 0 == cf ) {
      DBG_LOG_DEBUG( "Initializing malloc free block pointer\n" );
      UMM_NBLOCK(0) = 1;
 8010d1e:	701d      	strb	r5, [r3, #0]
      UMM_NFREE(0)  = 1;
 8010d20:	711d      	strb	r5, [r3, #4]
      cf            = 1;
 8010d22:	462c      	mov	r4, r5
    }

    DBG_LOG_DEBUG( "Allocating %6d blocks starting at %6d - new     \n", blocks, cf );

    UMM_NFREE(UMM_PFREE(cf)) = cf+blocks;
 8010d24:	4b0e      	ldr	r3, [pc, #56]	; (8010d60 <pvPortMalloc+0x114>)
 8010d26:	200c      	movs	r0, #12
 8010d28:	fb00 f504 	mul.w	r5, r0, r4
 8010d2c:	195a      	adds	r2, r3, r5
 8010d2e:	1861      	adds	r1, r4, r1
 8010d30:	88d6      	ldrh	r6, [r2, #6]
 8010d32:	fb00 3706 	mla	r7, r0, r6, r3
 8010d36:	460e      	mov	r6, r1
 8010d38:	80b9      	strh	r1, [r7, #4]

    memcpy( &UMM_BLOCK(cf+blocks), &UMM_BLOCK(cf), sizeof(umm_block) );
 8010d3a:	6817      	ldr	r7, [r2, #0]
 8010d3c:	4341      	muls	r1, r0
 8010d3e:	1858      	adds	r0, r3, r1
 8010d40:	505f      	str	r7, [r3, r1]
 8010d42:	6851      	ldr	r1, [r2, #4]
 8010d44:	6041      	str	r1, [r0, #4]
 8010d46:	6892      	ldr	r2, [r2, #8]
 8010d48:	6082      	str	r2, [r0, #8]

    UMM_NBLOCK(cf)           = cf+blocks;
 8010d4a:	535e      	strh	r6, [r3, r5]
    UMM_PBLOCK(cf+blocks)    = cf;
 8010d4c:	8044      	strh	r4, [r0, #2]
  }

  // Release the critical section...
  //
  UMM_CRITICAL_EXIT();
 8010d4e:	f7ff fd27 	bl	80107a0 <xTaskResumeAll>

  return( (void *)&UMM_DATA(cf) );
 8010d52:	4b03      	ldr	r3, [pc, #12]	; (8010d60 <pvPortMalloc+0x114>)
 8010d54:	200c      	movs	r0, #12
 8010d56:	fb00 3404 	mla	r4, r0, r4, r3
 8010d5a:	1d20      	adds	r0, r4, #4
 8010d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 8010d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d60:	20000a90 	.word	0x20000a90
 8010d64:	0801c02f 	.word	0x0801c02f

08010d68 <Default_Handler>:
 * @param  None     
 * @retval : None       
*/

void Default_Handler(void) 
{
 8010d68:	e7fe      	b.n	8010d68 <Default_Handler>
	...

08010d6c <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 8010d6c:	4668      	mov	r0, sp
 8010d6e:	f020 0107 	bic.w	r1, r0, #7
 8010d72:	468d      	mov	sp, r1
 8010d74:	b501      	push	{r0, lr}
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8010d76:	2300      	movs	r3, #0
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
 8010d78:	4a0a      	ldr	r2, [pc, #40]	; (8010da4 <Reset_Handler+0x38>)
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8010d7a:	490b      	ldr	r1, [pc, #44]	; (8010da8 <Reset_Handler+0x3c>)
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
 8010d7c:	1898      	adds	r0, r3, r2
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8010d7e:	4288      	cmp	r0, r1
 8010d80:	d204      	bcs.n	8010d8c <Reset_Handler+0x20>
  {
    *(pulDest++) = *(pulSrc++);
 8010d82:	490a      	ldr	r1, [pc, #40]	; (8010dac <Reset_Handler+0x40>)
 8010d84:	5858      	ldr	r0, [r3, r1]
 8010d86:	5098      	str	r0, [r3, r2]
 8010d88:	3304      	adds	r3, #4
 8010d8a:	e7f5      	b.n	8010d78 <Reset_Handler+0xc>
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8010d8c:	4b08      	ldr	r3, [pc, #32]	; (8010db0 <Reset_Handler+0x44>)
  {
    *(pulDest++) = *(pulSrc++);
  }
  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
 8010d8e:	4a09      	ldr	r2, [pc, #36]	; (8010db4 <Reset_Handler+0x48>)
 8010d90:	4293      	cmp	r3, r2
 8010d92:	d203      	bcs.n	8010d9c <Reset_Handler+0x30>
  {
    *(pulDest++) = 0;
 8010d94:	2000      	movs	r0, #0
 8010d96:	f843 0b04 	str.w	r0, [r3], #4
 8010d9a:	e7f8      	b.n	8010d8e <Reset_Handler+0x22>
  }

  /* Call the application's entry point.*/
  main();
 8010d9c:	f7ff fa12 	bl	80101c4 <main>
 8010da0:	e7fe      	b.n	8010da0 <Reset_Handler+0x34>
 8010da2:	bf00      	nop
 8010da4:	20000000 	.word	0x20000000
 8010da8:	20000068 	.word	0x20000068
 8010dac:	0801d6a8 	.word	0x0801d6a8
 8010db0:	20000068 	.word	0x20000068
 8010db4:	20011c90 	.word	0x20011c90

08010db8 <_init>:
  while( 1 );
}

// dummy for newer gcc versions
void _init()
{
 8010db8:	4770      	bx	lr
	...

08010dbc <MIOS32_SRIO_DMA_Callback>:
/////////////////////////////////////////////////////////////////////////////
// DMA callback function is called by MIOS32_SPI driver once the complete SRIO chain
// has been scanned
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_SRIO_DMA_Callback(void)
{
 8010dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // notify that new values have been transfered
  srio_values_transfered = 1;

  // latch DOUT registers by pulsing RCLK: 1->0->1
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8010dbe:	2100      	movs	r1, #0
// has been scanned
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_SRIO_DMA_Callback(void)
{
  // notify that new values have been transfered
  srio_values_transfered = 1;
 8010dc0:	2401      	movs	r4, #1
 8010dc2:	4b21      	ldr	r3, [pc, #132]	; (8010e48 <MIOS32_SRIO_DMA_Callback+0x8c>)

  // latch DOUT registers by pulsing RCLK: 1->0->1
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8010dc4:	460a      	mov	r2, r1
 8010dc6:	4620      	mov	r0, r4
// has been scanned
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_SRIO_DMA_Callback(void)
{
  // notify that new values have been transfered
  srio_values_transfered = 1;
 8010dc8:	701c      	strb	r4, [r3, #0]

  // latch DOUT registers by pulsing RCLK: 1->0->1
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8010dca:	f002 f875 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 0); // spi, rc_pin, pin_value
 8010dce:	4621      	mov	r1, r4
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	f002 f870 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
#endif
  // delay disabled - the delay caused by MIOS32_SPI_RC_PinSet function calls is sufficient
  //MIOS32_DELAY_Wait_uS(1);
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8010dd8:	4622      	mov	r2, r4
 8010dda:	4620      	mov	r0, r4
 8010ddc:	2100      	movs	r1, #0
 8010dde:	f002 f86b 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 1); // spi, rc_pin, pin_value
 8010de2:	4620      	mov	r0, r4
 8010de4:	4621      	mov	r1, r4
 8010de6:	4622      	mov	r2, r4
 8010de8:	f002 f866 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
  MIOS32_SRIO_CALLBACK_BEFORE_DIN_COMPARE();
#endif

  // copy/or buffered DIN values/changed flags
  int i;
  for(i=0; i<num_sr; ++i) {
 8010dec:	4817      	ldr	r0, [pc, #92]	; (8010e4c <MIOS32_SRIO_DMA_Callback+0x90>)
 8010dee:	7804      	ldrb	r4, [r0, #0]
 8010df0:	2300      	movs	r3, #0
 8010df2:	42a3      	cmp	r3, r4
 8010df4:	da0c      	bge.n	8010e10 <MIOS32_SRIO_DMA_Callback+0x54>
    mios32_srio_din_changed[i] |= mios32_srio_din[i] ^ mios32_srio_din_buffer[i];
 8010df6:	4816      	ldr	r0, [pc, #88]	; (8010e50 <MIOS32_SRIO_DMA_Callback+0x94>)
 8010df8:	4a16      	ldr	r2, [pc, #88]	; (8010e54 <MIOS32_SRIO_DMA_Callback+0x98>)
 8010dfa:	4917      	ldr	r1, [pc, #92]	; (8010e58 <MIOS32_SRIO_DMA_Callback+0x9c>)
 8010dfc:	5cc6      	ldrb	r6, [r0, r3]
 8010dfe:	5cd5      	ldrb	r5, [r2, r3]
 8010e00:	5ccf      	ldrb	r7, [r1, r3]
 8010e02:	407d      	eors	r5, r7
 8010e04:	4335      	orrs	r5, r6
 8010e06:	54c5      	strb	r5, [r0, r3]
    mios32_srio_din[i] = mios32_srio_din_buffer[i];
 8010e08:	5cc8      	ldrb	r0, [r1, r3]
 8010e0a:	54d0      	strb	r0, [r2, r3]
  MIOS32_SRIO_CALLBACK_BEFORE_DIN_COMPARE();
#endif

  // copy/or buffered DIN values/changed flags
  int i;
  for(i=0; i<num_sr; ++i) {
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	e7f0      	b.n	8010df2 <MIOS32_SRIO_DMA_Callback+0x36>

  // call user specific hook if requested
  // it has to be called before button debouncing is handled
  // to ensure that the encoder driver, but also other drivers (e.g. BLM) are working properly
  // regardless if debouncing is enabled or not
  if( srio_scan_finished_hook != NULL )
 8010e10:	4912      	ldr	r1, [pc, #72]	; (8010e5c <MIOS32_SRIO_DMA_Callback+0xa0>)
 8010e12:	680a      	ldr	r2, [r1, #0]
 8010e14:	b102      	cbz	r2, 8010e18 <MIOS32_SRIO_DMA_Callback+0x5c>
    srio_scan_finished_hook();
 8010e16:	4790      	blx	r2
  // at this time. In order to ensure, that a new final state of a button won't get lost, 
  // the DIN values are XORed with the "changed" flags (yes, this idea is ill, but it works! :)
  // Even the encoder handler (or others which are notified by the scan_finished_hook) still
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
 8010e18:	4b11      	ldr	r3, [pc, #68]	; (8010e60 <MIOS32_SRIO_DMA_Callback+0xa4>)
 8010e1a:	7818      	ldrb	r0, [r3, #0]
 8010e1c:	b198      	cbz	r0, 8010e46 <MIOS32_SRIO_DMA_Callback+0x8a>
 8010e1e:	4911      	ldr	r1, [pc, #68]	; (8010e64 <MIOS32_SRIO_DMA_Callback+0xa8>)
 8010e20:	780a      	ldrb	r2, [r1, #0]
 8010e22:	b182      	cbz	r2, 8010e46 <MIOS32_SRIO_DMA_Callback+0x8a>
    --debounce_ctr;

    for(i=0; i<num_sr; ++i) {
 8010e24:	4809      	ldr	r0, [pc, #36]	; (8010e4c <MIOS32_SRIO_DMA_Callback+0x90>)
  // the DIN values are XORed with the "changed" flags (yes, this idea is ill, but it works! :)
  // Even the encoder handler (or others which are notified by the scan_finished_hook) still
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
    --debounce_ctr;
 8010e26:	1e53      	subs	r3, r2, #1

    for(i=0; i<num_sr; ++i) {
 8010e28:	7800      	ldrb	r0, [r0, #0]
  // the DIN values are XORed with the "changed" flags (yes, this idea is ill, but it works! :)
  // Even the encoder handler (or others which are notified by the scan_finished_hook) still
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
    --debounce_ctr;
 8010e2a:	700b      	strb	r3, [r1, #0]

    for(i=0; i<num_sr; ++i) {
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	4283      	cmp	r3, r0
 8010e30:	da09      	bge.n	8010e46 <MIOS32_SRIO_DMA_Callback+0x8a>
      mios32_srio_din[i] ^= mios32_srio_din_changed[i];
 8010e32:	4908      	ldr	r1, [pc, #32]	; (8010e54 <MIOS32_SRIO_DMA_Callback+0x98>)
 8010e34:	4a06      	ldr	r2, [pc, #24]	; (8010e50 <MIOS32_SRIO_DMA_Callback+0x94>)
 8010e36:	5ccc      	ldrb	r4, [r1, r3]
 8010e38:	5cd5      	ldrb	r5, [r2, r3]
 8010e3a:	406c      	eors	r4, r5
 8010e3c:	54cc      	strb	r4, [r1, r3]
      mios32_srio_din_changed[i] = 0;
 8010e3e:	2100      	movs	r1, #0
 8010e40:	54d1      	strb	r1, [r2, r3]
  // work properly, because they are clearing the appr. "changed" flags, so that the DIN
  // values won't be touched by the XOR operation.
  if( debounce_time && debounce_ctr ) {
    --debounce_ctr;

    for(i=0; i<num_sr; ++i) {
 8010e42:	3301      	adds	r3, #1
 8010e44:	e7f3      	b.n	8010e2e <MIOS32_SRIO_DMA_Callback+0x72>
 8010e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e48:	20000172 	.word	0x20000172
 8010e4c:	20000171 	.word	0x20000171
 8010e50:	20010a8c 	.word	0x20010a8c
 8010e54:	20010abc 	.word	0x20010abc
 8010e58:	20010aac 	.word	0x20010aac
 8010e5c:	2000016c 	.word	0x2000016c
 8010e60:	20000170 	.word	0x20000170
 8010e64:	20000173 	.word	0x20000173

08010e68 <MIOS32_SRIO_Init>:
//! Initializes SPI pins and peripheral
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_Init(u32 mode)
{
 8010e68:	b510      	push	{r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	d12e      	bne.n	8010ecc <MIOS32_SRIO_Init+0x64>
    return -1; // unsupported mode

  int i;

  // disable notification hook
  srio_scan_finished_hook = NULL;
 8010e6e:	4b19      	ldr	r3, [pc, #100]	; (8010ed4 <MIOS32_SRIO_Init+0x6c>)

  // actual scanned SRs (MIOS32_SRIO_NUM_SR by default, but can be changed to lower value during runtime)
  num_sr = MIOS32_SRIO_NUM_SR;
 8010e70:	4919      	ldr	r1, [pc, #100]	; (8010ed8 <MIOS32_SRIO_Init+0x70>)
    return -1; // unsupported mode

  int i;

  // disable notification hook
  srio_scan_finished_hook = NULL;
 8010e72:	6018      	str	r0, [r3, #0]

  // actual scanned SRs (MIOS32_SRIO_NUM_SR by default, but can be changed to lower value during runtime)
  num_sr = MIOS32_SRIO_NUM_SR;
 8010e74:	2210      	movs	r2, #16
 8010e76:	700a      	strb	r2, [r1, #0]

  // clear chains
  // will be done again in MIOS32_DIN_Init and MIOS32_DOUT_Init
  // we don't reference to these functions here to allow the programmer to remove/replace these driver modules)
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 8010e78:	4603      	mov	r3, r0
#if MIOS32_SRIO_NUM_DOUT_PAGES == 1
    mios32_srio_dout[0][i] = 0x00;       // passive state (LEDs off)
 8010e7a:	4818      	ldr	r0, [pc, #96]	; (8010edc <MIOS32_SRIO_Init+0x74>)
#else
    int j;
    for(j=0; j<MIOS32_SRIO_NUM_DOUT_PAGES; ++j)
      mios32_srio_dout[j][i] = 0x00;       // passive state (LEDs off)
#endif
    mios32_srio_din[i] = 0xff;        // passive state (Buttons depressed)
 8010e7c:	4918      	ldr	r1, [pc, #96]	; (8010ee0 <MIOS32_SRIO_Init+0x78>)
  // clear chains
  // will be done again in MIOS32_DIN_Init and MIOS32_DOUT_Init
  // we don't reference to these functions here to allow the programmer to remove/replace these driver modules)
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
#if MIOS32_SRIO_NUM_DOUT_PAGES == 1
    mios32_srio_dout[0][i] = 0x00;       // passive state (LEDs off)
 8010e7e:	2400      	movs	r4, #0
 8010e80:	54c4      	strb	r4, [r0, r3]
    int j;
    for(j=0; j<MIOS32_SRIO_NUM_DOUT_PAGES; ++j)
      mios32_srio_dout[j][i] = 0x00;       // passive state (LEDs off)
#endif
    mios32_srio_din[i] = 0xff;        // passive state (Buttons depressed)
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
 8010e82:	4818      	ldr	r0, [pc, #96]	; (8010ee4 <MIOS32_SRIO_Init+0x7c>)
#else
    int j;
    for(j=0; j<MIOS32_SRIO_NUM_DOUT_PAGES; ++j)
      mios32_srio_dout[j][i] = 0x00;       // passive state (LEDs off)
#endif
    mios32_srio_din[i] = 0xff;        // passive state (Buttons depressed)
 8010e84:	22ff      	movs	r2, #255	; 0xff
 8010e86:	54ca      	strb	r2, [r1, r3]
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
 8010e88:	54c2      	strb	r2, [r0, r3]
    mios32_srio_din_changed[i] = 0;   // no change
 8010e8a:	4a17      	ldr	r2, [pc, #92]	; (8010ee8 <MIOS32_SRIO_Init+0x80>)
 8010e8c:	54d4      	strb	r4, [r2, r3]
  num_sr = MIOS32_SRIO_NUM_SR;

  // clear chains
  // will be done again in MIOS32_DIN_Init and MIOS32_DOUT_Init
  // we don't reference to these functions here to allow the programmer to remove/replace these driver modules)
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 8010e8e:	3301      	adds	r3, #1
 8010e90:	2b10      	cmp	r3, #16
 8010e92:	d1f2      	bne.n	8010e7a <MIOS32_SRIO_Init+0x12>
    mios32_srio_din_changed[i] = 0;   // no change
  }

  // initial debounce time (debouncing disabled)
  debounce_time = 0;
  debounce_ctr = 0;
 8010e94:	4815      	ldr	r0, [pc, #84]	; (8010eec <MIOS32_SRIO_Init+0x84>)
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
    mios32_srio_din_changed[i] = 0;   // no change
  }

  // initial debounce time (debouncing disabled)
  debounce_time = 0;
 8010e96:	4916      	ldr	r1, [pc, #88]	; (8010ef0 <MIOS32_SRIO_Init+0x88>)
  debounce_ctr = 0;
 8010e98:	7004      	strb	r4, [r0, #0]
  // start with first page
  mios32_srio_dout_page_ctr = 0;
#endif

  // initial state of RCLK
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8010e9a:	2001      	movs	r0, #1
    mios32_srio_din_buffer[i] = 0xff; // passive state (Buttons depressed)
    mios32_srio_din_changed[i] = 0;   // no change
  }

  // initial debounce time (debouncing disabled)
  debounce_time = 0;
 8010e9c:	700c      	strb	r4, [r1, #0]
  // start with first page
  mios32_srio_dout_page_ctr = 0;
#endif

  // initial state of RCLK
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	4621      	mov	r1, r4
 8010ea2:	f002 f809 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 1); // spi, rc_pin, pin_value
 8010ea6:	2001      	movs	r0, #1
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	4601      	mov	r1, r0
 8010eac:	f002 f804 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
  // using 2 MHz instead of 50 MHz to avoid fast transients which can cause flickering!
  // optionally using open drain mode for cheap and sufficient levelshifting from 3.3V to 5V
#if MIOS32_SRIO_OUTPUTS_OD
  MIOS32_SPI_IO_Init(MIOS32_SRIO_SPI, MIOS32_SPI_PIN_DRIVER_WEAK_OD);
#else
  MIOS32_SPI_IO_Init(MIOS32_SRIO_SPI, MIOS32_SPI_PIN_DRIVER_WEAK);
 8010eb0:	2102      	movs	r1, #2
 8010eb2:	2001      	movs	r0, #1
 8010eb4:	f001 fec2 	bl	8012c3c <MIOS32_SPI_IO_Init>
#endif

  // init SPI port for baudrate of ca. 2 uS period @ 72 MHz
  MIOS32_SPI_TransferModeInit(MIOS32_SRIO_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 8010eb8:	2206      	movs	r2, #6
 8010eba:	2001      	movs	r0, #1
 8010ebc:	2103      	movs	r1, #3
 8010ebe:	f002 f85d 	bl	8012f7c <MIOS32_SPI_TransferModeInit>

  // notify that SRIO values have been transfered
  // (cleared on each ScanStart, set on each DMA IRQ invokation for proper synchronisation)
  srio_values_transfered = 1;
 8010ec2:	4b0c      	ldr	r3, [pc, #48]	; (8010ef4 <MIOS32_SRIO_Init+0x8c>)
 8010ec4:	2201      	movs	r2, #1
 8010ec6:	701a      	strb	r2, [r3, #0]

  return 0;
 8010ec8:	4620      	mov	r0, r4
 8010eca:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8010ecc:	f04f 30ff 	mov.w	r0, #4294967295
  // notify that SRIO values have been transfered
  // (cleared on each ScanStart, set on each DMA IRQ invokation for proper synchronisation)
  srio_values_transfered = 1;

  return 0;
}
 8010ed0:	bd10      	pop	{r4, pc}
 8010ed2:	bf00      	nop
 8010ed4:	2000016c 	.word	0x2000016c
 8010ed8:	20000171 	.word	0x20000171
 8010edc:	20010a9c 	.word	0x20010a9c
 8010ee0:	20010abc 	.word	0x20010abc
 8010ee4:	20010aac 	.word	0x20010aac
 8010ee8:	20010a8c 	.word	0x20010a8c
 8010eec:	20000173 	.word	0x20000173
 8010ef0:	20000170 	.word	0x20000170
 8010ef4:	20000172 	.word	0x20000172

08010ef8 <MIOS32_SRIO_ScanNumGet>:
//! \return number of SRs
/////////////////////////////////////////////////////////////////////////////
u8 MIOS32_SRIO_ScanNumGet(void)
{
  return num_sr;
}
 8010ef8:	4b01      	ldr	r3, [pc, #4]	; (8010f00 <MIOS32_SRIO_ScanNumGet+0x8>)
 8010efa:	7818      	ldrb	r0, [r3, #0]
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop
 8010f00:	20000171 	.word	0x20000171

08010f04 <MIOS32_SRIO_DebounceStart>:
//! it in a common application.
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_DebounceStart(void)
{
  debounce_ctr = debounce_time;
 8010f04:	4b02      	ldr	r3, [pc, #8]	; (8010f10 <MIOS32_SRIO_DebounceStart+0xc>)
 8010f06:	4803      	ldr	r0, [pc, #12]	; (8010f14 <MIOS32_SRIO_DebounceStart+0x10>)
 8010f08:	781a      	ldrb	r2, [r3, #0]
 8010f0a:	7002      	strb	r2, [r0, #0]
  return 0; // no error
}
 8010f0c:	2000      	movs	r0, #0
 8010f0e:	4770      	bx	lr
 8010f10:	20000170 	.word	0x20000170
 8010f14:	20000173 	.word	0x20000173

08010f18 <MIOS32_SRIO_ScanStart>:
//!     (all DOUT registers written, all DIN registers read)
//!     use NULL if no function should be called
//! \return < 0 if operation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SRIO_ScanStart(void *_notify_hook)
{
 8010f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if MIOS32_SRIO_NUM_SR == 0
  return -1; // no SRIO scan required
#endif

  if( num_sr == 0 )
 8010f1a:	4d17      	ldr	r5, [pc, #92]	; (8010f78 <MIOS32_SRIO_ScanStart+0x60>)
 8010f1c:	782b      	ldrb	r3, [r5, #0]
 8010f1e:	b323      	cbz	r3, 8010f6a <MIOS32_SRIO_ScanStart+0x52>

  // exit if previous stream hasn't been sent yet (no additional transfer required)
  // THIS IS A FAILSAVE MEASURE ONLY!
  // should never happen if MIOS32_SRIO_ScanStart is called each mS
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
 8010f20:	4916      	ldr	r1, [pc, #88]	; (8010f7c <MIOS32_SRIO_ScanStart+0x64>)
 8010f22:	780a      	ldrb	r2, [r1, #0]
 8010f24:	b322      	cbz	r2, 8010f70 <MIOS32_SRIO_ScanStart+0x58>

  // notify that new values have to be transfered
  srio_values_transfered = 0;

  // change notification function
  srio_scan_finished_hook = _notify_hook;
 8010f26:	4b16      	ldr	r3, [pc, #88]	; (8010f80 <MIOS32_SRIO_ScanStart+0x68>)
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
    return -2; // notify this special scenario - we could retry here

  // notify that new values have to be transfered
  srio_values_transfered = 0;
 8010f28:	2400      	movs	r4, #0

  // change notification function
  srio_scan_finished_hook = _notify_hook;
 8010f2a:	6018      	str	r0, [r3, #0]
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
    return -2; // notify this special scenario - we could retry here

  // notify that new values have to be transfered
  srio_values_transfered = 0;
 8010f2c:	700c      	strb	r4, [r1, #0]
  srio_scan_finished_hook = _notify_hook;

  // before first byte will be sent:
  // latch DIN registers by pulsing RCLK: 1->0->1
  // TODO: maybe we should disable all IRQs here for higher accuracy
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8010f2e:	4622      	mov	r2, r4
 8010f30:	4621      	mov	r1, r4
 8010f32:	2001      	movs	r0, #1
 8010f34:	f001 ffc0 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 0); // spi, rc_pin, pin_value
 8010f38:	2001      	movs	r0, #1
 8010f3a:	4601      	mov	r1, r0
 8010f3c:	4622      	mov	r2, r4
 8010f3e:	f001 ffbb 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
#endif
  // delay disabled - the delay caused by MIOS32_SPI_RC_PinSet function calls is sufficient
  //MIOS32_DELAY_Wait_uS(1);
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8010f42:	2001      	movs	r0, #1
 8010f44:	4621      	mov	r1, r4
 8010f46:	4602      	mov	r2, r0
 8010f48:	f001 ffb6 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
#ifdef MIOS32_SRIO_SPI_RC_PIN2
  MIOS32_SPI_RC_PinSet(MIOS32_SRIO_SPI, MIOS32_SRIO_SPI_RC_PIN2, 1); // spi, rc_pin, pin_value
 8010f4c:	2001      	movs	r0, #1
 8010f4e:	4601      	mov	r1, r0
 8010f50:	4602      	mov	r2, r0
 8010f52:	f001 ffb1 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
  if( ++mios32_srio_dout_page_ctr >= MIOS32_SRIO_NUM_DOUT_PAGES )
    mios32_srio_dout_page_ctr = 0;
#endif

  // start DMA transfer
  MIOS32_SPI_TransferBlock(MIOS32_SRIO_SPI,
 8010f56:	480b      	ldr	r0, [pc, #44]	; (8010f84 <MIOS32_SRIO_ScanStart+0x6c>)
 8010f58:	782b      	ldrb	r3, [r5, #0]
 8010f5a:	9000      	str	r0, [sp, #0]
 8010f5c:	490a      	ldr	r1, [pc, #40]	; (8010f88 <MIOS32_SRIO_ScanStart+0x70>)
 8010f5e:	4a0b      	ldr	r2, [pc, #44]	; (8010f8c <MIOS32_SRIO_ScanStart+0x74>)
 8010f60:	2001      	movs	r0, #1
 8010f62:	f002 f9bf 	bl	80132e4 <MIOS32_SPI_TransferBlock>
			   (u8 *)&mios32_srio_dout[mios32_srio_dout_page_ctr][0], (u8 *)&mios32_srio_din_buffer[0],
#endif
			   num_sr,
			   MIOS32_SRIO_DMA_Callback);

  return 0;
 8010f66:	4620      	mov	r0, r4
 8010f68:	e004      	b.n	8010f74 <MIOS32_SRIO_ScanStart+0x5c>
#if MIOS32_SRIO_NUM_SR == 0
  return -1; // no SRIO scan required
#endif

  if( num_sr == 0 )
    return -1; // SRIO disabled during runtime
 8010f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f6e:	e001      	b.n	8010f74 <MIOS32_SRIO_ScanStart+0x5c>
  // exit if previous stream hasn't been sent yet (no additional transfer required)
  // THIS IS A FAILSAVE MEASURE ONLY!
  // should never happen if MIOS32_SRIO_ScanStart is called each mS
  // the transfer itself takes ca. 225 uS (if 16 SRIOs are scanned)
  if( !srio_values_transfered )
    return -2; // notify this special scenario - we could retry here
 8010f70:	f06f 0001 	mvn.w	r0, #1
#endif
			   num_sr,
			   MIOS32_SRIO_DMA_Callback);

  return 0;
}
 8010f74:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8010f76:	bf00      	nop
 8010f78:	20000171 	.word	0x20000171
 8010f7c:	20000172 	.word	0x20000172
 8010f80:	2000016c 	.word	0x2000016c
 8010f84:	08010dbd 	.word	0x08010dbd
 8010f88:	20010a9c 	.word	0x20010a9c
 8010f8c:	20010aac 	.word	0x20010aac

08010f90 <MIOS32_DIN_Init>:
s32 MIOS32_DIN_Init(u32 mode)
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
 8010f90:	b950      	cbnz	r0, 8010fa8 <MIOS32_DIN_Init+0x18>
 8010f92:	4603      	mov	r3, r0
    return -1; // unsupported mode

  // clear DIN part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
    mios32_srio_din[i] = 0xff; // passive state
 8010f94:	4a06      	ldr	r2, [pc, #24]	; (8010fb0 <MIOS32_DIN_Init+0x20>)
 8010f96:	21ff      	movs	r1, #255	; 0xff
 8010f98:	54d1      	strb	r1, [r2, r3]
    mios32_srio_din_changed[i] = 0;
 8010f9a:	4906      	ldr	r1, [pc, #24]	; (8010fb4 <MIOS32_DIN_Init+0x24>)
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	54c8      	strb	r0, [r1, r3]
 8010fa0:	3301      	adds	r3, #1
  if( mode != 0 )
    return -1; // unsupported mode

  // clear DIN part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 8010fa2:	2b10      	cmp	r3, #16
 8010fa4:	d1f6      	bne.n	8010f94 <MIOS32_DIN_Init+0x4>
 8010fa6:	4770      	bx	lr
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8010fa8:	f04f 30ff 	mov.w	r0, #4294967295
    mios32_srio_din[i] = 0xff; // passive state
    mios32_srio_din_changed[i] = 0;
  }

  return 0;
}
 8010fac:	4770      	bx	lr
 8010fae:	bf00      	nop
 8010fb0:	20010abc 	.word	0x20010abc
 8010fb4:	20010a8c 	.word	0x20010a8c

08010fb8 <MIOS32_DIN_SRChangedGetAndClear>:
//! \param[in] mask pin mask (8bit value)
//! \return 8bit value which contains the selected (masked) change flags
//! \return no error status (-1)! - if unavailable SR selected, 0x00 will be returned
/////////////////////////////////////////////////////////////////////////////
u8 MIOS32_DIN_SRChangedGetAndClear(u32 sr, u8 mask)
{
 8010fb8:	b570      	push	{r4, r5, r6, lr}
 8010fba:	4604      	mov	r4, r0
 8010fbc:	460d      	mov	r5, r1
  u8 num_sr = MIOS32_SRIO_ScanNumGet();
 8010fbe:	f7ff ff9b 	bl	8010ef8 <MIOS32_SRIO_ScanNumGet>
  u8 changed;

  // check if SR available
  if( sr >= num_sr )
 8010fc2:	4284      	cmp	r4, r0
 8010fc4:	d20b      	bcs.n	8010fde <MIOS32_DIN_SRChangedGetAndClear+0x26>
    return 0x00;

  // get and clear changed flags - must be atomic!
  MIOS32_IRQ_Disable();
 8010fc6:	f001 fdeb 	bl	8012ba0 <MIOS32_IRQ_Disable>
  changed = mios32_srio_din_changed[sr] & mask;
 8010fca:	4b06      	ldr	r3, [pc, #24]	; (8010fe4 <MIOS32_DIN_SRChangedGetAndClear+0x2c>)
 8010fcc:	5d1e      	ldrb	r6, [r3, r4]
  mios32_srio_din_changed[sr] &= ~mask;
 8010fce:	5d1a      	ldrb	r2, [r3, r4]
  if( sr >= num_sr )
    return 0x00;

  // get and clear changed flags - must be atomic!
  MIOS32_IRQ_Disable();
  changed = mios32_srio_din_changed[sr] & mask;
 8010fd0:	402e      	ands	r6, r5
  mios32_srio_din_changed[sr] &= ~mask;
 8010fd2:	ea22 0505 	bic.w	r5, r2, r5
 8010fd6:	551d      	strb	r5, [r3, r4]
  MIOS32_IRQ_Enable();
 8010fd8:	f001 fdf6 	bl	8012bc8 <MIOS32_IRQ_Enable>

  return changed;
 8010fdc:	e000      	b.n	8010fe0 <MIOS32_DIN_SRChangedGetAndClear+0x28>
  u8 num_sr = MIOS32_SRIO_ScanNumGet();
  u8 changed;

  // check if SR available
  if( sr >= num_sr )
    return 0x00;
 8010fde:	2600      	movs	r6, #0
  changed = mios32_srio_din_changed[sr] & mask;
  mios32_srio_din_changed[sr] &= ~mask;
  MIOS32_IRQ_Enable();

  return changed;
}
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	bd70      	pop	{r4, r5, r6, pc}
 8010fe4:	20010a8c 	.word	0x20010a8c

08010fe8 <MIOS32_DIN_Handler>:
//! \endcode
//! \param[in] _callback pointer to callback function
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DIN_Handler(void *_callback)
{
 8010fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fec:	4607      	mov	r7, r0
  s32 sr;
  s32 sr_pin;
  u8 changed;
  void (*callback)(u32 pin, u32 value) = _callback;
  u8 num_sr = MIOS32_SRIO_ScanNumGet();
 8010fee:	f7ff ff83 	bl	8010ef8 <MIOS32_SRIO_ScanNumGet>
  // no SRIOs?
#if MIOS32_SRIO_NUM_SR == 0
  return -1;
#endif

  if( num_sr == 0 )
 8010ff2:	4606      	mov	r6, r0
 8010ff4:	b320      	cbz	r0, 8011040 <MIOS32_DIN_Handler+0x58>
    return -1;

  // no callback function?
  if( _callback == NULL )
 8010ff6:	b31f      	cbz	r7, 8011040 <MIOS32_DIN_Handler+0x58>
 8010ff8:	2400      	movs	r4, #0
    return -1;

  // check all shift registers for DIN pin changes
  for(sr=0; sr<num_sr; ++sr) {
 8010ffa:	42b4      	cmp	r4, r6
 8010ffc:	da1d      	bge.n	801103a <MIOS32_DIN_Handler+0x52>
    
    // check if there are pin changes (mask all pins)
    changed = MIOS32_DIN_SRChangedGetAndClear(sr, 0xff);
 8010ffe:	4620      	mov	r0, r4
 8011000:	21ff      	movs	r1, #255	; 0xff
 8011002:	f7ff ffd9 	bl	8010fb8 <MIOS32_DIN_SRChangedGetAndClear>

    // any pin change at this SR?
    if( !changed )
 8011006:	4680      	mov	r8, r0
 8011008:	b908      	cbnz	r0, 801100e <MIOS32_DIN_Handler+0x26>
  // no callback function?
  if( _callback == NULL )
    return -1;

  // check all shift registers for DIN pin changes
  for(sr=0; sr<num_sr; ++sr) {
 801100a:	3401      	adds	r4, #1
 801100c:	e7f5      	b.n	8010ffa <MIOS32_DIN_Handler+0x12>
//!   void DIN_NotifyToggle(u32 pin, u32 value)
//! \endcode
//! \param[in] _callback pointer to callback function
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DIN_Handler(void *_callback)
 801100e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8011012:	2500      	movs	r5, #0
    if( !changed )
      continue;

    // check all 8 pins of the SR
    for(sr_pin=0; sr_pin<8; ++sr_pin)
      if( changed & (1 << sr_pin) ) {
 8011014:	fa48 f305 	asr.w	r3, r8, r5
 8011018:	07db      	lsls	r3, r3, #31
 801101a:	d50a      	bpl.n	8011032 <MIOS32_DIN_Handler+0x4a>
	// call the notification function
	callback(8*sr+sr_pin, (mios32_srio_din[sr] & (1 << sr_pin)) ? 1 : 0);
 801101c:	480a      	ldr	r0, [pc, #40]	; (8011048 <MIOS32_DIN_Handler+0x60>)
 801101e:	5d01      	ldrb	r1, [r0, r4]
 8011020:	fa41 f105 	asr.w	r1, r1, r5
 8011024:	eb05 0009 	add.w	r0, r5, r9
 8011028:	f001 0101 	and.w	r1, r1, #1
 801102c:	47b8      	blx	r7

	// start debouncing (if enabled in SRIO driver)
	MIOS32_SRIO_DebounceStart();
 801102e:	f7ff ff69 	bl	8010f04 <MIOS32_SRIO_DebounceStart>
    // any pin change at this SR?
    if( !changed )
      continue;

    // check all 8 pins of the SR
    for(sr_pin=0; sr_pin<8; ++sr_pin)
 8011032:	3501      	adds	r5, #1
 8011034:	2d08      	cmp	r5, #8
 8011036:	d1ed      	bne.n	8011014 <MIOS32_DIN_Handler+0x2c>
 8011038:	e7e7      	b.n	801100a <MIOS32_DIN_Handler+0x22>
	// start debouncing (if enabled in SRIO driver)
	MIOS32_SRIO_DebounceStart();
      }
  }

  return 0;
 801103a:	2000      	movs	r0, #0
 801103c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#if MIOS32_SRIO_NUM_SR == 0
  return -1;
#endif

  if( num_sr == 0 )
    return -1;
 8011040:	f04f 30ff 	mov.w	r0, #4294967295
	MIOS32_SRIO_DebounceStart();
      }
  }

  return 0;
}
 8011044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011048:	20010abc 	.word	0x20010abc

0801104c <MIOS32_DOUT_Init>:
s32 MIOS32_DOUT_Init(u32 mode)
{
  int i;

  // currently only mode 0 supported
  if( mode != 0 )
 801104c:	b938      	cbnz	r0, 801105e <MIOS32_DOUT_Init+0x12>
 801104e:	4603      	mov	r3, r0

  // clear DOUT part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
#if MIOS32_SRIO_NUM_DOUT_PAGES < 2
    mios32_srio_dout[0][i] = 0;
 8011050:	4a04      	ldr	r2, [pc, #16]	; (8011064 <MIOS32_DOUT_Init+0x18>)
 8011052:	2000      	movs	r0, #0
 8011054:	54d0      	strb	r0, [r2, r3]
  if( mode != 0 )
    return -1; // unsupported mode

  // clear DOUT part of SRIO chain
  // TODO: here we could provide an option to invert the default value
  for(i=0; i<MIOS32_SRIO_NUM_SR; ++i) {
 8011056:	3301      	adds	r3, #1
 8011058:	2b10      	cmp	r3, #16
 801105a:	d1f9      	bne.n	8011050 <MIOS32_DOUT_Init+0x4>
 801105c:	4770      	bx	lr
{
  int i;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 801105e:	f04f 30ff 	mov.w	r0, #4294967295
      mios32_srio_dout[j][i] = 0;
#endif
  }

  return 0;
}
 8011062:	4770      	bx	lr
 8011064:	20010a9c 	.word	0x20010a9c

08011068 <MIOS32_ENC_Init>:
s32 MIOS32_ENC_Init(u32 mode)
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
 8011068:	bb60      	cbnz	r0, 80110c4 <MIOS32_ENC_Init+0x5c>
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
    enc_config[i].cfg.type = DISABLED; // disable encoder
 801106a:	4b18      	ldr	r3, [pc, #96]	; (80110cc <MIOS32_ENC_Init+0x64>)

    enc_state[i].state = 0xf; // all pins released
 801106c:	4918      	ldr	r1, [pc, #96]	; (80110d0 <MIOS32_ENC_Init+0x68>)
  if( mode != 0 )
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
    enc_config[i].cfg.type = DISABLED; // disable encoder
 801106e:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
 8011072:	f36f 0207 	bfc	r2, #0, #8
 8011076:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]

    enc_state[i].state = 0xf; // all pins released
 801107a:	f811 3030 	ldrb.w	r3, [r1, r0, lsl #3]
    enc_state[i].decinc = 0;
 801107e:	f043 020f 	orr.w	r2, r3, #15
 8011082:	f36f 1204 	bfc	r2, #4, #1
 8011086:	f801 2030 	strb.w	r2, [r1, r0, lsl #3]
    enc_state[i].incrementer = 0;
 801108a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801108e:	3001      	adds	r0, #1
 8011090:	784b      	ldrb	r3, [r1, #1]
    enc_state[i].accelerator = 0;
 8011092:	788a      	ldrb	r2, [r1, #2]
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
    enc_config[i].cfg.type = DISABLED; // disable encoder

    enc_state[i].state = 0xf; // all pins released
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
 8011094:	f36f 0307 	bfc	r3, #0, #8
 8011098:	704b      	strb	r3, [r1, #1]
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
 801109a:	78cb      	ldrb	r3, [r1, #3]
    enc_config[i].cfg.type = DISABLED; // disable encoder

    enc_state[i].state = 0xf; // all pins released
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
 801109c:	f36f 0207 	bfc	r2, #0, #8
 80110a0:	708a      	strb	r2, [r1, #2]
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
 80110a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80110a6:	f36f 1207 	bfc	r2, #4, #4
    enc_state[i].prev_acc = 0;
 80110aa:	790b      	ldrb	r3, [r1, #4]
    enc_state[i].state = 0xf; // all pins released
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
 80110ac:	70ca      	strb	r2, [r1, #3]
    enc_state[i].prev_acc = 0;
    enc_state[i].predivider = 0;
 80110ae:	794a      	ldrb	r2, [r1, #5]
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
    enc_state[i].prev_acc = 0;
 80110b0:	f36f 0307 	bfc	r3, #0, #8
    enc_state[i].predivider = 0;
 80110b4:	f36f 0203 	bfc	r2, #0, #4
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
 80110b8:	2840      	cmp	r0, #64	; 0x40
    enc_state[i].decinc = 0;
    enc_state[i].incrementer = 0;
    enc_state[i].accelerator = 0;
    enc_state[i].prev_state_dec = 0;
    enc_state[i].prev_state_inc = 0;
    enc_state[i].prev_acc = 0;
 80110ba:	710b      	strb	r3, [r1, #4]
    enc_state[i].predivider = 0;
 80110bc:	714a      	strb	r2, [r1, #5]
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // clear encoder variables
  for(i=0; i<MIOS32_ENC_NUM_MAX; ++i) {
 80110be:	d1d4      	bne.n	801106a <MIOS32_ENC_Init+0x2>
    enc_state[i].prev_state_inc = 0;
    enc_state[i].prev_acc = 0;
    enc_state[i].predivider = 0;
  }

  return 0; // no error
 80110c0:	2000      	movs	r0, #0
 80110c2:	4770      	bx	lr
{
  u8 i;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80110c4:	f04f 30ff 	mov.w	r0, #4294967295
    enc_state[i].prev_acc = 0;
    enc_state[i].predivider = 0;
  }

  return 0; // no error
}
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop
 80110cc:	20010ad0 	.word	0x20010ad0
 80110d0:	20010bd0 	.word	0x20010bd0

080110d4 <MIOS32_ENC_UpdateStates>:
/////////////////////////////////////////////////////////////////////////////
//! This function has to be called after a SRIO scan to update encoder states
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_ENC_UpdateStates(void)
{
 80110d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d8:	2700      	movs	r7, #0
  u8 enc;

  // check all encoders
  // Note: scanning of 64 encoders takes ca. 30 uS @ 72 MHz :-)
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
    mios32_enc_config_t *enc_config_ptr = &enc_config[enc];
 80110da:	f8df 9260 	ldr.w	r9, [pc, #608]	; 801133c <MIOS32_ENC_UpdateStates+0x268>

    // skip if encoder not configured
    if( enc_config_ptr->cfg.type == DISABLED )
 80110de:	f819 3027 	ldrb.w	r3, [r9, r7, lsl #2]
  u8 enc;

  // check all encoders
  // Note: scanning of 64 encoders takes ca. 30 uS @ 72 MHz :-)
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
    mios32_enc_config_t *enc_config_ptr = &enc_config[enc];
 80110e2:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80110e6:	eb0b 0809 	add.w	r8, fp, r9

    // skip if encoder not configured
    if( enc_config_ptr->cfg.type == DISABLED )
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f000 8118 	beq.w	8011320 <MIOS32_ENC_UpdateStates+0x24c>
      continue;

    enc_state_t *enc_state_ptr = &enc_state[enc];
 80110f0:	4d8f      	ldr	r5, [pc, #572]	; (8011330 <MIOS32_ENC_UpdateStates+0x25c>)
 80110f2:	00fe      	lsls	r6, r7, #3
 80110f4:	1974      	adds	r4, r6, r5

    // decrement accelerator until it is zero (used to determine rotation speed)
    if( enc_state_ptr->accelerator )
 80110f6:	78a0      	ldrb	r0, [r4, #2]
 80110f8:	b108      	cbz	r0, 80110fe <MIOS32_ENC_UpdateStates+0x2a>
      --enc_state_ptr->accelerator;
 80110fa:	1e41      	subs	r1, r0, #1
 80110fc:	70a1      	strb	r1, [r4, #2]

    // take over encoder state from SRIO handler if SR != 0
    // (if SR configured with 0 we expect that the state is controlled from application, e.g. by scanning GPIOs)
    if( enc_config_ptr->cfg.sr != 0 ) {
 80110fe:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011102:	b392      	cbz	r2, 801116a <MIOS32_ENC_UpdateStates+0x96>
      // check if encoder state has been changed, and clear changed flags, so that the changes won't be propagated to DIN handler
      u8 sr = enc_config_ptr->cfg.sr-1;
      u8 pos = enc_config_ptr->cfg.pos;
 8011104:	f898 3001 	ldrb.w	r3, [r8, #1]
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
      enc_state_ptr->last12 = enc_state_ptr->act12;
 8011108:	f816 c005 	ldrb.w	ip, [r6, r5]

    // take over encoder state from SRIO handler if SR != 0
    // (if SR configured with 0 we expect that the state is controlled from application, e.g. by scanning GPIOs)
    if( enc_config_ptr->cfg.sr != 0 ) {
      // check if encoder state has been changed, and clear changed flags, so that the changes won't be propagated to DIN handler
      u8 sr = enc_config_ptr->cfg.sr-1;
 801110c:	f102 3aff 	add.w	sl, r2, #4294967295
      u8 pos = enc_config_ptr->cfg.pos;
 8011110:	095a      	lsrs	r2, r3, #5
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
 8011112:	2003      	movs	r0, #3
 8011114:	f002 0306 	and.w	r3, r2, #6
 8011118:	fa00 f003 	lsl.w	r0, r0, r3
 801111c:	b2c1      	uxtb	r1, r0
      enc_state_ptr->last12 = enc_state_ptr->act12;
 801111e:	4660      	mov	r0, ip
 8011120:	f36c 0083 	bfi	r0, ip, #2, #2
 8011124:	5570      	strb	r0, [r6, r5]

    // take over encoder state from SRIO handler if SR != 0
    // (if SR configured with 0 we expect that the state is controlled from application, e.g. by scanning GPIOs)
    if( enc_config_ptr->cfg.sr != 0 ) {
      // check if encoder state has been changed, and clear changed flags, so that the changes won't be propagated to DIN handler
      u8 sr = enc_config_ptr->cfg.sr-1;
 8011126:	fa5f fa8a 	uxtb.w	sl, sl
      u8 pos = enc_config_ptr->cfg.pos;
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
      enc_state_ptr->last12 = enc_state_ptr->act12;
      if( (mios32_srio_din_changed[sr] & changed_mask) && MIOS32_DIN_SRChangedGetAndClear(sr, changed_mask) ) {
 801112a:	4882      	ldr	r0, [pc, #520]	; (8011334 <MIOS32_ENC_UpdateStates+0x260>)
 801112c:	f810 000a 	ldrb.w	r0, [r0, sl]
 8011130:	4201      	tst	r1, r0
 8011132:	d01a      	beq.n	801116a <MIOS32_ENC_UpdateStates+0x96>
 8011134:	4650      	mov	r0, sl
 8011136:	9201      	str	r2, [sp, #4]
 8011138:	9300      	str	r3, [sp, #0]
 801113a:	f7ff ff3d 	bl	8010fb8 <MIOS32_DIN_SRChangedGetAndClear>
 801113e:	9a01      	ldr	r2, [sp, #4]
 8011140:	9b00      	ldr	r3, [sp, #0]
 8011142:	b190      	cbz	r0, 801116a <MIOS32_ENC_UpdateStates+0x96>
	u8 state = (mios32_srio_din[sr] >> pos_normalized) & 3;
 8011144:	497c      	ldr	r1, [pc, #496]	; (8011338 <MIOS32_ENC_UpdateStates+0x264>)
 8011146:	f811 000a 	ldrb.w	r0, [r1, sl]
 801114a:	fa40 f303 	asr.w	r3, r0, r3
 801114e:	f003 0103 	and.w	r1, r3, #3
	if( pos & 1 ) { // swap pins?
 8011152:	07d2      	lsls	r2, r2, #31
      u8 pos = enc_config_ptr->cfg.pos;
      u8 pos_normalized = pos & 6; // (0, 2, 4 or 6)
      u8 changed_mask = 3 << pos_normalized; // note: by checking mios32_srio_din_changed[sr] directly, we speed up the scanning of unmoved encoders by factor 3!
      enc_state_ptr->last12 = enc_state_ptr->act12;
      if( (mios32_srio_din_changed[sr] & changed_mask) && MIOS32_DIN_SRChangedGetAndClear(sr, changed_mask) ) {
	u8 state = (mios32_srio_din[sr] >> pos_normalized) & 3;
 8011154:	b2cb      	uxtb	r3, r1
	if( pos & 1 ) { // swap pins?
 8011156:	d504      	bpl.n	8011162 <MIOS32_ENC_UpdateStates+0x8e>
	  state = ((state << 1) & 2) | (state >> 1);
 8011158:	004a      	lsls	r2, r1, #1
 801115a:	f002 0002 	and.w	r0, r2, #2
 801115e:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
	}
	enc_state_ptr->act12 = state;
 8011162:	5da9      	ldrb	r1, [r5, r6]
 8011164:	f363 0101 	bfi	r1, r3, #0, #2
 8011168:	5571      	strb	r1, [r6, r5]
      }
    }

    // new encoder state?
    if( enc_state_ptr->last12 != enc_state_ptr->act12 ) {
 801116a:	5d70      	ldrb	r0, [r6, r5]
 801116c:	f3c0 0281 	ubfx	r2, r0, #2, #2
 8011170:	f000 0303 	and.w	r3, r0, #3
 8011174:	429a      	cmp	r2, r3
 8011176:	f000 80d3 	beq.w	8011320 <MIOS32_ENC_UpdateStates+0x24c>
      // INC       ->  ->  ->  ->  
      // ENC_STAT  2   B   D   4
      // Bit N     0   1   2   3 
      // This method is based on ideas from Avogra

      if( (enc_state_ptr->state == 0x01 && (enc_type & (1 << 4))) ||
 801117a:	f000 010f 	and.w	r1, r0, #15
 801117e:	2901      	cmp	r1, #1
      }
    }

    // new encoder state?
    if( enc_state_ptr->last12 != enc_state_ptr->act12 ) {
      mios32_enc_type_t enc_type = enc_config_ptr->cfg.type;
 8011180:	f81b 3009 	ldrb.w	r3, [fp, r9]
      // INC       ->  ->  ->  ->  
      // ENC_STAT  2   B   D   4
      // Bit N     0   1   2   3 
      // This method is based on ideas from Avogra

      if( (enc_state_ptr->state == 0x01 && (enc_type & (1 << 4))) ||
 8011184:	d102      	bne.n	801118c <MIOS32_ENC_UpdateStates+0xb8>
 8011186:	f013 0f10 	tst.w	r3, #16
 801118a:	e00d      	b.n	80111a8 <MIOS32_ENC_UpdateStates+0xd4>
 801118c:	2907      	cmp	r1, #7
 801118e:	d102      	bne.n	8011196 <MIOS32_ENC_UpdateStates+0xc2>
	  (enc_state_ptr->state == 0x07 && (enc_type & (1 << 5))) ||
 8011190:	f013 0f20 	tst.w	r3, #32
 8011194:	e008      	b.n	80111a8 <MIOS32_ENC_UpdateStates+0xd4>
 8011196:	290e      	cmp	r1, #14
 8011198:	d102      	bne.n	80111a0 <MIOS32_ENC_UpdateStates+0xcc>
	  (enc_state_ptr->state == 0x0e && (enc_type & (1 << 6))) ||
 801119a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801119e:	e003      	b.n	80111a8 <MIOS32_ENC_UpdateStates+0xd4>
 80111a0:	2908      	cmp	r1, #8
 80111a2:	d158      	bne.n	8011256 <MIOS32_ENC_UpdateStates+0x182>
	  (enc_state_ptr->state == 0x08 && (enc_type & (1 << 7))) ) {
 80111a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80111a8:	f000 80ba 	beq.w	8011320 <MIOS32_ENC_UpdateStates+0x24c>
	// DEC
	// plausibility check: when accelerator > 0xe0, exit if last event was a INC.
	// if non-detented encoder: only do anything if the state has actually changed
	if( (enc_state_ptr->decinc || enc_state_ptr->accelerator <= 0xe0) && 
 80111ac:	f000 0010 	and.w	r0, r0, #16
 80111b0:	b2c2      	uxtb	r2, r0
 80111b2:	b91a      	cbnz	r2, 80111bc <MIOS32_ENC_UpdateStates+0xe8>
 80111b4:	78a1      	ldrb	r1, [r4, #2]
 80111b6:	29e0      	cmp	r1, #224	; 0xe0
 80111b8:	f200 80b2 	bhi.w	8011320 <MIOS32_ENC_UpdateStates+0x24c>
 80111bc:	2bff      	cmp	r3, #255	; 0xff
 80111be:	d108      	bne.n	80111d2 <MIOS32_ENC_UpdateStates+0xfe>
	    (enc_type != 0xff || enc_state_ptr->state != enc_state_ptr->prev_state_dec) ) {
 80111c0:	5d70      	ldrb	r0, [r6, r5]
 80111c2:	78e3      	ldrb	r3, [r4, #3]
 80111c4:	f000 020f 	and.w	r2, r0, #15
 80111c8:	f003 010f 	and.w	r1, r3, #15
 80111cc:	428a      	cmp	r2, r1
 80111ce:	f000 80a7 	beq.w	8011320 <MIOS32_ENC_UpdateStates+0x24c>
	  // memorize DEC
	  enc_state_ptr->decinc = 1;
 80111d2:	5d70      	ldrb	r0, [r6, r5]
 80111d4:	f040 0310 	orr.w	r3, r0, #16
 80111d8:	5573      	strb	r3, [r6, r5]

	  // limit maximum increase of accelerator
	  if( (int)enc_state_ptr->accelerator - (int)enc_state_ptr->prev_acc > 20) {
 80111da:	7921      	ldrb	r1, [r4, #4]
 80111dc:	78a2      	ldrb	r2, [r4, #2]
 80111de:	1a50      	subs	r0, r2, r1
 80111e0:	2814      	cmp	r0, #20
 80111e2:	dd01      	ble.n	80111e8 <MIOS32_ENC_UpdateStates+0x114>
	    enc_state_ptr->accelerator = enc_state_ptr->prev_acc + 20;
 80111e4:	3114      	adds	r1, #20
 80111e6:	70a1      	strb	r1, [r4, #2]
	  }

	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
 80111e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80111ec:	f013 0103 	ands.w	r1, r3, #3
 80111f0:	d015      	beq.n	801121e <MIOS32_ENC_UpdateStates+0x14a>
 80111f2:	2902      	cmp	r1, #2
 80111f4:	d123      	bne.n	801123e <MIOS32_ENC_UpdateStates+0x16a>
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 80111f6:	78a1      	ldrb	r1, [r4, #2]
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
 80111f8:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80111fc:	f1c3 0007 	rsb	r0, r3, #7
	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 8011200:	f001 02c0 	and.w	r2, r1, #192	; 0xc0
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
	      acc = 1;
 8011204:	fa32 f100 	lsrs.w	r1, r2, r0
	    int new_incrementer = enc_state_ptr->incrementer - acc;
 8011208:	f994 2001 	ldrsb.w	r2, [r4, #1]
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
	      acc = 1;
 801120c:	bf08      	it	eq
 801120e:	2101      	moveq	r1, #1
	    int new_incrementer = enc_state_ptr->incrementer - acc;
 8011210:	1a50      	subs	r0, r2, r1
	    if( new_incrementer < -70 ) // avoid overrun
	      new_incrementer = -70;
	    enc_state_ptr->incrementer = new_incrementer;
 8011212:	f06f 0345 	mvn.w	r3, #69	; 0x45
 8011216:	4298      	cmp	r0, r3
 8011218:	bfb8      	it	lt
 801121a:	4618      	movlt	r0, r3
 801121c:	e011      	b.n	8011242 <MIOS32_ENC_UpdateStates+0x16e>
	  } break;

	  case SLOW:
	    predivider = enc_state_ptr->predivider - (enc_config_ptr->cfg.speed_par+1);
 801121e:	7960      	ldrb	r0, [r4, #5]
 8011220:	f3c3 0282 	ubfx	r2, r3, #2, #3
 8011224:	f000 010f 	and.w	r1, r0, #15
 8011228:	43d3      	mvns	r3, r2
	    // increment on 4bit underrun
	    if( predivider < 0 )
 801122a:	18c8      	adds	r0, r1, r3
 801122c:	d502      	bpl.n	8011234 <MIOS32_ENC_UpdateStates+0x160>
	      --enc_state_ptr->incrementer;
 801122e:	7861      	ldrb	r1, [r4, #1]
 8011230:	1e4a      	subs	r2, r1, #1
 8011232:	7062      	strb	r2, [r4, #1]
	    enc_state_ptr->predivider = predivider;
 8011234:	7963      	ldrb	r3, [r4, #5]
 8011236:	f360 0303 	bfi	r3, r0, #0, #4
 801123a:	7163      	strb	r3, [r4, #5]
	    break;
 801123c:	e002      	b.n	8011244 <MIOS32_ENC_UpdateStates+0x170>

	  default: // NORMAL
	    --enc_state_ptr->incrementer;
 801123e:	7862      	ldrb	r2, [r4, #1]
 8011240:	1e50      	subs	r0, r2, #1
 8011242:	7060      	strb	r0, [r4, #1]
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 8011244:	78a0      	ldrb	r0, [r4, #2]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;

	  // save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_dec = enc_state_ptr->state;
 8011246:	78e3      	ldrb	r3, [r4, #3]
	  default: // NORMAL
	    --enc_state_ptr->incrementer;
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 8011248:	7120      	strb	r0, [r4, #4]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;
 801124a:	21ff      	movs	r1, #255	; 0xff
 801124c:	70a1      	strb	r1, [r4, #2]

	  // save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_dec = enc_state_ptr->state;
 801124e:	5d72      	ldrb	r2, [r6, r5]
 8011250:	f362 0303 	bfi	r3, r2, #0, #4
 8011254:	e063      	b.n	801131e <MIOS32_ENC_UpdateStates+0x24a>
	}
      } else if( (enc_state_ptr->state == 0x02 && (enc_type & (1 << 0))) ||
 8011256:	2902      	cmp	r1, #2
 8011258:	d102      	bne.n	8011260 <MIOS32_ENC_UpdateStates+0x18c>
 801125a:	f013 0f01 	tst.w	r3, #1
 801125e:	e00d      	b.n	801127c <MIOS32_ENC_UpdateStates+0x1a8>
 8011260:	290b      	cmp	r1, #11
 8011262:	d102      	bne.n	801126a <MIOS32_ENC_UpdateStates+0x196>
		 (enc_state_ptr->state == 0x0b && (enc_type & (1 << 1))) ||
 8011264:	f013 0f02 	tst.w	r3, #2
 8011268:	e008      	b.n	801127c <MIOS32_ENC_UpdateStates+0x1a8>
 801126a:	290d      	cmp	r1, #13
 801126c:	d102      	bne.n	8011274 <MIOS32_ENC_UpdateStates+0x1a0>
		 (enc_state_ptr->state == 0x0d && (enc_type & (1 << 2))) ||
 801126e:	f013 0f04 	tst.w	r3, #4
 8011272:	e003      	b.n	801127c <MIOS32_ENC_UpdateStates+0x1a8>
 8011274:	2904      	cmp	r1, #4
 8011276:	d153      	bne.n	8011320 <MIOS32_ENC_UpdateStates+0x24c>
		 (enc_state_ptr->state == 0x04 && (enc_type & (1 << 3))) ) {
 8011278:	f013 0f08 	tst.w	r3, #8
 801127c:	d050      	beq.n	8011320 <MIOS32_ENC_UpdateStates+0x24c>
	// INC
	// plausibility check: when accelerator > 0xe0, exit if last event was a DEC
	// if non-detented encoder: only do anything if the state has actually changed
	if( (!enc_state_ptr->decinc || enc_state_ptr->accelerator <= 0xe0) &&
 801127e:	f000 0010 	and.w	r0, r0, #16
 8011282:	b2c2      	uxtb	r2, r0
 8011284:	b112      	cbz	r2, 801128c <MIOS32_ENC_UpdateStates+0x1b8>
 8011286:	78a1      	ldrb	r1, [r4, #2]
 8011288:	29e0      	cmp	r1, #224	; 0xe0
 801128a:	d849      	bhi.n	8011320 <MIOS32_ENC_UpdateStates+0x24c>
 801128c:	2bff      	cmp	r3, #255	; 0xff
 801128e:	d106      	bne.n	801129e <MIOS32_ENC_UpdateStates+0x1ca>
	    (enc_type != 0xff || enc_state_ptr->state != enc_state_ptr->prev_state_inc) ) {
 8011290:	5d73      	ldrb	r3, [r6, r5]
 8011292:	78e0      	ldrb	r0, [r4, #3]
 8011294:	f003 020f 	and.w	r2, r3, #15
 8011298:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
 801129c:	d040      	beq.n	8011320 <MIOS32_ENC_UpdateStates+0x24c>
	  // memorize INC
	  enc_state_ptr->decinc = 0;
 801129e:	5da9      	ldrb	r1, [r5, r6]
 80112a0:	f36f 1104 	bfc	r1, #4, #1
 80112a4:	5571      	strb	r1, [r6, r5]

	  // limit maximum increase of accelerator
	  if( (int)enc_state_ptr->accelerator - (int)enc_state_ptr->prev_acc > 20) {
 80112a6:	7923      	ldrb	r3, [r4, #4]
 80112a8:	78a0      	ldrb	r0, [r4, #2]
 80112aa:	1ac2      	subs	r2, r0, r3
 80112ac:	2a14      	cmp	r2, #20
 80112ae:	dd01      	ble.n	80112b4 <MIOS32_ENC_UpdateStates+0x1e0>
	    enc_state_ptr->accelerator = enc_state_ptr->prev_acc + 20;
 80112b0:	3314      	adds	r3, #20
 80112b2:	70a3      	strb	r3, [r4, #2]
	  }

	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
 80112b4:	f898 1001 	ldrb.w	r1, [r8, #1]
 80112b8:	f011 0303 	ands.w	r3, r1, #3
 80112bc:	d013      	beq.n	80112e6 <MIOS32_ENC_UpdateStates+0x212>
 80112be:	2b02      	cmp	r3, #2
 80112c0:	d122      	bne.n	8011308 <MIOS32_ENC_UpdateStates+0x234>
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 80112c2:	78a3      	ldrb	r3, [r4, #2]
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
 80112c4:	f3c1 0182 	ubfx	r1, r1, #2, #3
	  // branch depending on speed mode
	  switch( enc_config_ptr->cfg.speed ) {
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
 80112c8:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
 80112cc:	f1c1 0207 	rsb	r2, r1, #7
	      acc = 1;
 80112d0:	fa30 f302 	lsrs.w	r3, r0, r2
	    int new_incrementer = enc_state_ptr->incrementer + acc;
 80112d4:	f994 0001 	ldrsb.w	r0, [r4, #1]
	  case FAST: {
	    // this mask leads to an improved "feeling": we've only 4 speed stages anymore, which especially means that the faster increments won't start so early
	    // see also http://midibox.org/forums/topic/18820-optimizing-encoder-behavior-in-mbsid-firmware/?p=164539
	    u32 speed = enc_state_ptr->accelerator & 0xc0;
	    if( (acc=(speed >> (7-enc_config_ptr->cfg.speed_par))) == 0 )
	      acc = 1;
 80112d8:	bf08      	it	eq
 80112da:	2301      	moveq	r3, #1
	    int new_incrementer = enc_state_ptr->incrementer + acc;
 80112dc:	18c2      	adds	r2, r0, r3
	    if( new_incrementer > 70 ) // avoid overrun
	      new_incrementer = 70;
	    enc_state_ptr->incrementer = new_incrementer;
 80112de:	2a46      	cmp	r2, #70	; 0x46
 80112e0:	bfa8      	it	ge
 80112e2:	2246      	movge	r2, #70	; 0x46
 80112e4:	e012      	b.n	801130c <MIOS32_ENC_UpdateStates+0x238>
	  } break;

	  case SLOW:
	    predivider = enc_state_ptr->predivider + (enc_config_ptr->cfg.speed_par+1);
 80112e6:	7962      	ldrb	r2, [r4, #5]
 80112e8:	f3c1 0182 	ubfx	r1, r1, #2, #3
 80112ec:	1c4b      	adds	r3, r1, #1
 80112ee:	f002 000f 	and.w	r0, r2, #15
 80112f2:	18c0      	adds	r0, r0, r3
	    // increment on 4bit overrun
	    if( predivider >= 16 )
 80112f4:	280f      	cmp	r0, #15
 80112f6:	dd02      	ble.n	80112fe <MIOS32_ENC_UpdateStates+0x22a>
	      ++enc_state_ptr->incrementer;
 80112f8:	7862      	ldrb	r2, [r4, #1]
 80112fa:	1c51      	adds	r1, r2, #1
 80112fc:	7061      	strb	r1, [r4, #1]
	    enc_state_ptr->predivider = predivider;
 80112fe:	7963      	ldrb	r3, [r4, #5]
 8011300:	f360 0303 	bfi	r3, r0, #0, #4
 8011304:	7163      	strb	r3, [r4, #5]
	    break;
 8011306:	e002      	b.n	801130e <MIOS32_ENC_UpdateStates+0x23a>

	  default: // NORMAL
	    ++enc_state_ptr->incrementer;
 8011308:	7860      	ldrb	r0, [r4, #1]
 801130a:	1c42      	adds	r2, r0, #1
 801130c:	7062      	strb	r2, [r4, #1]
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 801130e:	78a0      	ldrb	r0, [r4, #2]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;

	  //save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_inc = enc_state_ptr->state;
 8011310:	78e3      	ldrb	r3, [r4, #3]
	  default: // NORMAL
	    ++enc_state_ptr->incrementer;
	    break;
	  }
	  // save last acceleration value
	  enc_state_ptr->prev_acc = enc_state_ptr->accelerator;
 8011312:	7120      	strb	r0, [r4, #4]

	  // set accelerator to max value (will be decremented on each tick, so that the encoder speed can be determined)
	  enc_state_ptr->accelerator = 0xff;
 8011314:	22ff      	movs	r2, #255	; 0xff
 8011316:	70a2      	strb	r2, [r4, #2]

	  //save last state to compare whether the state changed in the next run
	  enc_state_ptr->prev_state_inc = enc_state_ptr->state;
 8011318:	5d71      	ldrb	r1, [r6, r5]
 801131a:	f361 1307 	bfi	r3, r1, #4, #4
 801131e:	70e3      	strb	r3, [r4, #3]
 8011320:	3701      	adds	r7, #1
{
  u8 enc;

  // check all encoders
  // Note: scanning of 64 encoders takes ca. 30 uS @ 72 MHz :-)
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
 8011322:	2f40      	cmp	r7, #64	; 0x40
 8011324:	f47f aed9 	bne.w	80110da <MIOS32_ENC_UpdateStates+0x6>
	}
      }
    }
  }
  return 0; // no error
}
 8011328:	2000      	movs	r0, #0
 801132a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801132e:	bf00      	nop
 8011330:	20010bd0 	.word	0x20010bd0
 8011334:	20010a8c 	.word	0x20010a8c
 8011338:	20010abc 	.word	0x20010abc
 801133c:	20010ad0 	.word	0x20010ad0

08011340 <MIOS32_ENC_Handler>:
//! \endcode
//! \param[in] _callback pointer to callback function
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_ENC_Handler(void *_callback)
{
 8011340:	b570      	push	{r4, r5, r6, lr}
  u8 enc;
  s32 incrementer;
  void (*callback)(u32 pin, u32 value) = _callback;

  // no callback function?
  if( _callback == NULL )
 8011342:	4606      	mov	r6, r0
 8011344:	b1c0      	cbz	r0, 8011378 <MIOS32_ENC_Handler+0x38>
 8011346:	2400      	movs	r4, #0

  // check all encoders
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {

    // following check/modify operation must be atomic
    MIOS32_IRQ_Disable();
 8011348:	f001 fc2a 	bl	8012ba0 <MIOS32_IRQ_Disable>
    if( (incrementer = enc_state[enc].incrementer) ) {
 801134c:	4b0c      	ldr	r3, [pc, #48]	; (8011380 <MIOS32_ENC_Handler+0x40>)
 801134e:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 8011352:	7845      	ldrb	r5, [r0, #1]
 8011354:	b14d      	cbz	r5, 801136a <MIOS32_ENC_Handler+0x2a>
      enc_state[enc].incrementer = 0;
 8011356:	462a      	mov	r2, r5
 8011358:	f36f 0207 	bfc	r2, #0, #8
 801135c:	7042      	strb	r2, [r0, #1]
      MIOS32_IRQ_Enable();
 801135e:	f001 fc33 	bl	8012bc8 <MIOS32_IRQ_Enable>

      // call the hook
      callback(enc, incrementer);
 8011362:	4620      	mov	r0, r4
 8011364:	b269      	sxtb	r1, r5
 8011366:	47b0      	blx	r6
 8011368:	e001      	b.n	801136e <MIOS32_ENC_Handler+0x2e>
    } else {
      MIOS32_IRQ_Enable();
 801136a:	f001 fc2d 	bl	8012bc8 <MIOS32_IRQ_Enable>
 801136e:	3401      	adds	r4, #1
  // no callback function?
  if( _callback == NULL )
    return -1;

  // check all encoders
  for(enc=0; enc<MIOS32_ENC_NUM_MAX; ++enc) {
 8011370:	2c40      	cmp	r4, #64	; 0x40
 8011372:	d1e9      	bne.n	8011348 <MIOS32_ENC_Handler+0x8>
    } else {
      MIOS32_IRQ_Enable();
    }
  }

  return 0; // no error
 8011374:	2000      	movs	r0, #0
 8011376:	bd70      	pop	{r4, r5, r6, pc}
  s32 incrementer;
  void (*callback)(u32 pin, u32 value) = _callback;

  // no callback function?
  if( _callback == NULL )
    return -1;
 8011378:	f04f 30ff 	mov.w	r0, #4294967295
      MIOS32_IRQ_Enable();
    }
  }

  return 0; // no error
}
 801137c:	bd70      	pop	{r4, r5, r6, pc}
 801137e:	bf00      	nop
 8011380:	20010bd0 	.word	0x20010bd0

08011384 <MIOS32_LCD_ParametersFetchFromBslInfoRange>:
    .num_y = 1,
    .width = 20, // since most people will (probably) build the SCS
    .height = 2,
    .colour_depth = 1,
  };
  mios32_lcd_parameters = default_parameters;
 8011384:	4a10      	ldr	r2, [pc, #64]	; (80113c8 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x44>)
 8011386:	4b11      	ldr	r3, [pc, #68]	; (80113cc <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x48>)
 8011388:	6811      	ldr	r1, [r2, #0]
 801138a:	6850      	ldr	r0, [r2, #4]
 801138c:	8912      	ldrh	r2, [r2, #8]
 801138e:	6019      	str	r1, [r3, #0]

#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
 8011390:	490f      	ldr	r1, [pc, #60]	; (80113d0 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x4c>)
    .num_y = 1,
    .width = 20, // since most people will (probably) build the SCS
    .height = 2,
    .colour_depth = 1,
  };
  mios32_lcd_parameters = default_parameters;
 8011392:	6058      	str	r0, [r3, #4]
 8011394:	811a      	strh	r2, [r3, #8]

#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
 8011396:	7808      	ldrb	r0, [r1, #0]
 8011398:	2842      	cmp	r0, #66	; 0x42
 801139a:	d113      	bne.n	80113c4 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x40>
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
 801139c:	4a0d      	ldr	r2, [pc, #52]	; (80113d4 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x50>)
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 801139e:	480e      	ldr	r0, [pc, #56]	; (80113d8 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x54>)
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
 80113a0:	7811      	ldrb	r1, [r2, #0]
 80113a2:	7019      	strb	r1, [r3, #0]
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 80113a4:	7802      	ldrb	r2, [r0, #0]
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 80113a6:	490d      	ldr	r1, [pc, #52]	; (80113dc <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x58>)
  u8 *lcd_par_confirm = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_CONFIRM;
  if( *lcd_par_confirm == 0x42 ) {
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
 80113a8:	705a      	strb	r2, [r3, #1]
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 80113aa:	7808      	ldrb	r0, [r1, #0]
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
 80113ac:	4a0c      	ldr	r2, [pc, #48]	; (80113e0 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x5c>)
    u8 *lcd_par_type = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_TYPE;
    mios32_lcd_parameters.lcd_type = *lcd_par_type;
    u8 *lcd_par_num_x = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_X;
    mios32_lcd_parameters.num_x = *lcd_par_num_x;
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
 80113ae:	7098      	strb	r0, [r3, #2]
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
 80113b0:	7811      	ldrb	r1, [r2, #0]
    // extra: if width == 255, increase to 256 (255 is very uncommon, and 256 can't be configured due to byte limitation)
    if( mios32_lcd_parameters.width == 255 )
      mios32_lcd_parameters.width = 256; // in future, we could also provide additional codings for higher widths, e.g. 254 for 320 pixel
    u8 *lcd_par_height = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_HEIGHT;
    mios32_lcd_parameters.height = *lcd_par_height;
 80113b2:	4a06      	ldr	r2, [pc, #24]	; (80113cc <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x48>)
    u8 *lcd_par_num_y = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_NUM_Y;
    mios32_lcd_parameters.num_y = *lcd_par_num_y;
    u8 *lcd_par_width = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_WIDTH;
    mios32_lcd_parameters.width = *lcd_par_width;
    // extra: if width == 255, increase to 256 (255 is very uncommon, and 256 can't be configured due to byte limitation)
    if( mios32_lcd_parameters.width == 255 )
 80113b4:	29ff      	cmp	r1, #255	; 0xff
      mios32_lcd_parameters.width = 256; // in future, we could also provide additional codings for higher widths, e.g. 254 for 320 pixel
 80113b6:	bf08      	it	eq
 80113b8:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80113bc:	8099      	strh	r1, [r3, #4]
    u8 *lcd_par_height = (u8 *)MIOS32_SYS_ADDR_LCD_PAR_HEIGHT;
    mios32_lcd_parameters.height = *lcd_par_height;
 80113be:	4b09      	ldr	r3, [pc, #36]	; (80113e4 <MIOS32_LCD_ParametersFetchFromBslInfoRange+0x60>)
 80113c0:	7818      	ldrb	r0, [r3, #0]
 80113c2:	80d0      	strh	r0, [r2, #6]
  }
#endif

  return 0; // no error
}
 80113c4:	2000      	movs	r0, #0
 80113c6:	4770      	bx	lr
 80113c8:	0801c056 	.word	0x0801c056
 80113cc:	20010dd2 	.word	0x20010dd2
 80113d0:	08003fc0 	.word	0x08003fc0
 80113d4:	08003fc1 	.word	0x08003fc1
 80113d8:	08003fc2 	.word	0x08003fc2
 80113dc:	08003fc3 	.word	0x08003fc3
 80113e0:	08003fc4 	.word	0x08003fc4
 80113e4:	08003fc5 	.word	0x08003fc5

080113e8 <MIOS32_LCD_TypeIsGLCD>:
//! setting - if bit #7 is set (>= 0x80), the LCD is a GLCD
//! \return 1 or 0
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_TypeIsGLCD(void)
{
  return mios32_lcd_parameters.lcd_type >= 0x80;
 80113e8:	4b02      	ldr	r3, [pc, #8]	; (80113f4 <MIOS32_LCD_TypeIsGLCD+0xc>)
 80113ea:	f993 0000 	ldrsb.w	r0, [r3]
}
 80113ee:	0fc0      	lsrs	r0, r0, #31
 80113f0:	4770      	bx	lr
 80113f2:	bf00      	nop
 80113f4:	20010dd2 	.word	0x20010dd2

080113f8 <MIOS32_LCD_DeviceSet>:
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 80113f8:	4b01      	ldr	r3, [pc, #4]	; (8011400 <MIOS32_LCD_DeviceSet+0x8>)
 80113fa:	7018      	strb	r0, [r3, #0]

  return 0; // no error
}
 80113fc:	2000      	movs	r0, #0
 80113fe:	4770      	bx	lr
 8011400:	20000180 	.word	0x20000180

08011404 <MIOS32_LCD_CursorSet>:
//! \param[in] column number
//! \param[in] line number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
 8011404:	b510      	push	{r4, lr}
  // set character position
  mios32_lcd_column = column;
 8011406:	4b0b      	ldr	r3, [pc, #44]	; (8011434 <MIOS32_LCD_CursorSet+0x30>)
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 8011408:	4c0b      	ldr	r4, [pc, #44]	; (8011438 <MIOS32_LCD_CursorSet+0x34>)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
  // set character position
  mios32_lcd_column = column;
 801140a:	8018      	strh	r0, [r3, #0]
  mios32_lcd_line = line;
 801140c:	4a0b      	ldr	r2, [pc, #44]	; (801143c <MIOS32_LCD_CursorSet+0x38>)

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 801140e:	88a3      	ldrh	r3, [r4, #4]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorSet(u16 column, u16 line)
{
  // set character position
  mios32_lcd_column = column;
  mios32_lcd_line = line;
 8011410:	8011      	strh	r1, [r2, #0]

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
  if( font_bitmap.width ) {
 8011412:	b113      	cbz	r3, 801141a <MIOS32_LCD_CursorSet+0x16>
    font_width = font_bitmap.width;
 8011414:	b2da      	uxtb	r2, r3
    font_height = font_bitmap.height;
 8011416:	79a3      	ldrb	r3, [r4, #6]
 8011418:	e001      	b.n	801141e <MIOS32_LCD_CursorSet+0x1a>
  mios32_lcd_column = column;
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
  u8 font_height = 8;
 801141a:	2308      	movs	r3, #8
  // set character position
  mios32_lcd_column = column;
  mios32_lcd_line = line;

  // set graphical cursor depending on font width
  u8 font_width = 6;
 801141c:	2206      	movs	r2, #6
  if( font_bitmap.width ) {
    font_width = font_bitmap.width;
    font_height = font_bitmap.height;
  }

  mios32_lcd_x = column * font_width;
 801141e:	4c08      	ldr	r4, [pc, #32]	; (8011440 <MIOS32_LCD_CursorSet+0x3c>)
 8011420:	4342      	muls	r2, r0
 8011422:	8022      	strh	r2, [r4, #0]
  mios32_lcd_y = line * font_height;
 8011424:	4a07      	ldr	r2, [pc, #28]	; (8011444 <MIOS32_LCD_CursorSet+0x40>)
 8011426:	434b      	muls	r3, r1
 8011428:	8013      	strh	r3, [r2, #0]

  // forward new cursor position to app driver
  return APP_LCD_CursorSet(column, line);
}
 801142a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  mios32_lcd_x = column * font_width;
  mios32_lcd_y = line * font_height;

  // forward new cursor position to app driver
  return APP_LCD_CursorSet(column, line);
 801142e:	f008 bb95 	b.w	8019b5c <APP_LCD_CursorSet>
 8011432:	bf00      	nop
 8011434:	20010ddc 	.word	0x20010ddc
 8011438:	20000174 	.word	0x20000174
 801143c:	20010de2 	.word	0x20010de2
 8011440:	20010de4 	.word	0x20010de4
 8011444:	20010dd0 	.word	0x20010dd0

08011448 <MIOS32_LCD_GCursorSet>:
//! \param[in] y position
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_GCursorSet(u16 x, u16 y)
{
  mios32_lcd_x = x;
 8011448:	4b02      	ldr	r3, [pc, #8]	; (8011454 <MIOS32_LCD_GCursorSet+0xc>)
  mios32_lcd_y = y;
 801144a:	4a03      	ldr	r2, [pc, #12]	; (8011458 <MIOS32_LCD_GCursorSet+0x10>)
//! \param[in] y position
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_GCursorSet(u16 x, u16 y)
{
  mios32_lcd_x = x;
 801144c:	8018      	strh	r0, [r3, #0]
  mios32_lcd_y = y;
 801144e:	8011      	strh	r1, [r2, #0]

  // forward new cursor position to app driver
  return APP_LCD_GCursorSet(x, y);
 8011450:	f008 bb1a 	b.w	8019a88 <APP_LCD_GCursorSet>
 8011454:	20010de4 	.word	0x20010de4
 8011458:	20010dd0 	.word	0x20010dd0

0801145c <MIOS32_LCD_CursorMapSet>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorMapSet(u8 map_table[])
{
  s32 i;

  for(i=0; i<MIOS32_LCD_MAX_MAP_LINES; ++i)
 801145c:	2300      	movs	r3, #0
    mios32_lcd_cursor_map[i] = map_table[i];
 801145e:	5cc1      	ldrb	r1, [r0, r3]
 8011460:	4a03      	ldr	r2, [pc, #12]	; (8011470 <MIOS32_LCD_CursorMapSet+0x14>)
 8011462:	5499      	strb	r1, [r3, r2]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_CursorMapSet(u8 map_table[])
{
  s32 i;

  for(i=0; i<MIOS32_LCD_MAX_MAP_LINES; ++i)
 8011464:	3301      	adds	r3, #1
 8011466:	2b04      	cmp	r3, #4
 8011468:	d1f9      	bne.n	801145e <MIOS32_LCD_CursorMapSet+0x2>
    mios32_lcd_cursor_map[i] = map_table[i];

  return 0; // no error
}
 801146a:	2000      	movs	r0, #0
 801146c:	4770      	bx	lr
 801146e:	bf00      	nop
 8011470:	20010dde 	.word	0x20010dde

08011474 <MIOS32_LCD_FontInit>:
//! \param[in] *font pointer to font
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
 8011474:	7882      	ldrb	r2, [r0, #2]
 8011476:	4b07      	ldr	r3, [pc, #28]	; (8011494 <MIOS32_LCD_FontInit+0x20>)
 8011478:	1d11      	adds	r1, r2, #4
 801147a:	1842      	adds	r2, r0, r1
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
 801147c:	7801      	ldrb	r1, [r0, #0]
//! \param[in] *font pointer to font
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
 801147e:	601a      	str	r2, [r3, #0]
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
 8011480:	7842      	ldrb	r2, [r0, #1]
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
 8011482:	78c0      	ldrb	r0, [r0, #3]
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
 8011484:	8099      	strh	r1, [r3, #4]
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
  font_bitmap.colour_depth = 1;
 8011486:	2101      	movs	r1, #1
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
 8011488:	8118      	strh	r0, [r3, #8]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FontInit(u8 *font)
{
  font_bitmap.memory = (u8 *)&font[MIOS32_LCD_FONT_BITMAP_IX] + (size_t)font[MIOS32_LCD_FONT_X0_IX];
  font_bitmap.width = font[MIOS32_LCD_FONT_WIDTH_IX];
  font_bitmap.height = font[MIOS32_LCD_FONT_HEIGHT_IX];
 801148a:	80da      	strh	r2, [r3, #6]
  font_bitmap.line_offset = font[MIOS32_LCD_FONT_OFFSET_IX];
  font_bitmap.colour_depth = 1;
 801148c:	7299      	strb	r1, [r3, #10]

  return 0; // no error
}
 801148e:	2000      	movs	r0, #0
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	20000174 	.word	0x20000174

08011498 <MIOS32_LCD_Clear>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_Clear(void)
{
  // -> forward to app_lcd
  return APP_LCD_Clear();
 8011498:	f008 ba52 	b.w	8019940 <APP_LCD_Clear>

0801149c <MIOS32_LCD_Init>:
//! Initializes LCD driver
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_Init(u32 mode)
{
 801149c:	b513      	push	{r0, r1, r4, lr}
  s32 ret;

  // currently only mode 0 supported
  if( mode != 0 )
 801149e:	4604      	mov	r4, r0
 80114a0:	b9f0      	cbnz	r0, 80114e0 <MIOS32_LCD_Init+0x44>
    return -1; // unsupported mode

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();
 80114a2:	f7ff ff6f 	bl	8011384 <MIOS32_LCD_ParametersFetchFromBslInfoRange>

  // disable font bitmap
  font_bitmap.width = 0;

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 80114a6:	4810      	ldr	r0, [pc, #64]	; (80114e8 <MIOS32_LCD_Init+0x4c>)

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();

  // disable font bitmap
  font_bitmap.width = 0;
 80114a8:	4b10      	ldr	r3, [pc, #64]	; (80114ec <MIOS32_LCD_Init+0x50>)

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 80114aa:	6801      	ldr	r1, [r0, #0]

  // fetch config from BSL info range
  MIOS32_LCD_ParametersFetchFromBslInfoRange();

  // disable font bitmap
  font_bitmap.width = 0;
 80114ac:	809c      	strh	r4, [r3, #4]

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
  MIOS32_LCD_CursorMapSet(cursor_map);
 80114ae:	a801      	add	r0, sp, #4

  // disable font bitmap
  font_bitmap.width = 0;

  // set initial cursor map for character LCDs
  u8 cursor_map[] = {0x00, 0x40, 0x14, 0x54}; // offset line 0/1/2/3
 80114b0:	9101      	str	r1, [sp, #4]
  MIOS32_LCD_CursorMapSet(cursor_map);
 80114b2:	f7ff ffd3 	bl	801145c <MIOS32_LCD_CursorMapSet>
  // the driver is able to modify the default cursor mapping
  // usage example: "dog" LCDs

#if !defined(MIOS32_FAMILY_EMULATION)
  // initial delay - some LCDs need this!
  MIOS32_DELAY_Wait_uS(50000);
 80114b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80114ba:	f002 fa2b 	bl	8013914 <MIOS32_DELAY_Wait_uS>
#endif

  // call application specific init function
  if( (ret=APP_LCD_Init(mode)) < 0 )
 80114be:	4620      	mov	r0, r4
 80114c0:	f008 f892 	bl	80195e8 <APP_LCD_Init>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	db0d      	blt.n	80114e4 <MIOS32_LCD_Init+0x48>
    return ret;

  // clear screen
  MIOS32_LCD_Clear();
 80114c8:	f7ff ffe6 	bl	8011498 <MIOS32_LCD_Clear>

  // set character and graphical cursor to initial position
  MIOS32_LCD_CursorSet(0, 0);
 80114cc:	4621      	mov	r1, r4
 80114ce:	4620      	mov	r0, r4
 80114d0:	f7ff ff98 	bl	8011404 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_GCursorSet(0, 0);
 80114d4:	4620      	mov	r0, r4
 80114d6:	4621      	mov	r1, r4
 80114d8:	f7ff ffb6 	bl	8011448 <MIOS32_LCD_GCursorSet>

  return 0; // no error
 80114dc:	4620      	mov	r0, r4
 80114de:	e001      	b.n	80114e4 <MIOS32_LCD_Init+0x48>
{
  s32 ret;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80114e0:	f04f 30ff 	mov.w	r0, #4294967295
  // set character and graphical cursor to initial position
  MIOS32_LCD_CursorSet(0, 0);
  MIOS32_LCD_GCursorSet(0, 0);

  return 0; // no error
}
 80114e4:	bd1c      	pop	{r2, r3, r4, pc}
 80114e6:	bf00      	nop
 80114e8:	0801c051 	.word	0x0801c051
 80114ec:	20000174 	.word	0x20000174

080114f0 <MIOS32_LCD_PrintChar>:
//! Prints a single character
//! \param[in] c character to be print
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
 80114f0:	b530      	push	{r4, r5, lr}
//! setting - if bit #7 is set (>= 0x80), the LCD is a GLCD
//! \return 1 or 0
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_TypeIsGLCD(void)
{
  return mios32_lcd_parameters.lcd_type >= 0x80;
 80114f2:	4b15      	ldr	r3, [pc, #84]	; (8011548 <MIOS32_LCD_PrintChar+0x58>)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
 80114f4:	f993 1000 	ldrsb.w	r1, [r3]
 80114f8:	2900      	cmp	r1, #0
//! Prints a single character
//! \param[in] c character to be print
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintChar(char c)
{
 80114fa:	b085      	sub	sp, #20
 80114fc:	4605      	mov	r5, r0
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
 80114fe:	da19      	bge.n	8011534 <MIOS32_LCD_PrintChar+0x44>
    if( !font_bitmap.width )
 8011500:	4b12      	ldr	r3, [pc, #72]	; (801154c <MIOS32_LCD_PrintChar+0x5c>)
 8011502:	889a      	ldrh	r2, [r3, #4]
      return -1;    // font not initialized yet!
 8011504:	f04f 30ff 	mov.w	r0, #4294967295
s32 MIOS32_LCD_PrintChar(char c)
{
  s32 status;

  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
    if( !font_bitmap.width )
 8011508:	b1e2      	cbz	r2, 8011544 <MIOS32_LCD_PrintChar+0x54>
      return -1;    // font not initialized yet!

    mios32_lcd_bitmap_t bitmap = font_bitmap;
 801150a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801150e:	ac01      	add	r4, sp, #4
 8011510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011514:	88da      	ldrh	r2, [r3, #6]
 8011516:	891b      	ldrh	r3, [r3, #8]
    bitmap.memory += (bitmap.height>>3) * bitmap.line_offset * (size_t)c;
    status = APP_LCD_BitmapPrint(bitmap);
 8011518:	f8ad 200a 	strh.w	r2, [sp, #10]
  if( MIOS32_LCD_TypeIsGLCD() ) { // GLCD
    if( !font_bitmap.width )
      return -1;    // font not initialized yet!

    mios32_lcd_bitmap_t bitmap = font_bitmap;
    bitmap.memory += (bitmap.height>>3) * bitmap.line_offset * (size_t)c;
 801151c:	08d1      	lsrs	r1, r2, #3
 801151e:	4359      	muls	r1, r3
 8011520:	fb05 0001 	mla	r0, r5, r1, r0
    status = APP_LCD_BitmapPrint(bitmap);
 8011524:	9001      	str	r0, [sp, #4]
 8011526:	f8ad 300c 	strh.w	r3, [sp, #12]
 801152a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801152e:	f008 fb41 	bl	8019bb4 <APP_LCD_BitmapPrint>
 8011532:	e001      	b.n	8011538 <MIOS32_LCD_PrintChar+0x48>
  } else {
    status = APP_LCD_Data(c);
 8011534:	f007 ff5e 	bl	80193f4 <APP_LCD_Data>
  }

  if( status >= 0 ) {
 8011538:	2800      	cmp	r0, #0
 801153a:	db03      	blt.n	8011544 <MIOS32_LCD_PrintChar+0x54>
    // increment cursor
    ++mios32_lcd_column;
 801153c:	4b04      	ldr	r3, [pc, #16]	; (8011550 <MIOS32_LCD_PrintChar+0x60>)
 801153e:	881a      	ldrh	r2, [r3, #0]
 8011540:	1c51      	adds	r1, r2, #1
 8011542:	8019      	strh	r1, [r3, #0]
  }

  return status;
}
 8011544:	b005      	add	sp, #20
 8011546:	bd30      	pop	{r4, r5, pc}
 8011548:	20010dd2 	.word	0x20010dd2
 801154c:	20000174 	.word	0x20000174
 8011550:	20010ddc 	.word	0x20010ddc

08011554 <MIOS32_LCD_PrintString>:
//! Prints a \\0 (zero) terminated string
//! \param[in] str pointer to string
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintString(const char *str)
{
 8011554:	b538      	push	{r3, r4, r5, lr}
/////////////////////////////////////////////////////////////////////////////
//! Prints a \\0 (zero) terminated string
//! \param[in] str pointer to string
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintString(const char *str)
 8011556:	1e45      	subs	r5, r0, #1
{
  s32 status = 0;
 8011558:	2400      	movs	r4, #0

  while( *str != '\0' )
 801155a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801155e:	b118      	cbz	r0, 8011568 <MIOS32_LCD_PrintString+0x14>
    status |= MIOS32_LCD_PrintChar(*str++);
 8011560:	f7ff ffc6 	bl	80114f0 <MIOS32_LCD_PrintChar>
 8011564:	4304      	orrs	r4, r0
 8011566:	e7f8      	b.n	801155a <MIOS32_LCD_PrintString+0x6>

  return status;
}
 8011568:	4620      	mov	r0, r4
 801156a:	bd38      	pop	{r3, r4, r5, pc}

0801156c <MIOS32_LCD_PrintBootMessage>:
//! The message is automatically print by the programming model after each reset.<BR>
//! It will also be returned on a SysEx query.
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintBootMessage(void)
{
 801156c:	b538      	push	{r3, r4, r5, lr}
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 801156e:	4b0b      	ldr	r3, [pc, #44]	; (801159c <MIOS32_LCD_PrintBootMessage+0x30>)
 8011570:	2400      	movs	r4, #0
s32 MIOS32_LCD_PrintBootMessage(void)
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
 8011572:	4621      	mov	r1, r4
 8011574:	4620      	mov	r0, r4
//! \param[in] device LCD device number
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_DeviceSet(u8 device)
{
  mios32_lcd_device = device;
 8011576:	701c      	strb	r4, [r3, #0]
s32 MIOS32_LCD_PrintBootMessage(void)
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
 8011578:	f7ff ff44 	bl	8011404 <MIOS32_LCD_CursorSet>
 801157c:	4605      	mov	r5, r0
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE1);
 801157e:	4808      	ldr	r0, [pc, #32]	; (80115a0 <MIOS32_LCD_PrintBootMessage+0x34>)
 8011580:	f7ff ffe8 	bl	8011554 <MIOS32_LCD_PrintString>
  status |= MIOS32_LCD_CursorSet(0, 1);
 8011584:	2101      	movs	r1, #1
{
  s32 status = 0;

  status |= MIOS32_LCD_DeviceSet(0);
  status |= MIOS32_LCD_CursorSet(0, 0);
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE1);
 8011586:	4305      	orrs	r5, r0
  status |= MIOS32_LCD_CursorSet(0, 1);
 8011588:	4620      	mov	r0, r4
 801158a:	f7ff ff3b 	bl	8011404 <MIOS32_LCD_CursorSet>
 801158e:	4305      	orrs	r5, r0
  status |= MIOS32_LCD_PrintString(MIOS32_LCD_BOOT_MSG_LINE2);
 8011590:	4804      	ldr	r0, [pc, #16]	; (80115a4 <MIOS32_LCD_PrintBootMessage+0x38>)
 8011592:	f7ff ffdf 	bl	8011554 <MIOS32_LCD_PrintString>

  return status;
}
 8011596:	4328      	orrs	r0, r5
 8011598:	bd38      	pop	{r3, r4, r5, pc}
 801159a:	bf00      	nop
 801159c:	20000180 	.word	0x20000180
 80115a0:	0801c0d8 	.word	0x0801c0d8
 80115a4:	0801c0f0 	.word	0x0801c0f0

080115a8 <MIOS32_LCD_PrintFormattedString>:
//! \param[in] *format zero-terminated format string - 64 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintFormattedString(const char *format, ...)
{
 80115a8:	b40f      	push	{r0, r1, r2, r3}
 80115aa:	b500      	push	{lr}
 80115ac:	b093      	sub	sp, #76	; 0x4c
 80115ae:	aa14      	add	r2, sp, #80	; 0x50
  char buffer[64]; // TODO: tmp!!! Provide a streamed COM method later!
  va_list args;

  va_start(args, format);
  vsprintf((char *)buffer, format, args);
 80115b0:	a802      	add	r0, sp, #8
//! \param[in] *format zero-terminated format string - 64 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_PrintFormattedString(const char *format, ...)
{
 80115b2:	f852 1b04 	ldr.w	r1, [r2], #4
  char buffer[64]; // TODO: tmp!!! Provide a streamed COM method later!
  va_list args;

  va_start(args, format);
 80115b6:	9201      	str	r2, [sp, #4]
  vsprintf((char *)buffer, format, args);
 80115b8:	f003 fb47 	bl	8014c4a <vsprintf>
  return MIOS32_LCD_PrintString(buffer);
 80115bc:	a802      	add	r0, sp, #8
 80115be:	f7ff ffc9 	bl	8011554 <MIOS32_LCD_PrintString>
}
 80115c2:	b013      	add	sp, #76	; 0x4c
 80115c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80115c8:	b004      	add	sp, #16
 80115ca:	4770      	bx	lr

080115cc <MIOS32_LCD_BColourSet>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_BColourSet(u32 rgb)
{
  // -> forward to app_lcd
  return APP_LCD_BColourSet(rgb);
 80115cc:	f008 baec 	b.w	8019ba8 <APP_LCD_BColourSet>

080115d0 <MIOS32_LCD_FColourSet>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_LCD_FColourSet(u32 rgb)
{
  // -> forward to app_lcd
  return APP_LCD_FColourSet(rgb);
 80115d0:	f008 baed 	b.w	8019bae <APP_LCD_FColourSet>

080115d4 <MIOS32_MIDI_Init>:
//! Initializes MIDI layer
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Init(u32 mode)
{
 80115d4:	b538      	push	{r3, r4, r5, lr}
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
 80115d6:	4605      	mov	r5, r0
 80115d8:	2800      	cmp	r0, #0
 80115da:	d145      	bne.n	8011668 <MIOS32_MIDI_Init+0x94>
    return -1; // unsupported mode

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
 80115dc:	4a24      	ldr	r2, [pc, #144]	; (8011670 <MIOS32_MIDI_Init+0x9c>)
  debug_port = MIOS32_MIDI_DEBUG_PORT;
 80115de:	4925      	ldr	r1, [pc, #148]	; (8011674 <MIOS32_MIDI_Init+0xa0>)

  // disable callback functions
  direct_rx_callback_func = NULL;
 80115e0:	4c25      	ldr	r4, [pc, #148]	; (8011678 <MIOS32_MIDI_Init+0xa4>)
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
 80115e2:	2310      	movs	r3, #16
 80115e4:	7013      	strb	r3, [r2, #0]
  debug_port = MIOS32_MIDI_DEBUG_PORT;
 80115e6:	700b      	strb	r3, [r1, #0]

  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
 80115e8:	4b24      	ldr	r3, [pc, #144]	; (801167c <MIOS32_MIDI_Init+0xa8>)
  sysex_callback_func = NULL;
 80115ea:	4a25      	ldr	r2, [pc, #148]	; (8011680 <MIOS32_MIDI_Init+0xac>)
  timeout_callback_func = NULL;
 80115ec:	4925      	ldr	r1, [pc, #148]	; (8011684 <MIOS32_MIDI_Init+0xb0>)
  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
  debug_port = MIOS32_MIDI_DEBUG_PORT;

  // disable callback functions
  direct_rx_callback_func = NULL;
 80115ee:	6020      	str	r0, [r4, #0]
  direct_tx_callback_func = NULL;
 80115f0:	6018      	str	r0, [r3, #0]
  sysex_callback_func = NULL;
  timeout_callback_func = NULL;
  debug_command_callback_func = NULL;
 80115f2:	4c25      	ldr	r4, [pc, #148]	; (8011688 <MIOS32_MIDI_Init+0xb4>)
  filebrowser_command_callback_func = NULL;
 80115f4:	4b25      	ldr	r3, [pc, #148]	; (801168c <MIOS32_MIDI_Init+0xb8>)
  debug_port = MIOS32_MIDI_DEBUG_PORT;

  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
  sysex_callback_func = NULL;
 80115f6:	6010      	str	r0, [r2, #0]
  timeout_callback_func = NULL;
 80115f8:	6008      	str	r0, [r1, #0]
  debug_command_callback_func = NULL;
  filebrowser_command_callback_func = NULL;
 80115fa:	6018      	str	r0, [r3, #0]
  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
  sysex_callback_func = NULL;
  timeout_callback_func = NULL;
  debug_command_callback_func = NULL;
 80115fc:	6020      	str	r0, [r4, #0]
  filebrowser_command_callback_func = NULL;

  // initialize interfaces
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
  if( MIOS32_USB_MIDI_Init(0) < 0 )
 80115fe:	f002 fd75 	bl	80140ec <MIOS32_USB_MIDI_Init>
 8011602:	0fc4      	lsrs	r4, r0, #31
    ret |= (1 << 0);
#endif

#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
  if( MIOS32_UART_MIDI_Init(0) < 0 )
 8011604:	4628      	mov	r0, r5
 8011606:	f000 fdbd 	bl	8012184 <MIOS32_UART_MIDI_Init>
 801160a:	2800      	cmp	r0, #0
    ret |= (1 << 1);
 801160c:	bfb8      	it	lt
 801160e:	f044 0402 	orrlt.w	r4, r4, #2
#endif

#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
  if( MIOS32_IIC_MIDI_Init(0) < 0 )
 8011612:	2000      	movs	r0, #0
 8011614:	f000 ff4d 	bl	80124b2 <MIOS32_IIC_MIDI_Init>
 8011618:	2800      	cmp	r0, #0
    ret |= (1 << 2);
 801161a:	bfb8      	it	lt
 801161c:	f044 0404 	orrlt.w	r4, r4, #4
#endif

#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
 8011620:	2000      	movs	r0, #0
 8011622:	f000 ff3b 	bl	801249c <MIOS32_SPI_MIDI_Init>
    ret |= (1 << 3);
#endif

  last_sysex_port = DEFAULT;
 8011626:	4a1a      	ldr	r2, [pc, #104]	; (8011690 <MIOS32_MIDI_Init+0xbc>)
  sysex_state.ALL = 0;
 8011628:	4b1a      	ldr	r3, [pc, #104]	; (8011694 <MIOS32_MIDI_Init+0xc0>)
  if( MIOS32_IIC_MIDI_Init(0) < 0 )
    ret |= (1 << 2);
#endif

#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
 801162a:	2800      	cmp	r0, #0
    ret |= (1 << 3);
 801162c:	bfb8      	it	lt
 801162e:	f044 0408 	orrlt.w	r4, r4, #8
#endif

  last_sysex_port = DEFAULT;
 8011632:	2000      	movs	r0, #0
 8011634:	7010      	strb	r0, [r2, #0]
  sysex_state.ALL = 0;
 8011636:	7819      	ldrb	r1, [r3, #0]

  sysex_device_id = 0x00;
 8011638:	4a17      	ldr	r2, [pc, #92]	; (8011698 <MIOS32_MIDI_Init+0xc4>)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
    ret |= (1 << 3);
#endif

  last_sysex_port = DEFAULT;
  sysex_state.ALL = 0;
 801163a:	f360 0107 	bfi	r1, r0, #0, #8
 801163e:	7019      	strb	r1, [r3, #0]

  sysex_device_id = 0x00;
 8011640:	7010      	strb	r0, [r2, #0]
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *device_id_confirm = (u8 *)MIOS32_SYS_ADDR_DEVICE_ID_CONFIRM;
  u8 *device_id = (u8 *)MIOS32_SYS_ADDR_DEVICE_ID;
  if( *device_id_confirm == 0x42 && *device_id < 0x80 )
 8011642:	4816      	ldr	r0, [pc, #88]	; (801169c <MIOS32_MIDI_Init+0xc8>)
 8011644:	7803      	ldrb	r3, [r0, #0]
 8011646:	2b42      	cmp	r3, #66	; 0x42
 8011648:	d104      	bne.n	8011654 <MIOS32_MIDI_Init+0x80>
 801164a:	4915      	ldr	r1, [pc, #84]	; (80116a0 <MIOS32_MIDI_Init+0xcc>)
 801164c:	7808      	ldrb	r0, [r1, #0]
 801164e:	0601      	lsls	r1, r0, #24
    sysex_device_id = *device_id;
 8011650:	bf58      	it	pl
 8011652:	7010      	strbpl	r0, [r2, #0]
#endif

  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
 8011654:	4b13      	ldr	r3, [pc, #76]	; (80116a4 <MIOS32_MIDI_Init+0xd0>)
  sysex_timeout_ctr_flags.ALL = 0;
 8011656:	4914      	ldr	r1, [pc, #80]	; (80116a8 <MIOS32_MIDI_Init+0xd4>)
  if( *device_id_confirm == 0x42 && *device_id < 0x80 )
    sysex_device_id = *device_id;
#endif

  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
 8011658:	2200      	movs	r2, #0
 801165a:	801a      	strh	r2, [r3, #0]
  sysex_timeout_ctr_flags.ALL = 0;
 801165c:	2200      	movs	r2, #0
 801165e:	2300      	movs	r3, #0
 8011660:	e9c1 2300 	strd	r2, r3, [r1]

  return -ret;
 8011664:	4260      	negs	r0, r4
 8011666:	bd38      	pop	{r3, r4, r5, pc}
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8011668:	f04f 30ff 	mov.w	r0, #4294967295
  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
  sysex_timeout_ctr_flags.ALL = 0;

  return -ret;
}
 801166c:	bd38      	pop	{r3, r4, r5, pc}
 801166e:	bf00      	nop
 8011670:	20000008 	.word	0x20000008
 8011674:	2000000a 	.word	0x2000000a
 8011678:	2000018c 	.word	0x2000018c
 801167c:	20000184 	.word	0x20000184
 8011680:	200001b0 	.word	0x200001b0
 8011684:	200001b4 	.word	0x200001b4
 8011688:	200001a4 	.word	0x200001a4
 801168c:	20000190 	.word	0x20000190
 8011690:	20000194 	.word	0x20000194
 8011694:	2000019c 	.word	0x2000019c
 8011698:	20000196 	.word	0x20000196
 801169c:	08003fd0 	.word	0x08003fd0
 80116a0:	08003fd1 	.word	0x08003fd1
 80116a4:	20000198 	.word	0x20000198
 80116a8:	200001a8 	.word	0x200001a8

080116ac <MIOS32_MIDI_SendPackage>:
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackage(mios32_midi_port_t port, mios32_midi_package_t package)
{
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 80116ac:	f010 0ff0 	tst.w	r0, #240	; 0xf0
//! \param[in] package MIDI package
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackage(mios32_midi_port_t port, mios32_midi_package_t package)
{
 80116b0:	b570      	push	{r4, r5, r6, lr}
 80116b2:	4605      	mov	r5, r0
 80116b4:	460c      	mov	r4, r1
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 80116b6:	d104      	bne.n	80116c2 <MIOS32_MIDI_SendPackage+0x16>
    port = (port == MIDI_DEBUG) ? debug_port : default_port;
 80116b8:	2801      	cmp	r0, #1
 80116ba:	bf0c      	ite	eq
 80116bc:	4b1f      	ldreq	r3, [pc, #124]	; (801173c <MIOS32_MIDI_SendPackage+0x90>)
 80116be:	4b20      	ldrne	r3, [pc, #128]	; (8011740 <MIOS32_MIDI_SendPackage+0x94>)
 80116c0:	781d      	ldrb	r5, [r3, #0]

  // insert subport number into package
  package.cable = port & 0xf;

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
 80116c2:	4b20      	ldr	r3, [pc, #128]	; (8011744 <MIOS32_MIDI_SendPackage+0x98>)
 80116c4:	681a      	ldr	r2, [r3, #0]
  if( !(port & 0xf0) ) {
    port = (port == MIDI_DEBUG) ? debug_port : default_port;
  }

  // insert subport number into package
  package.cable = port & 0xf;
 80116c6:	f005 060f 	and.w	r6, r5, #15

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
 80116ca:	2a00      	cmp	r2, #0
 80116cc:	d118      	bne.n	8011700 <MIOS32_MIDI_SendPackage+0x54>
    if( (status=direct_tx_callback_func(port, package)) )
      return status;
  }

  // branch depending on selected port
  switch( port & 0xf0 ) {
 80116ce:	f005 00f0 	and.w	r0, r5, #240	; 0xf0
 80116d2:	2820      	cmp	r0, #32
 80116d4:	d01c      	beq.n	8011710 <MIOS32_MIDI_SendPackage+0x64>
 80116d6:	d808      	bhi.n	80116ea <MIOS32_MIDI_SendPackage+0x3e>
 80116d8:	2810      	cmp	r0, #16
 80116da:	d12b      	bne.n	8011734 <MIOS32_MIDI_SendPackage+0x88>
    case USB0://..15
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
      return MIOS32_USB_MIDI_PackageSend(package);
 80116dc:	f366 1407 	bfi	r4, r6, #4, #4
 80116e0:	4620      	mov	r0, r4
      
    default:
      // invalid port
      return -1;
  }
}
 80116e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  // branch depending on selected port
  switch( port & 0xf0 ) {
    case USB0://..15
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
      return MIOS32_USB_MIDI_PackageSend(package);
 80116e6:	f002 be03 	b.w	80142f0 <MIOS32_USB_MIDI_PackageSend>
    if( (status=direct_tx_callback_func(port, package)) )
      return status;
  }

  // branch depending on selected port
  switch( port & 0xf0 ) {
 80116ea:	2830      	cmp	r0, #48	; 0x30
 80116ec:	d019      	beq.n	8011722 <MIOS32_MIDI_SendPackage+0x76>
 80116ee:	2850      	cmp	r0, #80	; 0x50
 80116f0:	d120      	bne.n	8011734 <MIOS32_MIDI_SendPackage+0x88>
      return -1; // IIC_MIDI has been disabled
#endif
      
    case SPIM0://..15
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
      return MIOS32_SPI_MIDI_PackageSend(package);
 80116f2:	f366 1407 	bfi	r4, r6, #4, #4
 80116f6:	4620      	mov	r0, r4
      
    default:
      // invalid port
      return -1;
  }
}
 80116f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // IIC_MIDI has been disabled
#endif
      
    case SPIM0://..15
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
      return MIOS32_SPI_MIDI_PackageSend(package);
 80116fc:	f000 bed3 	b.w	80124a6 <MIOS32_SPI_MIDI_PackageSend>
  package.cable = port & 0xf;

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
    s32 status;
    if( (status=direct_tx_callback_func(port, package)) )
 8011700:	f366 1407 	bfi	r4, r6, #4, #4
 8011704:	4628      	mov	r0, r5
 8011706:	4621      	mov	r1, r4
 8011708:	4790      	blx	r2
 801170a:	2800      	cmp	r0, #0
 801170c:	d0df      	beq.n	80116ce <MIOS32_MIDI_SendPackage+0x22>
 801170e:	bd70      	pop	{r4, r5, r6, pc}
      return -1; // USB has been disabled
#endif

    case UART0://..15
#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
      return MIOS32_UART_MIDI_PackageSend(package.cable, package);
 8011710:	f366 1407 	bfi	r4, r6, #4, #4
 8011714:	f005 000f 	and.w	r0, r5, #15
 8011718:	4621      	mov	r1, r4
      
    default:
      // invalid port
      return -1;
  }
}
 801171a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // USB has been disabled
#endif

    case UART0://..15
#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
      return MIOS32_UART_MIDI_PackageSend(package.cable, package);
 801171e:	f000 bddb 	b.w	80122d8 <MIOS32_UART_MIDI_PackageSend>
      return -1; // UART_MIDI has been disabled
#endif

    case IIC0://..15
#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
      return MIOS32_IIC_MIDI_PackageSend(package.cable, package);
 8011722:	f366 1407 	bfi	r4, r6, #4, #4
 8011726:	f005 000f 	and.w	r0, r5, #15
 801172a:	4621      	mov	r1, r4
      
    default:
      // invalid port
      return -1;
  }
}
 801172c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // UART_MIDI has been disabled
#endif

    case IIC0://..15
#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
      return MIOS32_IIC_MIDI_PackageSend(package.cable, package);
 8011730:	f000 bec4 	b.w	80124bc <MIOS32_IIC_MIDI_PackageSend>
      return -1; // SPI_MIDI has been disabled
#endif
      
    default:
      // invalid port
      return -1;
 8011734:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8011738:	bd70      	pop	{r4, r5, r6, pc}
 801173a:	bf00      	nop
 801173c:	2000000a 	.word	0x2000000a
 8011740:	20000008 	.word	0x20000008
 8011744:	20000184 	.word	0x20000184

08011748 <MIOS32_MIDI_SendSysEx>:
//! \param[in] count number of bytes
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendSysEx(mios32_midi_port_t port, u8 *stream, u32 count)
{
 8011748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801174c:	4680      	mov	r8, r0
 801174e:	460e      	mov	r6, r1
 8011750:	4617      	mov	r7, r2
  u32 offset;
  mios32_midi_package_t package;

  // MEMO: have a look into the project.lss file - gcc optimizes this code pretty well :)

  for(offset=0; offset<count;) {
 8011752:	2400      	movs	r4, #0
 8011754:	42bc      	cmp	r4, r7
 8011756:	d235      	bcs.n	80117c4 <MIOS32_MIDI_SendSysEx+0x7c>
    // package type depends on number of remaining bytes
    switch( count-offset ) {
 8011758:	1b3b      	subs	r3, r7, r4
 801175a:	2b02      	cmp	r3, #2
 801175c:	d00d      	beq.n	801177a <MIOS32_MIDI_SendSysEx+0x32>
 801175e:	2b03      	cmp	r3, #3
 8011760:	d019      	beq.n	8011796 <MIOS32_MIDI_SendSysEx+0x4e>
 8011762:	2b01      	cmp	r3, #1
 8011764:	d119      	bne.n	801179a <MIOS32_MIDI_SendSysEx+0x52>
      case 1: 
	package.type = 0x5; // SysEx ends with following single byte. 
	package.evnt0 = stream[offset++];
 8011766:	5d32      	ldrb	r2, [r6, r4]

  for(offset=0; offset<count;) {
    // package type depends on number of remaining bytes
    switch( count-offset ) {
      case 1: 
	package.type = 0x5; // SysEx ends with following single byte. 
 8011768:	2105      	movs	r1, #5
 801176a:	f361 0503 	bfi	r5, r1, #0, #4
	package.evnt0 = stream[offset++];
 801176e:	f362 250f 	bfi	r5, r2, #8, #8
 8011772:	3401      	adds	r4, #1
	package.evnt1 = 0x00;
 8011774:	f36f 4517 	bfc	r5, #16, #8
 8011778:	e00a      	b.n	8011790 <MIOS32_MIDI_SendSysEx+0x48>
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
 801177a:	1931      	adds	r1, r6, r4
	package.evnt1 = 0x00;
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
	package.evnt0 = stream[offset++];
 801177c:	5d30      	ldrb	r0, [r6, r4]
	package.evnt1 = stream[offset++];
 801177e:	784a      	ldrb	r2, [r1, #1]
	package.evnt0 = stream[offset++];
	package.evnt1 = 0x00;
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
 8011780:	2306      	movs	r3, #6
 8011782:	f363 0503 	bfi	r5, r3, #0, #4
	package.evnt0 = stream[offset++];
 8011786:	f360 250f 	bfi	r5, r0, #8, #8
	package.evnt1 = stream[offset++];
 801178a:	f362 4517 	bfi	r5, r2, #16, #8
 801178e:	3402      	adds	r4, #2
	package.evnt2 = 0x00;
 8011790:	f36f 651f 	bfc	r5, #24, #8
	break;
 8011794:	e00f      	b.n	80117b6 <MIOS32_MIDI_SendSysEx+0x6e>
      case 3:
	package.type = 0x7; // SysEx ends with following three bytes. 
 8011796:	2007      	movs	r0, #7
 8011798:	e000      	b.n	801179c <MIOS32_MIDI_SendSysEx+0x54>
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
 801179a:	2004      	movs	r0, #4
 801179c:	f360 0503 	bfi	r5, r0, #0, #4
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
 80117a0:	1930      	adds	r0, r6, r4
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
	package.evnt0 = stream[offset++];
 80117a2:	5d33      	ldrb	r3, [r6, r4]
	package.evnt1 = stream[offset++];
 80117a4:	7841      	ldrb	r1, [r0, #1]
	package.evnt2 = stream[offset++];
 80117a6:	7882      	ldrb	r2, [r0, #2]
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
	package.evnt0 = stream[offset++];
 80117a8:	f363 250f 	bfi	r5, r3, #8, #8
	package.evnt1 = stream[offset++];
 80117ac:	f361 4517 	bfi	r5, r1, #16, #8
	package.evnt2 = stream[offset++];
 80117b0:	f362 651f 	bfi	r5, r2, #24, #8
 80117b4:	3403      	adds	r4, #3
    }

    res=MIOS32_MIDI_SendPackage(port, package);
 80117b6:	4640      	mov	r0, r8
 80117b8:	4629      	mov	r1, r5
 80117ba:	f7ff ff77 	bl	80116ac <MIOS32_MIDI_SendPackage>

    // expection? (e.g., port not available)
    if( res < 0 )
 80117be:	2800      	cmp	r0, #0
 80117c0:	dac8      	bge.n	8011754 <MIOS32_MIDI_SendSysEx+0xc>
 80117c2:	e000      	b.n	80117c6 <MIOS32_MIDI_SendSysEx+0x7e>
      return res;
  }

  return 0;
 80117c4:	2000      	movs	r0, #0
}
 80117c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080117cc <MIOS32_MIDI_SYSEX_SendAckStr>:

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
{
 80117cc:	b530      	push	{r4, r5, lr}
 80117ce:	b0a1      	sub	sp, #132	; 0x84
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 80117d0:	23f0      	movs	r3, #240	; 0xf0
 80117d2:	f88d 3000 	strb.w	r3, [sp]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 80117d6:	4b13      	ldr	r3, [pc, #76]	; (8011824 <MIOS32_MIDI_SYSEX_SendAckStr+0x58>)
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 80117d8:	227e      	movs	r2, #126	; 0x7e
 80117da:	2532      	movs	r5, #50	; 0x32
 80117dc:	f88d 2003 	strb.w	r2, [sp, #3]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 80117e0:	781a      	ldrb	r2, [r3, #0]
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 80117e2:	f88d 5004 	strb.w	r5, [sp, #4]
 80117e6:	2400      	movs	r4, #0

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;
 80117e8:	250f      	movs	r5, #15
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 80117ea:	f88d 4001 	strb.w	r4, [sp, #1]
 80117ee:	f88d 4002 	strb.w	r4, [sp, #2]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 80117f2:	f88d 2005 	strb.w	r2, [sp, #5]

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;
 80117f6:	f88d 5006 	strb.w	r5, [sp, #6]
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 80117fa:	ab02      	add	r3, sp, #8

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 80117fc:	5d0d      	ldrb	r5, [r1, r4]
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 80117fe:	1e5a      	subs	r2, r3, #1

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 8011800:	b135      	cbz	r5, 8011810 <MIOS32_MIDI_SYSEX_SendAckStr+0x44>
 8011802:	3401      	adds	r4, #1
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 8011804:	461a      	mov	r2, r3
  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
    *sysex_buffer_ptr++ = str[i];
 8011806:	f803 5c01 	strb.w	r5, [r3, #-1]
 801180a:	3301      	adds	r3, #1

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 801180c:	2c64      	cmp	r4, #100	; 0x64
 801180e:	d1f5      	bne.n	80117fc <MIOS32_MIDI_SYSEX_SendAckStr+0x30>
    *sysex_buffer_ptr++ = str[i];

  // send footer
  *sysex_buffer_ptr++ = 0xf7;
 8011810:	21f7      	movs	r1, #247	; 0xf7
 8011812:	f802 1b01 	strb.w	r1, [r2], #1

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 8011816:	4669      	mov	r1, sp
 8011818:	1a52      	subs	r2, r2, r1
 801181a:	f7ff ff95 	bl	8011748 <MIOS32_MIDI_SendSysEx>
}
 801181e:	b021      	add	sp, #132	; 0x84
 8011820:	bd30      	pop	{r4, r5, pc}
 8011822:	bf00      	nop
 8011824:	20000196 	.word	0x20000196

08011828 <MIOS32_MIDI_SYSEX_SendAck>:
/////////////////////////////////////////////////////////////////////////////
// This function sends a SysEx acknowledge to notify the user about the received command
// expects acknowledge code (e.g. 0x0f for good, 0x0e for error) and additional argument
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAck(mios32_midi_port_t port, u8 ack_code, u8 ack_arg)
{
 8011828:	b500      	push	{lr}
 801182a:	b089      	sub	sp, #36	; 0x24
  u8 sysex_buffer[32]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 801182c:	23f0      	movs	r3, #240	; 0xf0
 801182e:	f88d 3000 	strb.w	r3, [sp]
 8011832:	2300      	movs	r3, #0
 8011834:	f88d 3001 	strb.w	r3, [sp, #1]
 8011838:	f88d 3002 	strb.w	r3, [sp, #2]
 801183c:	237e      	movs	r3, #126	; 0x7e
 801183e:	f88d 3003 	strb.w	r3, [sp, #3]
 8011842:	2332      	movs	r3, #50	; 0x32
 8011844:	f88d 3004 	strb.w	r3, [sp, #4]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8011848:	4b08      	ldr	r3, [pc, #32]	; (801186c <MIOS32_MIDI_SYSEX_SendAck+0x44>)

  // send ack code and argument
  *sysex_buffer_ptr++ = ack_code;
 801184a:	f88d 1006 	strb.w	r1, [sp, #6]

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 801184e:	781b      	ldrb	r3, [r3, #0]

  // send ack code and argument
  *sysex_buffer_ptr++ = ack_code;
  *sysex_buffer_ptr++ = ack_arg;
 8011850:	f88d 2007 	strb.w	r2, [sp, #7]

  // send footer
  *sysex_buffer_ptr++ = 0xf7;
 8011854:	21f7      	movs	r1, #247	; 0xf7
 8011856:	f88d 1008 	strb.w	r1, [sp, #8]

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 801185a:	2209      	movs	r2, #9
 801185c:	4669      	mov	r1, sp

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 801185e:	f88d 3005 	strb.w	r3, [sp, #5]

  // send footer
  *sysex_buffer_ptr++ = 0xf7;

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 8011862:	f7ff ff71 	bl	8011748 <MIOS32_MIDI_SendSysEx>
}
 8011866:	b009      	add	sp, #36	; 0x24
 8011868:	bd00      	pop	{pc}
 801186a:	bf00      	nop
 801186c:	20000196 	.word	0x20000196

08011870 <MIOS32_MIDI_SendDebugStringHeader>:
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8011870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// unfortunately doesn't work, and runtime check would be unnecessary costly
//#if sizeof(mios32_midi_sysex_header) != 5
//# error "Please adapt MIOS32_MIDI_SendDebugString"
//#endif

  package.type = 0x4; // SysEx starts or continues
 8011874:	2304      	movs	r3, #4
 8011876:	2400      	movs	r4, #0
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8011878:	460e      	mov	r6, r1
// unfortunately doesn't work, and runtime check would be unnecessary costly
//#if sizeof(mios32_midi_sysex_header) != 5
//# error "Please adapt MIOS32_MIDI_SendDebugString"
//#endif

  package.type = 0x4; // SysEx starts or continues
 801187a:	f363 0403 	bfi	r4, r3, #0, #4
  package.evnt0 = mios32_midi_sysex_header[0];
 801187e:	f06f 010f 	mvn.w	r1, #15
 8011882:	f361 240f 	bfi	r4, r1, #8, #8
  package.evnt1 = mios32_midi_sysex_header[1];
 8011886:	f36f 4417 	bfc	r4, #16, #8
  package.evnt2 = mios32_midi_sysex_header[2];
 801188a:	f36f 641f 	bfc	r4, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 801188e:	4621      	mov	r1, r4
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8011890:	4605      	mov	r5, r0
 8011892:	4690      	mov	r8, r2

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[0];
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011894:	f7ff ff0a 	bl	80116ac <MIOS32_MIDI_SendPackage>

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
  package.evnt1 = mios32_midi_sysex_header[4];
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 8011898:	4b0e      	ldr	r3, [pc, #56]	; (80118d4 <MIOS32_MIDI_SendDebugStringHeader+0x64>)

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[0];
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);
 801189a:	4607      	mov	r7, r0

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
 801189c:	207e      	movs	r0, #126	; 0x7e
  package.evnt1 = mios32_midi_sysex_header[4];
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 801189e:	7819      	ldrb	r1, [r3, #0]
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
  package.evnt1 = mios32_midi_sysex_header[4];
 80118a0:	2232      	movs	r2, #50	; 0x32
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
 80118a2:	f360 240f 	bfi	r4, r0, #8, #8
  package.evnt1 = mios32_midi_sysex_header[4];
 80118a6:	f362 4417 	bfi	r4, r2, #16, #8
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 80118aa:	f361 641f 	bfi	r4, r1, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 80118ae:	4621      	mov	r1, r4
 80118b0:	4628      	mov	r0, r5
 80118b2:	f7ff fefb 	bl	80116ac <MIOS32_MIDI_SendPackage>
 80118b6:	4307      	orrs	r7, r0

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = MIOS32_MIDI_SYSEX_DEBUG;
 80118b8:	200d      	movs	r0, #13
 80118ba:	f360 240f 	bfi	r4, r0, #8, #8
  package.evnt1 = command; // output string, usually 0x40
 80118be:	f366 4417 	bfi	r4, r6, #16, #8
  package.evnt2 = first_byte; // will be 0x00 if string already ends (""), thats ok, MIOS Studio can handle this
 80118c2:	f368 641f 	bfi	r4, r8, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 80118c6:	4628      	mov	r0, r5
 80118c8:	4621      	mov	r1, r4
 80118ca:	f7ff feef 	bl	80116ac <MIOS32_MIDI_SendPackage>

  return status;
#endif
}
 80118ce:	4338      	orrs	r0, r7
 80118d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d4:	20000196 	.word	0x20000196

080118d8 <MIOS32_MIDI_SendDebugStringBody>:
//! The string size isn't limited.
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringBody(mios32_midi_port_t port, char *str, u32 len)
{
 80118d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118dc:	4681      	mov	r9, r0
 80118de:	4688      	mov	r8, r1
  return -1;
#else
  s32 status = 0;
  mios32_midi_package_t package;

  if( len > 0 ) {
 80118e0:	4617      	mov	r7, r2
 80118e2:	b352      	cbz	r2, 801193a <MIOS32_MIDI_SendDebugStringBody+0x62>
 80118e4:	460d      	mov	r5, r1
 80118e6:	2600      	movs	r6, #0
    int i = 0;
    for(i=0; i<len; i+=3) {
 80118e8:	ebc8 0305 	rsb	r3, r8, r5
 80118ec:	42bb      	cmp	r3, r7
 80118ee:	d225      	bcs.n	801193c <MIOS32_MIDI_SendDebugStringBody+0x64>
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
 80118f0:	7829      	ldrb	r1, [r5, #0]
    int i = 0;
    for(i=0; i<len; i+=3) {
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
 80118f2:	2004      	movs	r0, #4
 80118f4:	f360 0403 	bfi	r4, r0, #0, #4
      if( (b=str[i+0]) ) {
 80118f8:	b131      	cbz	r1, 8011908 <MIOS32_MIDI_SendDebugStringBody+0x30>
      } else {
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
 80118fa:	786b      	ldrb	r3, [r5, #1]
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
	package.evnt0 = b & 0x7f;
 80118fc:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8011900:	f362 240f 	bfi	r4, r2, #8, #8
      } else {
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
 8011904:	b91b      	cbnz	r3, 801190e <MIOS32_MIDI_SendDebugStringBody+0x36>
 8011906:	e00d      	b.n	8011924 <MIOS32_MIDI_SendDebugStringBody+0x4c>

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
	package.evnt0 = b & 0x7f;
      } else {
	package.evnt0 = 0x00;
 8011908:	f361 240f 	bfi	r4, r1, #8, #8
 801190c:	e00a      	b.n	8011924 <MIOS32_MIDI_SendDebugStringBody+0x4c>
      } else {
	package.evnt1 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+2]) ) {
 801190e:	78a9      	ldrb	r1, [r5, #2]
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
	package.evnt1 = b & 0x7f;
 8011910:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8011914:	f360 4417 	bfi	r4, r0, #16, #8
      } else {
	package.evnt1 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+2]) ) {
 8011918:	b131      	cbz	r1, 8011928 <MIOS32_MIDI_SendDebugStringBody+0x50>
	package.evnt2 = b & 0x7f;
 801191a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 801191e:	f362 641f 	bfi	r4, r2, #24, #8
 8011922:	e003      	b.n	801192c <MIOS32_MIDI_SendDebugStringBody+0x54>
      }

      if( !terminated && (b=str[i+1]) ) {
	package.evnt1 = b & 0x7f;
      } else {
	package.evnt1 = 0x00;
 8011924:	f36f 4417 	bfc	r4, #16, #8
      }

      if( !terminated && (b=str[i+2]) ) {
	package.evnt2 = b & 0x7f;
      } else {
	package.evnt2 = 0x00;
 8011928:	f36f 641f 	bfc	r4, #24, #8
	terminated = 1;
      }

      status |= MIOS32_MIDI_SendPackage(port, package);
 801192c:	4648      	mov	r0, r9
 801192e:	4621      	mov	r1, r4
 8011930:	f7ff febc 	bl	80116ac <MIOS32_MIDI_SendPackage>
 8011934:	3503      	adds	r5, #3
 8011936:	4306      	orrs	r6, r0
 8011938:	e7d6      	b.n	80118e8 <MIOS32_MIDI_SendDebugStringBody+0x10>
{
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
 801193a:	4616      	mov	r6, r2
    }
  }

  return status;
#endif
}
 801193c:	4630      	mov	r0, r6
 801193e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011942 <MIOS32_MIDI_SendDebugStringFooter>:
//! Example: see MIOS32_MIDI_SendDebugStringHeader
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringFooter(mios32_midi_port_t port)
{
 8011942:	b508      	push	{r3, lr}
  return -1;
#else
  s32 status = 0;
  mios32_midi_package_t package;

  package.type = 0x5; // SysEx ends with following single byte. 
 8011944:	2100      	movs	r1, #0
 8011946:	2305      	movs	r3, #5
 8011948:	f363 0103 	bfi	r1, r3, #0, #4
  package.evnt0 = 0xf7;
 801194c:	f06f 0208 	mvn.w	r2, #8
 8011950:	f362 210f 	bfi	r1, r2, #8, #8
  package.evnt1 = 0x00;
  package.evnt2 = 0x00;
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011954:	b289      	uxth	r1, r1
 8011956:	f7ff fea9 	bl	80116ac <MIOS32_MIDI_SendPackage>

  return status;
#endif
}
 801195a:	bd08      	pop	{r3, pc}

0801195c <MIOS32_MIDI_SendDebugString>:
//! The string size isn't limited.
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugString(const char *str)
{
 801195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801195e:	4605      	mov	r5, r0
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);
 8011960:	f00a fa0d 	bl	801bd7e <strlen>

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8011964:	4f0a      	ldr	r7, [pc, #40]	; (8011990 <MIOS32_MIDI_SendDebugString+0x34>)
 8011966:	782a      	ldrb	r2, [r5, #0]
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);
 8011968:	4606      	mov	r6, r0

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 801196a:	2140      	movs	r1, #64	; 0x40
 801196c:	7838      	ldrb	r0, [r7, #0]
 801196e:	f7ff ff7f 	bl	8011870 <MIOS32_MIDI_SendDebugStringHeader>
  if( len >= 2 )
 8011972:	2e01      	cmp	r6, #1
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 8011974:	4604      	mov	r4, r0
  if( len >= 2 )
 8011976:	d905      	bls.n	8011984 <MIOS32_MIDI_SendDebugString+0x28>
    status |= MIOS32_MIDI_SendDebugStringBody(debug_port, (char *)&str[1], len-1);
 8011978:	7838      	ldrb	r0, [r7, #0]
 801197a:	1c69      	adds	r1, r5, #1
 801197c:	1e72      	subs	r2, r6, #1
 801197e:	f7ff ffab 	bl	80118d8 <MIOS32_MIDI_SendDebugStringBody>
 8011982:	4304      	orrs	r4, r0
  status |= MIOS32_MIDI_SendDebugStringFooter(debug_port);
 8011984:	4b02      	ldr	r3, [pc, #8]	; (8011990 <MIOS32_MIDI_SendDebugString+0x34>)
 8011986:	7818      	ldrb	r0, [r3, #0]
 8011988:	f7ff ffdb 	bl	8011942 <MIOS32_MIDI_SendDebugStringFooter>

  return status;
#endif
}
 801198c:	4320      	orrs	r0, r4
 801198e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011990:	2000000a 	.word	0x2000000a

08011994 <MIOS32_MIDI_SendDebugMessage>:
//! \param[in] *format zero-terminated format string - 128 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugMessage(const char *format, ...)
{
 8011994:	b40f      	push	{r0, r1, r2, r3}
 8011996:	b530      	push	{r4, r5, lr}
 8011998:	b0a3      	sub	sp, #140	; 0x8c
 801199a:	9d26      	ldr	r5, [sp, #152]	; 0x98

  // failsave: if format string is longer than 100 chars, break here
  // note that this is a weak protection: if %s is used, or a lot of other format tokens,
  // the resulting string could still lead to a buffer overflow
  // other the other hand we don't want to allocate too many byte for buffer[] to save stack
  if( strlen(format) > 100 ) {
 801199c:	4628      	mov	r0, r5
 801199e:	f00a f9ee 	bl	801bd7e <strlen>
 80119a2:	2864      	cmp	r0, #100	; 0x64
 80119a4:	d901      	bls.n	80119aa <MIOS32_MIDI_SendDebugMessage+0x16>
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
 80119a6:	480e      	ldr	r0, [pc, #56]	; (80119e0 <MIOS32_MIDI_SendDebugMessage+0x4c>)
 80119a8:	e013      	b.n	80119d2 <MIOS32_MIDI_SendDebugMessage+0x3e>
  } else {
    // transform formatted string into string
    va_start(args, format);
    vsprintf(str, format, args);
 80119aa:	ac02      	add	r4, sp, #8
  if( strlen(format) > 100 ) {
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
  } else {
    // transform formatted string into string
    va_start(args, format);
 80119ac:	aa27      	add	r2, sp, #156	; 0x9c
    vsprintf(str, format, args);
 80119ae:	4629      	mov	r1, r5
 80119b0:	4620      	mov	r0, r4
  if( strlen(format) > 100 ) {
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
  } else {
    // transform formatted string into string
    va_start(args, format);
 80119b2:	9201      	str	r2, [sp, #4]
    vsprintf(str, format, args);
 80119b4:	f003 f949 	bl	8014c4a <vsprintf>
  }

  u32 len = strlen(str);
 80119b8:	4620      	mov	r0, r4
 80119ba:	f00a f9e0 	bl	801bd7e <strlen>
  u8 *str_ptr = (u8 *)str;
  int i;
  for(i=0; i<len; ++i) {
 80119be:	2300      	movs	r3, #0
 80119c0:	4283      	cmp	r3, r0
 80119c2:	d005      	beq.n	80119d0 <MIOS32_MIDI_SendDebugMessage+0x3c>
    *str_ptr++ &= 0x7f; // ensure that MIDI protocol won't be violated
 80119c4:	5ce2      	ldrb	r2, [r4, r3]
 80119c6:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 80119ca:	54e1      	strb	r1, [r4, r3]
  }

  u32 len = strlen(str);
  u8 *str_ptr = (u8 *)str;
  int i;
  for(i=0; i<len; ++i) {
 80119cc:	3301      	adds	r3, #1
 80119ce:	e7f7      	b.n	80119c0 <MIOS32_MIDI_SendDebugMessage+0x2c>
    *str_ptr++ &= 0x7f; // ensure that MIDI protocol won't be violated
  }

  return MIOS32_MIDI_SendDebugString(str);
 80119d0:	4620      	mov	r0, r4
 80119d2:	f7ff ffc3 	bl	801195c <MIOS32_MIDI_SendDebugString>
#endif
}
 80119d6:	b023      	add	sp, #140	; 0x8c
 80119d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119dc:	b004      	add	sp, #16
 80119de:	4770      	bx	lr
 80119e0:	0801c14c 	.word	0x0801c14c

080119e4 <MIOS32_MIDI_TimeOut>:

/////////////////////////////////////////////////////////////////////////////
// This function is called if a MIDI parser runs into timeout
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_TimeOut(mios32_midi_port_t port)
{
 80119e4:	b510      	push	{r4, lr}
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
 80119e6:	4b0e      	ldr	r3, [pc, #56]	; (8011a20 <MIOS32_MIDI_TimeOut+0x3c>)
 80119e8:	781a      	ldrb	r2, [r3, #0]
 80119ea:	f002 0108 	and.w	r1, r2, #8

/////////////////////////////////////////////////////////////////////////////
// This function is called if a MIDI parser runs into timeout
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_TimeOut(mios32_midi_port_t port)
{
 80119ee:	4604      	mov	r4, r0
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
 80119f0:	b2c8      	uxtb	r0, r1
 80119f2:	b148      	cbz	r0, 8011a08 <MIOS32_MIDI_TimeOut+0x24>
 80119f4:	490b      	ldr	r1, [pc, #44]	; (8011a24 <MIOS32_MIDI_TimeOut+0x40>)
 80119f6:	7808      	ldrb	r0, [r1, #0]
 80119f8:	42a0      	cmp	r0, r4
 80119fa:	d105      	bne.n	8011a08 <MIOS32_MIDI_TimeOut+0x24>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 80119fc:	f36f 0207 	bfc	r2, #0, #8
 8011a00:	701a      	strb	r2, [r3, #0]
  sysex_cmd = 0;
 8011a02:	4b09      	ldr	r3, [pc, #36]	; (8011a28 <MIOS32_MIDI_TimeOut+0x44>)
 8011a04:	2200      	movs	r2, #0
 8011a06:	701a      	strb	r2, [r3, #0]
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
    MIOS32_MIDI_SYSEX_CmdFinished();

  // optional hook to application
  if( timeout_callback_func != NULL )
 8011a08:	4908      	ldr	r1, [pc, #32]	; (8011a2c <MIOS32_MIDI_TimeOut+0x48>)
 8011a0a:	680a      	ldr	r2, [r1, #0]
 8011a0c:	b10a      	cbz	r2, 8011a12 <MIOS32_MIDI_TimeOut+0x2e>
    timeout_callback_func(port);
 8011a0e:	4620      	mov	r0, r4
 8011a10:	4790      	blx	r2

#ifndef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // this debug message should always be active, so that common users are informed about the exception
  MIOS32_MIDI_SendDebugMessage("[MIOS32_MIDI_Receive_Handler] Timeout on port 0x%02x\n", port);
 8011a12:	4621      	mov	r1, r4
 8011a14:	4806      	ldr	r0, [pc, #24]	; (8011a30 <MIOS32_MIDI_TimeOut+0x4c>)
 8011a16:	f7ff ffbd 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
#endif

  return 0; // no error
}
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	bd10      	pop	{r4, pc}
 8011a1e:	bf00      	nop
 8011a20:	2000019c 	.word	0x2000019c
 8011a24:	20000194 	.word	0x20000194
 8011a28:	20000188 	.word	0x20000188
 8011a2c:	200001b4 	.word	0x200001b4
 8011a30:	0801c19f 	.word	0x0801c19f

08011a34 <MIOS32_MIDI_Periodic_mS>:
//! by a task in the programming model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Periodic_mS(void)
{
 8011a34:	b510      	push	{r4, lr}
  s32 status = 0;

#ifndef MIOS32_DONT_USE_USB_MIDI
  status |= MIOS32_USB_MIDI_Periodic_mS();
 8011a36:	f002 fc9d 	bl	8014374 <MIOS32_USB_MIDI_Periodic_mS>
 8011a3a:	4604      	mov	r4, r0
#endif

#ifndef MIOS32_DONT_USE_UART_MIDI
  status |= MIOS32_UART_MIDI_Periodic_mS();
 8011a3c:	f000 fbc8 	bl	80121d0 <MIOS32_UART_MIDI_Periodic_mS>
 8011a40:	4304      	orrs	r4, r0
#endif

#ifndef MIOS32_DONT_USE_IIC_MIDI
  status |= MIOS32_IIC_MIDI_Periodic_mS();
 8011a42:	f000 fd39 	bl	80124b8 <MIOS32_IIC_MIDI_Periodic_mS>
 8011a46:	4304      	orrs	r4, r0
#endif

#ifndef MIOS32_DONT_USE_SPI_MIDI
  status |= MIOS32_SPI_MIDI_Periodic_mS();
 8011a48:	f000 fd2b 	bl	80124a2 <MIOS32_SPI_MIDI_Periodic_mS>
#endif

  // increment timeout counter for incoming packages
  // an incomplete event will be timed out after 1000 ticks (1 second)
  if( sysex_timeout_ctr < 65535 )
 8011a4c:	4b05      	ldr	r3, [pc, #20]	; (8011a64 <MIOS32_MIDI_Periodic_mS+0x30>)
 8011a4e:	881a      	ldrh	r2, [r3, #0]
 8011a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011a54:	428a      	cmp	r2, r1
#ifndef MIOS32_DONT_USE_IIC_MIDI
  status |= MIOS32_IIC_MIDI_Periodic_mS();
#endif

#ifndef MIOS32_DONT_USE_SPI_MIDI
  status |= MIOS32_SPI_MIDI_Periodic_mS();
 8011a56:	ea44 0000 	orr.w	r0, r4, r0
#endif

  // increment timeout counter for incoming packages
  // an incomplete event will be timed out after 1000 ticks (1 second)
  if( sysex_timeout_ctr < 65535 )
 8011a5a:	d001      	beq.n	8011a60 <MIOS32_MIDI_Periodic_mS+0x2c>
    ++sysex_timeout_ctr;
 8011a5c:	3201      	adds	r2, #1
 8011a5e:	801a      	strh	r2, [r3, #0]

  return status;
}
 8011a60:	bd10      	pop	{r4, pc}
 8011a62:	bf00      	nop
 8011a64:	20000198 	.word	0x20000198

08011a68 <MIOS32_MIDI_SendByteToRxCallback>:
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_byte received MIDI byte
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendByteToRxCallback(mios32_midi_port_t port, u8 midi_byte)
{
 8011a68:	b508      	push	{r3, lr}
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL )
 8011a6a:	4b03      	ldr	r3, [pc, #12]	; (8011a78 <MIOS32_MIDI_SendByteToRxCallback+0x10>)
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	b10a      	cbz	r2, 8011a74 <MIOS32_MIDI_SendByteToRxCallback+0xc>
    return direct_rx_callback_func(port, midi_byte);
 8011a70:	4790      	blx	r2
 8011a72:	bd08      	pop	{r3, pc}
  return 0; // no error
 8011a74:	4610      	mov	r0, r2
}
 8011a76:	bd08      	pop	{r3, pc}
 8011a78:	2000018c 	.word	0x2000018c

08011a7c <MIOS32_MIDI_SendPackageToRxCallback>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011a7c:	4b11      	ldr	r3, [pc, #68]	; (8011ac4 <MIOS32_MIDI_SendPackageToRxCallback+0x48>)
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_package received MIDI package
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8011a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011a80:	681c      	ldr	r4, [r3, #0]
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_package received MIDI package
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8011a82:	4607      	mov	r7, r0
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011a84:	b1e4      	cbz	r4, 8011ac0 <MIOS32_MIDI_SendPackageToRxCallback+0x44>
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011a86:	f3c1 6407 	ubfx	r4, r1, #24, #8
 8011a8a:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8011a8e:	f3c1 4207 	ubfx	r2, r1, #16, #8
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011a92:	4d0d      	ldr	r5, [pc, #52]	; (8011ac8 <MIOS32_MIDI_SendPackageToRxCallback+0x4c>)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011a94:	f88d 4006 	strb.w	r4, [sp, #6]
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011a98:	f001 010f 	and.w	r1, r1, #15
    int i;
    s32 status = 0;
 8011a9c:	2400      	movs	r4, #0
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011a9e:	5c6e      	ldrb	r6, [r5, r1]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011aa0:	f88d 0004 	strb.w	r0, [sp, #4]
 8011aa4:	f88d 2005 	strb.w	r2, [sp, #5]
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
    int i;
    s32 status = 0;
    for(i=0; i<len; ++i)
 8011aa8:	4625      	mov	r5, r4
 8011aaa:	42b5      	cmp	r5, r6
 8011aac:	da08      	bge.n	8011ac0 <MIOS32_MIDI_SendPackageToRxCallback+0x44>
      status |= direct_rx_callback_func(port, buffer[i]);
 8011aae:	aa01      	add	r2, sp, #4
 8011ab0:	4b04      	ldr	r3, [pc, #16]	; (8011ac4 <MIOS32_MIDI_SendPackageToRxCallback+0x48>)
 8011ab2:	5d51      	ldrb	r1, [r2, r5]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	4638      	mov	r0, r7
 8011ab8:	4798      	blx	r3
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
    int i;
    s32 status = 0;
    for(i=0; i<len; ++i)
 8011aba:	3501      	adds	r5, #1
      status |= direct_rx_callback_func(port, buffer[i]);
 8011abc:	4304      	orrs	r4, r0
 8011abe:	e7f4      	b.n	8011aaa <MIOS32_MIDI_SendPackageToRxCallback+0x2e>
    return status;
  }
  return 0; // no error
}
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011ac4:	2000018c 	.word	0x2000018c
 8011ac8:	0801c13c 	.word	0x0801c13c

08011acc <MIOS32_MIDI_DebugPortSet>:
//! \param[in] port MIDI port (USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugPortSet(mios32_midi_port_t port)
{
  if( port == MIDI_DEBUG ) // avoid recursion
 8011acc:	2801      	cmp	r0, #1
 8011ace:	d003      	beq.n	8011ad8 <MIOS32_MIDI_DebugPortSet+0xc>
    return -1;

  debug_port = port;
 8011ad0:	4b03      	ldr	r3, [pc, #12]	; (8011ae0 <MIOS32_MIDI_DebugPortSet+0x14>)
 8011ad2:	7018      	strb	r0, [r3, #0]
 
  return 0; // no error
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	4770      	bx	lr
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugPortSet(mios32_midi_port_t port)
{
  if( port == MIDI_DEBUG ) // avoid recursion
    return -1;
 8011ad8:	f04f 30ff 	mov.w	r0, #4294967295

  debug_port = port;
 
  return 0; // no error
}
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	2000000a 	.word	0x2000000a

08011ae4 <MIOS32_MIDI_SYSEX_Cmd>:

/////////////////////////////////////////////////////////////////////////////
// This function handles the sysex commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
 8011ae4:	b530      	push	{r4, r5, lr}
 8011ae6:	460b      	mov	r3, r1
 8011ae8:	4611      	mov	r1, r2
#if MIOS32_MIDI_BSL_ENHANCEMENTS
  // this compile switch should only be activated for the bootloader!
  if( BSL_SYSEX_Cmd(port, cmd_state, midi_in, sysex_cmd) >= 0 )
    return 0; // BSL has serviced this command - no error
#endif
  switch( sysex_cmd ) {
 8011aea:	4a5a      	ldr	r2, [pc, #360]	; (8011c54 <MIOS32_MIDI_SYSEX_Cmd+0x170>)
 8011aec:	7815      	ldrb	r5, [r2, #0]
 8011aee:	2d0d      	cmp	r5, #13

/////////////////////////////////////////////////////////////////////////////
// This function handles the sysex commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
 8011af0:	b08b      	sub	sp, #44	; 0x2c
 8011af2:	4604      	mov	r4, r0
#if MIOS32_MIDI_BSL_ENHANCEMENTS
  // this compile switch should only be activated for the bootloader!
  if( BSL_SYSEX_Cmd(port, cmd_state, midi_in, sysex_cmd) >= 0 )
    return 0; // BSL has serviced this command - no error
#endif
  switch( sysex_cmd ) {
 8011af4:	d057      	beq.n	8011ba6 <MIOS32_MIDI_SYSEX_Cmd+0xc2>
 8011af6:	d801      	bhi.n	8011afc <MIOS32_MIDI_SYSEX_Cmd+0x18>
 8011af8:	b13d      	cbz	r5, 8011b0a <MIOS32_MIDI_SYSEX_Cmd+0x26>
 8011afa:	e09a      	b.n	8011c32 <MIOS32_MIDI_SYSEX_Cmd+0x14e>
 8011afc:	2d0e      	cmp	r5, #14
 8011afe:	f000 80a5 	beq.w	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
 8011b02:	2d0f      	cmp	r5, #15
 8011b04:	f040 8095 	bne.w	8011c32 <MIOS32_MIDI_SYSEX_Cmd+0x14e>
 8011b08:	e087      	b.n	8011c1a <MIOS32_MIDI_SYSEX_Cmd+0x136>
 8011b0a:	4a53      	ldr	r2, [pc, #332]	; (8011c58 <MIOS32_MIDI_SYSEX_Cmd+0x174>)
static s32 MIOS32_MIDI_SYSEX_Cmd_Query(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
  static u8 query_req = 0;
  char str_buffer[40];

  switch( cmd_state ) {
 8011b0c:	b11b      	cbz	r3, 8011b16 <MIOS32_MIDI_SYSEX_Cmd+0x32>
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	d103      	bne.n	8011b1a <MIOS32_MIDI_SYSEX_Cmd+0x36>
    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      query_req = 0;
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
 8011b12:	7011      	strb	r1, [r2, #0]
 8011b14:	e09a      	b.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
  char str_buffer[40];

  switch( cmd_state ) {

    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      query_req = 0;
 8011b16:	7013      	strb	r3, [r2, #0]
 8011b18:	e098      	b.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011b1a:	7811      	ldrb	r1, [r2, #0]
 8011b1c:	2905      	cmp	r1, #5
 8011b1e:	d028      	beq.n	8011b72 <MIOS32_MIDI_SYSEX_Cmd+0x8e>
 8011b20:	d810      	bhi.n	8011b44 <MIOS32_MIDI_SYSEX_Cmd+0x60>
 8011b22:	2902      	cmp	r1, #2
 8011b24:	d01f      	beq.n	8011b66 <MIOS32_MIDI_SYSEX_Cmd+0x82>
 8011b26:	d803      	bhi.n	8011b30 <MIOS32_MIDI_SYSEX_Cmd+0x4c>
 8011b28:	2901      	cmp	r1, #1
 8011b2a:	d138      	bne.n	8011b9e <MIOS32_MIDI_SYSEX_Cmd+0xba>
	      MIOS32_MIDI_SendActiveSense(port);
	      MIOS32_USB_MIDI_Periodic_mS();
	    }
	  }
#endif
	  MIOS32_MIDI_SYSEX_SendAckStr(port, "MIOS32");
 8011b2c:	494b      	ldr	r1, [pc, #300]	; (8011c5c <MIOS32_MIDI_SYSEX_Cmd+0x178>)
 8011b2e:	e01b      	b.n	8011b68 <MIOS32_MIDI_SYSEX_Cmd+0x84>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011b30:	2903      	cmp	r1, #3
 8011b32:	d01c      	beq.n	8011b6e <MIOS32_MIDI_SYSEX_Cmd+0x8a>
 8011b34:	2904      	cmp	r1, #4
 8011b36:	d132      	bne.n	8011b9e <MIOS32_MIDI_SYSEX_Cmd+0xba>
	  break;
        case 0x03: // Core Family
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_FAMILY_STR);
	  break;
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
 8011b38:	f000 ff30 	bl	801299c <MIOS32_SYS_ChipIDGet>
 8011b3c:	4948      	ldr	r1, [pc, #288]	; (8011c60 <MIOS32_MIDI_SYSEX_Cmd+0x17c>)
 8011b3e:	4602      	mov	r2, r0
 8011b40:	4668      	mov	r0, sp
 8011b42:	e023      	b.n	8011b8c <MIOS32_MIDI_SYSEX_Cmd+0xa8>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011b44:	2908      	cmp	r1, #8
 8011b46:	d026      	beq.n	8011b96 <MIOS32_MIDI_SYSEX_Cmd+0xb2>
 8011b48:	d806      	bhi.n	8011b58 <MIOS32_MIDI_SYSEX_Cmd+0x74>
 8011b4a:	2906      	cmp	r1, #6
 8011b4c:	d019      	beq.n	8011b82 <MIOS32_MIDI_SYSEX_Cmd+0x9e>
 8011b4e:	2907      	cmp	r1, #7
 8011b50:	d125      	bne.n	8011b9e <MIOS32_MIDI_SYSEX_Cmd+0xba>
        case 0x06: // Flash Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_FlashSizeGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  break;
        case 0x07: // RAM Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_RAMSizeGet());
 8011b52:	f000 ff31 	bl	80129b8 <MIOS32_SYS_RAMSizeGet>
 8011b56:	e016      	b.n	8011b86 <MIOS32_MIDI_SYSEX_Cmd+0xa2>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 8011b58:	2909      	cmp	r1, #9
 8011b5a:	d01e      	beq.n	8011b9a <MIOS32_MIDI_SYSEX_Cmd+0xb6>
 8011b5c:	297f      	cmp	r1, #127	; 0x7f
 8011b5e:	d11e      	bne.n	8011b9e <MIOS32_MIDI_SYSEX_Cmd+0xba>
#if MIOS32_MIDI_BSL_ENHANCEMENTS
	  // release halt state (or sending upload request) instead of reseting the core
	  BSL_SYSEX_ReleaseHaltState();
#else
	  // reset core (this will send an upload request)
	  MIOS32_SYS_Reset();
 8011b60:	f000 fec6 	bl	80128f0 <MIOS32_SYS_Reset>
 8011b64:	e072      	b.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	  }
#endif
	  MIOS32_MIDI_SYSEX_SendAckStr(port, "MIOS32");
	  break;
        case 0x02: // Board
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_BOARD_STR);
 8011b66:	493f      	ldr	r1, [pc, #252]	; (8011c64 <MIOS32_MIDI_SYSEX_Cmd+0x180>)
 8011b68:	f7ff fe30 	bl	80117cc <MIOS32_MIDI_SYSEX_SendAckStr>
 8011b6c:	e06e      	b.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	  break;
        case 0x03: // Core Family
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_FAMILY_STR);
 8011b6e:	493e      	ldr	r1, [pc, #248]	; (8011c68 <MIOS32_MIDI_SYSEX_Cmd+0x184>)
 8011b70:	e7fa      	b.n	8011b68 <MIOS32_MIDI_SYSEX_Cmd+0x84>
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, (char *)str_buffer);
	  break;
        case 0x05: // Serial Number
	  if( MIOS32_SYS_SerialNumberGet((char *)str_buffer) >= 0 )
 8011b72:	4668      	mov	r0, sp
 8011b74:	f000 ff24 	bl	80129c0 <MIOS32_SYS_SerialNumberGet>
 8011b78:	2800      	cmp	r0, #0
	    MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
 8011b7a:	4620      	mov	r0, r4
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, (char *)str_buffer);
	  break;
        case 0x05: // Serial Number
	  if( MIOS32_SYS_SerialNumberGet((char *)str_buffer) >= 0 )
 8011b7c:	da09      	bge.n	8011b92 <MIOS32_MIDI_SYSEX_Cmd+0xae>
	    MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  else
	    MIOS32_MIDI_SYSEX_SendAckStr(port, "?");
 8011b7e:	493b      	ldr	r1, [pc, #236]	; (8011c6c <MIOS32_MIDI_SYSEX_Cmd+0x188>)
 8011b80:	e7f2      	b.n	8011b68 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x06: // Flash Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_FlashSizeGet());
 8011b82:	f000 ff11 	bl	80129a8 <MIOS32_SYS_FlashSizeGet>
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  break;
        case 0x07: // RAM Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_RAMSizeGet());
 8011b86:	493a      	ldr	r1, [pc, #232]	; (8011c70 <MIOS32_MIDI_SYSEX_Cmd+0x18c>)
 8011b88:	4602      	mov	r2, r0
 8011b8a:	4668      	mov	r0, sp
 8011b8c:	f003 f84e 	bl	8014c2c <sprintf>
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
 8011b90:	4620      	mov	r0, r4
 8011b92:	4669      	mov	r1, sp
 8011b94:	e7e8      	b.n	8011b68 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x08: // Application Name Line #1
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_LCD_BOOT_MSG_LINE1);
 8011b96:	4937      	ldr	r1, [pc, #220]	; (8011c74 <MIOS32_MIDI_SYSEX_Cmd+0x190>)
 8011b98:	e7e6      	b.n	8011b68 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x09: // Application Name Line #2
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_LCD_BOOT_MSG_LINE2);
 8011b9a:	4937      	ldr	r1, [pc, #220]	; (8011c78 <MIOS32_MIDI_SYSEX_Cmd+0x194>)
 8011b9c:	e7e4      	b.n	8011b68 <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  // but other core families could contain an empty stumb!
#endif
	  break;
        default: 
	  // unknown query
	  MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNKNOWN_QUERY);
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	210e      	movs	r1, #14
 8011ba2:	220d      	movs	r2, #13
 8011ba4:	e042      	b.n	8011c2c <MIOS32_MIDI_SYSEX_Cmd+0x148>
 8011ba6:	4d35      	ldr	r5, [pc, #212]	; (8011c7c <MIOS32_MIDI_SYSEX_Cmd+0x198>)
  if( cmd_state == MIOS32_MIDI_SYSEX_CMD_STATE_END )
    MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNSUPPORTED_DEBUG);
#else
  static u8 debug_req = 0xff;

  switch( cmd_state ) {
 8011ba8:	b113      	cbz	r3, 8011bb0 <MIOS32_MIDI_SYSEX_Cmd+0xcc>
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d115      	bne.n	8011bda <MIOS32_MIDI_SYSEX_Cmd+0xf6>
 8011bae:	e002      	b.n	8011bb6 <MIOS32_MIDI_SYSEX_Cmd+0xd2>

    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      debug_req = 0xff;
 8011bb0:	21ff      	movs	r1, #255	; 0xff
 8011bb2:	7029      	strb	r1, [r5, #0]
 8011bb4:	e04a      	b.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      if( debug_req == 0xff ) {
 8011bb6:	782b      	ldrb	r3, [r5, #0]
 8011bb8:	2bff      	cmp	r3, #255	; 0xff
 8011bba:	d101      	bne.n	8011bc0 <MIOS32_MIDI_SYSEX_Cmd+0xdc>
	debug_req = midi_in;
 8011bbc:	7029      	strb	r1, [r5, #0]
 8011bbe:	e045      	b.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
      } else {
	switch( debug_req ) {
 8011bc0:	b11b      	cbz	r3, 8011bca <MIOS32_MIDI_SYSEX_Cmd+0xe6>
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	d142      	bne.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	    if( debug_command_callback_func != NULL )
	      debug_command_callback_func(last_sysex_port, (char)midi_in);
	    break;

	  case 0x01: // input string to filebrowser
	    if( filebrowser_command_callback_func != NULL )
 8011bc6:	4a2e      	ldr	r2, [pc, #184]	; (8011c80 <MIOS32_MIDI_SYSEX_Cmd+0x19c>)
 8011bc8:	e000      	b.n	8011bcc <MIOS32_MIDI_SYSEX_Cmd+0xe8>
      if( debug_req == 0xff ) {
	debug_req = midi_in;
      } else {
	switch( debug_req ) {
	  case 0x00: // input string
	    if( debug_command_callback_func != NULL )
 8011bca:	4a2e      	ldr	r2, [pc, #184]	; (8011c84 <MIOS32_MIDI_SYSEX_Cmd+0x1a0>)
	      debug_command_callback_func(last_sysex_port, (char)midi_in);
	    break;

	  case 0x01: // input string to filebrowser
	    if( filebrowser_command_callback_func != NULL )
 8011bcc:	6813      	ldr	r3, [r2, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d03c      	beq.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	      filebrowser_command_callback_func(last_sysex_port, (char)midi_in);
 8011bd2:	482d      	ldr	r0, [pc, #180]	; (8011c88 <MIOS32_MIDI_SYSEX_Cmd+0x1a4>)
 8011bd4:	7800      	ldrb	r0, [r0, #0]
 8011bd6:	4798      	blx	r3
 8011bd8:	e038      	b.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	}
      }
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      if( debug_req == 0x00 ) {
 8011bda:	782a      	ldrb	r2, [r5, #0]
 8011bdc:	b9a2      	cbnz	r2, 8011c08 <MIOS32_MIDI_SYSEX_Cmd+0x124>
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);
 8011bde:	210f      	movs	r1, #15
 8011be0:	f7ff fe22 	bl	8011828 <MIOS32_MIDI_SYSEX_SendAck>

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
 8011be4:	7829      	ldrb	r1, [r5, #0]
 8011be6:	2900      	cmp	r1, #0
 8011be8:	d130      	bne.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
 8011bea:	4a26      	ldr	r2, [pc, #152]	; (8011c84 <MIOS32_MIDI_SYSEX_Cmd+0x1a0>)
 8011bec:	6810      	ldr	r0, [r2, #0]
 8011bee:	bb68      	cbnz	r0, 8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
//! This function returns the MIDI_DEBUG port
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
 8011bf0:	4d26      	ldr	r5, [pc, #152]	; (8011c8c <MIOS32_MIDI_SYSEX_Cmd+0x1a8>)
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
	  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
	  MIOS32_MIDI_DebugPortSet(port);
 8011bf2:	4620      	mov	r0, r4
//! This function returns the MIDI_DEBUG port
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
 8011bf4:	782d      	ldrb	r5, [r5, #0]
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
	  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
	  MIOS32_MIDI_DebugPortSet(port);
 8011bf6:	f7ff ff69 	bl	8011acc <MIOS32_MIDI_DebugPortSet>
	  MIOS32_MIDI_SendDebugString("[MIOS32_MIDI_SYSEX_Cmd_Debug] command handler not implemented by application\n");
 8011bfa:	4825      	ldr	r0, [pc, #148]	; (8011c90 <MIOS32_MIDI_SYSEX_Cmd+0x1ac>)
 8011bfc:	f7ff feae 	bl	801195c <MIOS32_MIDI_SendDebugString>
	  MIOS32_MIDI_DebugPortSet(prev_debug_port);
 8011c00:	4628      	mov	r0, r5
 8011c02:	f7ff ff63 	bl	8011acc <MIOS32_MIDI_DebugPortSet>
 8011c06:	e021      	b.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	}

      } else if( debug_req == 0x01 && filebrowser_command_callback_func != NULL ) {
 8011c08:	2a01      	cmp	r2, #1
 8011c0a:	d102      	bne.n	8011c12 <MIOS32_MIDI_SYSEX_Cmd+0x12e>
 8011c0c:	481c      	ldr	r0, [pc, #112]	; (8011c80 <MIOS32_MIDI_SYSEX_Cmd+0x19c>)
 8011c0e:	6803      	ldr	r3, [r0, #0]
 8011c10:	b9e3      	cbnz	r3, 8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	// we expect that the filebrowser handler sends back a string
      } else {
	// send disacknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNSUPPORTED_DEBUG);
 8011c12:	4620      	mov	r0, r4
 8011c14:	210e      	movs	r1, #14
 8011c16:	2210      	movs	r2, #16
 8011c18:	e008      	b.n	8011c2c <MIOS32_MIDI_SYSEX_Cmd+0x148>
 8011c1a:	4a1e      	ldr	r2, [pc, #120]	; (8011c94 <MIOS32_MIDI_SYSEX_Cmd+0x1b0>)
/////////////////////////////////////////////////////////////////////////////
// Command 0F: Ping (just send back acknowledge if no additional byte has been received)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd_Ping(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
  switch( cmd_state ) {
 8011c1c:	b10b      	cbz	r3, 8011c22 <MIOS32_MIDI_SYSEX_Cmd+0x13e>
 8011c1e:	2b01      	cmp	r3, #1
 8011c20:	d101      	bne.n	8011c26 <MIOS32_MIDI_SYSEX_Cmd+0x142>
    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      sysex_state.ping.PING_BYTE_RECEIVED = 0;
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      sysex_state.ping.PING_BYTE_RECEIVED = 1;
 8011c22:	6053      	str	r3, [r2, #4]
 8011c24:	e012      	b.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      // TODO: send 0xf7 if merger enabled

      // send acknowledge if no additional byte has been received
      // to avoid feedback loop if two cores are directly connected
      if( !sysex_state.ping.PING_BYTE_RECEIVED )
 8011c26:	6852      	ldr	r2, [r2, #4]
 8011c28:	b982      	cbnz	r2, 8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);
 8011c2a:	4629      	mov	r1, r5
 8011c2c:	f7ff fdfc 	bl	8011828 <MIOS32_MIDI_SYSEX_SendAck>
 8011c30:	e00c      	b.n	8011c4c <MIOS32_MIDI_SYSEX_Cmd+0x168>
      MIOS32_MIDI_SYSEX_Cmd_Ping(port, cmd_state, midi_in);
      break;
    default:
      // unknown command
      // TODO: send 0xf7 if merger enabled
      MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_INVALID_COMMAND);
 8011c32:	210e      	movs	r1, #14
 8011c34:	460a      	mov	r2, r1
 8011c36:	4620      	mov	r0, r4
 8011c38:	f7ff fdf6 	bl	8011828 <MIOS32_MIDI_SYSEX_SendAck>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011c3c:	4815      	ldr	r0, [pc, #84]	; (8011c94 <MIOS32_MIDI_SYSEX_Cmd+0x1b0>)
  sysex_cmd = 0;
 8011c3e:	4905      	ldr	r1, [pc, #20]	; (8011c54 <MIOS32_MIDI_SYSEX_Cmd+0x170>)
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011c40:	7803      	ldrb	r3, [r0, #0]
  sysex_cmd = 0;
 8011c42:	2200      	movs	r2, #0
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011c44:	f36f 0307 	bfc	r3, #0, #8
 8011c48:	7003      	strb	r3, [r0, #0]
  sysex_cmd = 0;
 8011c4a:	700a      	strb	r2, [r1, #0]
      MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_INVALID_COMMAND);
      MIOS32_MIDI_SYSEX_CmdFinished();      
  }

  return 0; // no error
}
 8011c4c:	2000      	movs	r0, #0
 8011c4e:	b00b      	add	sp, #44	; 0x2c
 8011c50:	bd30      	pop	{r4, r5, pc}
 8011c52:	bf00      	nop
 8011c54:	20000188 	.word	0x20000188
 8011c58:	20000195 	.word	0x20000195
 8011c5c:	0801c1e1 	.word	0x0801c1e1
 8011c60:	0801bf00 	.word	0x0801bf00
 8011c64:	0801c1e8 	.word	0x0801c1e8
 8011c68:	0801c1fa 	.word	0x0801c1fa
 8011c6c:	0801c204 	.word	0x0801c204
 8011c70:	0801c206 	.word	0x0801c206
 8011c74:	0801c0d8 	.word	0x0801c0d8
 8011c78:	0801c0f0 	.word	0x0801c0f0
 8011c7c:	20000009 	.word	0x20000009
 8011c80:	20000190 	.word	0x20000190
 8011c84:	200001a4 	.word	0x200001a4
 8011c88:	20000194 	.word	0x20000194
 8011c8c:	2000000a 	.word	0x2000000a
 8011c90:	0801c209 	.word	0x0801c209
 8011c94:	2000019c 	.word	0x2000019c

08011c98 <MIOS32_MIDI_SYSEX_Parser>:
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
 8011c98:	29f7      	cmp	r1, #247	; 0xf7

/////////////////////////////////////////////////////////////////////////////
// This function parses an incoming sysex stream for MIOS32 commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
 8011c9a:	b510      	push	{r4, lr}
 8011c9c:	460a      	mov	r2, r1
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
 8011c9e:	d85a      	bhi.n	8011d56 <MIOS32_MIDI_SYSEX_Parser+0xbe>
    return 0;

  // TODO: here we could send an error notification, that multiple devices are trying to access the device
  if( sysex_state.general.MY_SYSEX && port != last_sysex_port )
 8011ca0:	4b2e      	ldr	r3, [pc, #184]	; (8011d5c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011ca2:	7819      	ldrb	r1, [r3, #0]
 8011ca4:	f001 0308 	and.w	r3, r1, #8
 8011ca8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8011cac:	b11b      	cbz	r3, 8011cb6 <MIOS32_MIDI_SYSEX_Parser+0x1e>
 8011cae:	4b2c      	ldr	r3, [pc, #176]	; (8011d60 <MIOS32_MIDI_SYSEX_Parser+0xc8>)
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	4283      	cmp	r3, r0
 8011cb4:	d14c      	bne.n	8011d50 <MIOS32_MIDI_SYSEX_Parser+0xb8>
  // USB upload is only allowed via USB0
  // this covers the scenario where other USB1..7 ports are used for MIDI Port forwarding, and a MIOS8 core
  // is connected to one of these ports
  // MIOS Studio reports "Detected MIOS8 and MIOS32 response - selection not supported yet!" in this case
  // By ignoring >= USB1 <= USB7 we have at least a workaround which works (for example) for MIDIbox LC
  if( port >= USB1 && port <= USB7 )
 8011cb6:	f1a0 0311 	sub.w	r3, r0, #17
 8011cba:	2b06      	cmp	r3, #6
 8011cbc:	d948      	bls.n	8011d50 <MIOS32_MIDI_SYSEX_Parser+0xb8>
    return -1;

  last_sysex_port = port;
 8011cbe:	4b28      	ldr	r3, [pc, #160]	; (8011d60 <MIOS32_MIDI_SYSEX_Parser+0xc8>)
 8011cc0:	7018      	strb	r0, [r3, #0]

  // branch depending on state
  if( !sysex_state.general.MY_SYSEX ) {
 8011cc2:	bb04      	cbnz	r4, 8011d06 <MIOS32_MIDI_SYSEX_Parser+0x6e>
    if( (sysex_state.general.CTR < sizeof(mios32_midi_sysex_header) && midi_in != mios32_midi_sysex_header[sysex_state.general.CTR]) ||
 8011cc4:	4825      	ldr	r0, [pc, #148]	; (8011d5c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011cc6:	7803      	ldrb	r3, [r0, #0]
 8011cc8:	f003 0307 	and.w	r3, r3, #7
 8011ccc:	2b04      	cmp	r3, #4
 8011cce:	d803      	bhi.n	8011cd8 <MIOS32_MIDI_SYSEX_Parser+0x40>
 8011cd0:	4824      	ldr	r0, [pc, #144]	; (8011d64 <MIOS32_MIDI_SYSEX_Parser+0xcc>)
 8011cd2:	5cc0      	ldrb	r0, [r0, r3]
 8011cd4:	4290      	cmp	r0, r2
 8011cd6:	d121      	bne.n	8011d1c <MIOS32_MIDI_SYSEX_Parser+0x84>
 8011cd8:	f001 0107 	and.w	r1, r1, #7
 8011cdc:	2905      	cmp	r1, #5
 8011cde:	d103      	bne.n	8011ce8 <MIOS32_MIDI_SYSEX_Parser+0x50>
	(sysex_state.general.CTR == sizeof(mios32_midi_sysex_header) && midi_in != sysex_device_id) ) {
 8011ce0:	4821      	ldr	r0, [pc, #132]	; (8011d68 <MIOS32_MIDI_SYSEX_Parser+0xd0>)
 8011ce2:	7801      	ldrb	r1, [r0, #0]
 8011ce4:	4291      	cmp	r1, r2
 8011ce6:	d119      	bne.n	8011d1c <MIOS32_MIDI_SYSEX_Parser+0x84>
      // incoming byte doesn't match
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      if( ++sysex_state.general.CTR > sizeof(mios32_midi_sysex_header) ) {
 8011ce8:	1c5a      	adds	r2, r3, #1
 8011cea:	4b1c      	ldr	r3, [pc, #112]	; (8011d5c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011cec:	7819      	ldrb	r1, [r3, #0]
 8011cee:	f002 0007 	and.w	r0, r2, #7
 8011cf2:	f360 0102 	bfi	r1, r0, #0, #3
 8011cf6:	2805      	cmp	r0, #5
 8011cf8:	7019      	strb	r1, [r3, #0]
 8011cfa:	d92c      	bls.n	8011d56 <MIOS32_MIDI_SYSEX_Parser+0xbe>
	// complete header received, waiting for data
	sysex_state.general.MY_SYSEX = 1;
 8011cfc:	b2ca      	uxtb	r2, r1
 8011cfe:	f042 0008 	orr.w	r0, r2, #8
 8011d02:	7018      	strb	r0, [r3, #0]
 8011d04:	e027      	b.n	8011d56 <MIOS32_MIDI_SYSEX_Parser+0xbe>
      }
    }
  } else {
    // check for end of SysEx message or invalid status byte
    if( midi_in >= 0x80 ) {
 8011d06:	0613      	lsls	r3, r2, #24
 8011d08:	d511      	bpl.n	8011d2e <MIOS32_MIDI_SYSEX_Parser+0x96>
      if( midi_in == 0xf7 && sysex_state.general.CMD ) {
 8011d0a:	2af7      	cmp	r2, #247	; 0xf7
 8011d0c:	d106      	bne.n	8011d1c <MIOS32_MIDI_SYSEX_Parser+0x84>
 8011d0e:	f001 0110 	and.w	r1, r1, #16
 8011d12:	b2cb      	uxtb	r3, r1
 8011d14:	b113      	cbz	r3, 8011d1c <MIOS32_MIDI_SYSEX_Parser+0x84>
      	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_END, midi_in);
 8011d16:	2102      	movs	r1, #2
 8011d18:	f7ff fee4 	bl	8011ae4 <MIOS32_MIDI_SYSEX_Cmd>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011d1c:	4b0f      	ldr	r3, [pc, #60]	; (8011d5c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
  sysex_cmd = 0;
 8011d1e:	4a13      	ldr	r2, [pc, #76]	; (8011d6c <MIOS32_MIDI_SYSEX_Parser+0xd4>)
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011d20:	7819      	ldrb	r1, [r3, #0]
  sysex_cmd = 0;
 8011d22:	2000      	movs	r0, #0
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011d24:	f36f 0107 	bfc	r1, #0, #8
 8011d28:	7019      	strb	r1, [r3, #0]
  sysex_cmd = 0;
 8011d2a:	7010      	strb	r0, [r2, #0]
 8011d2c:	bd10      	pop	{r4, pc}
      	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_END, midi_in);
      }
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      // check if command byte has been received
      if( !sysex_state.general.CMD ) {
 8011d2e:	f001 0410 	and.w	r4, r1, #16
 8011d32:	b2e4      	uxtb	r4, r4
 8011d34:	b944      	cbnz	r4, 8011d48 <MIOS32_MIDI_SYSEX_Parser+0xb0>
	sysex_state.general.CMD = 1;
 8011d36:	4b09      	ldr	r3, [pc, #36]	; (8011d5c <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011d38:	7819      	ldrb	r1, [r3, #0]
 8011d3a:	f041 0110 	orr.w	r1, r1, #16
 8011d3e:	7019      	strb	r1, [r3, #0]
	sysex_cmd = midi_in;
 8011d40:	4b0a      	ldr	r3, [pc, #40]	; (8011d6c <MIOS32_MIDI_SYSEX_Parser+0xd4>)
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN, midi_in);
 8011d42:	4621      	mov	r1, r4
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      // check if command byte has been received
      if( !sysex_state.general.CMD ) {
	sysex_state.general.CMD = 1;
	sysex_cmd = midi_in;
 8011d44:	701a      	strb	r2, [r3, #0]
 8011d46:	e000      	b.n	8011d4a <MIOS32_MIDI_SYSEX_Parser+0xb2>
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN, midi_in);
      }
      else
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_CONT, midi_in);
 8011d48:	2101      	movs	r1, #1
 8011d4a:	f7ff fecb 	bl	8011ae4 <MIOS32_MIDI_SYSEX_Cmd>
 8011d4e:	e002      	b.n	8011d56 <MIOS32_MIDI_SYSEX_Parser+0xbe>
  if( midi_in >= 0xf8 )
    return 0;

  // TODO: here we could send an error notification, that multiple devices are trying to access the device
  if( sysex_state.general.MY_SYSEX && port != last_sysex_port )
    return -1;
 8011d50:	f04f 30ff 	mov.w	r0, #4294967295
 8011d54:	bd10      	pop	{r4, pc}
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
    return 0;
 8011d56:	2000      	movs	r0, #0
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_CONT, midi_in);
    }
  }

  return 0; // no error
}
 8011d58:	bd10      	pop	{r4, pc}
 8011d5a:	bf00      	nop
 8011d5c:	2000019c 	.word	0x2000019c
 8011d60:	20000194 	.word	0x20000194
 8011d64:	0801c25f 	.word	0x0801c25f
 8011d68:	20000196 	.word	0x20000196
 8011d6c:	20000188 	.word	0x20000188

08011d70 <MIOS32_MIDI_ReceivePackage>:
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 8011d70:	f001 0c0f 	and.w	ip, r1, #15
 8011d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d78:	4688      	mov	r8, r1
 8011d7a:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8011d7e:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8011d82:	ea4f 6a11 	mov.w	sl, r1, lsr #24

  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;

  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 8011d86:	f10c 0108 	add.w	r1, ip, #8
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 8011d8a:	4617      	mov	r7, r2

  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;

  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 8011d8c:	f001 020f 	and.w	r2, r1, #15
 8011d90:	2a06      	cmp	r2, #6
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 8011d92:	4606      	mov	r6, r0

  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;

  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 8011d94:	d803      	bhi.n	8011d9e <MIOS32_MIDI_ReceivePackage+0x2e>
    if( callback_package != NULL )
 8011d96:	2f00      	cmp	r7, #0
 8011d98:	f040 808a 	bne.w	8011eb0 <MIOS32_MIDI_ReceivePackage+0x140>
 8011d9c:	e0f3      	b.n	8011f86 <MIOS32_MIDI_ReceivePackage+0x216>
      callback_package(port, package);
  } else {
    // service SysEx timeout counter
    if( package.evnt0 == 0xf0 || // for package.type == 0xf
 8011d9e:	2df0      	cmp	r5, #240	; 0xf0
 8011da0:	d005      	beq.n	8011dae <MIOS32_MIDI_ReceivePackage+0x3e>
	(package.type >= 4 && package.type <= 7) ) {
 8011da2:	f10c 000c 	add.w	r0, ip, #12
  if( package.type >= 0x8 && package.type < 0xf ) {
    if( callback_package != NULL )
      callback_package(port, package);
  } else {
    // service SysEx timeout counter
    if( package.evnt0 == 0xf0 || // for package.type == 0xf
 8011da6:	f000 030f 	and.w	r3, r0, #15
 8011daa:	2b03      	cmp	r3, #3
 8011dac:	d828      	bhi.n	8011e00 <MIOS32_MIDI_ReceivePackage+0x90>
	(package.type >= 4 && package.type <= 7) ) {
      // cheap timeout mechanism - see comments above the sysex_timeout_ctr declaration
      if( !sysex_timeout_ctr_flags.ALL ) {
 8011dae:	4977      	ldr	r1, [pc, #476]	; (8011f8c <MIOS32_MIDI_ReceivePackage+0x21c>)
 8011db0:	e9d1 2300 	ldrd	r2, r3, [r1]
 8011db4:	4313      	orrs	r3, r2
 8011db6:	d123      	bne.n	8011e00 <MIOS32_MIDI_ReceivePackage+0x90>
	switch( port & 0xf0 ) {
 8011db8:	f006 04f0 	and.w	r4, r6, #240	; 0xf0
 8011dbc:	2c30      	cmp	r4, #48	; 0x30
 8011dbe:	f04f 0000 	mov.w	r0, #0
 8011dc2:	d00c      	beq.n	8011dde <MIOS32_MIDI_ReceivePackage+0x6e>
 8011dc4:	2c50      	cmp	r4, #80	; 0x50
 8011dc6:	d013      	beq.n	8011df0 <MIOS32_MIDI_ReceivePackage+0x80>
 8011dc8:	2c10      	cmp	r4, #16
 8011dca:	d119      	bne.n	8011e00 <MIOS32_MIDI_ReceivePackage+0x90>
	case USB0://..15
	  sysex_timeout_ctr = 0;
 8011dcc:	4c70      	ldr	r4, [pc, #448]	; (8011f90 <MIOS32_MIDI_ReceivePackage+0x220>)
	  sysex_timeout_ctr_flags.usb_receives = (1 << (port & 0xf));
 8011dce:	f006 030f 	and.w	r3, r6, #15
	(package.type >= 4 && package.type <= 7) ) {
      // cheap timeout mechanism - see comments above the sysex_timeout_ctr declaration
      if( !sysex_timeout_ctr_flags.ALL ) {
	switch( port & 0xf0 ) {
	case USB0://..15
	  sysex_timeout_ctr = 0;
 8011dd2:	8020      	strh	r0, [r4, #0]
	  sysex_timeout_ctr_flags.usb_receives = (1 << (port & 0xf));
 8011dd4:	2401      	movs	r4, #1
 8011dd6:	fa04 f203 	lsl.w	r2, r4, r3
 8011dda:	800a      	strh	r2, [r1, #0]
	  break;
 8011ddc:	e010      	b.n	8011e00 <MIOS32_MIDI_ReceivePackage+0x90>
	case UART0://..15
	  // already done in MIOS32_UART_MIDI_PackageReceive()
	  break;
	case IIC0://..15
	  sysex_timeout_ctr = 0;
 8011dde:	4a6c      	ldr	r2, [pc, #432]	; (8011f90 <MIOS32_MIDI_ReceivePackage+0x220>)
	  sysex_timeout_ctr_flags.iic_receives = (1 << (port & 0xf));
 8011de0:	2401      	movs	r4, #1
	  break;
	case UART0://..15
	  // already done in MIOS32_UART_MIDI_PackageReceive()
	  break;
	case IIC0://..15
	  sysex_timeout_ctr = 0;
 8011de2:	8010      	strh	r0, [r2, #0]
	  sysex_timeout_ctr_flags.iic_receives = (1 << (port & 0xf));
 8011de4:	f006 000f 	and.w	r0, r6, #15
 8011de8:	fa04 f300 	lsl.w	r3, r4, r0
 8011dec:	804b      	strh	r3, [r1, #2]
	  break;
 8011dee:	e007      	b.n	8011e00 <MIOS32_MIDI_ReceivePackage+0x90>
	case SPIM0://..15
	  sysex_timeout_ctr = 0;
 8011df0:	4c67      	ldr	r4, [pc, #412]	; (8011f90 <MIOS32_MIDI_ReceivePackage+0x220>)
 8011df2:	8020      	strh	r0, [r4, #0]
	  sysex_timeout_ctr_flags.spi_receives = (1 << (port & 0xf));
 8011df4:	f006 000f 	and.w	r0, r6, #15
 8011df8:	2401      	movs	r4, #1
 8011dfa:	fa04 f300 	lsl.w	r3, r4, r0
 8011dfe:	808b      	strh	r3, [r1, #4]
	}
      }
    }

    u8 filter_sysex = 0;
    switch( package.type ) {
 8011e00:	f1ac 0102 	sub.w	r1, ip, #2
 8011e04:	290d      	cmp	r1, #13
 8011e06:	f200 80be 	bhi.w	8011f86 <MIOS32_MIDI_ReceivePackage+0x216>
 8011e0a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8011e0e:	004e      	.short	0x004e
 8011e10:	000e004e 	.word	0x000e004e
 8011e14:	0054004c 	.word	0x0054004c
 8011e18:	00bc0054 	.word	0x00bc0054
 8011e1c:	00bc00bc 	.word	0x00bc00bc
 8011e20:	00bc00bc 	.word	0x00bc00bc
 8011e24:	00bc00bc 	.word	0x00bc00bc
 8011e28:	000e      	.short	0x000e
      break;

    case 0x4: // SysEx starts or continues (3 bytes)
    case 0xf: // Single byte is interpreted as SysEx as well (I noticed that portmidi sometimes sends single bytes!)

      if( package.evnt0 >= 0xf8 ) { // relevant for package type 0xf
 8011e2a:	2df7      	cmp	r5, #247	; 0xf7
 8011e2c:	d83d      	bhi.n	8011eaa <MIOS32_MIDI_ReceivePackage+0x13a>
	if( callback_package != NULL )
	  callback_package(port, package); // -> realtime event is forwarded as event
	break;
      }

      MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
 8011e2e:	4630      	mov	r0, r6
 8011e30:	4629      	mov	r1, r5
      if( package.type != 0x0f ) {
 8011e32:	f36f 1807 	bfc	r8, #4, #4
	if( callback_package != NULL )
	  callback_package(port, package); // -> realtime event is forwarded as event
	break;
      }

      MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
 8011e36:	f7ff ff2f 	bl	8011c98 <MIOS32_MIDI_SYSEX_Parser>
      if( package.type != 0x0f ) {
 8011e3a:	f008 020f 	and.w	r2, r8, #15
 8011e3e:	2a0f      	cmp	r2, #15
 8011e40:	9201      	str	r2, [sp, #4]
 8011e42:	d007      	beq.n	8011e54 <MIOS32_MIDI_ReceivePackage+0xe4>
	MIOS32_MIDI_SYSEX_Parser(port, package.evnt1); // -> forward to MIOS32 SysEx Parser
 8011e44:	4659      	mov	r1, fp
 8011e46:	4630      	mov	r0, r6
 8011e48:	f7ff ff26 	bl	8011c98 <MIOS32_MIDI_SYSEX_Parser>
	MIOS32_MIDI_SYSEX_Parser(port, package.evnt2); // -> forward to MIOS32 SysEx Parser
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	4651      	mov	r1, sl
 8011e50:	f7ff ff22 	bl	8011c98 <MIOS32_MIDI_SYSEX_Parser>
      }

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011e54:	484f      	ldr	r0, [pc, #316]	; (8011f94 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011e56:	7803      	ldrb	r3, [r0, #0]
 8011e58:	f003 0108 	and.w	r1, r3, #8
 8011e5c:	b2ca      	uxtb	r2, r1
 8011e5e:	2a00      	cmp	r2, #0
 8011e60:	f040 8091 	bne.w	8011f86 <MIOS32_MIDI_ReceivePackage+0x216>
	if( sysex_callback_func != NULL ) {
 8011e64:	4c4c      	ldr	r4, [pc, #304]	; (8011f98 <MIOS32_MIDI_ReceivePackage+0x228>)
 8011e66:	6823      	ldr	r3, [r4, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	f000 808a 	beq.w	8011f82 <MIOS32_MIDI_ReceivePackage+0x212>
	  filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
 8011e6e:	4630      	mov	r0, r6
 8011e70:	4629      	mov	r1, r5
 8011e72:	4798      	blx	r3
 8011e74:	4681      	mov	r9, r0
 8011e76:	b2c3      	uxtb	r3, r0
	  if( package.type != 0x0f ) {
 8011e78:	9801      	ldr	r0, [sp, #4]
 8011e7a:	280f      	cmp	r0, #15
 8011e7c:	d00e      	beq.n	8011e9c <MIOS32_MIDI_ReceivePackage+0x12c>
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 8011e7e:	6825      	ldr	r5, [r4, #0]
 8011e80:	4659      	mov	r1, fp
 8011e82:	4630      	mov	r0, r6
 8011e84:	47a8      	blx	r5
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8011e86:	4651      	mov	r1, sl
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
	if( sysex_callback_func != NULL ) {
	  filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
	  if( package.type != 0x0f ) {
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 8011e88:	4605      	mov	r5, r0
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8011e8a:	6822      	ldr	r2, [r4, #0]
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	4790      	blx	r2
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
	if( sysex_callback_func != NULL ) {
	  filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
	  if( package.type != 0x0f ) {
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 8011e90:	ea45 0100 	orr.w	r1, r5, r0
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8011e94:	ea41 0909 	orr.w	r9, r1, r9
 8011e98:	fa5f f389 	uxtb.w	r3, r9
	  }
	}

	if( callback_package != NULL && !filter_sysex )
 8011e9c:	2f00      	cmp	r7, #0
 8011e9e:	d072      	beq.n	8011f86 <MIOS32_MIDI_ReceivePackage+0x216>
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d170      	bne.n	8011f86 <MIOS32_MIDI_ReceivePackage+0x216>
 8011ea4:	e065      	b.n	8011f72 <MIOS32_MIDI_ReceivePackage+0x202>
      }
#endif
      break;

    case 0x5:   // Single-byte System Common Message or SysEx ends with following single byte. 
      if( package.evnt0 >= 0xf8 ) {
 8011ea6:	2df7      	cmp	r5, #247	; 0xf7
 8011ea8:	d905      	bls.n	8011eb6 <MIOS32_MIDI_ReceivePackage+0x146>
	if( callback_package != NULL )
 8011eaa:	2f00      	cmp	r7, #0
 8011eac:	d06b      	beq.n	8011f86 <MIOS32_MIDI_ReceivePackage+0x216>
	  callback_package(port, package); // -> forwarded as event
 8011eae:	4630      	mov	r0, r6
 8011eb0:	f028 01f0 	bic.w	r1, r8, #240	; 0xf0
 8011eb4:	e05f      	b.n	8011f76 <MIOS32_MIDI_ReceivePackage+0x206>
      }
      // no >= 0xf8 event: continue!

    case 0x6:   // SysEx ends with following two bytes.
    case 0x7: { // SysEx ends with following three bytes.
      u8 num_bytes = package.type - 0x5 + 1;
 8011eb6:	f1ac 0404 	sub.w	r4, ip, #4
      u8 current_byte = 0;

      if( num_bytes >= 1 ) {
 8011eba:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8011ebe:	d05c      	beq.n	8011f7a <MIOS32_MIDI_ReceivePackage+0x20a>
	current_byte = package.evnt0;
	MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8011ec0:	4629      	mov	r1, r5
 8011ec2:	4630      	mov	r0, r6
 8011ec4:	f7ff fee8 	bl	8011c98 <MIOS32_MIDI_SYSEX_Parser>

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
	if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011ec8:	4832      	ldr	r0, [pc, #200]	; (8011f94 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011eca:	7802      	ldrb	r2, [r0, #0]
 8011ecc:	f002 0108 	and.w	r1, r2, #8
 8011ed0:	b2cb      	uxtb	r3, r1
 8011ed2:	b943      	cbnz	r3, 8011ee6 <MIOS32_MIDI_ReceivePackage+0x176>
	  if( sysex_callback_func != NULL )
 8011ed4:	4830      	ldr	r0, [pc, #192]	; (8011f98 <MIOS32_MIDI_ReceivePackage+0x228>)
 8011ed6:	6802      	ldr	r2, [r0, #0]
 8011ed8:	b142      	cbz	r2, 8011eec <MIOS32_MIDI_ReceivePackage+0x17c>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 8011eda:	4630      	mov	r0, r6
 8011edc:	4629      	mov	r1, r5
 8011ede:	4790      	blx	r2
 8011ee0:	fa5f f980 	uxtb.w	r9, r0
 8011ee4:	e003      	b.n	8011eee <MIOS32_MIDI_ReceivePackage+0x17e>
	  // no timeout protection for remaining interfaces (yet)
	}
      }
    }

    u8 filter_sysex = 0;
 8011ee6:	f04f 0900 	mov.w	r9, #0
 8011eea:	e000      	b.n	8011eee <MIOS32_MIDI_ReceivePackage+0x17e>
 8011eec:	4691      	mov	r9, r2
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
	}
#endif
      }

      if( num_bytes >= 2 ) {
 8011eee:	2c01      	cmp	r4, #1
 8011ef0:	d045      	beq.n	8011f7e <MIOS32_MIDI_ReceivePackage+0x20e>
	current_byte = package.evnt1;
	MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8011ef2:	4659      	mov	r1, fp
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	f7ff fecf 	bl	8011c98 <MIOS32_MIDI_SYSEX_Parser>

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
	if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011efa:	4926      	ldr	r1, [pc, #152]	; (8011f94 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011efc:	780b      	ldrb	r3, [r1, #0]
 8011efe:	f003 0008 	and.w	r0, r3, #8
 8011f02:	b2c2      	uxtb	r2, r0
 8011f04:	b94a      	cbnz	r2, 8011f1a <MIOS32_MIDI_ReceivePackage+0x1aa>
	  if( sysex_callback_func != NULL )
 8011f06:	4924      	ldr	r1, [pc, #144]	; (8011f98 <MIOS32_MIDI_ReceivePackage+0x228>)
 8011f08:	680b      	ldr	r3, [r1, #0]
 8011f0a:	b133      	cbz	r3, 8011f1a <MIOS32_MIDI_ReceivePackage+0x1aa>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	4659      	mov	r1, fp
 8011f10:	4798      	blx	r3
 8011f12:	ea40 0009 	orr.w	r0, r0, r9
 8011f16:	fa5f f980 	uxtb.w	r9, r0
	}
#endif
      }

      if( num_bytes >= 3 ) {
 8011f1a:	2c02      	cmp	r4, #2
 8011f1c:	d014      	beq.n	8011f48 <MIOS32_MIDI_ReceivePackage+0x1d8>
	current_byte = package.evnt2;
	MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8011f1e:	4651      	mov	r1, sl
 8011f20:	4630      	mov	r0, r6
 8011f22:	f7ff feb9 	bl	8011c98 <MIOS32_MIDI_SYSEX_Parser>

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
	if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011f26:	4a1b      	ldr	r2, [pc, #108]	; (8011f94 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011f28:	7811      	ldrb	r1, [r2, #0]
 8011f2a:	f001 0308 	and.w	r3, r1, #8
 8011f2e:	b2d8      	uxtb	r0, r3
 8011f30:	b958      	cbnz	r0, 8011f4a <MIOS32_MIDI_ReceivePackage+0x1da>
	  if( sysex_callback_func != NULL )
 8011f32:	4a19      	ldr	r2, [pc, #100]	; (8011f98 <MIOS32_MIDI_ReceivePackage+0x228>)
 8011f34:	6813      	ldr	r3, [r2, #0]
 8011f36:	b143      	cbz	r3, 8011f4a <MIOS32_MIDI_ReceivePackage+0x1da>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 8011f38:	4651      	mov	r1, sl
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	4798      	blx	r3
 8011f3e:	ea40 0109 	orr.w	r1, r0, r9
 8011f42:	fa5f f981 	uxtb.w	r9, r1
 8011f46:	e000      	b.n	8011f4a <MIOS32_MIDI_ReceivePackage+0x1da>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
	}
#endif
      }

      if( num_bytes >= 3 ) {
 8011f48:	46da      	mov	sl, fp
	}
#endif
      }

      // reset timeout protection if required
      if( current_byte == 0xf7 )
 8011f4a:	f1ba 0ff7 	cmp.w	sl, #247	; 0xf7
 8011f4e:	d104      	bne.n	8011f5a <MIOS32_MIDI_ReceivePackage+0x1ea>
	sysex_timeout_ctr_flags.ALL = 0;
 8011f50:	480e      	ldr	r0, [pc, #56]	; (8011f8c <MIOS32_MIDI_ReceivePackage+0x21c>)
 8011f52:	2400      	movs	r4, #0
 8011f54:	2500      	movs	r5, #0
 8011f56:	e9c0 4500 	strd	r4, r5, [r0]

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011f5a:	4a0e      	ldr	r2, [pc, #56]	; (8011f94 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011f5c:	7813      	ldrb	r3, [r2, #0]
 8011f5e:	f003 0108 	and.w	r1, r3, #8
 8011f62:	b2c8      	uxtb	r0, r1
 8011f64:	b978      	cbnz	r0, 8011f86 <MIOS32_MIDI_ReceivePackage+0x216>
	// forward as package if not filtered
	if( callback_package != NULL && !filter_sysex )
 8011f66:	b177      	cbz	r7, 8011f86 <MIOS32_MIDI_ReceivePackage+0x216>
 8011f68:	f1b9 0f00 	cmp.w	r9, #0
 8011f6c:	d10b      	bne.n	8011f86 <MIOS32_MIDI_ReceivePackage+0x216>
	  callback_package(port, package);
 8011f6e:	f369 1807 	bfi	r8, r9, #4, #4
 8011f72:	4630      	mov	r0, r6
 8011f74:	4641      	mov	r1, r8
 8011f76:	47b8      	blx	r7
 8011f78:	e005      	b.n	8011f86 <MIOS32_MIDI_ReceivePackage+0x216>
	  // no timeout protection for remaining interfaces (yet)
	}
      }
    }

    u8 filter_sysex = 0;
 8011f7a:	46a1      	mov	r9, r4
 8011f7c:	e7ed      	b.n	8011f5a <MIOS32_MIDI_ReceivePackage+0x1ea>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
	}
#endif
      }

      if( num_bytes >= 2 ) {
 8011f7e:	46aa      	mov	sl, r5
 8011f80:	e7e3      	b.n	8011f4a <MIOS32_MIDI_ReceivePackage+0x1da>
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
	  }
	}

	if( callback_package != NULL && !filter_sysex )
 8011f82:	2f00      	cmp	r7, #0
 8011f84:	d1f5      	bne.n	8011f72 <MIOS32_MIDI_ReceivePackage+0x202>
    } break;
    }	      
  }

  return 0; // no error
}
 8011f86:	2000      	movs	r0, #0
 8011f88:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f8c:	200001a8 	.word	0x200001a8
 8011f90:	20000198 	.word	0x20000198
 8011f94:	2000019c 	.word	0x2000019c
 8011f98:	200001b0 	.word	0x200001b0

08011f9c <MIOS32_MIDI_Receive_Handler>:
//! which can be installed via MIOS32_MIDI_SysExCallback_Init()
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Receive_Handler(void *_callback_package)
{
 8011f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fa0:	4606      	mov	r6, r0
 8011fa2:	b08e      	sub	sp, #56	; 0x38
  // handle all USB MIDI packages
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
  {
    s32 status;
    mios32_midi_package_t package;
    while( (status=MIOS32_USB_MIDI_PackageReceive(&package)) >= 0 ) {
 8011fa4:	a801      	add	r0, sp, #4
 8011fa6:	f002 f9bb 	bl	8014320 <MIOS32_USB_MIDI_PackageReceive>
 8011faa:	2800      	cmp	r0, #0
 8011fac:	db07      	blt.n	8011fbe <MIOS32_MIDI_Receive_Handler+0x22>
      MIOS32_MIDI_ReceivePackage(USB0 + package.cable, package, _callback_package);
 8011fae:	9901      	ldr	r1, [sp, #4]
 8011fb0:	f3c1 1003 	ubfx	r0, r1, #4, #4
 8011fb4:	3010      	adds	r0, #16
 8011fb6:	4632      	mov	r2, r6
 8011fb8:	f7ff feda 	bl	8011d70 <MIOS32_MIDI_ReceivePackage>
 8011fbc:	e7f2      	b.n	8011fa4 <MIOS32_MIDI_Receive_Handler+0x8>
    typedef struct {
      mios32_midi_port_t port;
      s32 (*receive_func)(u8 if_port, mios32_midi_package_t *package);
    } midi_intf_table_t;

    const midi_intf_table_t midi_intf_table[] = {
 8011fbe:	4d42      	ldr	r5, [pc, #264]	; (80120c8 <MIOS32_MIDI_Receive_Handler+0x12c>)
 8011fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011fc2:	ac04      	add	r4, sp, #16
 8011fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011fca:	e895 0003 	ldmia.w	r5, {r0, r1}
#endif
#endif
      { 0, NULL } // end of table
    };

    if( midi_intf_table[0].port != 0 ) {
 8011fce:	f89d 3010 	ldrb.w	r3, [sp, #16]
    typedef struct {
      mios32_midi_port_t port;
      s32 (*receive_func)(u8 if_port, mios32_midi_package_t *package);
    } midi_intf_table_t;

    const midi_intf_table_t midi_intf_table[] = {
 8011fd2:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
#endif
      { 0, NULL } // end of table
    };

    if( midi_intf_table[0].port != 0 ) {
 8011fd6:	b34b      	cbz	r3, 801202c <MIOS32_MIDI_Receive_Handler+0x90>
 8011fd8:	2400      	movs	r4, #0
 8011fda:	4625      	mov	r5, r4
 8011fdc:	4627      	mov	r7, r4
      int intf = 0;
      do {
	mios32_midi_package_t package;

	// last table entry?
	if( !midi_intf_table[intf].port ) {
 8011fde:	a80e      	add	r0, sp, #56	; 0x38
 8011fe0:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
 8011fe4:	f811 2c28 	ldrb.w	r2, [r1, #-40]
 8011fe8:	b912      	cbnz	r2, 8011ff0 <MIOS32_MIDI_Receive_Handler+0x54>
	  if( !packages_forwarded_this_round )
 8011fea:	b1fd      	cbz	r5, 801202c <MIOS32_MIDI_Receive_Handler+0x90>
	    break; // no new package

	  intf = 0; // at least one package: restart
 8011fec:	4614      	mov	r4, r2
	  packages_forwarded_this_round = 0;
 8011fee:	4615      	mov	r5, r2
	}

	// execute receive function
	mios32_midi_port_t port = midi_intf_table[intf].port;
 8011ff0:	ab0e      	add	r3, sp, #56	; 0x38
 8011ff2:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);
 8011ff6:	a902      	add	r1, sp, #8
	  intf = 0; // at least one package: restart
	  packages_forwarded_this_round = 0;
	}

	// execute receive function
	mios32_midi_port_t port = midi_intf_table[intf].port;
 8011ff8:	f810 8c28 	ldrb.w	r8, [r0, #-40]
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);
 8011ffc:	f850 2c24 	ldr.w	r2, [r0, #-36]
 8012000:	f008 000f 	and.w	r0, r8, #15
 8012004:	4790      	blx	r2

	if( status == -10 ) { // receive timeout?
 8012006:	f110 0f0a 	cmn.w	r0, #10
 801200a:	d103      	bne.n	8012014 <MIOS32_MIDI_Receive_Handler+0x78>
	  MIOS32_MIDI_TimeOut(port);
 801200c:	4640      	mov	r0, r8
 801200e:	f7ff fce9 	bl	80119e4 <MIOS32_MIDI_TimeOut>
 8012012:	e008      	b.n	8012026 <MIOS32_MIDI_Receive_Handler+0x8a>
	} else if( status >= 0 ) { // message received?
 8012014:	2800      	cmp	r0, #0
 8012016:	db06      	blt.n	8012026 <MIOS32_MIDI_Receive_Handler+0x8a>
	  ++packages_forwarded;
	  ++packages_forwarded_this_round;
	  
	  // handle received package
	  MIOS32_MIDI_ReceivePackage(port, package, _callback_package);
 8012018:	4640      	mov	r0, r8
 801201a:	9902      	ldr	r1, [sp, #8]
 801201c:	4632      	mov	r2, r6
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);

	if( status == -10 ) { // receive timeout?
	  MIOS32_MIDI_TimeOut(port);
	} else if( status >= 0 ) { // message received?
	  ++packages_forwarded;
 801201e:	3701      	adds	r7, #1
	  ++packages_forwarded_this_round;
 8012020:	3501      	adds	r5, #1
	  
	  // handle received package
	  MIOS32_MIDI_ReceivePackage(port, package, _callback_package);
 8012022:	f7ff fea5 	bl	8011d70 <MIOS32_MIDI_ReceivePackage>
	}

	++intf;
 8012026:	3401      	adds	r4, #1
      } while( packages_forwarded < 10 );
 8012028:	2f09      	cmp	r7, #9
 801202a:	ddd8      	ble.n	8011fde <MIOS32_MIDI_Receive_Handler+0x42>
  // handle all SPI MIDI packages
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  {
    s32 status;
    mios32_midi_package_t package;
    while( (status=MIOS32_SPI_MIDI_PackageReceive(&package)) >= 0 ) {
 801202c:	a803      	add	r0, sp, #12
 801202e:	f000 fa3d 	bl	80124ac <MIOS32_SPI_MIDI_PackageReceive>
 8012032:	2800      	cmp	r0, #0
 8012034:	db07      	blt.n	8012046 <MIOS32_MIDI_Receive_Handler+0xaa>
      MIOS32_MIDI_ReceivePackage(SPIM0 + package.cable, package, _callback_package);
 8012036:	9903      	ldr	r1, [sp, #12]
 8012038:	f3c1 1003 	ubfx	r0, r1, #4, #4
 801203c:	3050      	adds	r0, #80	; 0x50
 801203e:	4632      	mov	r2, r6
 8012040:	f7ff fe96 	bl	8011d70 <MIOS32_MIDI_ReceivePackage>
 8012044:	e7f2      	b.n	801202c <MIOS32_MIDI_Receive_Handler+0x90>
  }
#endif
  

  // SysEx timeout detected by this handler?
  if( sysex_timeout_ctr_flags.ALL && sysex_timeout_ctr > 1000 ) {
 8012046:	4921      	ldr	r1, [pc, #132]	; (80120cc <MIOS32_MIDI_Receive_Handler+0x130>)
 8012048:	e9d1 2300 	ldrd	r2, r3, [r1]
 801204c:	ea52 0003 	orrs.w	r0, r2, r3
 8012050:	d035      	beq.n	80120be <MIOS32_MIDI_Receive_Handler+0x122>
 8012052:	4b1f      	ldr	r3, [pc, #124]	; (80120d0 <MIOS32_MIDI_Receive_Handler+0x134>)
 8012054:	8818      	ldrh	r0, [r3, #0]
 8012056:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801205a:	d930      	bls.n	80120be <MIOS32_MIDI_Receive_Handler+0x122>
    u8 timeout_port = 0;

    // determine port
    if( sysex_timeout_ctr_flags.usb_receives ) {
 801205c:	880a      	ldrh	r2, [r1, #0]
 801205e:	b162      	cbz	r2, 801207a <MIOS32_MIDI_Receive_Handler+0xde>
 8012060:	2100      	movs	r1, #0
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.usb_receives & (1 << i) )
 8012062:	fa42 f301 	asr.w	r3, r2, r1
 8012066:	f013 0001 	ands.w	r0, r3, #1
 801206a:	d103      	bne.n	8012074 <MIOS32_MIDI_Receive_Handler+0xd8>
    u8 timeout_port = 0;

    // determine port
    if( sysex_timeout_ctr_flags.usb_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 801206c:	3101      	adds	r1, #1
 801206e:	2910      	cmp	r1, #16
 8012070:	d1f7      	bne.n	8012062 <MIOS32_MIDI_Receive_Handler+0xc6>
	if( sysex_timeout_ctr_flags.usb_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 8012072:	4601      	mov	r1, r0
      timeout_port = USB0 + i;
 8012074:	3110      	adds	r1, #16
 8012076:	b2c8      	uxtb	r0, r1
 8012078:	e01a      	b.n	80120b0 <MIOS32_MIDI_Receive_Handler+0x114>
    } else if( sysex_timeout_ctr_flags.iic_receives ) {
 801207a:	884b      	ldrh	r3, [r1, #2]
 801207c:	b15b      	cbz	r3, 8012096 <MIOS32_MIDI_Receive_Handler+0xfa>
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.iic_receives & (1 << i) )
 801207e:	fa43 f002 	asr.w	r0, r3, r2
 8012082:	f010 0101 	ands.w	r1, r0, #1
 8012086:	d103      	bne.n	8012090 <MIOS32_MIDI_Receive_Handler+0xf4>
      if( i >= 16 ) // failsafe
	i = 0;
      timeout_port = USB0 + i;
    } else if( sysex_timeout_ctr_flags.iic_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 8012088:	3201      	adds	r2, #1
 801208a:	2a10      	cmp	r2, #16
 801208c:	d1f7      	bne.n	801207e <MIOS32_MIDI_Receive_Handler+0xe2>
	if( sysex_timeout_ctr_flags.iic_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 801208e:	460a      	mov	r2, r1
      timeout_port = IIC0 + i;
 8012090:	3230      	adds	r2, #48	; 0x30
 8012092:	b2d0      	uxtb	r0, r2
 8012094:	e00c      	b.n	80120b0 <MIOS32_MIDI_Receive_Handler+0x114>
    } else if( sysex_timeout_ctr_flags.spi_receives ) {
 8012096:	8888      	ldrh	r0, [r1, #4]
 8012098:	b150      	cbz	r0, 80120b0 <MIOS32_MIDI_Receive_Handler+0x114>
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.spi_receives & (1 << i) )
 801209a:	fa40 f103 	asr.w	r1, r0, r3
 801209e:	f011 0201 	ands.w	r2, r1, #1
 80120a2:	d103      	bne.n	80120ac <MIOS32_MIDI_Receive_Handler+0x110>
      if( i >= 16 ) // failsafe
	i = 0;
      timeout_port = IIC0 + i;
    } else if( sysex_timeout_ctr_flags.spi_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 80120a4:	3301      	adds	r3, #1
 80120a6:	2b10      	cmp	r3, #16
 80120a8:	d1f7      	bne.n	801209a <MIOS32_MIDI_Receive_Handler+0xfe>
	if( sysex_timeout_ctr_flags.spi_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 80120aa:	4613      	mov	r3, r2
      timeout_port = SPIM0 + i;
 80120ac:	3350      	adds	r3, #80	; 0x50
 80120ae:	b2d8      	uxtb	r0, r3
    }

    MIOS32_MIDI_TimeOut(timeout_port);
 80120b0:	f7ff fc98 	bl	80119e4 <MIOS32_MIDI_TimeOut>
    sysex_timeout_ctr_flags.ALL = 0;
 80120b4:	4805      	ldr	r0, [pc, #20]	; (80120cc <MIOS32_MIDI_Receive_Handler+0x130>)
 80120b6:	2200      	movs	r2, #0
 80120b8:	2300      	movs	r3, #0
 80120ba:	e9c0 2300 	strd	r2, r3, [r0]
  }

  return 0;
}
 80120be:	2000      	movs	r0, #0
 80120c0:	b00e      	add	sp, #56	; 0x38
 80120c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120c6:	bf00      	nop
 80120c8:	0801c104 	.word	0x0801c104
 80120cc:	200001a8 	.word	0x200001a8
 80120d0:	20000198 	.word	0x20000198

080120d4 <MIOS32_OSC_Init>:
{
  if( mode > 0 )
    return -1; // only mode 0 supported yet

  return 0; // no error
}
 80120d4:	2800      	cmp	r0, #0
 80120d6:	bf14      	ite	ne
 80120d8:	f04f 30ff 	movne.w	r0, #4294967295
 80120dc:	2000      	moveq	r0, #0
 80120de:	4770      	bx	lr

080120e0 <MIOS32_COM_Init>:
s32 MIOS32_COM_Init(u32 mode)
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
 80120e0:	b938      	cbnz	r0, 80120f2 <MIOS32_COM_Init+0x12>
    return -1; // unsupported mode

  // disable callback by default
  receive_callback_func = NULL;
 80120e2:	4b05      	ldr	r3, [pc, #20]	; (80120f8 <MIOS32_COM_Init+0x18>)

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
 80120e4:	4a05      	ldr	r2, [pc, #20]	; (80120fc <MIOS32_COM_Init+0x1c>)
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // disable callback by default
  receive_callback_func = NULL;
 80120e6:	6018      	str	r0, [r3, #0]

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
  debug_port = MIOS32_COM_DEBUG_PORT;
 80120e8:	4b05      	ldr	r3, [pc, #20]	; (8012100 <MIOS32_COM_Init+0x20>)

  // disable callback by default
  receive_callback_func = NULL;

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_COM_DEFAULT_PORT;
 80120ea:	2110      	movs	r1, #16
 80120ec:	7011      	strb	r1, [r2, #0]
  debug_port = MIOS32_COM_DEBUG_PORT;
 80120ee:	7019      	strb	r1, [r3, #0]
#if MIOS32_UART0_ASSIGNMENT == 2 || MIOS32_UART1_ASSIGNMENT == 2 || MIOS32_UART2_ASSIGNMENT == 2 || MIOS32_UART3_ASSIGNMENT == 2
  if( MIOS32_UART_Init(0) < 0 )
    ret |= (1 << 1);
#endif

  return -ret;
 80120f0:	4770      	bx	lr
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80120f2:	f04f 30ff 	mov.w	r0, #4294967295
  if( MIOS32_UART_Init(0) < 0 )
    ret |= (1 << 1);
#endif

  return -ret;
}
 80120f6:	4770      	bx	lr
 80120f8:	200001b8 	.word	0x200001b8
 80120fc:	2000000b 	.word	0x2000000b
 8012100:	2000000c 	.word	0x2000000c

08012104 <MIOS32_COM_SendBuffer>:
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendBuffer(mios32_com_port_t port, u8 *buffer, u16 len)
{
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 8012104:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8012108:	d104      	bne.n	8012114 <MIOS32_COM_SendBuffer+0x10>
    port = (port == COM_DEBUG) ? debug_port : default_port;
 801210a:	2801      	cmp	r0, #1
 801210c:	bf0c      	ite	eq
 801210e:	4b06      	ldreq	r3, [pc, #24]	; (8012128 <MIOS32_COM_SendBuffer+0x24>)
 8012110:	4b06      	ldrne	r3, [pc, #24]	; (801212c <MIOS32_COM_SendBuffer+0x28>)
 8012112:	7818      	ldrb	r0, [r3, #0]
  }

  // branch depending on selected port
  switch( port >> 4 ) {
 8012114:	0903      	lsrs	r3, r0, #4
 8012116:	2b02      	cmp	r3, #2
 8012118:	d103      	bne.n	8012122 <MIOS32_COM_SendBuffer+0x1e>
      return -1; // USB has been disabled
#endif

    case 2:
#if !defined(MIOS32_DONT_USE_UART)
      return MIOS32_UART_TxBufferPutMore(port & 0xf, buffer, len);
 801211a:	f000 000f 	and.w	r0, r0, #15
 801211e:	f002 bae7 	b.w	80146f0 <MIOS32_UART_TxBufferPutMore>
      
    default:
      // invalid port
      return -1;
  }
}
 8012122:	f04f 30ff 	mov.w	r0, #4294967295
 8012126:	4770      	bx	lr
 8012128:	2000000c 	.word	0x2000000c
 801212c:	2000000b 	.word	0x2000000b

08012130 <MIOS32_COM_SendChar>:
//! \param[in] c character
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendChar(mios32_com_port_t port, char c)
{
 8012130:	b507      	push	{r0, r1, r2, lr}
 8012132:	ab02      	add	r3, sp, #8
  return MIOS32_COM_SendBuffer(port, (u8 *)&c, 1);
 8012134:	2201      	movs	r2, #1
//! \param[in] c character
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_SendChar(mios32_com_port_t port, char c)
{
 8012136:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return MIOS32_COM_SendBuffer(port, (u8 *)&c, 1);
 801213a:	4619      	mov	r1, r3
 801213c:	f7ff ffe2 	bl	8012104 <MIOS32_COM_SendBuffer>
}
 8012140:	bd0e      	pop	{r1, r2, r3, pc}

08012142 <MIOS32_COM_Receive_Handler>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_COM_Receive_Handler(void)
{
  u8 port = DEFAULT;

  u8 intf = 0; // interface to be checked
 8012142:	2300      	movs	r3, #0
    // TODO: maybe a list based approach would be better
    // it would allow to add/remove interfaces dynamically
    // this would also allow to give certain ports a higher priority (to add them multiple times to the list)
    // it would also improve this spagetthi code ;)
    s32 status = -1;
    switch( intf++ ) {
 8012144:	1c5a      	adds	r2, r3, #1
 8012146:	2b04      	cmp	r3, #4
 8012148:	b2d0      	uxtb	r0, r2
 801214a:	d801      	bhi.n	8012150 <MIOS32_COM_Receive_Handler+0xe>
 801214c:	4603      	mov	r3, r0
 801214e:	e7f9      	b.n	8012144 <MIOS32_COM_Receive_Handler+0x2>
	receive_callback_func(port, (u8)status);
    }
  } while( again );

  return 0;
}
 8012150:	2000      	movs	r0, #0
 8012152:	4770      	bx	lr

08012154 <MIOS32_UART_MIDI_RS_Reset>:
s32 MIOS32_UART_MIDI_RS_Reset(u8 uart_port)
{
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
 8012154:	2801      	cmp	r0, #1
//! \return -1 if port not available
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_RS_Reset(u8 uart_port)
{
 8012156:	b538      	push	{r3, r4, r5, lr}
 8012158:	4604      	mov	r4, r0
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
 801215a:	d80c      	bhi.n	8012176 <MIOS32_UART_MIDI_RS_Reset+0x22>
    return -1; // port not available

  MIOS32_IRQ_Disable();
 801215c:	f000 fd20 	bl	8012ba0 <MIOS32_IRQ_Disable>
  rs_last[uart_port] = 0xff;
 8012160:	4b06      	ldr	r3, [pc, #24]	; (801217c <MIOS32_UART_MIDI_RS_Reset+0x28>)
  rs_expire_ctr[uart_port] = 0;
 8012162:	4807      	ldr	r0, [pc, #28]	; (8012180 <MIOS32_UART_MIDI_RS_Reset+0x2c>)
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available

  MIOS32_IRQ_Disable();
  rs_last[uart_port] = 0xff;
 8012164:	22ff      	movs	r2, #255	; 0xff
  rs_expire_ctr[uart_port] = 0;
 8012166:	2500      	movs	r5, #0
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available

  MIOS32_IRQ_Disable();
  rs_last[uart_port] = 0xff;
 8012168:	551a      	strb	r2, [r3, r4]
  rs_expire_ctr[uart_port] = 0;
 801216a:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
  MIOS32_IRQ_Enable();
 801216e:	f000 fd2b 	bl	8012bc8 <MIOS32_IRQ_Enable>

  return 0;
 8012172:	4628      	mov	r0, r5
 8012174:	bd38      	pop	{r3, r4, r5, pc}
{
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available
 8012176:	f04f 30ff 	mov.w	r0, #4294967295
  rs_expire_ctr[uart_port] = 0;
  MIOS32_IRQ_Enable();

  return 0;
#endif
}
 801217a:	bd38      	pop	{r3, r4, r5, pc}
 801217c:	200001bc 	.word	0x200001bc
 8012180:	200001da 	.word	0x200001da

08012184 <MIOS32_UART_MIDI_Init>:
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_Init(u32 mode)
{
 8012184:	b510      	push	{r4, lr}
#else
  int i;


  // currently only mode 0 supported
  if( mode != 0 )
 8012186:	4604      	mov	r4, r0
 8012188:	b110      	cbz	r0, 8012190 <MIOS32_UART_MIDI_Init+0xc>
    return -1; // unsupported mode
 801218a:	f04f 30ff 	mov.w	r0, #4294967295
 801218e:	bd10      	pop	{r4, pc}
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8012190:	4b0d      	ldr	r3, [pc, #52]	; (80121c8 <MIOS32_UART_MIDI_Init+0x44>)
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 8012192:	490e      	ldr	r1, [pc, #56]	; (80121cc <MIOS32_UART_MIDI_Init+0x48>)
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8012194:	6018      	str	r0, [r3, #0]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 8012196:	22ff      	movs	r2, #255	; 0xff
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
  midix->running_status = 0x00;
 8012198:	7118      	strb	r0, [r3, #4]
  midix->expected_bytes = 0x00;
 801219a:	7158      	strb	r0, [r3, #5]
  midix->wait_bytes = 0x00;
 801219c:	7198      	strb	r0, [r3, #6]
  midix->sysex_ctr = 0x00;
 801219e:	71d8      	strb	r0, [r3, #7]
  midix->timeout_ctr = 0;
 80121a0:	8118      	strh	r0, [r3, #8]
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 80121a2:	60d8      	str	r0, [r3, #12]
  midix->running_status = 0x00;
 80121a4:	7418      	strb	r0, [r3, #16]
  midix->expected_bytes = 0x00;
 80121a6:	7458      	strb	r0, [r3, #17]
  midix->wait_bytes = 0x00;
 80121a8:	7498      	strb	r0, [r3, #18]
  midix->sysex_ctr = 0x00;
 80121aa:	74d8      	strb	r0, [r3, #19]
  midix->timeout_ctr = 0;
 80121ac:	8298      	strh	r0, [r3, #20]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 80121ae:	700a      	strb	r2, [r1, #0]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RS_Reset(i);
 80121b0:	f7ff ffd0 	bl	8012154 <MIOS32_UART_MIDI_RS_Reset>
 80121b4:	2001      	movs	r0, #1
 80121b6:	f7ff ffcd 	bl	8012154 <MIOS32_UART_MIDI_RS_Reset>

  // if any MIDI assignment:
#if MIOS32_UART0_ASSIGNMENT == 1 || MIOS32_UART1_ASSIGNMENT == 1 || MIOS32_UART2_ASSIGNMENT == 1 || MIOS32_UART3_ASSIGNMENT == 1
  // initialize U(S)ART interface
  if( MIOS32_UART_Init(0) < 0 )
 80121ba:	4620      	mov	r0, r4
 80121bc:	f002 f92a 	bl	8014414 <MIOS32_UART_Init>
 80121c0:	2800      	cmp	r0, #0
 80121c2:	dbe2      	blt.n	801218a <MIOS32_UART_MIDI_Init+0x6>
    return -1; // initialisation of U(S)ART Interface failed
#endif

  return 0; // no error
 80121c4:	4620      	mov	r0, r4
#endif
}
 80121c6:	bd10      	pop	{r4, pc}
 80121c8:	200001c0 	.word	0x200001c0
 80121cc:	200001d8 	.word	0x200001d8

080121d0 <MIOS32_UART_MIDI_Periodic_mS>:
//! model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_Periodic_mS(void)
{
 80121d0:	b508      	push	{r3, lr}
#if MIOS32_UART_NUM
  u8 uart_port;

  MIOS32_IRQ_Disable();
 80121d2:	f000 fce5 	bl	8012ba0 <MIOS32_IRQ_Disable>
    // increment the expire counters for running status optimisation.
    //
    // The running status will expire after 1000 ticks (1 second) 
    // to ensure, that the current status will be sent at least each second
    // to cover the case that the MIDI cable is (re-)connected during runtime.
    if( rs_expire_ctr[uart_port] < 65535 )
 80121d6:	4a10      	ldr	r2, [pc, #64]	; (8012218 <MIOS32_UART_MIDI_Periodic_mS+0x48>)
 80121d8:	8813      	ldrh	r3, [r2, #0]
 80121da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80121de:	428b      	cmp	r3, r1
 80121e0:	4608      	mov	r0, r1
 80121e2:	d001      	beq.n	80121e8 <MIOS32_UART_MIDI_Periodic_mS+0x18>
      ++rs_expire_ctr[uart_port];
 80121e4:	3301      	adds	r3, #1
 80121e6:	8013      	strh	r3, [r2, #0]

    // increment timeout counter for incoming packages
    // an incomplete event will be timed out after 1000 ticks (1 second)
    if( midi_rec[uart_port].timeout_ctr < 65535 )
 80121e8:	4b0c      	ldr	r3, [pc, #48]	; (801221c <MIOS32_UART_MIDI_Periodic_mS+0x4c>)
 80121ea:	8919      	ldrh	r1, [r3, #8]
 80121ec:	4281      	cmp	r1, r0
 80121ee:	d001      	beq.n	80121f4 <MIOS32_UART_MIDI_Periodic_mS+0x24>
      ++midi_rec[uart_port].timeout_ctr;
 80121f0:	1c48      	adds	r0, r1, #1
 80121f2:	8118      	strh	r0, [r3, #8]
    // increment the expire counters for running status optimisation.
    //
    // The running status will expire after 1000 ticks (1 second) 
    // to ensure, that the current status will be sent at least each second
    // to cover the case that the MIDI cable is (re-)connected during runtime.
    if( rs_expire_ctr[uart_port] < 65535 )
 80121f4:	8852      	ldrh	r2, [r2, #2]
 80121f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80121fa:	428a      	cmp	r2, r1
 80121fc:	d002      	beq.n	8012204 <MIOS32_UART_MIDI_Periodic_mS+0x34>
      ++rs_expire_ctr[uart_port];
 80121fe:	4806      	ldr	r0, [pc, #24]	; (8012218 <MIOS32_UART_MIDI_Periodic_mS+0x48>)
 8012200:	3201      	adds	r2, #1
 8012202:	8042      	strh	r2, [r0, #2]

    // increment timeout counter for incoming packages
    // an incomplete event will be timed out after 1000 ticks (1 second)
    if( midi_rec[uart_port].timeout_ctr < 65535 )
 8012204:	8a9b      	ldrh	r3, [r3, #20]
 8012206:	428b      	cmp	r3, r1
 8012208:	d002      	beq.n	8012210 <MIOS32_UART_MIDI_Periodic_mS+0x40>
      ++midi_rec[uart_port].timeout_ctr;
 801220a:	4a04      	ldr	r2, [pc, #16]	; (801221c <MIOS32_UART_MIDI_Periodic_mS+0x4c>)
 801220c:	1c59      	adds	r1, r3, #1
 801220e:	8291      	strh	r1, [r2, #20]
  }
  MIOS32_IRQ_Enable();
 8012210:	f000 fcda 	bl	8012bc8 <MIOS32_IRQ_Enable>
  // (atomic operation not required in MIOS32_UART_MIDI_PackageSend_NonBlocking() due to single-byte accesses)
#endif

  return 0; // no error
}
 8012214:	2000      	movs	r0, #0
 8012216:	bd08      	pop	{r3, pc}
 8012218:	200001da 	.word	0x200001da
 801221c:	200001c0 	.word	0x200001c0

08012220 <MIOS32_UART_MIDI_PackageSend_NonBlocking>:
//! \return -2: UART_MIDI buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageSend_NonBlocking(u8 uart_port, mios32_midi_package_t package)
{
 8012220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012222:	2801      	cmp	r0, #1
 8012224:	f3c1 2607 	ubfx	r6, r1, #8, #8
 8012228:	f001 030f 	and.w	r3, r1, #15
 801222c:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8012230:	4605      	mov	r5, r0
 8012232:	b2f7      	uxtb	r7, r6
 8012234:	f3c1 6107 	ubfx	r1, r1, #24, #8
 8012238:	d902      	bls.n	8012240 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x20>
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
      rs_last[uart_port] = package.evnt0;


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 801223a:	f04f 30ff 	mov.w	r0, #4294967295
 801223e:	e040      	b.n	80122c2 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa2>
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
 8012240:	4c20      	ldr	r4, [pc, #128]	; (80122c4 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa4>)
 8012242:	5ce4      	ldrb	r4, [r4, r3]
  if( len ) {
 8012244:	2c00      	cmp	r4, #0
 8012246:	d03b      	beq.n	80122c0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa0>
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8012248:	f8df e088 	ldr.w	lr, [pc, #136]	; 80122d4 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb4>
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 801224c:	f88d 6004 	strb.w	r6, [sp, #4]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8012250:	f83e c015 	ldrh.w	ip, [lr, r5, lsl #1]
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 8012254:	f88d 2005 	strb.w	r2, [sp, #5]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8012258:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 801225c:	f88d 1006 	strb.w	r1, [sp, #6]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8012260:	d902      	bls.n	8012268 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x48>
      // the current RS is expired each second to ensure that a status byte will be sent
      // if the MIDI cable is (re)connected during runtime
      MIOS32_UART_MIDI_RS_Reset(uart_port);
 8012262:	f7ff ff77 	bl	8012154 <MIOS32_UART_MIDI_RS_Reset>
 8012266:	e01b      	b.n	80122a0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
#if 0
      // for optional monitoring of the optimisation
      MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS 0x%02x expired!\n", uart_port);
#endif
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
 8012268:	4817      	ldr	r0, [pc, #92]	; (80122c8 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa8>)
 801226a:	7800      	ldrb	r0, [r0, #0]
 801226c:	fa40 f005 	asr.w	r0, r0, r5
 8012270:	07c0      	lsls	r0, r0, #31
 8012272:	d515      	bpl.n	80122a0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
 8012274:	2b07      	cmp	r3, #7
 8012276:	dd13      	ble.n	80122a0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
	  package.cin >= NoteOff && package.cin <= PitchBend &&
 8012278:	2b0f      	cmp	r3, #15
 801227a:	d011      	beq.n	80122a0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
 801227c:	2c01      	cmp	r4, #1
 801227e:	d90e      	bls.n	801229e <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x7e>
	  len > 1 ) { // (len check is a failsafe measure)
	if( package.evnt0 == rs_last[uart_port] ) {
 8012280:	4b12      	ldr	r3, [pc, #72]	; (80122cc <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xac>)
 8012282:	5d5b      	ldrb	r3, [r3, r5]
 8012284:	42bb      	cmp	r3, r7
 8012286:	d106      	bne.n	8012296 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x76>
	  buffer[0] = package.evnt1;
 8012288:	f88d 2004 	strb.w	r2, [sp, #4]
	  buffer[1] = package.evnt2;
	  --len;
 801228c:	1e62      	subs	r2, r4, #1
      if( (rs_optimisation & (1 << uart_port)) &&
	  package.cin >= NoteOff && package.cin <= PitchBend &&
	  len > 1 ) { // (len check is a failsafe measure)
	if( package.evnt0 == rs_last[uart_port] ) {
	  buffer[0] = package.evnt1;
	  buffer[1] = package.evnt2;
 801228e:	f88d 1005 	strb.w	r1, [sp, #5]
	  --len;
 8012292:	b2d4      	uxtb	r4, r2
 8012294:	e004      	b.n	80122a0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
	  // for optional monitoring of the optimisation
	  MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS optimized (%02x) %02x %02x\n", uart_port, package.evnt0, package.evnt1, package.evnt2);
#endif
	} else {
	  // new running status
	  rs_expire_ctr[uart_port] = 0;
 8012296:	2300      	movs	r3, #0
 8012298:	f82e 3015 	strh.w	r3, [lr, r5, lsl #1]
 801229c:	e000      	b.n	80122a0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
      // for optional monitoring of the optimisation
      MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS 0x%02x expired!\n", uart_port);
#endif
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
	  package.cin >= NoteOff && package.cin <= PitchBend &&
 801229e:	2401      	movs	r4, #1
      }
    }

    // note: packages != Note Off, On, ... Pitch Bend will disable running status - thats acceptable
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
 80122a0:	2ff7      	cmp	r7, #247	; 0xf7
      rs_last[uart_port] = package.evnt0;
 80122a2:	bf98      	it	ls
 80122a4:	4b09      	ldrls	r3, [pc, #36]	; (80122cc <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xac>)


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 80122a6:	a901      	add	r1, sp, #4
 80122a8:	4628      	mov	r0, r5
 80122aa:	4622      	mov	r2, r4
    }

    // note: packages != Note Off, On, ... Pitch Bend will disable running status - thats acceptable
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
      rs_last[uart_port] = package.evnt0;
 80122ac:	bf98      	it	ls
 80122ae:	555e      	strbls	r6, [r3, r5]


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 80122b0:	f002 fa1e 	bl	80146f0 <MIOS32_UART_TxBufferPutMore>
 80122b4:	1c81      	adds	r1, r0, #2
 80122b6:	2902      	cmp	r1, #2
 80122b8:	d8bf      	bhi.n	801223a <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x1a>
  }

  // return 0 if new package in buffer, otherwise -1
  return package_complete ? 0 : -1;
#endif
}
 80122ba:	4805      	ldr	r0, [pc, #20]	; (80122d0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb0>)
 80122bc:	5640      	ldrsb	r0, [r0, r1]
 80122be:	e000      	b.n	80122c2 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa2>
      case -2: return -2; // buffer full, request retry
      default: return -1; // UART error
    }

  } else {
    return 0; // no bytes to send -> no error
 80122c0:	4620      	mov	r0, r4
  }
#endif
}
 80122c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80122c4:	0801c13c 	.word	0x0801c13c
 80122c8:	200001d8 	.word	0x200001d8
 80122cc:	200001bc 	.word	0x200001bc
 80122d0:	0801c264 	.word	0x0801c264
 80122d4:	200001da 	.word	0x200001da

080122d8 <MIOS32_UART_MIDI_PackageSend>:
//! \return 0: no error
//! \return -1: UART_MIDI device not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageSend(u8 uart_port, mios32_midi_package_t package)
{
 80122d8:	b538      	push	{r3, r4, r5, lr}
 80122da:	4605      	mov	r5, r0
 80122dc:	460c      	mov	r4, r1
  s32 error;

  while( (error=MIOS32_UART_MIDI_PackageSend_NonBlocking(uart_port, package)) == -2);
 80122de:	4628      	mov	r0, r5
 80122e0:	4621      	mov	r1, r4
 80122e2:	f7ff ff9d 	bl	8012220 <MIOS32_UART_MIDI_PackageSend_NonBlocking>
 80122e6:	1c83      	adds	r3, r0, #2
 80122e8:	d0f9      	beq.n	80122de <MIOS32_UART_MIDI_PackageSend+0x6>

  return error;
}
 80122ea:	bd38      	pop	{r3, r4, r5, pc}

080122ec <MIOS32_UART_MIDI_PackageReceive>:
//! \return -1: no package in buffer
//! \return -10: incoming MIDI package timed out (incomplete package received)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageReceive(u8 uart_port, mios32_midi_package_t *package)
{
 80122ec:	2801      	cmp	r0, #1
 80122ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f2:	4680      	mov	r8, r0
 80122f4:	460f      	mov	r7, r1
 80122f6:	d903      	bls.n	8012300 <MIOS32_UART_MIDI_PackageReceive+0x14>
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled - accordingly no package in buffer
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;
 80122f8:	f04f 30ff 	mov.w	r0, #4294967295
 80122fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
 8012300:	4d63      	ldr	r5, [pc, #396]	; (8012490 <MIOS32_UART_MIDI_PackageReceive+0x1a4>)
 8012302:	260c      	movs	r6, #12
 8012304:	fb06 f600 	mul.w	r6, r6, r0
 8012308:	19ac      	adds	r4, r5, r6
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 801230a:	4640      	mov	r0, r8
 801230c:	f002 f922 	bl	8014554 <MIOS32_UART_RxBufferGet>
 8012310:	2800      	cmp	r0, #0
 8012312:	f2c0 80a1 	blt.w	8012458 <MIOS32_UART_MIDI_PackageReceive+0x16c>
    u8 byte = (u8)status;

    if( byte & 0x80 ) { // new MIDI status
 8012316:	0602      	lsls	r2, r0, #24
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
    u8 byte = (u8)status;
 8012318:	b2c3      	uxtb	r3, r0

    if( byte & 0x80 ) { // new MIDI status
 801231a:	d552      	bpl.n	80123c2 <MIOS32_UART_MIDI_PackageReceive+0xd6>
      if( byte >= 0xf8 ) { // events >= 0xf8 don't change the running status and can just be forwarded
 801231c:	2bf7      	cmp	r3, #247	; 0xf7
 801231e:	d908      	bls.n	8012332 <MIOS32_UART_MIDI_PackageReceive+0x46>
	// Realtime messages don't change the running status and can be sent immediately
	// They also don't touch the timeout counter!
	package->cin = 0xf; // F: single byte
 8012320:	6839      	ldr	r1, [r7, #0]
 8012322:	f041 020f 	orr.w	r2, r1, #15
 8012326:	603a      	str	r2, [r7, #0]
	package->evnt0 = byte;
 8012328:	707b      	strb	r3, [r7, #1]
	package->evnt1 = 0x00;
 801232a:	2300      	movs	r3, #0
 801232c:	70bb      	strb	r3, [r7, #2]
	package->evnt2 = 0x00;
 801232e:	70fb      	strb	r3, [r7, #3]
 8012330:	e0ab      	b.n	801248a <MIOS32_UART_MIDI_PackageReceive+0x19e>
	package_complete = 1;
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];
 8012332:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8012336:	4957      	ldr	r1, [pc, #348]	; (8012494 <MIOS32_UART_MIDI_PackageReceive+0x1a8>)
	package->evnt0 = byte;
	package->evnt1 = 0x00;
	package->evnt2 = 0x00;
	package_complete = 1;
      } else {
	midix->running_status = byte;
 8012338:	7123      	strb	r3, [r4, #4]
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];
 801233a:	5c89      	ldrb	r1, [r1, r2]
 801233c:	7161      	strb	r1, [r4, #5]

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
 801233e:	b109      	cbz	r1, 8012344 <MIOS32_UART_MIDI_PackageReceive+0x58>
//! \return -1: no package in buffer
//! \return -10: incoming MIDI package timed out (incomplete package received)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageReceive(u8 uart_port, mios32_midi_package_t *package)
{
 8012340:	2100      	movs	r1, #0
 8012342:	e037      	b.n	80123b4 <MIOS32_UART_MIDI_PackageReceive+0xc8>
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];
 8012344:	f000 000f 	and.w	r0, r0, #15
 8012348:	4a53      	ldr	r2, [pc, #332]	; (8012498 <MIOS32_UART_MIDI_PackageReceive+0x1ac>)
 801234a:	5c12      	ldrb	r2, [r2, r0]

	  if( byte == 0xf0 ) {
 801234c:	2bf0      	cmp	r3, #240	; 0xf0
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];
 801234e:	7162      	strb	r2, [r4, #5]

	  if( byte == 0xf0 ) {
 8012350:	d103      	bne.n	801235a <MIOS32_UART_MIDI_PackageReceive+0x6e>
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
	    midix->sysex_ctr = 0x01;
 8012352:	2201      	movs	r2, #1

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];

	  if( byte == 0xf0 ) {
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
 8012354:	7063      	strb	r3, [r4, #1]
	    midix->sysex_ctr = 0x01;
 8012356:	71e2      	strb	r2, [r4, #7]
 8012358:	e7f2      	b.n	8012340 <MIOS32_UART_MIDI_PackageReceive+0x54>
	  } else if( byte == 0xf7 ) {
 801235a:	2bf7      	cmp	r3, #247	; 0xf7
 801235c:	d11d      	bne.n	801239a <MIOS32_UART_MIDI_PackageReceive+0xae>
	    switch( midix->sysex_ctr ) {
 801235e:	79e2      	ldrb	r2, [r4, #7]
 8012360:	7820      	ldrb	r0, [r4, #0]
 8012362:	b142      	cbz	r2, 8012376 <MIOS32_UART_MIDI_PackageReceive+0x8a>
 8012364:	2a01      	cmp	r2, #1
 8012366:	d10e      	bne.n	8012386 <MIOS32_UART_MIDI_PackageReceive+0x9a>
		midix->package.evnt0 = 0xf7;
		midix->package.evnt1 = 0x00;
		midix->package.evnt2 = 0x00;
		break;
	      case 1:
		midix->package.cin = 6; // 6: SysEx ends with two bytes
 8012368:	2206      	movs	r2, #6
 801236a:	f362 0003 	bfi	r0, r2, #0, #4
 801236e:	7020      	strb	r0, [r4, #0]
		// midix->package.evnt0 = // already stored
		midix->package.evnt1 = 0xf7;
 8012370:	70a3      	strb	r3, [r4, #2]
		midix->package.evnt2 = 0x00;
 8012372:	70e1      	strb	r1, [r4, #3]
		break;
 8012374:	e00c      	b.n	8012390 <MIOS32_UART_MIDI_PackageReceive+0xa4>
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
	    midix->sysex_ctr = 0x01;
	  } else if( byte == 0xf7 ) {
	    switch( midix->sysex_ctr ) {
 	      case 0:
		midix->package.cin = 5; // 5: SysEx ends with single byte
 8012376:	2105      	movs	r1, #5
 8012378:	f361 0003 	bfi	r0, r1, #0, #4
 801237c:	7020      	strb	r0, [r4, #0]
		midix->package.evnt0 = 0xf7;
 801237e:	7063      	strb	r3, [r4, #1]
		midix->package.evnt1 = 0x00;
 8012380:	70a2      	strb	r2, [r4, #2]
		midix->package.evnt2 = 0x00;
 8012382:	70e2      	strb	r2, [r4, #3]
		break;
 8012384:	e004      	b.n	8012390 <MIOS32_UART_MIDI_PackageReceive+0xa4>
		// midix->package.evnt0 = // already stored
		midix->package.evnt1 = 0xf7;
		midix->package.evnt2 = 0x00;
		break;
	      default:
		midix->package.cin = 7; // 7: SysEx ends with three bytes
 8012386:	2107      	movs	r1, #7
 8012388:	f361 0003 	bfi	r0, r1, #0, #4
 801238c:	7020      	strb	r0, [r4, #0]
		// midix->package.evnt0 = // already stored
		// midix->package.evnt1 = // already stored
		midix->package.evnt2 = 0xf7;
 801238e:	70e3      	strb	r3, [r4, #3]
		break;
	    }
	    *package = midix->package;
 8012390:	6823      	ldr	r3, [r4, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
 8012392:	2000      	movs	r0, #0
		// midix->package.evnt0 = // already stored
		// midix->package.evnt1 = // already stored
		midix->package.evnt2 = 0xf7;
		break;
	    }
	    *package = midix->package;
 8012394:	603b      	str	r3, [r7, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
 8012396:	71e0      	strb	r0, [r4, #7]
 8012398:	e00b      	b.n	80123b2 <MIOS32_UART_MIDI_PackageReceive+0xc6>
	  } else if( !midix->expected_bytes ) {
 801239a:	2a00      	cmp	r2, #0
 801239c:	d1d0      	bne.n	8012340 <MIOS32_UART_MIDI_PackageReceive+0x54>
	    // e.g. tune request (with no additional byte)
	    midix->package.cin = 5; // 5: SysEx ends with single byte
 801239e:	7821      	ldrb	r1, [r4, #0]
	    midix->package.evnt0 = byte;
 80123a0:	7063      	strb	r3, [r4, #1]
	    *package = midix->package;
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
	  } else if( !midix->expected_bytes ) {
	    // e.g. tune request (with no additional byte)
	    midix->package.cin = 5; // 5: SysEx ends with single byte
 80123a2:	2005      	movs	r0, #5
 80123a4:	f360 0103 	bfi	r1, r0, #0, #4
 80123a8:	7021      	strb	r1, [r4, #0]
	    midix->package.evnt0 = byte;
	    midix->package.evnt1 = 0x00;
 80123aa:	70a2      	strb	r2, [r4, #2]
	    midix->package.evnt2 = 0x00;
 80123ac:	70e2      	strb	r2, [r4, #3]
	    *package = midix->package;
 80123ae:	6823      	ldr	r3, [r4, #0]
 80123b0:	603b      	str	r3, [r7, #0]
	    package_complete = 1; // -> forward to caller
 80123b2:	2101      	movs	r1, #1
	  }
	}

	midix->wait_bytes = midix->expected_bytes;
 80123b4:	7963      	ldrb	r3, [r4, #5]
	midix->timeout_ctr = 0; // reset timeout counter
 80123b6:	2000      	movs	r0, #0
	    *package = midix->package;
	    package_complete = 1; // -> forward to caller
	  }
	}

	midix->wait_bytes = midix->expected_bytes;
 80123b8:	71a3      	strb	r3, [r4, #6]
	midix->timeout_ctr = 0; // reset timeout counter
 80123ba:	8120      	strh	r0, [r4, #8]
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 80123bc:	2900      	cmp	r1, #0
 80123be:	d0a4      	beq.n	801230a <MIOS32_UART_MIDI_PackageReceive+0x1e>
 80123c0:	e063      	b.n	801248a <MIOS32_UART_MIDI_PackageReceive+0x19e>

	midix->wait_bytes = midix->expected_bytes;
	midix->timeout_ctr = 0; // reset timeout counter
      }
    } else {
      if( midix->running_status == 0xf0 ) {
 80123c2:	7922      	ldrb	r2, [r4, #4]
 80123c4:	2af0      	cmp	r2, #240	; 0xf0
 80123c6:	d117      	bne.n	80123f8 <MIOS32_UART_MIDI_PackageReceive+0x10c>
	switch( ++midix->sysex_ctr ) {
 80123c8:	79e2      	ldrb	r2, [r4, #7]
 80123ca:	1c51      	adds	r1, r2, #1
 80123cc:	b2c8      	uxtb	r0, r1
 80123ce:	2801      	cmp	r0, #1
 80123d0:	71e0      	strb	r0, [r4, #7]
 80123d2:	d003      	beq.n	80123dc <MIOS32_UART_MIDI_PackageReceive+0xf0>
 80123d4:	2802      	cmp	r0, #2
 80123d6:	d103      	bne.n	80123e0 <MIOS32_UART_MIDI_PackageReceive+0xf4>
  	  case 1:
	    midix->package.evnt0 = byte; 
	    break;
	  case 2: 
	    midix->package.evnt1 = byte; 
 80123d8:	70a3      	strb	r3, [r4, #2]
	    break;
 80123da:	e796      	b.n	801230a <MIOS32_UART_MIDI_PackageReceive+0x1e>
      }
    } else {
      if( midix->running_status == 0xf0 ) {
	switch( ++midix->sysex_ctr ) {
  	  case 1:
	    midix->package.evnt0 = byte; 
 80123dc:	7063      	strb	r3, [r4, #1]
	    break;
 80123de:	e794      	b.n	801230a <MIOS32_UART_MIDI_PackageReceive+0x1e>
	  case 2: 
	    midix->package.evnt1 = byte; 
	    break;
	  default: // 3
	    midix->package.evnt2 = byte;
 80123e0:	70e3      	strb	r3, [r4, #3]

	    // Send three-byte event
	    midix->package.cin = 4;  // 4: SysEx starts or continues
 80123e2:	5dab      	ldrb	r3, [r5, r6]
 80123e4:	2204      	movs	r2, #4
 80123e6:	f362 0303 	bfi	r3, r2, #0, #4
 80123ea:	55ab      	strb	r3, [r5, r6]
	    *package = midix->package;
 80123ec:	59a9      	ldr	r1, [r5, r6]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // reset and prepare for next packet
 80123ee:	2000      	movs	r0, #0
	  default: // 3
	    midix->package.evnt2 = byte;

	    // Send three-byte event
	    midix->package.cin = 4;  // 4: SysEx starts or continues
	    *package = midix->package;
 80123f0:	6039      	str	r1, [r7, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // reset and prepare for next packet
 80123f2:	71e0      	strb	r0, [r4, #7]
	    midix->timeout_ctr = 0; // reset timeout counter
 80123f4:	8120      	strh	r0, [r4, #8]
 80123f6:	e048      	b.n	801248a <MIOS32_UART_MIDI_PackageReceive+0x19e>
	}
      } else { // Common MIDI message or 0xf1 >= status >= 0xf7
	if( !midix->wait_bytes ) {
 80123f8:	79a0      	ldrb	r0, [r4, #6]
 80123fa:	b920      	cbnz	r0, 8012406 <MIOS32_UART_MIDI_PackageReceive+0x11a>
	  // received new MIDI event with running status
	  midix->wait_bytes = midix->expected_bytes - 1;
 80123fc:	7962      	ldrb	r2, [r4, #5]
	  midix->timeout_ctr = 0; // reset timeout counter
 80123fe:	8120      	strh	r0, [r4, #8]
	    midix->timeout_ctr = 0; // reset timeout counter
	}
      } else { // Common MIDI message or 0xf1 >= status >= 0xf7
	if( !midix->wait_bytes ) {
	  // received new MIDI event with running status
	  midix->wait_bytes = midix->expected_bytes - 1;
 8012400:	1e51      	subs	r1, r2, #1
 8012402:	71a1      	strb	r1, [r4, #6]
 8012404:	e001      	b.n	801240a <MIOS32_UART_MIDI_PackageReceive+0x11e>
	  midix->timeout_ctr = 0; // reset timeout counter
	} else {
	  --midix->wait_bytes;
 8012406:	1e41      	subs	r1, r0, #1
 8012408:	71a1      	strb	r1, [r4, #6]
	}

	if( midix->expected_bytes == 1 ) {
 801240a:	7960      	ldrb	r0, [r4, #5]
 801240c:	2801      	cmp	r0, #1
 801240e:	d102      	bne.n	8012416 <MIOS32_UART_MIDI_PackageReceive+0x12a>
	  midix->package.evnt1 = byte;
 8012410:	70a3      	strb	r3, [r4, #2]
	  midix->package.evnt2 = 0x00;
 8012412:	2300      	movs	r3, #0
 8012414:	e003      	b.n	801241e <MIOS32_UART_MIDI_PackageReceive+0x132>
	} else {
	  if( midix->wait_bytes )
 8012416:	79a2      	ldrb	r2, [r4, #6]
 8012418:	b10a      	cbz	r2, 801241e <MIOS32_UART_MIDI_PackageReceive+0x132>
	    midix->package.evnt1 = byte;
 801241a:	70a3      	strb	r3, [r4, #2]
 801241c:	e000      	b.n	8012420 <MIOS32_UART_MIDI_PackageReceive+0x134>
	  else
	    midix->package.evnt2 = byte;
 801241e:	70e3      	strb	r3, [r4, #3]
	}
	
	if( !midix->wait_bytes ) {
 8012420:	79a3      	ldrb	r3, [r4, #6]
 8012422:	2b00      	cmp	r3, #0
 8012424:	f47f af71 	bne.w	801230a <MIOS32_UART_MIDI_PackageReceive+0x1e>
	  if( (midix->running_status & 0xf0) != 0xf0 ) {
 8012428:	7920      	ldrb	r0, [r4, #4]
 801242a:	5daa      	ldrb	r2, [r5, r6]
 801242c:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
 8012430:	29f0      	cmp	r1, #240	; 0xf0
 8012432:	d001      	beq.n	8012438 <MIOS32_UART_MIDI_PackageReceive+0x14c>
	    midix->package.cin = midix->running_status >> 4; // common MIDI message
 8012434:	0901      	lsrs	r1, r0, #4
 8012436:	e008      	b.n	801244a <MIOS32_UART_MIDI_PackageReceive+0x15e>
	  } else {
	    switch( midix->expected_bytes ) { // MEMO: == 0 comparison was a bug in original MBHP_USB code
 8012438:	7963      	ldrb	r3, [r4, #5]
 801243a:	b11b      	cbz	r3, 8012444 <MIOS32_UART_MIDI_PackageReceive+0x158>
 801243c:	2b01      	cmp	r3, #1
 801243e:	d103      	bne.n	8012448 <MIOS32_UART_MIDI_PackageReceive+0x15c>
  	      case 0: 
		midix->package.cin = 5; // 5: SysEx common with one byte
		break;
  	      case 1: 
		midix->package.cin = 2; // 2: SysEx common with two bytes
 8012440:	2102      	movs	r1, #2
 8012442:	e002      	b.n	801244a <MIOS32_UART_MIDI_PackageReceive+0x15e>
	  if( (midix->running_status & 0xf0) != 0xf0 ) {
	    midix->package.cin = midix->running_status >> 4; // common MIDI message
	  } else {
	    switch( midix->expected_bytes ) { // MEMO: == 0 comparison was a bug in original MBHP_USB code
  	      case 0: 
		midix->package.cin = 5; // 5: SysEx common with one byte
 8012444:	2105      	movs	r1, #5
 8012446:	e000      	b.n	801244a <MIOS32_UART_MIDI_PackageReceive+0x15e>
		break;
  	      case 1: 
		midix->package.cin = 2; // 2: SysEx common with two bytes
		break;
  	      default: 
		midix->package.cin = 3; // 3: SysEx common with three bytes
 8012448:	2103      	movs	r1, #3
 801244a:	f361 0203 	bfi	r2, r1, #0, #4
 801244e:	55aa      	strb	r2, [r5, r6]
		break;
	    }
	  }

	  midix->package.evnt0 = midix->running_status;
 8012450:	7060      	strb	r0, [r4, #1]
	  // midix->package.evnt1 = // already stored
	  // midix->package.evnt2 = // already stored
	  *package = midix->package;
 8012452:	59a8      	ldr	r0, [r5, r6]
 8012454:	6038      	str	r0, [r7, #0]
 8012456:	e018      	b.n	801248a <MIOS32_UART_MIDI_PackageReceive+0x19e>
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8012458:	2000      	movs	r0, #0
      }
    }
  }

  // incoming MIDI package timed out (incomplete package received)
  if( midix->wait_bytes && midix->timeout_ctr > 1000 ) { // 1000 mS = 1 second
 801245a:	79a1      	ldrb	r1, [r4, #6]
 801245c:	b171      	cbz	r1, 801247c <MIOS32_UART_MIDI_PackageReceive+0x190>
 801245e:	8922      	ldrh	r2, [r4, #8]
 8012460:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8012464:	d90a      	bls.n	801247c <MIOS32_UART_MIDI_PackageReceive+0x190>
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8012466:	2300      	movs	r3, #0
 8012468:	51ab      	str	r3, [r5, r6]
  midix->running_status = 0x00;
 801246a:	7123      	strb	r3, [r4, #4]
  midix->expected_bytes = 0x00;
 801246c:	7163      	strb	r3, [r4, #5]
  midix->wait_bytes = 0x00;
 801246e:	71a3      	strb	r3, [r4, #6]
  midix->sysex_ctr = 0x00;
 8012470:	71e3      	strb	r3, [r4, #7]
  midix->timeout_ctr = 0;
 8012472:	8123      	strh	r3, [r4, #8]
  // incoming MIDI package timed out (incomplete package received)
  if( midix->wait_bytes && midix->timeout_ctr > 1000 ) { // 1000 mS = 1 second
    // stop waiting
    MIOS32_UART_MIDI_RecordReset(uart_port);
    // notify that incomplete package has been received
    return -10;
 8012474:	f06f 0009 	mvn.w	r0, #9
 8012478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  // return 0 if new package in buffer, otherwise -1
  return package_complete ? 0 : -1;
 801247c:	2800      	cmp	r0, #0
 801247e:	bf0c      	ite	eq
 8012480:	f04f 30ff 	moveq.w	r0, #4294967295
 8012484:	2000      	movne	r0, #0
 8012486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 801248a:	2001      	movs	r0, #1
 801248c:	e7e5      	b.n	801245a <MIOS32_UART_MIDI_PackageReceive+0x16e>
 801248e:	bf00      	nop
 8012490:	200001c0 	.word	0x200001c0
 8012494:	0801c257 	.word	0x0801c257
 8012498:	0801c12c 	.word	0x0801c12c

0801249c <MIOS32_SPI_MIDI_Init>:
  MIOS32_SPI_MIDI_InitScanBuffer((u32 *)&tx_upstream_buffer[0]);
  MIOS32_SPI_MIDI_InitScanBuffer((u32 *)&tx_upstream_buffer[1]);

  return status;
#endif
}
 801249c:	f04f 30ff 	mov.w	r0, #4294967295
 80124a0:	4770      	bx	lr

080124a2 <MIOS32_SPI_MIDI_Periodic_mS>:
  MIOS32_SPI_MIDI_MUTEX_GIVE;
#endif

  return 0; // no error
#endif
}
 80124a2:	2000      	movs	r0, #0
 80124a4:	4770      	bx	lr

080124a6 <MIOS32_SPI_MIDI_PackageSend>:
  if( error >= 0 ) // no error: reset timeout counter
    timeout_ctr = 0;

  return error;
#endif
}
 80124a6:	f04f 30ff 	mov.w	r0, #4294967295
 80124aa:	4770      	bx	lr

080124ac <MIOS32_SPI_MIDI_PackageReceive>:
  --rx_ringbuffer_size;
  MIOS32_IRQ_Enable();

  return rx_ringbuffer_size;
#endif
}
 80124ac:	f04f 30ff 	mov.w	r0, #4294967295
 80124b0:	4770      	bx	lr

080124b2 <MIOS32_IIC_MIDI_Init>:
  // TODO: send optimisation flag to IIC_MIDI device once it has been scanned!
#endif

  return 0; // no error
#endif
}
 80124b2:	f04f 30ff 	mov.w	r0, #4294967295
 80124b6:	4770      	bx	lr

080124b8 <MIOS32_IIC_MIDI_Periodic_mS>:
s32 MIOS32_IIC_MIDI_Periodic_mS(void)
{
  // currently only a dummy - RS optimisation handled by IIC_MIDI device

  return 0;
}
 80124b8:	2000      	movs	r0, #0
 80124ba:	4770      	bx	lr

080124bc <MIOS32_IIC_MIDI_PackageSend>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IIC_MIDI_PackageSend(u8 iic_port, mios32_midi_package_t package)
{
  return _MIOS32_IIC_MIDI_PackageSend(iic_port, package, 0); // blocking mode
}
 80124bc:	f04f 30ff 	mov.w	r0, #4294967295
 80124c0:	4770      	bx	lr

080124c2 <MIOS32_IIC_BS_Init>:
  if( MIOS32_IIC_BS_ScanBankSticks() < 0 )
    return -2; // we don't expect that any other task accesses the IIC port yet!

  return 0; // no error
#endif
}
 80124c2:	f04f 30ff 	mov.w	r0, #4294967295
 80124c6:	4770      	bx	lr

080124c8 <MIOS32_MF_Init>:
    mf_state[i].config.cfg.pwm_duty_cycle_up = 1;
  }

  return 0;
#endif
}
 80124c8:	f04f 30ff 	mov.w	r0, #4294967295
 80124cc:	4770      	bx	lr

080124ce <MIOS32_SDCARD_Init>:
//! Initializes SPI pins and peripheral to access MMC/SD Card
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_Init(u32 mode)
{
 80124ce:	b510      	push	{r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 80124d0:	4604      	mov	r4, r0
 80124d2:	b948      	cbnz	r0, 80124e8 <MIOS32_SDCARD_Init+0x1a>
    return -1; // unsupported mode
	
  MIOS32_SDCARD_MUTEX_TAKE;
  // ensure that fast pin drivers are activated
  MIOS32_SPI_IO_Init(MIOS32_SDCARD_SPI, MIOS32_SPI_PIN_DRIVER_STRONG);
 80124d4:	4601      	mov	r1, r0
 80124d6:	f000 fbb1 	bl	8012c3c <MIOS32_SPI_IO_Init>

  // init SPI port for slow frequency access (ca. 0.3 MBit/s)
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_256);
 80124da:	4620      	mov	r0, r4
 80124dc:	2103      	movs	r1, #3
 80124de:	2207      	movs	r2, #7
 80124e0:	f000 fd4c 	bl	8012f7c <MIOS32_SPI_TransferModeInit>

  MIOS32_SDCARD_MUTEX_GIVE;
 
  return 0; // no error
 80124e4:	4620      	mov	r0, r4
 80124e6:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80124e8:	f04f 30ff 	mov.w	r0, #4294967295
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_256);

  MIOS32_SDCARD_MUTEX_GIVE;
 
  return 0; // no error
}
 80124ec:	bd10      	pop	{r4, pc}

080124ee <MIOS32_SDCARD_SendSDCCmd>:
//! \param[in] crc precalculated CRC
//! \return >= 0x00 if command has been sent successfully (contains received byte)
//! \return -1 if no response from SD Card (timeout)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SendSDCCmd(u8 cmd, u32 addr, u8 crc)
{
 80124ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124f0:	4617      	mov	r7, r2
  int i;
  s32 ret;

  if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
 80124f2:	0602      	lsls	r2, r0, #24
//! \param[in] crc precalculated CRC
//! \return >= 0x00 if command has been sent successfully (contains received byte)
//! \return -1 if no response from SD Card (timeout)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SendSDCCmd(u8 cmd, u32 addr, u8 crc)
{
 80124f4:	4605      	mov	r5, r0
 80124f6:	460e      	mov	r6, r1
  int i;
  s32 ret;

  if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
 80124f8:	d509      	bpl.n	801250e <MIOS32_SDCARD_SendSDCCmd+0x20>
	cmd &= 0x7F;
	ret = MIOS32_SDCARD_SendSDCCmd(SDCMD_APP_CMD, 0,SDCMD_APP_CMD_CRC);
 80124fa:	2077      	movs	r0, #119	; 0x77
 80124fc:	2100      	movs	r1, #0
 80124fe:	22ff      	movs	r2, #255	; 0xff
 8012500:	f7ff fff5 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
	if (ret > 1) return ret;
 8012504:	2801      	cmp	r0, #1
  int i;
  s32 ret;

  if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
	cmd &= 0x7F;
	ret = MIOS32_SDCARD_SendSDCCmd(SDCMD_APP_CMD, 0,SDCMD_APP_CMD_CRC);
 8012506:	4604      	mov	r4, r0
	if (ret > 1) return ret;
 8012508:	dc70      	bgt.n	80125ec <MIOS32_SDCARD_SendSDCCmd+0xfe>
{
  int i;
  s32 ret;

  if (cmd & 0x80) {	/* ACMD<n> is the command sequence of CMD55-CMD<n> */
	cmd &= 0x7F;
 801250a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
	ret = MIOS32_SDCARD_SendSDCCmd(SDCMD_APP_CMD, 0,SDCMD_APP_CMD_CRC);
	if (ret > 1) return ret;
  }
  // activate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 801250e:	2000      	movs	r0, #0
 8012510:	4602      	mov	r2, r0
 8012512:	4601      	mov	r1, r0
 8012514:	f000 fcd0 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>

  // transfer to card
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (u8)cmd);
 8012518:	2000      	movs	r0, #0
 801251a:	4629      	mov	r1, r5
 801251c:	f000 fd08 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >> 24) & 0xff);
 8012520:	0e31      	lsrs	r1, r6, #24
 8012522:	2000      	movs	r0, #0
 8012524:	f000 fd04 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >> 16) & 0xff);
 8012528:	2000      	movs	r0, #0
 801252a:	f3c6 4107 	ubfx	r1, r6, #16, #8
 801252e:	f000 fcff 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  8) & 0xff);
 8012532:	2000      	movs	r0, #0
 8012534:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8012538:	f000 fcfa 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  0) & 0xff);
 801253c:	2000      	movs	r0, #0
 801253e:	b2f1      	uxtb	r1, r6
 8012540:	f000 fcf6 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, crc);
 8012544:	2000      	movs	r0, #0
 8012546:	4639      	mov	r1, r7
 8012548:	f000 fcf2 	bl	8012f30 <MIOS32_SPI_TransferByte>

  u8 timeout = 0;

  if( cmd == SDCMD_SEND_STATUS ) {
 801254c:	2d4d      	cmp	r5, #77	; 0x4d
 801254e:	d112      	bne.n	8012576 <MIOS32_SDCARD_SendSDCCmd+0x88>

  // one dummy read
    MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8012550:	21ff      	movs	r1, #255	; 0xff
 8012552:	2000      	movs	r0, #0
 8012554:	f000 fcec 	bl	8012f30 <MIOS32_SPI_TransferByte>

    // read two bytes (only last value will be returned)
    ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8012558:	21ff      	movs	r1, #255	; 0xff
 801255a:	2000      	movs	r0, #0
 801255c:	f000 fce8 	bl	8012f30 <MIOS32_SPI_TransferByte>
    ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8012560:	2000      	movs	r0, #0
 8012562:	21ff      	movs	r1, #255	; 0xff
 8012564:	f000 fce4 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >> 16) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  8) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  0) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, crc);

  u8 timeout = 0;
 8012568:	f1b0 03ff 	subs.w	r3, r0, #255	; 0xff
 801256c:	425a      	negs	r2, r3
  // one dummy read
    MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);

    // read two bytes (only last value will be returned)
    ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
    ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 801256e:	4604      	mov	r4, r0
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >> 16) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  8) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  0) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, crc);

  u8 timeout = 0;
 8012570:	eb52 0603 	adcs.w	r6, r2, r3
 8012574:	e02a      	b.n	80125cc <MIOS32_SDCARD_SendSDCCmd+0xde>

  if( cmd == SDCMD_SEND_STATUS ) {
 8012576:	2608      	movs	r6, #8
      timeout = 1;
	  
  } else {
    // wait for standard R1 response
    for(i=0; i<8; ++i) {
      if( (ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)) != 0xff )
 8012578:	2000      	movs	r0, #0
 801257a:	21ff      	movs	r1, #255	; 0xff
 801257c:	f000 fcd8 	bl	8012f30 <MIOS32_SPI_TransferByte>
 8012580:	28ff      	cmp	r0, #255	; 0xff
 8012582:	4604      	mov	r4, r0
 8012584:	d103      	bne.n	801258e <MIOS32_SDCARD_SendSDCCmd+0xa0>
    if( ret == 0xff )
      timeout = 1;
	  
  } else {
    // wait for standard R1 response
    for(i=0; i<8; ++i) {
 8012586:	3e01      	subs	r6, #1
 8012588:	d1f6      	bne.n	8012578 <MIOS32_SDCARD_SendSDCCmd+0x8a>
      if( (ret=MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)) != 0xff )
	    break;
    }
    if( i == 8 )
      timeout = 1;
 801258a:	2601      	movs	r6, #1
 801258c:	e000      	b.n	8012590 <MIOS32_SDCARD_SendSDCCmd+0xa2>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >> 16) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  8) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, (addr >>  0) & 0xff);
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, crc);

  u8 timeout = 0;
 801258e:	2600      	movs	r6, #0
    }
    if( i == 8 )
      timeout = 1;
  }
  
  if ((cmd == SDCMD_SEND_IF_COND || cmd == SDCMD_READ_OCR) && timeout!=1){
 8012590:	2d48      	cmp	r5, #72	; 0x48
 8012592:	d001      	beq.n	8012598 <MIOS32_SDCARD_SendSDCCmd+0xaa>
 8012594:	2d7a      	cmp	r5, #122	; 0x7a
 8012596:	d119      	bne.n	80125cc <MIOS32_SDCARD_SendSDCCmd+0xde>
 8012598:	b9c6      	cbnz	r6, 80125cc <MIOS32_SDCARD_SendSDCCmd+0xde>
  
	// This is a 4 byte R3 or R7 response.
    ret=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<24);
 801259a:	21ff      	movs	r1, #255	; 0xff
 801259c:	2000      	movs	r0, #0
 801259e:	f000 fcc7 	bl	8012f30 <MIOS32_SPI_TransferByte>
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<16);
 80125a2:	21ff      	movs	r1, #255	; 0xff
  }
  
  if ((cmd == SDCMD_SEND_IF_COND || cmd == SDCMD_READ_OCR) && timeout!=1){
  
	// This is a 4 byte R3 or R7 response.
    ret=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<24);
 80125a4:	0604      	lsls	r4, r0, #24
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<16);
 80125a6:	2000      	movs	r0, #0
 80125a8:	f000 fcc2 	bl	8012f30 <MIOS32_SPI_TransferByte>
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<8);
 80125ac:	21ff      	movs	r1, #255	; 0xff
  
  if ((cmd == SDCMD_SEND_IF_COND || cmd == SDCMD_READ_OCR) && timeout!=1){
  
	// This is a 4 byte R3 or R7 response.
    ret=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<24);
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<16);
 80125ae:	4606      	mov	r6, r0
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<8);
 80125b0:	2000      	movs	r0, #0
 80125b2:	f000 fcbd 	bl	8012f30 <MIOS32_SPI_TransferByte>
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<0);
 80125b6:	21ff      	movs	r1, #255	; 0xff
  if ((cmd == SDCMD_SEND_IF_COND || cmd == SDCMD_READ_OCR) && timeout!=1){
  
	// This is a 4 byte R3 or R7 response.
    ret=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<24);
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<16);
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<8);
 80125b8:	4605      	mov	r5, r0
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<0);
 80125ba:	2000      	movs	r0, #0
 80125bc:	f000 fcb8 	bl	8012f30 <MIOS32_SPI_TransferByte>
  
  if ((cmd == SDCMD_SEND_IF_COND || cmd == SDCMD_READ_OCR) && timeout!=1){
  
	// This is a 4 byte R3 or R7 response.
    ret=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<24);
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<16);
 80125c0:	ea44 4106 	orr.w	r1, r4, r6, lsl #16
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<8);
 80125c4:	4308      	orrs	r0, r1
    ret|=(MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff)<<0);
 80125c6:	ea40 2405 	orr.w	r4, r0, r5, lsl #8
 80125ca:	2600      	movs	r6, #0
	
  } 

  // required clocking (see spec)
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80125cc:	2000      	movs	r0, #0
 80125ce:	21ff      	movs	r1, #255	; 0xff
 80125d0:	f000 fcae 	bl	8012f30 <MIOS32_SPI_TransferByte>

  // deactivate chip-select on timeout, and return error code
  if( timeout ) {
 80125d4:	b156      	cbz	r6, 80125ec <MIOS32_SDCARD_SendSDCCmd+0xfe>
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 80125d6:	2000      	movs	r0, #0
 80125d8:	4601      	mov	r1, r0
 80125da:	2201      	movs	r2, #1
 80125dc:	f000 fc6c 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>

	// Send dummy byte once deactivated to drop cards DO
    MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80125e0:	2000      	movs	r0, #0
 80125e2:	21ff      	movs	r1, #255	; 0xff
 80125e4:	f000 fca4 	bl	8012f30 <MIOS32_SPI_TransferByte>
    return -1;
 80125e8:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  // else return received value - don't deactivate chip select or mutex (for continuous access)
  return ret;
}
 80125ec:	4620      	mov	r0, r4
 80125ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080125f0 <MIOS32_SDCARD_PowerOn>:
  s32 status = 0;
  int i;

  MIOS32_SDCARD_MUTEX_TAKE;
  // ensure that chip select line deactivated
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 80125f0:	2000      	movs	r0, #0
/////////////////////////////////////////////////////////////////////////////
//! Connects to SD Card
//! \return < 0 if initialisation sequence failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_PowerOn(void)
{
 80125f2:	b538      	push	{r3, r4, r5, lr}
  s32 status = 0;
  int i;

  MIOS32_SDCARD_MUTEX_TAKE;
  // ensure that chip select line deactivated
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 80125f4:	4601      	mov	r1, r0
 80125f6:	2201      	movs	r2, #1
 80125f8:	f000 fc5e 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>

  // init SPI port for slow frequency access (ca. 0.3 MBit/s)
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_256);
 80125fc:	2000      	movs	r0, #0
 80125fe:	2103      	movs	r1, #3
 8012600:	2207      	movs	r2, #7
 8012602:	f000 fcbb 	bl	8012f7c <MIOS32_SPI_TransferModeInit>
 8012606:	240a      	movs	r4, #10

  // send 80 clock cycles to start up
  for(i=0; i<10; ++i)
    MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8012608:	2000      	movs	r0, #0
 801260a:	21ff      	movs	r1, #255	; 0xff
 801260c:	f000 fc90 	bl	8012f30 <MIOS32_SPI_TransferByte>

  // init SPI port for slow frequency access (ca. 0.3 MBit/s)
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_256);

  // send 80 clock cycles to start up
  for(i=0; i<10; ++i)
 8012610:	3c01      	subs	r4, #1
 8012612:	d1f9      	bne.n	8012608 <MIOS32_SDCARD_PowerOn+0x18>
    MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);

  // activate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8012614:	4621      	mov	r1, r4
 8012616:	4622      	mov	r2, r4
 8012618:	4620      	mov	r0, r4
 801261a:	f000 fc4d 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>

  // wait for 1 mS
  MIOS32_DELAY_Wait_uS(1000);
 801261e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012622:	f001 f977 	bl	8013914 <MIOS32_DELAY_Wait_uS>

  // send CMD0 to reset the media
  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_GO_IDLE_STATE, 0, SDCMD_GO_IDLE_STATE_CRC)) < 0 ) 
 8012626:	2040      	movs	r0, #64	; 0x40
 8012628:	2295      	movs	r2, #149	; 0x95
 801262a:	4621      	mov	r1, r4
 801262c:	f7ff ff5f 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
 8012630:	1e05      	subs	r5, r0, #0
 8012632:	db54      	blt.n	80126de <MIOS32_SDCARD_PowerOn+0xee>
    goto error;
  
  CardType=0;
 8012634:	4d2f      	ldr	r5, [pc, #188]	; (80126f4 <MIOS32_SDCARD_PowerOn+0x104>)

  // A card is detected, what type is it? Use SEND_IF_COND (CMD8) to find out
  if ((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_IF_COND, 0x1AA, SDCMD_SEND_IF_COND_CRC)) == 0x01aa ) { 
 8012636:	2048      	movs	r0, #72	; 0x48
 8012638:	2287      	movs	r2, #135	; 0x87
 801263a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa

  // send CMD0 to reset the media
  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_GO_IDLE_STATE, 0, SDCMD_GO_IDLE_STATE_CRC)) < 0 ) 
    goto error;
  
  CardType=0;
 801263e:	702c      	strb	r4, [r5, #0]

  // A card is detected, what type is it? Use SEND_IF_COND (CMD8) to find out
  if ((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_IF_COND, 0x1AA, SDCMD_SEND_IF_COND_CRC)) == 0x01aa ) { 
 8012640:	f7ff ff55 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
 8012644:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
 8012648:	d10e      	bne.n	8012668 <MIOS32_SDCARD_PowerOn+0x78>
 801264a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
	// SDHC Card Detected.

	// We now check to see if we should use block mode or byte mode. Command is SEND_OP_COND_SDC (ACMD41) with HCS (bit 30) set
	for (i=0;i<16384;i++) 
	  if((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0x01<<30, SDCMD_SEND_OP_COND_SDC_CRC)) == 0 ) 
 801264e:	20e9      	movs	r0, #233	; 0xe9
 8012650:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012654:	22ff      	movs	r2, #255	; 0xff
 8012656:	f7ff ff4a 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
 801265a:	4605      	mov	r5, r0
 801265c:	b390      	cbz	r0, 80126c4 <MIOS32_SDCARD_PowerOn+0xd4>
  // A card is detected, what type is it? Use SEND_IF_COND (CMD8) to find out
  if ((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_IF_COND, 0x1AA, SDCMD_SEND_IF_COND_CRC)) == 0x01aa ) { 
	// SDHC Card Detected.

	// We now check to see if we should use block mode or byte mode. Command is SEND_OP_COND_SDC (ACMD41) with HCS (bit 30) set
	for (i=0;i<16384;i++) 
 801265e:	3c01      	subs	r4, #1
 8012660:	d1f5      	bne.n	801264e <MIOS32_SDCARD_PowerOn+0x5e>
    MIOS32_SDCARD_SendSDCCmd(SDCMD_SET_BLOCKLEN, 512, SDCMD_SEND_OP_COND_CRC);
  }
  

  if( i == 16384 || CardType==0 ) 
    status=-2; // the last loop timed out or the cardtype was not detected...
 8012662:	f06f 0501 	mvn.w	r5, #1
 8012666:	e03a      	b.n	80126de <MIOS32_SDCARD_PowerOn+0xee>
	    status = -2;
    }
  } else { // Card is SDv1 or MMC. 
  
	//MMC will accept ACMD41 (SDv1 won't and requires CMD1) so send ACMD41 first and then CMD1 if that fails
	if ((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0, SDCMD_SEND_OP_COND_SDC_CRC)) <= 1 ) 
 8012668:	20e9      	movs	r0, #233	; 0xe9
 801266a:	22ff      	movs	r2, #255	; 0xff
 801266c:	4621      	mov	r1, r4
 801266e:	f7ff ff3e 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
 8012672:	2801      	cmp	r0, #1
 8012674:	dc01      	bgt.n	801267a <MIOS32_SDCARD_PowerOn+0x8a>
	  CardType=CT_SD1; 
 8012676:	2302      	movs	r3, #2
 8012678:	e000      	b.n	801267c <MIOS32_SDCARD_PowerOn+0x8c>
	else 
      CardType=CT_MMC;
 801267a:	2301      	movs	r3, #1
 801267c:	702b      	strb	r3, [r5, #0]
	  if((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0x01<<30, SDCMD_SEND_OP_COND_SDC_CRC)) == 0 ) 
		break;

	if(i < 16384) { 
	  status=MIOS32_SDCARD_SendSDCCmd(SDCMD_READ_OCR, 0, SDCMD_READ_OCR_CRC);
	  CardType=((status>>24) & 0x40)  ? CT_SD2 | CT_BLOCK : CT_SD2;
 801267e:	2400      	movs	r4, #0
	else 
      CardType=CT_MMC;
	  
	for (i=0;i<16384;i++) {

	  if (CardType==CT_SD1)
 8012680:	481c      	ldr	r0, [pc, #112]	; (80126f4 <MIOS32_SDCARD_PowerOn+0x104>)
 8012682:	7801      	ldrb	r1, [r0, #0]
 8012684:	2902      	cmp	r1, #2
 8012686:	d103      	bne.n	8012690 <MIOS32_SDCARD_PowerOn+0xa0>
		status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0, SDCMD_SEND_OP_COND_SDC_CRC);
 8012688:	20e9      	movs	r0, #233	; 0xe9
 801268a:	2100      	movs	r1, #0
 801268c:	22ff      	movs	r2, #255	; 0xff
 801268e:	e002      	b.n	8012696 <MIOS32_SDCARD_PowerOn+0xa6>
	  else 
	    status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND, 0, SDCMD_SEND_OP_COND_CRC);
 8012690:	2041      	movs	r0, #65	; 0x41
 8012692:	2100      	movs	r1, #0
 8012694:	22f9      	movs	r2, #249	; 0xf9
 8012696:	f7ff ff2a 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
		
	  if (status<0){
 801269a:	2800      	cmp	r0, #0
	for (i=0;i<16384;i++) {

	  if (CardType==CT_SD1)
		status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0, SDCMD_SEND_OP_COND_SDC_CRC);
	  else 
	    status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND, 0, SDCMD_SEND_OP_COND_CRC);
 801269c:	4605      	mov	r5, r0
		
	  if (status<0){
 801269e:	db04      	blt.n	80126aa <MIOS32_SDCARD_PowerOn+0xba>
		break;
	  }
	  if (status==0)
 80126a0:	d003      	beq.n	80126aa <MIOS32_SDCARD_PowerOn+0xba>
	if ((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0, SDCMD_SEND_OP_COND_SDC_CRC)) <= 1 ) 
	  CardType=CT_SD1; 
	else 
      CardType=CT_MMC;
	  
	for (i=0;i<16384;i++) {
 80126a2:	3401      	adds	r4, #1
 80126a4:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80126a8:	d1ea      	bne.n	8012680 <MIOS32_SDCARD_PowerOn+0x90>
	  if (status==0)
		break;
	}
	
	// The block size should already be 512 bytes but re-initialize just in case (ignore if it fails)
    MIOS32_SDCARD_SendSDCCmd(SDCMD_SET_BLOCKLEN, 512, SDCMD_SEND_OP_COND_CRC);
 80126aa:	2050      	movs	r0, #80	; 0x50
 80126ac:	22f9      	movs	r2, #249	; 0xf9
 80126ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80126b2:	f7ff ff1c 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
  }
  

  if( i == 16384 || CardType==0 ) 
 80126b6:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80126ba:	d0d2      	beq.n	8012662 <MIOS32_SDCARD_PowerOn+0x72>
 80126bc:	480d      	ldr	r0, [pc, #52]	; (80126f4 <MIOS32_SDCARD_PowerOn+0x104>)
 80126be:	7801      	ldrb	r1, [r0, #0]
 80126c0:	b969      	cbnz	r1, 80126de <MIOS32_SDCARD_PowerOn+0xee>
 80126c2:	e7ce      	b.n	8012662 <MIOS32_SDCARD_PowerOn+0x72>
	for (i=0;i<16384;i++) 
	  if((status=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_OP_COND_SDC, 0x01<<30, SDCMD_SEND_OP_COND_SDC_CRC)) == 0 ) 
		break;

	if(i < 16384) { 
	  status=MIOS32_SDCARD_SendSDCCmd(SDCMD_READ_OCR, 0, SDCMD_READ_OCR_CRC);
 80126c4:	22ff      	movs	r2, #255	; 0xff
 80126c6:	207a      	movs	r0, #122	; 0x7a
 80126c8:	4629      	mov	r1, r5
 80126ca:	f7ff ff10 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
	  CardType=((status>>24) & 0x40)  ? CT_SD2 | CT_BLOCK : CT_SD2;
 80126ce:	4b09      	ldr	r3, [pc, #36]	; (80126f4 <MIOS32_SDCARD_PowerOn+0x104>)
 80126d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80126d4:	bf0c      	ite	eq
 80126d6:	2204      	moveq	r2, #4
 80126d8:	220c      	movne	r2, #12
 80126da:	701a      	strb	r2, [r3, #0]
 80126dc:	e7ee      	b.n	80126bc <MIOS32_SDCARD_PowerOn+0xcc>

  if( i == 16384 || CardType==0 ) 
    status=-2; // the last loop timed out or the cardtype was not detected...
error:
  // deactivate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 80126de:	2000      	movs	r0, #0
 80126e0:	2201      	movs	r2, #1
 80126e2:	4601      	mov	r1, r0
 80126e4:	f000 fbe8 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>

  // Send dummy byte once deactivated to drop cards DO
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80126e8:	2000      	movs	r0, #0
 80126ea:	21ff      	movs	r1, #255	; 0xff
 80126ec:	f000 fc20 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SDCARD_MUTEX_GIVE;
  return status; // Status should be 0 if nothing went wrong!
}
 80126f0:	4628      	mov	r0, r5
 80126f2:	bd38      	pop	{r3, r4, r5, pc}
 80126f4:	200001de 	.word	0x200001de

080126f8 <MIOS32_SDCARD_CheckAvailable>:
//! \param[in] was_available should only be set if the SD card was previously available
//! \return 0 if no response from SD Card
//! \return 1 if SD card is accessible
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_CheckAvailable(u8 was_available)
{
 80126f8:	b538      	push	{r3, r4, r5, lr}
  s32 ret;
  MIOS32_SDCARD_MUTEX_TAKE;
  
  if( was_available ) {
 80126fa:	4604      	mov	r4, r0
 80126fc:	b178      	cbz	r0, 801271e <MIOS32_SDCARD_CheckAvailable+0x26>
    // init SPI port for fast frequency access (ca. 18 MBit/s)
    // this is required for the case that the SPI port is shared with other devices
    MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);
 80126fe:	2103      	movs	r1, #3
 8012700:	2202      	movs	r2, #2
 8012702:	2000      	movs	r0, #0
 8012704:	f000 fc3a 	bl	8012f7c <MIOS32_SPI_TransferModeInit>
    // activate chip select
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8012708:	2000      	movs	r0, #0
 801270a:	4601      	mov	r1, r0
 801270c:	4602      	mov	r2, r0
 801270e:	f000 fbd3 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>

    // send STATUS command to check if media is available
    ret=MIOS32_SDCARD_SendSDCCmd(SDCMD_SEND_STATUS, 0, SDCMD_SEND_STATUS_CRC);
 8012712:	204d      	movs	r0, #77	; 0x4d
 8012714:	2100      	movs	r1, #0
 8012716:	22af      	movs	r2, #175	; 0xaf
 8012718:	f7ff fee9 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
 801271c:	e024      	b.n	8012768 <MIOS32_SDCARD_CheckAvailable+0x70>

  } else {

    // ensure that SPI interface is clocked at low speed
    MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_256);
 801271e:	2103      	movs	r1, #3
 8012720:	2207      	movs	r2, #7
 8012722:	f000 fc2b 	bl	8012f7c <MIOS32_SPI_TransferModeInit>

    // deactivate chip select
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8012726:	4620      	mov	r0, r4
 8012728:	4621      	mov	r1, r4
 801272a:	2201      	movs	r2, #1
 801272c:	f000 fbc4 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
 8012730:	240a      	movs	r4, #10
    // send 80 clock cycles to start up
	u8 i;
    for(i=0; i<10; ++i)
       MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8012732:	2000      	movs	r0, #0
 8012734:	21ff      	movs	r1, #255	; 0xff
 8012736:	3c01      	subs	r4, #1
 8012738:	f000 fbfa 	bl	8012f30 <MIOS32_SPI_TransferByte>

    // deactivate chip select
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
    // send 80 clock cycles to start up
	u8 i;
    for(i=0; i<10; ++i)
 801273c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8012740:	d1f7      	bne.n	8012732 <MIOS32_SDCARD_CheckAvailable+0x3a>
       MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
    // activate chip select
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 0); // spi, rc_pin, pin_value
 8012742:	4621      	mov	r1, r4
 8012744:	4622      	mov	r2, r4
 8012746:	4620      	mov	r0, r4
 8012748:	f000 fbb6 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>

    // send CMD0 to reset the media
    if( (ret=(MIOS32_SDCARD_SendSDCCmd(SDCMD_GO_IDLE_STATE, 0, SDCMD_GO_IDLE_STATE_CRC))) < 0 ) 
 801274c:	2040      	movs	r0, #64	; 0x40
 801274e:	2295      	movs	r2, #149	; 0x95
 8012750:	4621      	mov	r1, r4
 8012752:	f7ff fecc 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
 8012756:	1e05      	subs	r5, r0, #0
 8012758:	db07      	blt.n	801276a <MIOS32_SDCARD_CheckAvailable+0x72>
	  goto not_available;
		
    // deactivate chip select
    MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 801275a:	4621      	mov	r1, r4
 801275c:	2201      	movs	r2, #1
 801275e:	4620      	mov	r0, r4
 8012760:	f000 fbaa 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>

    MIOS32_SDCARD_MUTEX_GIVE;  
    // run power-on sequence (negative return = not available)
    ret=MIOS32_SDCARD_PowerOn();
 8012764:	f7ff ff44 	bl	80125f0 <MIOS32_SDCARD_PowerOn>
 8012768:	4605      	mov	r5, r0

  }

not_available:
  // deactivate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 801276a:	2000      	movs	r0, #0
 801276c:	2201      	movs	r2, #1
 801276e:	4601      	mov	r1, r0
 8012770:	f000 fba2 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
  // Send dummy byte once deactivated to drop cards DO
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8012774:	21ff      	movs	r1, #255	; 0xff
 8012776:	2000      	movs	r0, #0
 8012778:	f000 fbda 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SDCARD_MUTEX_GIVE;  

  return (ret == 0) ? 1 : 0; // 1=available, 0=not available.
}
 801277c:	f1d5 0001 	rsbs	r0, r5, #1
 8012780:	bf38      	it	cc
 8012782:	2000      	movcc	r0, #0
 8012784:	bd38      	pop	{r3, r4, r5, pc}
	...

08012788 <MIOS32_SDCARD_SectorRead>:
//! </UL>
//! \return -256 if timeout during command has been sent
//! \return -257 if timeout while waiting for start token
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorRead(u32 sector, u8 *buffer)
{
 8012788:	b573      	push	{r0, r1, r4, r5, r6, lr}
  s32 status = 0;
  int i;
  if (!(CardType & CT_BLOCK)) 
 801278a:	4b23      	ldr	r3, [pc, #140]	; (8012818 <MIOS32_SDCARD_SectorRead+0x90>)
//! </UL>
//! \return -256 if timeout during command has been sent
//! \return -257 if timeout while waiting for start token
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorRead(u32 sector, u8 *buffer)
{
 801278c:	4604      	mov	r4, r0
  s32 status = 0;
  int i;
  if (!(CardType & CT_BLOCK)) 
 801278e:	7818      	ldrb	r0, [r3, #0]
//! </UL>
//! \return -256 if timeout during command has been sent
//! \return -257 if timeout while waiting for start token
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorRead(u32 sector, u8 *buffer)
{
 8012790:	460e      	mov	r6, r1
  s32 status = 0;
  int i;
  if (!(CardType & CT_BLOCK)) 
 8012792:	f000 0108 	and.w	r1, r0, #8
 8012796:	b2ca      	uxtb	r2, r1
 8012798:	b902      	cbnz	r2, 801279c <MIOS32_SDCARD_SectorRead+0x14>
	sector *= 512;
 801279a:	0264      	lsls	r4, r4, #9

  MIOS32_SDCARD_MUTEX_TAKE;

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);
 801279c:	2103      	movs	r1, #3
 801279e:	2202      	movs	r2, #2
 80127a0:	2000      	movs	r0, #0
 80127a2:	f000 fbeb 	bl	8012f7c <MIOS32_SPI_TransferModeInit>

  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_READ_SINGLE_BLOCK, sector, SDCMD_READ_SINGLE_BLOCK_CRC)) ) {
 80127a6:	2051      	movs	r0, #81	; 0x51
 80127a8:	22ff      	movs	r2, #255	; 0xff
 80127aa:	4621      	mov	r1, r4
 80127ac:	f7ff fe9f 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
 80127b0:	1e05      	subs	r5, r0, #0
 80127b2:	d003      	beq.n	80127bc <MIOS32_SDCARD_SectorRead+0x34>
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
 80127b4:	da25      	bge.n	8012802 <MIOS32_SDCARD_SectorRead+0x7a>
 80127b6:	f06f 05ff 	mvn.w	r5, #255	; 0xff
 80127ba:	e022      	b.n	8012802 <MIOS32_SDCARD_SectorRead+0x7a>

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);

  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_READ_SINGLE_BLOCK, sector, SDCMD_READ_SINGLE_BLOCK_CRC)) ) {
 80127bc:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    goto error;
  }
  
  // wait for start token of the data block
  for(i=0; i<65536; ++i) { // TODO: check if sufficient
    u8 ret = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80127c0:	2000      	movs	r0, #0
 80127c2:	21ff      	movs	r1, #255	; 0xff
 80127c4:	f000 fbb4 	bl	8012f30 <MIOS32_SPI_TransferByte>
    if( ret != 0xff )
 80127c8:	b2c3      	uxtb	r3, r0
 80127ca:	2bff      	cmp	r3, #255	; 0xff
 80127cc:	d104      	bne.n	80127d8 <MIOS32_SDCARD_SectorRead+0x50>
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
    goto error;
  }
  
  // wait for start token of the data block
  for(i=0; i<65536; ++i) { // TODO: check if sufficient
 80127ce:	3c01      	subs	r4, #1
 80127d0:	d1f6      	bne.n	80127c0 <MIOS32_SDCARD_SectorRead+0x38>
    u8 ret = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
    if( ret != 0xff )
      break;
  }
  if( i == 65536 ) {
    status= -257;
 80127d2:	f46f 7580 	mvn.w	r5, #256	; 0x100
 80127d6:	e014      	b.n	8012802 <MIOS32_SDCARD_SectorRead+0x7a>
    goto error;
  }

  // read 512 bytes via DMA
  MIOS32_SPI_TransferBlock(MIOS32_SDCARD_SPI, NULL, buffer, 512, NULL);
 80127d8:	2400      	movs	r4, #0
 80127da:	4632      	mov	r2, r6
 80127dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127e0:	4621      	mov	r1, r4
 80127e2:	9400      	str	r4, [sp, #0]
 80127e4:	4620      	mov	r0, r4
 80127e6:	f000 fd7d 	bl	80132e4 <MIOS32_SPI_TransferBlock>

  // read (and ignore) CRC
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80127ea:	21ff      	movs	r1, #255	; 0xff
 80127ec:	4620      	mov	r0, r4
 80127ee:	f000 fb9f 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80127f2:	21ff      	movs	r1, #255	; 0xff
 80127f4:	4620      	mov	r0, r4
 80127f6:	f000 fb9b 	bl	8012f30 <MIOS32_SPI_TransferByte>

  // required for clocking (see spec)
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80127fa:	4620      	mov	r0, r4
 80127fc:	21ff      	movs	r1, #255	; 0xff
 80127fe:	f000 fb97 	bl	8012f30 <MIOS32_SPI_TransferByte>

error:
  // deactivate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 8012802:	2000      	movs	r0, #0
 8012804:	2201      	movs	r2, #1
 8012806:	4601      	mov	r1, r0
 8012808:	f000 fb56 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>

  // Send dummy byte once deactivated to drop cards DO
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 801280c:	2000      	movs	r0, #0
 801280e:	21ff      	movs	r1, #255	; 0xff
 8012810:	f000 fb8e 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SDCARD_MUTEX_GIVE;
  return status; 
}
 8012814:	4628      	mov	r0, r5
 8012816:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8012818:	200001de 	.word	0x200001de

0801281c <MIOS32_SDCARD_SectorWrite>:
//! \return -256 if timeout during command has been sent
//! \return -257 if write operation not accepted
//! \return -258 if timeout during write operation
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorWrite(u32 sector, u8 *buffer)
{
 801281c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  s32 status = 0;
  int i;

  MIOS32_SDCARD_MUTEX_TAKE;

  if (!(CardType & CT_BLOCK))
 801281e:	4b29      	ldr	r3, [pc, #164]	; (80128c4 <MIOS32_SDCARD_SectorWrite+0xa8>)
//! \return -256 if timeout during command has been sent
//! \return -257 if write operation not accepted
//! \return -258 if timeout during write operation
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorWrite(u32 sector, u8 *buffer)
{
 8012820:	4604      	mov	r4, r0
  s32 status = 0;
  int i;

  MIOS32_SDCARD_MUTEX_TAKE;

  if (!(CardType & CT_BLOCK))
 8012822:	7818      	ldrb	r0, [r3, #0]
//! \return -256 if timeout during command has been sent
//! \return -257 if write operation not accepted
//! \return -258 if timeout during write operation
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SDCARD_SectorWrite(u32 sector, u8 *buffer)
{
 8012824:	460d      	mov	r5, r1
  s32 status = 0;
  int i;

  MIOS32_SDCARD_MUTEX_TAKE;

  if (!(CardType & CT_BLOCK))
 8012826:	f000 0108 	and.w	r1, r0, #8
 801282a:	b2ca      	uxtb	r2, r1
 801282c:	b902      	cbnz	r2, 8012830 <MIOS32_SDCARD_SectorWrite+0x14>
	sector *= 512;
 801282e:	0264      	lsls	r4, r4, #9

  // init SPI port for fast frequency access (ca. 18 MBit/s)
  // this is required for the case that the SPI port is shared with other devices
  MIOS32_SPI_TransferModeInit(MIOS32_SDCARD_SPI, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SDCARD_SPI_PRESCALER);
 8012830:	2103      	movs	r1, #3
 8012832:	2202      	movs	r2, #2
 8012834:	2000      	movs	r0, #0
 8012836:	f000 fba1 	bl	8012f7c <MIOS32_SPI_TransferModeInit>

  if( (status=MIOS32_SDCARD_SendSDCCmd(SDCMD_WRITE_SINGLE_BLOCK, sector, SDCMD_WRITE_SINGLE_BLOCK_CRC)) ) {
 801283a:	2058      	movs	r0, #88	; 0x58
 801283c:	4621      	mov	r1, r4
 801283e:	22ff      	movs	r2, #255	; 0xff
 8012840:	f7ff fe55 	bl	80124ee <MIOS32_SDCARD_SendSDCCmd>
 8012844:	1e04      	subs	r4, r0, #0
 8012846:	d003      	beq.n	8012850 <MIOS32_SDCARD_SectorWrite+0x34>
    status=(status < 0) ? -256 : status; // return timeout indicator or error flags
 8012848:	da31      	bge.n	80128ae <MIOS32_SDCARD_SectorWrite+0x92>
 801284a:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 801284e:	e02e      	b.n	80128ae <MIOS32_SDCARD_SectorWrite+0x92>
    goto error;
  }  

  // send start token
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xfe);
 8012850:	21fe      	movs	r1, #254	; 0xfe
 8012852:	f000 fb6d 	bl	8012f30 <MIOS32_SPI_TransferByte>

  // send 512 bytes of data via DMA
  MIOS32_SPI_TransferBlock(MIOS32_SDCARD_SPI, buffer, NULL, 512, NULL);
 8012856:	f44f 7300 	mov.w	r3, #512	; 0x200
 801285a:	4622      	mov	r2, r4
 801285c:	4629      	mov	r1, r5
 801285e:	9400      	str	r4, [sp, #0]
 8012860:	4620      	mov	r0, r4
 8012862:	f000 fd3f 	bl	80132e4 <MIOS32_SPI_TransferBlock>

  // send CRC
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8012866:	21ff      	movs	r1, #255	; 0xff
 8012868:	4620      	mov	r0, r4
 801286a:	f000 fb61 	bl	8012f30 <MIOS32_SPI_TransferByte>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 801286e:	21ff      	movs	r1, #255	; 0xff
 8012870:	4620      	mov	r0, r4
 8012872:	f000 fb5d 	bl	8012f30 <MIOS32_SPI_TransferByte>

  // read response
  u8 response = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 8012876:	21ff      	movs	r1, #255	; 0xff
 8012878:	4620      	mov	r0, r4
 801287a:	f000 fb59 	bl	8012f30 <MIOS32_SPI_TransferByte>
  if( (response & 0x0f) != 0x5 ) {
 801287e:	f000 030f 	and.w	r3, r0, #15
 8012882:	2b05      	cmp	r3, #5
 8012884:	d10c      	bne.n	80128a0 <MIOS32_SDCARD_SectorWrite+0x84>
 8012886:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    goto error;
  }

  // wait for write completion
  for(i=0; i<32*65536; ++i) { // TODO: check if sufficient
    u8 ret = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 801288a:	2000      	movs	r0, #0
 801288c:	21ff      	movs	r1, #255	; 0xff
 801288e:	f000 fb4f 	bl	8012f30 <MIOS32_SPI_TransferByte>
    if( ret != 0x00 )
 8012892:	f010 0fff 	tst.w	r0, #255	; 0xff
 8012896:	d106      	bne.n	80128a6 <MIOS32_SDCARD_SectorWrite+0x8a>
    status= -257;
    goto error;
  }

  // wait for write completion
  for(i=0; i<32*65536; ++i) { // TODO: check if sufficient
 8012898:	3d01      	subs	r5, #1
 801289a:	d1f6      	bne.n	801288a <MIOS32_SDCARD_SectorWrite+0x6e>
    if( ret != 0x00 )
      break;
  }
  if( i == 32*65536 ) {

    status= -258;
 801289c:	4c0a      	ldr	r4, [pc, #40]	; (80128c8 <MIOS32_SDCARD_SectorWrite+0xac>)
 801289e:	e006      	b.n	80128ae <MIOS32_SDCARD_SectorWrite+0x92>
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);

  // read response
  u8 response = MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
  if( (response & 0x0f) != 0x5 ) {
    status= -257;
 80128a0:	f46f 7480 	mvn.w	r4, #256	; 0x100
 80128a4:	e003      	b.n	80128ae <MIOS32_SDCARD_SectorWrite+0x92>
    status= -258;
    goto error;
  }

  // required for clocking (see spec)
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80128a6:	2000      	movs	r0, #0
 80128a8:	21ff      	movs	r1, #255	; 0xff
 80128aa:	f000 fb41 	bl	8012f30 <MIOS32_SPI_TransferByte>

error:
  // deactivate chip select
  MIOS32_SPI_RC_PinSet(MIOS32_SDCARD_SPI, MIOS32_SDCARD_SPI_RC_PIN, 1); // spi, rc_pin, pin_value
 80128ae:	2000      	movs	r0, #0
 80128b0:	2201      	movs	r2, #1
 80128b2:	4601      	mov	r1, r0
 80128b4:	f000 fb00 	bl	8012eb8 <MIOS32_SPI_RC_PinSet>
  // Send dummy byte once deactivated to drop cards DO
  MIOS32_SPI_TransferByte(MIOS32_SDCARD_SPI, 0xff);
 80128b8:	2000      	movs	r0, #0
 80128ba:	21ff      	movs	r1, #255	; 0xff
 80128bc:	f000 fb38 	bl	8012f30 <MIOS32_SPI_TransferByte>

  MIOS32_SDCARD_MUTEX_GIVE;

  return status;
}
 80128c0:	4620      	mov	r0, r4
 80128c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80128c4:	200001de 	.word	0x200001de
 80128c8:	fffffefe 	.word	0xfffffefe

080128cc <MIOS32_TIMESTAMP_Init>:
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 80128cc:	b910      	cbnz	r0, 80128d4 <MIOS32_TIMESTAMP_Init+0x8>
    return -1; // unsupported mode

  timestamp = 0;
 80128ce:	4b03      	ldr	r3, [pc, #12]	; (80128dc <MIOS32_TIMESTAMP_Init+0x10>)
 80128d0:	6018      	str	r0, [r3, #0]

  return 0;
 80128d2:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80128d4:	f04f 30ff 	mov.w	r0, #4294967295

  timestamp = 0;

  return 0;
}
 80128d8:	4770      	bx	lr
 80128da:	bf00      	nop
 80128dc:	200001e0 	.word	0x200001e0

080128e0 <MIOS32_TIMESTAMP_Inc>:
//!
//! \return number of SRs
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Inc(void)
{
  ++timestamp;
 80128e0:	4b02      	ldr	r3, [pc, #8]	; (80128ec <MIOS32_TIMESTAMP_Inc+0xc>)
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	1c50      	adds	r0, r2, #1
 80128e6:	6018      	str	r0, [r3, #0]

  return 0; // no error
}
 80128e8:	2000      	movs	r0, #0
 80128ea:	4770      	bx	lr
 80128ec:	200001e0 	.word	0x200001e0

080128f0 <MIOS32_SYS_Reset>:
//!   <LI>reset STM32
//! </UL>
//! \return < 0 if reset failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Reset(void)
{
 80128f0:	b510      	push	{r4, lr}
  // disable all RTOS tasks
#ifndef MIOS32_DONT_USE_FREERTOS
  portENTER_CRITICAL(); // port specific FreeRTOS function to disable tasks (nested)
 80128f2:	f7fe f8cb 	bl	8010a8c <vPortEnterCritical>

  // print reboot message if LCD enabled
#ifndef MIOS32_DONT_USE_LCD
  // TODO: here we should select the normal font - but only if available!
  // MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
  MIOS32_LCD_BColourSet(0xffffff);
 80128f6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80128fa:	f7fe fe67 	bl	80115cc <MIOS32_LCD_BColourSet>
  MIOS32_LCD_FColourSet(0x000000);
 80128fe:	2000      	movs	r0, #0
 8012900:	f7fe fe66 	bl	80115d0 <MIOS32_LCD_FColourSet>

  MIOS32_LCD_DeviceSet(0);
 8012904:	2000      	movs	r0, #0
 8012906:	f7fe fd77 	bl	80113f8 <MIOS32_LCD_DeviceSet>
  MIOS32_LCD_Clear();
 801290a:	f7fe fdc5 	bl	8011498 <MIOS32_LCD_Clear>
  MIOS32_LCD_CursorSet(0, 0);
 801290e:	2000      	movs	r0, #0
 8012910:	4601      	mov	r1, r0
 8012912:	f7fe fd77 	bl	8011404 <MIOS32_LCD_CursorSet>
  MIOS32_LCD_PrintString("Bootloader Mode "); // 16 chars
 8012916:	481e      	ldr	r0, [pc, #120]	; (8012990 <MIOS32_SYS_Reset+0xa0>)
 8012918:	f7fe fe1c 	bl	8011554 <MIOS32_LCD_PrintString>
#endif

  // disable all interrupts
  MIOS32_IRQ_Disable();
 801291c:	f000 f940 	bl	8012ba0 <MIOS32_IRQ_Disable>

  // turn off all board LEDs
  MIOS32_BOARD_LED_Set(0xffffffff, 0x00000000);
 8012920:	f04f 30ff 	mov.w	r0, #4294967295
 8012924:	2100      	movs	r1, #0
 8012926:	f000 fe15 	bl	8013554 <MIOS32_BOARD_LED_Set>
 801292a:	2432      	movs	r4, #50	; 0x32

  // wait for 50 mS to ensure that all ongoing operations (e.g. DMA driver SPI transfers) are finished
  {
    int i;
    for(i=0; i<50; ++i)
      MIOS32_DELAY_Wait_uS(1000);
 801292c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012930:	f000 fff0 	bl	8013914 <MIOS32_DELAY_Wait_uS>
  MIOS32_BOARD_LED_Set(0xffffffff, 0x00000000);

  // wait for 50 mS to ensure that all ongoing operations (e.g. DMA driver SPI transfers) are finished
  {
    int i;
    for(i=0; i<50; ++i)
 8012934:	3c01      	subs	r4, #1
 8012936:	d1f9      	bne.n	801292c <MIOS32_SYS_Reset+0x3c>
      MIOS32_DELAY_Wait_uS(1000);
  }

  // reset peripherals
  RCC_AHB1PeriphResetCmd(0xfffffffe, ENABLE); // don't reset GPIOA due to USB pins
 8012938:	f06f 0001 	mvn.w	r0, #1
 801293c:	2101      	movs	r1, #1
 801293e:	f002 fb2f 	bl	8014fa0 <RCC_AHB1PeriphResetCmd>
  RCC_AHB2PeriphResetCmd(0xffffff7f, ENABLE); // don't reset OTG_FS, so that the connectuion can survive
 8012942:	f06f 0080 	mvn.w	r0, #128	; 0x80
 8012946:	2101      	movs	r1, #1
 8012948:	f002 fb36 	bl	8014fb8 <RCC_AHB2PeriphResetCmd>
  RCC_APB1PeriphResetCmd(0xffffffff, ENABLE);
 801294c:	f04f 30ff 	mov.w	r0, #4294967295
 8012950:	2101      	movs	r1, #1
 8012952:	f002 fb3d 	bl	8014fd0 <RCC_APB1PeriphResetCmd>
  RCC_APB2PeriphResetCmd(0xffffffff, ENABLE);
 8012956:	f04f 30ff 	mov.w	r0, #4294967295
 801295a:	2101      	movs	r1, #1
 801295c:	f002 fb44 	bl	8014fe8 <RCC_APB2PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(0xffffffff, DISABLE);
 8012960:	f04f 30ff 	mov.w	r0, #4294967295
 8012964:	4621      	mov	r1, r4
 8012966:	f002 fb1b 	bl	8014fa0 <RCC_AHB1PeriphResetCmd>
  RCC_AHB2PeriphResetCmd(0xffffffff, DISABLE);
 801296a:	f04f 30ff 	mov.w	r0, #4294967295
 801296e:	4621      	mov	r1, r4
 8012970:	f002 fb22 	bl	8014fb8 <RCC_AHB2PeriphResetCmd>
  RCC_APB1PeriphResetCmd(0xffffffff, DISABLE);
 8012974:	f04f 30ff 	mov.w	r0, #4294967295
 8012978:	4621      	mov	r1, r4
 801297a:	f002 fb29 	bl	8014fd0 <RCC_APB1PeriphResetCmd>
  RCC_APB2PeriphResetCmd(0xffffffff, DISABLE);
 801297e:	f04f 30ff 	mov.w	r0, #4294967295
 8012982:	4621      	mov	r1, r4
 8012984:	f002 fb30 	bl	8014fe8 <RCC_APB2PeriphResetCmd>
  // not available in v3.0.0 library anymore? - copy from v2.0.1
  SCB->AIRCR = NVIC_AIRCR_VECTKEY | (1 << NVIC_VECTRESET);
#endif
#if 1
  // and this is the code for v3.3.0
  SCB->AIRCR = (0x5fa << SCB_AIRCR_VECTKEY_Pos) | (1 << SCB_AIRCR_VECTRESET_Pos);
 8012988:	4a02      	ldr	r2, [pc, #8]	; (8012994 <MIOS32_SYS_Reset+0xa4>)
 801298a:	4b03      	ldr	r3, [pc, #12]	; (8012998 <MIOS32_SYS_Reset+0xa8>)
 801298c:	60da      	str	r2, [r3, #12]
 801298e:	e7fe      	b.n	801298e <MIOS32_SYS_Reset+0x9e>
 8012990:	0801c267 	.word	0x0801c267
 8012994:	05fa0001 	.word	0x05fa0001
 8012998:	e000ed00 	.word	0xe000ed00

0801299c <MIOS32_SYS_ChipIDGet>:
//! \return the chip ID
/////////////////////////////////////////////////////////////////////////////
u32 MIOS32_SYS_ChipIDGet(void)
{
  // stored in DBGMCU_IDCODE register
  return MEM32(0xe0042000);
 801299c:	4b01      	ldr	r3, [pc, #4]	; (80129a4 <MIOS32_SYS_ChipIDGet+0x8>)
 801299e:	6818      	ldr	r0, [r3, #0]
}
 80129a0:	4770      	bx	lr
 80129a2:	bf00      	nop
 80129a4:	e0042000 	.word	0xe0042000

080129a8 <MIOS32_SYS_FlashSizeGet>:
//! \return the Flash size in bytes
/////////////////////////////////////////////////////////////////////////////
u32 MIOS32_SYS_FlashSizeGet(void)
{
  // stored in the so called "electronic signature"
  return (u32)MEM16(0x1fff7a22) * 0x400;
 80129a8:	4b02      	ldr	r3, [pc, #8]	; (80129b4 <MIOS32_SYS_FlashSizeGet+0xc>)
 80129aa:	8818      	ldrh	r0, [r3, #0]
 80129ac:	b281      	uxth	r1, r0
}
 80129ae:	0288      	lsls	r0, r1, #10
 80129b0:	4770      	bx	lr
 80129b2:	bf00      	nop
 80129b4:	1fff7a22 	.word	0x1fff7a22

080129b8 <MIOS32_SYS_RAMSizeGet>:
#if defined(MIOS32_PROCESSOR_STM32F407VG)
  return 192*1024; // unfortunately not stored in signature...
#else
# error "Please define RAM size here"
#endif
}
 80129b8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80129bc:	4770      	bx	lr
	...

080129c0 <MIOS32_SYS_SerialNumberGet>:
s32 MIOS32_SYS_SerialNumberGet(char *str)
{
  int i;

  // stored in the so called "electronic signature"
  for(i=0; i<24; ++i) {
 80129c0:	2300      	movs	r3, #0
    u8 b = MEM8(0x1fff7a10 + (i/2));
 80129c2:	4a0b      	ldr	r2, [pc, #44]	; (80129f0 <MIOS32_SYS_SerialNumberGet+0x30>)
 80129c4:	1059      	asrs	r1, r3, #1
 80129c6:	1889      	adds	r1, r1, r2
 80129c8:	780a      	ldrb	r2, [r1, #0]
    if( !(i & 1) )
 80129ca:	07d9      	lsls	r1, r3, #31
      b >>= 4;
 80129cc:	bf58      	it	pl
 80129ce:	0912      	lsrpl	r2, r2, #4
    b &= 0x0f;
 80129d0:	f002 020f 	and.w	r2, r2, #15

    str[i] = ((b > 9) ? ('A'-10) : '0') + b;
 80129d4:	2a09      	cmp	r2, #9
 80129d6:	bf94      	ite	ls
 80129d8:	2130      	movls	r1, #48	; 0x30
 80129da:	2137      	movhi	r1, #55	; 0x37
 80129dc:	188a      	adds	r2, r1, r2
 80129de:	54c2      	strb	r2, [r0, r3]
s32 MIOS32_SYS_SerialNumberGet(char *str)
{
  int i;

  // stored in the so called "electronic signature"
  for(i=0; i<24; ++i) {
 80129e0:	3301      	adds	r3, #1
 80129e2:	2b18      	cmp	r3, #24
 80129e4:	d1ed      	bne.n	80129c2 <MIOS32_SYS_SerialNumberGet+0x2>
      b >>= 4;
    b &= 0x0f;

    str[i] = ((b > 9) ? ('A'-10) : '0') + b;
  }
  str[i] = 0;
 80129e6:	2100      	movs	r1, #0
 80129e8:	7601      	strb	r1, [r0, #24]

  return 0; // no error
}
 80129ea:	4608      	mov	r0, r1
 80129ec:	4770      	bx	lr
 80129ee:	bf00      	nop
 80129f0:	1fff7a10 	.word	0x1fff7a10

080129f4 <MIOS32_SYS_TimeSet>:
//! Note that this format isn't completely compatible to the NTP timestamp format,
//! as the fraction has only mS accuracy
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_TimeSet(mios32_sys_time_t t)
{
 80129f4:	b510      	push	{r4, lr}
 80129f6:	b086      	sub	sp, #24
 80129f8:	4604      	mov	r4, r0
 80129fa:	e88d 0003 	stmia.w	sp, {r0, r1}
  // taken from STM32 example "RTC/Calendar"
  // adapted to clock RTC via HSE  oscillator

  // Enable PWR and BKP clocks
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 80129fe:	2101      	movs	r1, #1
 8012a00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8012a04:	f002 fab4 	bl	8014f70 <RCC_APB1PeriphClockCmd>

  // Allow access to BKP Domain
  PWR_BackupAccessCmd(ENABLE);
 8012a08:	2001      	movs	r0, #1
 8012a0a:	f002 fa2f 	bl	8014e6c <PWR_BackupAccessCmd>

  // Select HSE (divided by 16) as RTC Clock Source
#if EXT_CRYSTAL_FRQ != 8000000
# error "Please configure alternative clock divider here"
#endif
  RCC_RTCCLKConfig(RCC_RTCCLKSource_HSE_Div16); // -> each 1/(8 MHz / 16) = 2 uS
 8012a0e:	4817      	ldr	r0, [pc, #92]	; (8012a6c <MIOS32_SYS_TimeSet+0x78>)
 8012a10:	f002 fa78 	bl	8014f04 <RCC_RTCCLKConfig>

  // Enable RTC Clock
  RCC_RTCCLKCmd(ENABLE);
 8012a14:	2001      	movs	r0, #1
 8012a16:	f002 fa8d 	bl	8014f34 <RCC_RTCCLKCmd>

  // initialize RTC
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);
 8012a1a:	a803      	add	r0, sp, #12
 8012a1c:	f002 fafc 	bl	8015018 <RTC_StructInit>

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
 8012a20:	2063      	movs	r0, #99	; 0x63
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
 8012a22:	f241 3187 	movw	r1, #4999	; 0x1387
  // initialize RTC
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
 8012a26:	9004      	str	r0, [sp, #16]
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
  RTC_Init(&RTC_InitStruct);
 8012a28:	a803      	add	r0, sp, #12
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
 8012a2a:	9105      	str	r1, [sp, #20]
  RTC_Init(&RTC_InitStruct);
 8012a2c:	f002 fb22 	bl	8015074 <RTC_Init>

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
 8012a30:	a802      	add	r0, sp, #8
 8012a32:	f002 fbab 	bl	801518c <RTC_TimeStructInit>
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
 8012a36:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8012a3a:	fbb4 f3f2 	udiv	r3, r4, r2
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 8012a3e:	213c      	movs	r1, #60	; 0x3c
 8012a40:	fb02 4013 	mls	r0, r2, r3, r4
  RTC_Init(&RTC_InitStruct);

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
 8012a44:	f88d 3008 	strb.w	r3, [sp, #8]
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 8012a48:	fbb4 f3f1 	udiv	r3, r4, r1

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 8012a4c:	fbb0 f2f1 	udiv	r2, r0, r1
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 8012a50:	fb01 4413 	mls	r4, r1, r3, r4
  RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8012a54:	2000      	movs	r0, #0
 8012a56:	a902      	add	r1, sp, #8

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 8012a58:	f88d 2009 	strb.w	r2, [sp, #9]
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 8012a5c:	f88d 400a 	strb.w	r4, [sp, #10]
  RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8012a60:	f002 fb4e 	bl	8015100 <RTC_SetTime>
  // (fraction not taken into account here)

  return 0; // no error
}
 8012a64:	2000      	movs	r0, #0
 8012a66:	b006      	add	sp, #24
 8012a68:	bd10      	pop	{r4, pc}
 8012a6a:	bf00      	nop
 8012a6c:	00100300 	.word	0x00100300

08012a70 <MIOS32_SYS_Init>:
//! </UL>
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Init(u32 mode)
{
 8012a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8012a72:	4604      	mov	r4, r0
 8012a74:	2800      	cmp	r0, #0
 8012a76:	f040 8083 	bne.w	8012b80 <MIOS32_SYS_Init+0x110>
    return -1; // unsupported mode

  // Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOE and AFIO clocks
  RCC_AHB1PeriphClockCmd(
 8012a7a:	201f      	movs	r0, #31
 8012a7c:	2101      	movs	r1, #1
 8012a7e:	f002 fa5f 	bl	8014f40 <RCC_AHB1PeriphClockCmd>
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  // init clock system if chip doesn't already run with PLL
  __IO uint32_t HSEStatus = 0;
  if( (RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL ) {
 8012a82:	4b41      	ldr	r3, [pc, #260]	; (8012b88 <MIOS32_SYS_Init+0x118>)
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  // init clock system if chip doesn't already run with PLL
  __IO uint32_t HSEStatus = 0;
 8012a84:	9400      	str	r4, [sp, #0]
  if( (RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL ) {
 8012a86:	689a      	ldr	r2, [r3, #8]
 8012a88:	f002 000c 	and.w	r0, r2, #12
 8012a8c:	2808      	cmp	r0, #8
 8012a8e:	d102      	bne.n	8012a96 <MIOS32_SYS_Init+0x26>
    HSEStatus = SUCCESS;
 8012a90:	2001      	movs	r0, #1
 8012a92:	9000      	str	r0, [sp, #0]
 8012a94:	e05d      	b.n	8012b52 <MIOS32_SYS_Init+0xe2>
  } else {
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001;
 8012a96:	6819      	ldr	r1, [r3, #0]
 8012a98:	f041 0201 	orr.w	r2, r1, #1
 8012a9c:	601a      	str	r2, [r3, #0]

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 8012a9e:	609c      	str	r4, [r3, #8]

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012aa0:	6818      	ldr	r0, [r3, #0]
 8012aa2:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 8012aa6:	4839      	ldr	r0, [pc, #228]	; (8012b8c <MIOS32_SYS_Init+0x11c>)

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012aa8:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8012aac:	601a      	str	r2, [r3, #0]

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 8012aae:	6058      	str	r0, [r3, #4]

    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012ab0:	6819      	ldr	r1, [r3, #0]
 8012ab2:	f421 2280 	bic.w	r2, r1, #262144	; 0x40000
 8012ab6:	601a      	str	r2, [r3, #0]

    /* Disable all interrupts */
    RCC->CIR = 0x00000000;
 8012ab8:	60dc      	str	r4, [r3, #12]
       AHB/APBx prescalers and Flash settings ----------------------------------*/

    /******************************************************************************/
    /*            PLL (clocked by HSE) used as System clock source                */
    /******************************************************************************/
    __IO uint32_t StartUpCounter = 0;
 8012aba:	9401      	str	r4, [sp, #4]
  
    /* Enable HSE */
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8012abc:	6818      	ldr	r0, [r3, #0]
 8012abe:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
 8012ac2:	6019      	str	r1, [r3, #0]
 
    /* Wait till HSE is ready and if Time out is reached exit */
    do {
      HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8012ac4:	4b30      	ldr	r3, [pc, #192]	; (8012b88 <MIOS32_SYS_Init+0x118>)
 8012ac6:	681a      	ldr	r2, [r3, #0]
 8012ac8:	f402 3000 	and.w	r0, r2, #131072	; 0x20000
 8012acc:	9000      	str	r0, [sp, #0]
      StartUpCounter++;
 8012ace:	9901      	ldr	r1, [sp, #4]
 8012ad0:	1c4a      	adds	r2, r1, #1
 8012ad2:	9201      	str	r2, [sp, #4]
    } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8012ad4:	9800      	ldr	r0, [sp, #0]
 8012ad6:	b918      	cbnz	r0, 8012ae0 <MIOS32_SYS_Init+0x70>
 8012ad8:	9901      	ldr	r1, [sp, #4]
 8012ada:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8012ade:	d1f1      	bne.n	8012ac4 <MIOS32_SYS_Init+0x54>

    if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
      HSEStatus = (uint32_t)0x01;
 8012ae6:	bf18      	it	ne
 8012ae8:	2201      	movne	r2, #1
    } else {
      HSEStatus = (uint32_t)0x00;
 8012aea:	9200      	str	r2, [sp, #0]
    }

    if (HSEStatus == (uint32_t)0x01) {
 8012aec:	9800      	ldr	r0, [sp, #0]
 8012aee:	2801      	cmp	r0, #1
 8012af0:	d12f      	bne.n	8012b52 <MIOS32_SYS_Init+0xe2>
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8012af2:	4b25      	ldr	r3, [pc, #148]	; (8012b88 <MIOS32_SYS_Init+0x118>)
      PWR->CR |= PWR_CR_VOS;
 8012af4:	4826      	ldr	r0, [pc, #152]	; (8012b90 <MIOS32_SYS_Init+0x120>)
      HSEStatus = (uint32_t)0x00;
    }

    if (HSEStatus == (uint32_t)0x01) {
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8012af6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012af8:	f041 5280 	orr.w	r2, r1, #268435456	; 0x10000000
 8012afc:	641a      	str	r2, [r3, #64]	; 0x40
      PWR->CR |= PWR_CR_VOS;
 8012afe:	6801      	ldr	r1, [r0, #0]
 8012b00:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
 8012b04:	6002      	str	r2, [r0, #0]

      /* HCLK = SYSCLK / 1*/
      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8012b06:	6898      	ldr	r0, [r3, #8]
 8012b08:	6098      	str	r0, [r3, #8]
      
      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8012b0a:	6899      	ldr	r1, [r3, #8]
 8012b0c:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 8012b10:	609a      	str	r2, [r3, #8]
    
      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8012b12:	6898      	ldr	r0, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8012b14:	4a1f      	ldr	r2, [pc, #124]	; (8012b94 <MIOS32_SYS_Init+0x124>)
      
      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8012b16:	f440 51a0 	orr.w	r1, r0, #5120	; 0x1400
 8012b1a:	6099      	str	r1, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8012b1c:	605a      	str	r2, [r3, #4]
	             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

      /* Enable the main PLL */
      RCC->CR |= RCC_CR_PLLON;
 8012b1e:	6818      	ldr	r0, [r3, #0]
 8012b20:	f040 7180 	orr.w	r1, r0, #16777216	; 0x1000000
 8012b24:	6019      	str	r1, [r3, #0]

      /* Wait till the main PLL is ready */
      while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8012b26:	6818      	ldr	r0, [r3, #0]
 8012b28:	4a17      	ldr	r2, [pc, #92]	; (8012b88 <MIOS32_SYS_Init+0x118>)
 8012b2a:	0180      	lsls	r0, r0, #6
 8012b2c:	d5fb      	bpl.n	8012b26 <MIOS32_SYS_Init+0xb6>
   
      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
      FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8012b2e:	4b1a      	ldr	r3, [pc, #104]	; (8012b98 <MIOS32_SYS_Init+0x128>)
 8012b30:	f240 6105 	movw	r1, #1541	; 0x605
 8012b34:	6019      	str	r1, [r3, #0]

      /* Select the main PLL as system clock source */
      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8012b36:	6890      	ldr	r0, [r2, #8]
 8012b38:	f020 0103 	bic.w	r1, r0, #3
 8012b3c:	6091      	str	r1, [r2, #8]
      RCC->CFGR |= RCC_CFGR_SW_PLL;
 8012b3e:	6893      	ldr	r3, [r2, #8]
 8012b40:	f043 0002 	orr.w	r0, r3, #2
 8012b44:	6090      	str	r0, [r2, #8]

      /* Wait till the main PLL is used as system clock source */
      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8012b46:	4a10      	ldr	r2, [pc, #64]	; (8012b88 <MIOS32_SYS_Init+0x118>)
 8012b48:	6891      	ldr	r1, [r2, #8]
 8012b4a:	f001 030c 	and.w	r3, r1, #12
 8012b4e:	2b08      	cmp	r3, #8
 8012b50:	d1f9      	bne.n	8012b46 <MIOS32_SYS_Init+0xd6>
         configuration. User can add here some code to deal with this error */
    }
  }

  // Set the Vector Table base address as specified in .ld file (-> mios32_sys_isr_vector)
  NVIC_SetVectorTable((u32)&mios32_sys_isr_vector, 0x0);
 8012b52:	2100      	movs	r1, #0
 8012b54:	4811      	ldr	r0, [pc, #68]	; (8012b9c <MIOS32_SYS_Init+0x12c>)
 8012b56:	f002 f88b 	bl	8014c70 <NVIC_SetVectorTable>
  NVIC_PriorityGroupConfig(MIOS32_IRQ_PRIGROUP);
 8012b5a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8012b5e:	f002 f87d 	bl	8014c5c <NVIC_PriorityGroupConfig>

#ifndef MIOS32_SYS_DONT_INIT_RTC
  // initialize system clock
  mios32_sys_time_t t = { .seconds=0, .fraction_ms=0 };
 8012b62:	2200      	movs	r2, #0
 8012b64:	9202      	str	r2, [sp, #8]
 8012b66:	9203      	str	r2, [sp, #12]
  MIOS32_SYS_TimeSet(t);
 8012b68:	a904      	add	r1, sp, #16
 8012b6a:	e911 0003 	ldmdb	r1, {r0, r1}
 8012b6e:	f7ff ff41 	bl	80129f4 <MIOS32_SYS_TimeSet>
#endif

  // error during clock configuration?
  return HSEStatus == SUCCESS ? 0 : -1;
 8012b72:	9b00      	ldr	r3, [sp, #0]
 8012b74:	2b01      	cmp	r3, #1
 8012b76:	bf14      	ite	ne
 8012b78:	f04f 30ff 	movne.w	r0, #4294967295
 8012b7c:	2000      	moveq	r0, #0
 8012b7e:	e001      	b.n	8012b84 <MIOS32_SYS_Init+0x114>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8012b80:	f04f 30ff 	mov.w	r0, #4294967295
  MIOS32_SYS_TimeSet(t);
#endif

  // error during clock configuration?
  return HSEStatus == SUCCESS ? 0 : -1;
}
 8012b84:	b004      	add	sp, #16
 8012b86:	bd10      	pop	{r4, pc}
 8012b88:	40023800 	.word	0x40023800
 8012b8c:	24003010 	.word	0x24003010
 8012b90:	40007000 	.word	0x40007000
 8012b94:	07405408 	.word	0x07405408
 8012b98:	40023c00 	.word	0x40023c00
 8012b9c:	08004000 	.word	0x08004000

08012ba0 <MIOS32_IRQ_Disable>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Disable(void)
{
  // get current priority if nested level == 0
  if( !nested_ctr ) {
 8012ba0:	4b07      	ldr	r3, [pc, #28]	; (8012bc0 <MIOS32_IRQ_Disable+0x20>)
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	b91a      	cbnz	r2, 8012bae <MIOS32_IRQ_Disable+0xe>
    __asm volatile (			   \
 8012ba6:	f3ef 8110 	mrs	r1, PRIMASK
 8012baa:	4806      	ldr	r0, [pc, #24]	; (8012bc4 <MIOS32_IRQ_Disable+0x24>)
 8012bac:	6001      	str	r1, [r0, #0]
		    : "=r" (prev_primask)  \
		    );
  }

  // disable interrupts
  __asm volatile ( \
 8012bae:	f04f 0001 	mov.w	r0, #1
 8012bb2:	f380 8810 	msr	PRIMASK, r0
		  "	mov r0, #1     \n" \
		  "	msr primask, r0\n" \
		  :::"r0"	 \
		  );

  ++nested_ctr;
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	1c51      	adds	r1, r2, #1
 8012bba:	6019      	str	r1, [r3, #0]

  return 0; // no error
}
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	4770      	bx	lr
 8012bc0:	200001e8 	.word	0x200001e8
 8012bc4:	200001e4 	.word	0x200001e4

08012bc8 <MIOS32_IRQ_Enable>:
//! \return -1 on nesting errors (MIOS32_IRQ_Disable() hasn't been called before)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Enable(void)
{
  // check for nesting error
  if( nested_ctr == 0 )
 8012bc8:	4a07      	ldr	r2, [pc, #28]	; (8012be8 <MIOS32_IRQ_Enable+0x20>)
 8012bca:	6813      	ldr	r3, [r2, #0]
 8012bcc:	b13b      	cbz	r3, 8012bde <MIOS32_IRQ_Enable+0x16>
    return -1; // nesting error

  // decrease nesting level
  --nested_ctr;
 8012bce:	1e58      	subs	r0, r3, #1
 8012bd0:	6010      	str	r0, [r2, #0]

  // set back previous priority once nested level reached 0 again
  if( nested_ctr == 0 ) {
 8012bd2:	b938      	cbnz	r0, 8012be4 <MIOS32_IRQ_Enable+0x1c>
    __asm volatile ( \
 8012bd4:	4905      	ldr	r1, [pc, #20]	; (8012bec <MIOS32_IRQ_Enable+0x24>)
 8012bd6:	680a      	ldr	r2, [r1, #0]
 8012bd8:	f382 8810 	msr	PRIMASK, r2
 8012bdc:	e002      	b.n	8012be4 <MIOS32_IRQ_Enable+0x1c>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Enable(void)
{
  // check for nesting error
  if( nested_ctr == 0 )
    return -1; // nesting error
 8012bde:	f04f 30ff 	mov.w	r0, #4294967295
 8012be2:	4770      	bx	lr
		    "	msr primask, %0\n" \
		    :: "r" (prev_primask)  \
		    );
  }

  return 0; // no error
 8012be4:	2000      	movs	r0, #0
}
 8012be6:	4770      	bx	lr
 8012be8:	200001e8 	.word	0x200001e8
 8012bec:	200001e4 	.word	0x200001e4

08012bf0 <MIOS32_IRQ_Install>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
{
  // no check for IRQn as it's device dependent

  if( priority >= 16 )
 8012bf0:	290f      	cmp	r1, #15
 8012bf2:	d81c      	bhi.n	8012c2e <MIOS32_IRQ_Install+0x3e>
    return -1; // invalid priority

  u32 tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 8;
 8012bf4:	4b0f      	ldr	r3, [pc, #60]	; (8012c34 <MIOS32_IRQ_Install+0x44>)
 8012bf6:	68da      	ldr	r2, [r3, #12]
 8012bf8:	43d3      	mvns	r3, r2
 8012bfa:	f3c3 2202 	ubfx	r2, r3, #8, #3
  u32 tmppre = (4 - tmppriority);
 8012bfe:	f1c2 0304 	rsb	r3, r2, #4
  tmppriority = priority << tmppre;
 8012c02:	fa01 f103 	lsl.w	r1, r1, r3
  tmppriority = tmppriority << 4;
 8012c06:	0109      	lsls	r1, r1, #4
  NVIC->IP[IRQn] = tmppriority;
 8012c08:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8012c0c:	b2ca      	uxtb	r2, r1
 8012c0e:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8012c12:	2301      	movs	r3, #1
 8012c14:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
 8012c18:	b242      	sxtb	r2, r0
 8012c1a:	f000 001f 	and.w	r0, r0, #31
 8012c1e:	0951      	lsrs	r1, r2, #5
 8012c20:	fa03 f200 	lsl.w	r2, r3, r0
 8012c24:	4804      	ldr	r0, [pc, #16]	; (8012c38 <MIOS32_IRQ_Install+0x48>)
 8012c26:	f840 2021 	str.w	r2, [r0, r1, lsl #2]

  NVIC_EnableIRQ(IRQn);

  return 0; // no error
 8012c2a:	2000      	movs	r0, #0
 8012c2c:	4770      	bx	lr
s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
{
  // no check for IRQn as it's device dependent

  if( priority >= 16 )
    return -1; // invalid priority
 8012c2e:	f04f 30ff 	mov.w	r0, #4294967295
  NVIC->IP[IRQn] = tmppriority;

  NVIC_EnableIRQ(IRQn);

  return 0; // no error
}
 8012c32:	4770      	bx	lr
 8012c34:	e000ed00 	.word	0xe000ed00
 8012c38:	e000e100 	.word	0xe000e100

08012c3c <MIOS32_SPI_IO_Init>:
//! \return -1 if disabled SPI port selected
//! \return -2 if unsupported SPI port selected
//! \return -3 if unsupported pin driver mode
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_IO_Init(u8 spi, mios32_spi_pin_driver_t spi_pin_driver)
{
 8012c3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012c40:	4605      	mov	r5, r0
 8012c42:	460c      	mov	r4, r1
  // init GPIO structure
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8012c44:	4668      	mov	r0, sp
 8012c46:	f002 f8cc 	bl	8014de2 <GPIO_StructInit>

  // select pin driver and output mode
  u8 slave = 0;
  switch( spi_pin_driver ) {
 8012c4a:	2c07      	cmp	r4, #7
 8012c4c:	f200 8128 	bhi.w	8012ea0 <MIOS32_SPI_IO_Init+0x264>
 8012c50:	e8df f004 	tbb	[pc, r4]
 8012c54:	0406080a 	.word	0x0406080a
 8012c58:	1a15120c 	.word	0x1a15120c
  // init GPIO structure
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // select pin driver and output mode
  u8 slave = 0;
 8012c5c:	2400      	movs	r4, #0
 8012c5e:	e014      	b.n	8012c8a <MIOS32_SPI_IO_Init+0x4e>
 8012c60:	2400      	movs	r4, #0
 8012c62:	e00d      	b.n	8012c80 <MIOS32_SPI_IO_Init+0x44>
 8012c64:	2400      	movs	r4, #0
 8012c66:	e008      	b.n	8012c7a <MIOS32_SPI_IO_Init+0x3e>
 8012c68:	2400      	movs	r4, #0
 8012c6a:	e000      	b.n	8012c6e <MIOS32_SPI_IO_Init+0x32>
  switch( spi_pin_driver ) {
    case MIOS32_SPI_PIN_SLAVE_DRIVER_STRONG:
      slave = 1;
 8012c6c:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_STRONG:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012c6e:	2102      	movs	r1, #2
 8012c70:	f88d 1005 	strb.w	r1, [sp, #5]
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8012c74:	2000      	movs	r0, #0
 8012c76:	e00c      	b.n	8012c92 <MIOS32_SPI_IO_Init+0x56>
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_STRONG_OD:
      slave = 1;
 8012c78:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_STRONG_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012c7a:	2302      	movs	r3, #2
 8012c7c:	e006      	b.n	8012c8c <MIOS32_SPI_IO_Init+0x50>
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK:
      slave = 1;
 8012c7e:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_WEAK:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8012c80:	2000      	movs	r0, #0
 8012c82:	f88d 0005 	strb.w	r0, [sp, #5]
 8012c86:	e004      	b.n	8012c92 <MIOS32_SPI_IO_Init+0x56>
      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
      break;

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK_OD:
      slave = 1;
 8012c88:	2401      	movs	r4, #1
    case MIOS32_SPI_PIN_DRIVER_WEAK_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	f88d 3005 	strb.w	r3, [sp, #5]
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8012c90:	2001      	movs	r0, #1

    default:
      return -3; // unsupported pin driver mode
  }

  switch( spi ) {
 8012c92:	2d01      	cmp	r5, #1

    case MIOS32_SPI_PIN_SLAVE_DRIVER_WEAK_OD:
      slave = 1;
    case MIOS32_SPI_PIN_DRIVER_WEAK_OD:
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8012c94:	f88d 0006 	strb.w	r0, [sp, #6]

    default:
      return -3; // unsupported pin driver mode
  }

  switch( spi ) {
 8012c98:	d04b      	beq.n	8012d32 <MIOS32_SPI_IO_Init+0xf6>
 8012c9a:	d303      	bcc.n	8012ca4 <MIOS32_SPI_IO_Init+0x68>
 8012c9c:	2d02      	cmp	r5, #2
 8012c9e:	f040 80fc 	bne.w	8012e9a <MIOS32_SPI_IO_Init+0x25e>
 8012ca2:	e09f      	b.n	8012de4 <MIOS32_SPI_IO_Init+0x1a8>
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      MIOS32_SPI0_RCLK1_AF;
      MIOS32_SPI0_RCLK2_AF;
      MIOS32_SPI0_SCLK_AF;
 8012ca4:	2105      	movs	r1, #5
 8012ca6:	460a      	mov	r2, r1
 8012ca8:	487f      	ldr	r0, [pc, #508]	; (8012ea8 <MIOS32_SPI_IO_Init+0x26c>)
 8012caa:	f002 f8a7 	bl	8014dfc <GPIO_PinAFConfig>
      MIOS32_SPI0_MISO_AF;
 8012cae:	487e      	ldr	r0, [pc, #504]	; (8012ea8 <MIOS32_SPI_IO_Init+0x26c>)
 8012cb0:	2106      	movs	r1, #6
 8012cb2:	2205      	movs	r2, #5
 8012cb4:	f002 f8a2 	bl	8014dfc <GPIO_PinAFConfig>
      MIOS32_SPI0_MOSI_AF;
 8012cb8:	487b      	ldr	r0, [pc, #492]	; (8012ea8 <MIOS32_SPI_IO_Init+0x26c>)
 8012cba:	2107      	movs	r1, #7
 8012cbc:	2205      	movs	r2, #5
 8012cbe:	f002 f89d 	bl	8014dfc <GPIO_PinAFConfig>

      if( slave ) {
 8012cc2:	2c00      	cmp	r4, #0
 8012cc4:	f040 80ec 	bne.w	8012ea0 <MIOS32_SPI_IO_Init+0x264>
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
 8012cc8:	ad02      	add	r5, sp, #8
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012cca:	2702      	movs	r7, #2
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
 8012ccc:	2620      	movs	r6, #32
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 8012cce:	4876      	ldr	r0, [pc, #472]	; (8012ea8 <MIOS32_SPI_IO_Init+0x26c>)
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
 8012cd0:	f845 6d08 	str.w	r6, [r5, #-8]!
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 8012cd4:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
#endif
      } else {
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012cd6:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
 8012cda:	f002 f835 	bl	8014d48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
 8012cde:	2180      	movs	r1, #128	; 0x80
 8012ce0:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
 8012ce2:	4871      	ldr	r0, [pc, #452]	; (8012ea8 <MIOS32_SPI_IO_Init+0x26c>)
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
	// set RE3=1 to ensure that the on-board MEMs is disabled
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_Init(GPIOE, &GPIO_InitStructure);	
 8012ce4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8012eb4 <MIOS32_SPI_IO_Init+0x278>
	// SCLK and DOUT are outputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_SCLK_PIN;
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
 8012ce8:	4669      	mov	r1, sp
 8012cea:	f002 f82d 	bl	8014d48 <GPIO_Init>
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012cee:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
 8012cf0:	2204      	movs	r2, #4
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012cf2:	486e      	ldr	r0, [pc, #440]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
 8012cf4:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012cf6:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI0_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MOSI_PIN;
	GPIO_Init(MIOS32_SPI0_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012cf8:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
 8012cfc:	f002 f824 	bl	8014d48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
 8012d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 8012d04:	486a      	ldr	r0, [pc, #424]	; (8012eb0 <MIOS32_SPI_IO_Init+0x274>)
    
	// RCLK outputs assigned to GPIO
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
 8012d06:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);
 8012d08:	4669      	mov	r1, sp
 8012d0a:	f002 f81d 	bl	8014d48 <GPIO_Init>

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
	// set RE3=1 to ensure that the on-board MEMs is disabled
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8012d0e:	f04f 0908 	mov.w	r9, #8
	GPIO_Init(GPIOE, &GPIO_InitStructure);	
 8012d12:	4640      	mov	r0, r8
 8012d14:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_RCLK2_PIN;
	GPIO_Init(MIOS32_SPI0_RCLK2_PORT, &GPIO_InitStructure);

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
	// set RE3=1 to ensure that the on-board MEMs is disabled
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8012d16:	f8cd 9000 	str.w	r9, [sp]
	GPIO_Init(GPIOE, &GPIO_InitStructure);	
 8012d1a:	f002 f815 	bl	8014d48 <GPIO_Init>
#endif
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
 8012d1e:	2040      	movs	r0, #64	; 0x40

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
	// set RE3=1 to ensure that the on-board MEMs is disabled
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_Init(GPIOE, &GPIO_InitStructure);	
	MIOS32_SYS_STM_PINSET_1(GPIOE, GPIO_Pin_3);
 8012d20:	f8a8 9018 	strh.w	r9, [r8, #24]
#endif
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
 8012d24:	9000      	str	r0, [sp, #0]
#else
# warning "Please doublecheck if RE3 has to be set to 1 to disable MEMs"
#endif
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012d26:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8012d2a:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI0_MISO_PIN;
	GPIO_Init(MIOS32_SPI0_MISO_PORT, &GPIO_InitStructure);
 8012d2e:	485e      	ldr	r0, [pc, #376]	; (8012ea8 <MIOS32_SPI_IO_Init+0x26c>)
 8012d30:	e090      	b.n	8012e54 <MIOS32_SPI_IO_Init+0x218>

    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      MIOS32_SPI1_RCLK1_AF;
 8012d32:	485e      	ldr	r0, [pc, #376]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012d34:	210c      	movs	r1, #12
 8012d36:	2205      	movs	r2, #5
 8012d38:	f002 f860 	bl	8014dfc <GPIO_PinAFConfig>
      MIOS32_SPI1_RCLK2_AF;
      MIOS32_SPI1_SCLK_AF;
 8012d3c:	485b      	ldr	r0, [pc, #364]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012d3e:	210d      	movs	r1, #13
 8012d40:	2205      	movs	r2, #5
 8012d42:	f002 f85b 	bl	8014dfc <GPIO_PinAFConfig>
      MIOS32_SPI1_MISO_AF;
 8012d46:	4859      	ldr	r0, [pc, #356]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012d48:	210e      	movs	r1, #14
 8012d4a:	2205      	movs	r2, #5
 8012d4c:	f002 f856 	bl	8014dfc <GPIO_PinAFConfig>
      MIOS32_SPI1_MOSI_AF;
 8012d50:	4856      	ldr	r0, [pc, #344]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012d52:	210f      	movs	r1, #15
 8012d54:	2205      	movs	r2, #5
 8012d56:	f002 f851 	bl	8014dfc <GPIO_PinAFConfig>
 8012d5a:	2602      	movs	r6, #2
 8012d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000

      if( slave ) {
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
 8012d60:	9100      	str	r1, [sp, #0]
      MIOS32_SPI1_MISO_AF;
      MIOS32_SPI1_MOSI_AF;

      if( slave ) {
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012d62:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 8012d66:	4851      	ldr	r0, [pc, #324]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012d68:	4669      	mov	r1, sp
      MIOS32_SPI1_RCLK2_AF;
      MIOS32_SPI1_SCLK_AF;
      MIOS32_SPI1_MISO_AF;
      MIOS32_SPI1_MOSI_AF;

      if( slave ) {
 8012d6a:	b1dc      	cbz	r4, 8012da4 <MIOS32_SPI_IO_Init+0x168>
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 8012d6c:	f001 ffec 	bl	8014d48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
 8012d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012d74:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
 8012d76:	484d      	ldr	r0, [pc, #308]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012d78:	4669      	mov	r1, sp
 8012d7a:	f001 ffe5 	bl	8014d48 <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8012d7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012d82:	484a      	ldr	r0, [pc, #296]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8012d84:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012d86:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012d88:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012d8c:	f001 ffdc 	bl	8014d48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
 8012d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 8012d94:	4846      	ldr	r0, [pc, #280]	; (8012eb0 <MIOS32_SPI_IO_Init+0x274>)
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
 8012d96:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 8012d98:	4669      	mov	r1, sp
 8012d9a:	f001 ffd5 	bl	8014d48 <GPIO_Init>

	// DOUT is output assigned to alternate function
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012d9e:	f88d 6004 	strb.w	r6, [sp, #4]
 8012da2:	e01c      	b.n	8012dde <MIOS32_SPI_IO_Init+0x1a2>
	GPIO_Init(MIOS32_SPI1_MISO_PORT, &GPIO_InitStructure);    
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
 8012da4:	f001 ffd0 	bl	8014d48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
 8012da8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
 8012dac:	483f      	ldr	r0, [pc, #252]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_SCLK_PIN;
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
 8012dae:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
 8012db0:	4669      	mov	r1, sp
 8012db2:	f001 ffc9 	bl	8014d48 <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8012db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012dba:	483c      	ldr	r0, [pc, #240]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
 8012dbc:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012dbe:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI1_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MOSI_PIN;
	GPIO_Init(MIOS32_SPI1_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012dc0:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI1_RCLK1_PORT, &GPIO_InitStructure);
 8012dc4:	f001 ffc0 	bl	8014d48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_RCLK2_PIN;
 8012dc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012dcc:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI1_RCLK2_PORT, &GPIO_InitStructure);
 8012dce:	4669      	mov	r1, sp
 8012dd0:	4837      	ldr	r0, [pc, #220]	; (8012eb0 <MIOS32_SPI_IO_Init+0x274>)
 8012dd2:	f001 ffb9 	bl	8014d48 <GPIO_Init>
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012dd6:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8012dda:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI1_MISO_PIN;
 8012dde:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012de2:	e035      	b.n	8012e50 <MIOS32_SPI_IO_Init+0x214>

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      MIOS32_SPI2_RCLK1_AF;
 8012de4:	4830      	ldr	r0, [pc, #192]	; (8012ea8 <MIOS32_SPI_IO_Init+0x26c>)
 8012de6:	210f      	movs	r1, #15
 8012de8:	2206      	movs	r2, #6
 8012dea:	f002 f807 	bl	8014dfc <GPIO_PinAFConfig>
      MIOS32_SPI2_RCLK2_AF;
      MIOS32_SPI2_SCLK_AF;
 8012dee:	482f      	ldr	r0, [pc, #188]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012df0:	2103      	movs	r1, #3
 8012df2:	2206      	movs	r2, #6
 8012df4:	f002 f802 	bl	8014dfc <GPIO_PinAFConfig>
      MIOS32_SPI2_MISO_AF;
 8012df8:	482c      	ldr	r0, [pc, #176]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012dfa:	2104      	movs	r1, #4
 8012dfc:	2206      	movs	r2, #6
 8012dfe:	f001 fffd 	bl	8014dfc <GPIO_PinAFConfig>
      MIOS32_SPI2_MOSI_AF;
 8012e02:	482a      	ldr	r0, [pc, #168]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012e04:	2105      	movs	r1, #5
 8012e06:	2206      	movs	r2, #6
 8012e08:	f001 fff8 	bl	8014dfc <GPIO_PinAFConfig>
 8012e0c:	2208      	movs	r2, #8

      if( slave ) {
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012e0e:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
 8012e12:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8012e14:	4825      	ldr	r0, [pc, #148]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012e16:	4669      	mov	r1, sp
      MIOS32_SPI2_RCLK2_AF;
      MIOS32_SPI2_SCLK_AF;
      MIOS32_SPI2_MISO_AF;
      MIOS32_SPI2_MOSI_AF;

      if( slave ) {
 8012e18:	b30c      	cbz	r4, 8012e5e <MIOS32_SPI_IO_Init+0x222>
	// SCLK and DOUT are inputs assigned to alternate functions
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8012e1a:	f001 ff95 	bl	8014d48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8012e1e:	2120      	movs	r1, #32
 8012e20:	9100      	str	r1, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8012e22:	4822      	ldr	r0, [pc, #136]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012e24:	4669      	mov	r1, sp
 8012e26:	f001 ff8f 	bl	8014d48 <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012e2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012e2e:	481e      	ldr	r0, [pc, #120]	; (8012ea8 <MIOS32_SPI_IO_Init+0x26c>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012e30:	9200      	str	r2, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012e32:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012e34:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012e38:	f001 ff86 	bl	8014d48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8012e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8012e40:	481a      	ldr	r0, [pc, #104]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8012e42:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8012e44:	4669      	mov	r1, sp
 8012e46:	f001 ff7f 	bl	8014d48 <GPIO_Init>

	// DOUT is output assigned to alternate function
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012e4a:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MISO_PIN;
 8012e4e:	2010      	movs	r0, #16
 8012e50:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MISO_PORT, &GPIO_InitStructure);    
 8012e52:	4816      	ldr	r0, [pc, #88]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012e54:	4669      	mov	r1, sp
 8012e56:	f001 ff77 	bl	8014d48 <GPIO_Init>

    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
 8012e5a:	2000      	movs	r0, #0
 8012e5c:	e022      	b.n	8012ea4 <MIOS32_SPI_IO_Init+0x268>
	GPIO_Init(MIOS32_SPI2_MISO_PORT, &GPIO_InitStructure);    
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
 8012e5e:	f001 ff73 	bl	8014d48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8012e62:	2620      	movs	r6, #32
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8012e64:	4811      	ldr	r0, [pc, #68]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
      } else {
	// SCLK and DIN are inputs
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_SCLK_PIN;
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
 8012e66:	9600      	str	r6, [sp, #0]
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
 8012e68:	4669      	mov	r1, sp
 8012e6a:	f001 ff6d 	bl	8014d48 <GPIO_Init>
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012e6e:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012e74:	480c      	ldr	r0, [pc, #48]	; (8012ea8 <MIOS32_SPI_IO_Init+0x26c>)
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
 8012e76:	9300      	str	r3, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012e78:	4669      	mov	r1, sp
	GPIO_Init(MIOS32_SPI2_SCLK_PORT, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_MOSI_PIN;
	GPIO_Init(MIOS32_SPI2_MOSI_PORT, &GPIO_InitStructure);
    
	// RCLK (resp. CS) are configured as inputs as well
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012e7a:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK1_PIN;
	GPIO_Init(MIOS32_SPI2_RCLK1_PORT, &GPIO_InitStructure);
 8012e7e:	f001 ff63 	bl	8014d48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin  = MIOS32_SPI2_RCLK2_PIN;
 8012e82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012e86:	9000      	str	r0, [sp, #0]
	GPIO_Init(MIOS32_SPI2_RCLK2_PORT, &GPIO_InitStructure);
 8012e88:	4669      	mov	r1, sp
 8012e8a:	4808      	ldr	r0, [pc, #32]	; (8012eac <MIOS32_SPI_IO_Init+0x270>)
 8012e8c:	f001 ff5c 	bl	8014d48 <GPIO_Init>
    
	// DIN is input with pull-up
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8012e90:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8012e94:	f88d 6007 	strb.w	r6, [sp, #7]
 8012e98:	e7d9      	b.n	8012e4e <MIOS32_SPI_IO_Init+0x212>

      break;
#endif

    default:
      return -2; // unsupported SPI port
 8012e9a:	f06f 0001 	mvn.w	r0, #1
 8012e9e:	e001      	b.n	8012ea4 <MIOS32_SPI_IO_Init+0x268>
      MIOS32_SPI0_MISO_AF;
      MIOS32_SPI0_MOSI_AF;

      if( slave ) {
#if 1
	return -3; // slave mode not supported for this pin
 8012ea0:	f06f 0002 	mvn.w	r0, #2
    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
}
 8012ea4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8012ea8:	40020000 	.word	0x40020000
 8012eac:	40020400 	.word	0x40020400
 8012eb0:	40020c00 	.word	0x40020c00
 8012eb4:	40021000 	.word	0x40021000

08012eb8 <MIOS32_SPI_RC_PinSet>:
//! \return -2 if unsupported SPI port selected
//! \return -3 if unsupported RCx pin selected
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_RC_PinSet(u8 spi, u8 rc_pin, u8 pin_value)
{
  switch( spi ) {
 8012eb8:	2801      	cmp	r0, #1
 8012eba:	d00d      	beq.n	8012ed8 <MIOS32_SPI_RC_PinSet+0x20>
 8012ebc:	d302      	bcc.n	8012ec4 <MIOS32_SPI_RC_PinSet+0xc>
 8012ebe:	2802      	cmp	r0, #2
 8012ec0:	d12a      	bne.n	8012f18 <MIOS32_SPI_RC_PinSet+0x60>
 8012ec2:	e014      	b.n	8012eee <MIOS32_SPI_RC_PinSet+0x36>
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
 8012ec4:	b129      	cbz	r1, 8012ed2 <MIOS32_SPI_RC_PinSet+0x1a>
 8012ec6:	2901      	cmp	r1, #1
 8012ec8:	d129      	bne.n	8012f1e <MIOS32_SPI_RC_PinSet+0x66>
 8012eca:	4b16      	ldr	r3, [pc, #88]	; (8012f24 <MIOS32_SPI_RC_PinSet+0x6c>)
 8012ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012ed0:	e01c      	b.n	8012f0c <MIOS32_SPI_RC_PinSet+0x54>
 8012ed2:	4b15      	ldr	r3, [pc, #84]	; (8012f28 <MIOS32_SPI_RC_PinSet+0x70>)
 8012ed4:	2004      	movs	r0, #4
 8012ed6:	e014      	b.n	8012f02 <MIOS32_SPI_RC_PinSet+0x4a>

  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
 8012ed8:	b129      	cbz	r1, 8012ee6 <MIOS32_SPI_RC_PinSet+0x2e>
 8012eda:	2901      	cmp	r1, #1
 8012edc:	d11f      	bne.n	8012f1e <MIOS32_SPI_RC_PinSet+0x66>
 8012ede:	4b11      	ldr	r3, [pc, #68]	; (8012f24 <MIOS32_SPI_RC_PinSet+0x6c>)
 8012ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012ee4:	e012      	b.n	8012f0c <MIOS32_SPI_RC_PinSet+0x54>
 8012ee6:	4b10      	ldr	r3, [pc, #64]	; (8012f28 <MIOS32_SPI_RC_PinSet+0x70>)
 8012ee8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012eec:	e009      	b.n	8012f02 <MIOS32_SPI_RC_PinSet+0x4a>

  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
 8012eee:	b129      	cbz	r1, 8012efc <MIOS32_SPI_RC_PinSet+0x44>
 8012ef0:	2901      	cmp	r1, #1
 8012ef2:	d114      	bne.n	8012f1e <MIOS32_SPI_RC_PinSet+0x66>
 8012ef4:	4b0c      	ldr	r3, [pc, #48]	; (8012f28 <MIOS32_SPI_RC_PinSet+0x70>)
 8012ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012efa:	e007      	b.n	8012f0c <MIOS32_SPI_RC_PinSet+0x54>
 8012efc:	4b0b      	ldr	r3, [pc, #44]	; (8012f2c <MIOS32_SPI_RC_PinSet+0x74>)
 8012efe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 8012f02:	b10a      	cbz	r2, 8012f08 <MIOS32_SPI_RC_PinSet+0x50>
 8012f04:	8318      	strh	r0, [r3, #24]
 8012f06:	e003      	b.n	8012f10 <MIOS32_SPI_RC_PinSet+0x58>
 8012f08:	8358      	strh	r0, [r3, #26]
 8012f0a:	e001      	b.n	8012f10 <MIOS32_SPI_RC_PinSet+0x58>
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8012f0c:	b112      	cbz	r2, 8012f14 <MIOS32_SPI_RC_PinSet+0x5c>
 8012f0e:	8319      	strh	r1, [r3, #24]

  default:
    return -2; // unsupported SPI port
  }

  return 0; // no error
 8012f10:	2000      	movs	r0, #0
 8012f12:	4770      	bx	lr
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8012f14:	8359      	strh	r1, [r3, #26]
 8012f16:	e7fb      	b.n	8012f10 <MIOS32_SPI_RC_PinSet+0x58>
    }
    break;
#endif

  default:
    return -2; // unsupported SPI port
 8012f18:	f06f 0001 	mvn.w	r0, #1
 8012f1c:	4770      	bx	lr
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
    default: return -3; // unsupported RC pin
 8012f1e:	f06f 0002 	mvn.w	r0, #2
  default:
    return -2; // unsupported SPI port
  }

  return 0; // no error
}
 8012f22:	4770      	bx	lr
 8012f24:	40020c00 	.word	0x40020c00
 8012f28:	40020400 	.word	0x40020400
 8012f2c:	40020000 	.word	0x40020000

08012f30 <MIOS32_SPI_TransferByte>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferByte(u8 spi, u8 b)
{
  SPI_TypeDef *spi_ptr;

  switch( spi ) {
 8012f30:	2801      	cmp	r0, #1
 8012f32:	d006      	beq.n	8012f42 <MIOS32_SPI_TransferByte+0x12>
 8012f34:	d303      	bcc.n	8012f3e <MIOS32_SPI_TransferByte+0xe>
 8012f36:	2802      	cmp	r0, #2
 8012f38:	d116      	bne.n	8012f68 <MIOS32_SPI_TransferByte+0x38>

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
 8012f3a:	4b0d      	ldr	r3, [pc, #52]	; (8012f70 <MIOS32_SPI_TransferByte+0x40>)
      break;
 8012f3c:	e002      	b.n	8012f44 <MIOS32_SPI_TransferByte+0x14>
  switch( spi ) {
    case 0:
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
 8012f3e:	4b0d      	ldr	r3, [pc, #52]	; (8012f74 <MIOS32_SPI_TransferByte+0x44>)
 8012f40:	e000      	b.n	8012f44 <MIOS32_SPI_TransferByte+0x14>

    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
 8012f42:	4b0d      	ldr	r3, [pc, #52]	; (8012f78 <MIOS32_SPI_TransferByte+0x48>)
    default:
      return -2; // unsupported SPI port
  }

  // send byte
  spi_ptr->DR = b;
 8012f44:	8199      	strh	r1, [r3, #12]

  // TK update: the dummy read above becomes obsolete since we are checking for SPI Master mode now
  // which requires a read operation as well

  // wait until SPI transfer finished
  if( spi_ptr->CR1 & SPI_Mode_Master ) {
 8012f46:	881a      	ldrh	r2, [r3, #0]
 8012f48:	f402 7082 	and.w	r0, r2, #260	; 0x104
 8012f4c:	b130      	cbz	r0, 8012f5c <MIOS32_SPI_TransferByte+0x2c>
    while( spi_ptr->SR & SPI_I2S_FLAG_BSY );
 8012f4e:	891a      	ldrh	r2, [r3, #8]
 8012f50:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8012f54:	b281      	uxth	r1, r0
 8012f56:	2900      	cmp	r1, #0
 8012f58:	d1f9      	bne.n	8012f4e <MIOS32_SPI_TransferByte+0x1e>
 8012f5a:	e002      	b.n	8012f62 <MIOS32_SPI_TransferByte+0x32>
  } else {
    while( !(spi_ptr->SR & SPI_I2S_FLAG_RXNE) );
 8012f5c:	8919      	ldrh	r1, [r3, #8]
 8012f5e:	07ca      	lsls	r2, r1, #31
 8012f60:	d5fc      	bpl.n	8012f5c <MIOS32_SPI_TransferByte+0x2c>
  }

  // return received byte
  return spi_ptr->DR;
 8012f62:	899b      	ldrh	r3, [r3, #12]
 8012f64:	b298      	uxth	r0, r3
 8012f66:	4770      	bx	lr
      spi_ptr = MIOS32_SPI2_PTR;
      break;
#endif

    default:
      return -2; // unsupported SPI port
 8012f68:	f06f 0001 	mvn.w	r0, #1
    while( !(spi_ptr->SR & SPI_I2S_FLAG_RXNE) );
  }

  // return received byte
  return spi_ptr->DR;
}
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	40003c00 	.word	0x40003c00
 8012f74:	40013000 	.word	0x40013000
 8012f78:	40003800 	.word	0x40003800

08012f7c <MIOS32_SPI_TransferModeInit>:
//! \return -2 if unsupported SPI port selected
//! \return -3 if invalid spi_prescaler selected
//! \return -4 if invalid spi_mode selected
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
 8012f7c:	b570      	push	{r4, r5, r6, lr}
 8012f7e:	b086      	sub	sp, #24
 8012f80:	4604      	mov	r4, r0
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
 8012f82:	f44f 7082 	mov.w	r0, #260	; 0x104
 8012f86:	f8ad 0006 	strh.w	r0, [sp, #6]
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
 8012f8a:	f44f 7000 	mov.w	r0, #512	; 0x200
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
 8012f8e:	2300      	movs	r3, #0
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
 8012f90:	f8ad 000e 	strh.w	r0, [sp, #14]
  SPI_InitStructure.SPI_FirstBit      = SPI_FirstBit_MSB;
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8012f94:	2007      	movs	r0, #7
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferModeInit(u8 spi, mios32_spi_mode_t spi_mode, mios32_spi_prescaler_t spi_prescaler)
{
  // SPI configuration
  SPI_InitTypeDef SPI_InitStructure;
  SPI_InitStructure.SPI_Direction     = SPI_Direction_2Lines_FullDuplex;
 8012f96:	f8ad 3004 	strh.w	r3, [sp, #4]
  SPI_InitStructure.SPI_Mode          = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize      = SPI_DataSize_8b;
 8012f9a:	f8ad 3008 	strh.w	r3, [sp, #8]
  SPI_InitStructure.SPI_NSS           = SPI_NSS_Soft;
  SPI_InitStructure.SPI_FirstBit      = SPI_FirstBit_MSB;
 8012f9e:	f8ad 3012 	strh.w	r3, [sp, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8012fa2:	f8ad 0014 	strh.w	r0, [sp, #20]

  switch( spi_mode ) {
 8012fa6:	2907      	cmp	r1, #7
 8012fa8:	d860      	bhi.n	801306c <MIOS32_SPI_TransferModeInit+0xf0>
 8012faa:	e8df f001 	tbb	[pc, r1]
 8012fae:	1e08      	.short	0x1e08
 8012fb0:	0b041d14 	.word	0x0b041d14
 8012fb4:	1910      	.short	0x1910
    case MIOS32_SPI_MODE_SLAVE_CLK0_PHASE0:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012fb6:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012fba:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK0_PHASE0:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8012fbe:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012fc2:	e015      	b.n	8012ff0 <MIOS32_SPI_TransferModeInit+0x74>
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK0_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012fc4:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012fc8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012fcc:	e00d      	b.n	8012fea <MIOS32_SPI_TransferModeInit+0x6e>
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE0:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012fce:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012fd2:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK1_PHASE0:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 8012fd6:	2302      	movs	r3, #2
 8012fd8:	f8ad 300a 	strh.w	r3, [sp, #10]
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	e007      	b.n	8012ff0 <MIOS32_SPI_TransferModeInit+0x74>
      break;

    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8012fe0:	f8ad 3006 	strh.w	r3, [sp, #6]
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
 8012fe4:	f8ad 300e 	strh.w	r3, [sp, #14]
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 8012fe8:	2302      	movs	r3, #2
 8012fea:	f8ad 300a 	strh.w	r3, [sp, #10]
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8012fee:	2301      	movs	r3, #1
      break;
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
 8012ff0:	2a07      	cmp	r2, #7
    case MIOS32_SPI_MODE_SLAVE_CLK1_PHASE1:
      SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
      SPI_InitStructure.SPI_NSS  = SPI_NSS_Hard;
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8012ff2:	f8ad 300c 	strh.w	r3, [sp, #12]
      break;
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
 8012ff6:	d83f      	bhi.n	8013078 <MIOS32_SPI_TransferModeInit+0xfc>
    return -3; // invalid prescaler selected

  switch( spi ) {
 8012ff8:	2c01      	cmp	r4, #1
 8012ffa:	d01d      	beq.n	8013038 <MIOS32_SPI_TransferModeInit+0xbc>
 8012ffc:	d303      	bcc.n	8013006 <MIOS32_SPI_TransferModeInit+0x8a>
 8012ffe:	2c02      	cmp	r4, #2
 8013000:	d137      	bne.n	8013072 <MIOS32_SPI_TransferModeInit+0xf6>

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8013002:	4d1f      	ldr	r5, [pc, #124]	; (8013080 <MIOS32_SPI_TransferModeInit+0x104>)
 8013004:	e019      	b.n	801303a <MIOS32_SPI_TransferModeInit+0xbe>
  switch( spi ) {
    case 0: {
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
 8013006:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801300a:	2900      	cmp	r1, #0
 801300c:	d034      	beq.n	8013078 <MIOS32_SPI_TransferModeInit+0xfc>
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 801300e:	4c1d      	ldr	r4, [pc, #116]	; (8013084 <MIOS32_SPI_TransferModeInit+0x108>)
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
 8013010:	00d2      	lsls	r2, r2, #3
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);
 8013012:	4620      	mov	r0, r4
 8013014:	a901      	add	r1, sp, #4
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8013016:	8825      	ldrh	r5, [r4, #0]
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
 8013018:	f8ad 2010 	strh.w	r2, [sp, #16]
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);
 801301c:	f002 f8bc 	bl	8015198 <SPI_Init>

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8013020:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013024:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
      return -1; // disabled SPI port
#else
      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Slave ) {
	return -3; // slave mode not supported for this SPI
      }
      u16 prev_cr1 = MIOS32_SPI0_PTR->CR1;
 8013028:	b2ad      	uxth	r5, r5
      SPI_InitStructure.SPI_BaudRatePrescaler = ((u16)spi_prescaler&7) << 3;
      SPI_Init(MIOS32_SPI0_PTR, &SPI_InitStructure);

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 801302a:	d11d      	bne.n	8013068 <MIOS32_SPI_TransferModeInit+0xec>
	if( (prev_cr1 ^ MIOS32_SPI0_PTR->CR1) & 3 ) { // CPOL and CPHA located at bit #1 and #0
 801302c:	8823      	ldrh	r3, [r4, #0]
 801302e:	405d      	eors	r5, r3
 8013030:	07a8      	lsls	r0, r5, #30
 8013032:	d019      	beq.n	8013068 <MIOS32_SPI_TransferModeInit+0xec>
	  // clock configuration has been changed - we should send a dummy byte
	  // before the application activates chip select.
	  // this solves a dependency between SDCard and ENC28J60 driver
	  MIOS32_SPI_TransferByte(spi, 0xff);
 8013034:	2000      	movs	r0, #0
 8013036:	e014      	b.n	8013062 <MIOS32_SPI_TransferModeInit+0xe6>

    case 1: {
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI1_PTR->CR1;
 8013038:	4d13      	ldr	r5, [pc, #76]	; (8013088 <MIOS32_SPI_TransferModeInit+0x10c>)
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
 801303a:	1e51      	subs	r1, r2, #1
 801303c:	00ca      	lsls	r2, r1, #3
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);
 801303e:	4628      	mov	r0, r5
 8013040:	a901      	add	r1, sp, #4

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8013042:	882e      	ldrh	r6, [r5, #0]

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
 8013044:	f8ad 2010 	strh.w	r2, [sp, #16]
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);
 8013048:	f002 f8a6 	bl	8015198 <SPI_Init>

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 801304c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013050:	f5b0 7f82 	cmp.w	r0, #260	; 0x104

    case 2: {
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      u16 prev_cr1 = MIOS32_SPI2_PTR->CR1;
 8013054:	b2b6      	uxth	r6, r6

      SPI_InitStructure.SPI_BaudRatePrescaler = (((u16)spi_prescaler&7)-1) << 3;
      SPI_Init(MIOS32_SPI2_PTR, &SPI_InitStructure);

      if( SPI_InitStructure.SPI_Mode == SPI_Mode_Master ) {
 8013056:	d107      	bne.n	8013068 <MIOS32_SPI_TransferModeInit+0xec>
	if( (prev_cr1 ^ MIOS32_SPI2_PTR->CR1) & 3 ) { // CPOL and CPHA located at bit #1 and #0
 8013058:	882b      	ldrh	r3, [r5, #0]
 801305a:	405e      	eors	r6, r3
 801305c:	07b1      	lsls	r1, r6, #30
 801305e:	d003      	beq.n	8013068 <MIOS32_SPI_TransferModeInit+0xec>
	  // clock configuration has been changed - we should send a dummy byte
	  // before the application activates chip select.
	  // this solves a dependency between SDCard and ENC28J60 driver
	  MIOS32_SPI_TransferByte(spi, 0xff);
 8013060:	4620      	mov	r0, r4
 8013062:	21ff      	movs	r1, #255	; 0xff
 8013064:	f7ff ff64 	bl	8012f30 <MIOS32_SPI_TransferByte>

    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
 8013068:	2000      	movs	r0, #0
 801306a:	e007      	b.n	801307c <MIOS32_SPI_TransferModeInit+0x100>
    case MIOS32_SPI_MODE_CLK1_PHASE1:
      SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
      SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
      break;
    default:
      return -4; // invalid SPI clock/phase mode
 801306c:	f06f 0003 	mvn.w	r0, #3
 8013070:	e004      	b.n	801307c <MIOS32_SPI_TransferModeInit+0x100>
      }
#endif
    } break;

    default:
      return -2; // unsupported SPI port
 8013072:	f06f 0001 	mvn.w	r0, #1
 8013076:	e001      	b.n	801307c <MIOS32_SPI_TransferModeInit+0x100>
    default:
      return -4; // invalid SPI clock/phase mode
  }

  if( spi_prescaler >= 8 )
    return -3; // invalid prescaler selected
 8013078:	f06f 0002 	mvn.w	r0, #2
    default:
      return -2; // unsupported SPI port
  }

  return 0; // no error
}
 801307c:	b006      	add	sp, #24
 801307e:	bd70      	pop	{r4, r5, r6, pc}
 8013080:	40003c00 	.word	0x40003c00
 8013084:	40013000 	.word	0x40013000
 8013088:	40003800 	.word	0x40003800

0801308c <MIOS32_SPI_Init>:
//! Initializes SPI pins
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
 801308c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8013090:	4604      	mov	r4, r0
//! Initializes SPI pins
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
 8013092:	b090      	sub	sp, #64	; 0x40
  // currently only mode 0 supported
  if( mode != 0 )
 8013094:	2800      	cmp	r0, #0
 8013096:	f040 80ff 	bne.w	8013298 <MIOS32_SPI_Init+0x20c>
  // SPI0
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI0

  // disable callback function
  spi_callback[0] = NULL;
 801309a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80132d8 <MIOS32_SPI_Init+0x24c>
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 801309e:	f8df 823c 	ldr.w	r8, [pc, #572]	; 80132dc <MIOS32_SPI_Init+0x250>
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 80130a2:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80132e0 <MIOS32_SPI_Init+0x254>
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  DMA_InitTypeDef DMA_InitStructure;
  DMA_StructInit(&DMA_InitStructure);
 80130a6:	a801      	add	r0, sp, #4
 80130a8:	f001 fe16 	bl	8014cd8 <DMA_StructInit>
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 80130ac:	2304      	movs	r3, #4
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 80130ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
  // SPI0
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI0

  // disable callback function
  spi_callback[0] = NULL;
 80130b2:	f8c9 4000 	str.w	r4, [r9]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(0, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(0, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(0, MIOS32_SPI_PIN_DRIVER_WEAK);
 80130b6:	2102      	movs	r1, #2
  case 0:
#ifdef MIOS32_DONT_USE_SPI0
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK1_PORT, MIOS32_SPI0_RCLK1_PIN, pin_value); break;
 80130b8:	f8a8 3018 	strh.w	r3, [r8, #24]
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI0_RCLK2_PORT, MIOS32_SPI0_RCLK2_PIN, pin_value); break;
 80130bc:	f8aa 0018 	strh.w	r0, [sl, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(0, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(0, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(0, MIOS32_SPI_PIN_DRIVER_WEAK);
 80130c0:	4620      	mov	r0, r4
 80130c2:	f7ff fdbb 	bl	8012c3c <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80130c6:	2101      	movs	r1, #1
 80130c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80130cc:	f001 ff5c 	bl	8014f88 <RCC_APB2PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 80130d0:	2101      	movs	r1, #1
 80130d2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80130d6:	f001 ff33 	bl	8014f40 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80130da:	2101      	movs	r1, #1
 80130dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80130e0:	f001 ff2e 	bl	8014f40 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
 80130e4:	486f      	ldr	r0, [pc, #444]	; (80132a4 <MIOS32_SPI_Init+0x218>)
 80130e6:	4621      	mov	r1, r4
 80130e8:	f001 fe07 	bl	8014cfa <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
 80130ec:	496e      	ldr	r1, [pc, #440]	; (80132a8 <MIOS32_SPI_Init+0x21c>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 80130ee:	486d      	ldr	r0, [pc, #436]	; (80132a4 <MIOS32_SPI_Init+0x218>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
 80130f0:	9102      	str	r1, [sp, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80130f2:	f44f 6580 	mov.w	r5, #1024	; 0x400
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
 80130f6:	f04f 66c0 	mov.w	r6, #100663296	; 0x6000000
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 80130fa:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 80130fe:	a901      	add	r1, sp, #4
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI0_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_RX_CHN;
 8013100:	9601      	str	r6, [sp, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI0_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8013102:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8013104:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8013106:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8013108:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801310a:	9507      	str	r5, [sp, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 801310c:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 801310e:	9409      	str	r4, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8013110:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8013112:	970b      	str	r7, [sp, #44]	; 0x2c
  DMA_Init(MIOS32_SPI0_DMA_RX_PTR, &DMA_InitStructure);
 8013114:	f001 fdb6 	bl	8014c84 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
 8013118:	4864      	ldr	r0, [pc, #400]	; (80132ac <MIOS32_SPI_Init+0x220>)
 801311a:	4621      	mov	r1, r4
 801311c:	f001 fded 	bl	8014cfa <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
 8013120:	9601      	str	r6, [sp, #4]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8013122:	4862      	ldr	r0, [pc, #392]	; (80132ac <MIOS32_SPI_Init+0x220>)

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8013124:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8013126:	2640      	movs	r6, #64	; 0x40
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8013128:	a901      	add	r1, sp, #4
  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI0_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI0_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 801312a:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 801312c:	9604      	str	r6, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801312e:	9507      	str	r5, [sp, #28]
  DMA_Init(MIOS32_SPI0_DMA_TX_PTR, &DMA_InitStructure);
 8013130:	f001 fda8 	bl	8014c84 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI0_PTR, ENABLE);
 8013134:	2101      	movs	r1, #1
 8013136:	485e      	ldr	r0, [pc, #376]	; (80132b0 <MIOS32_SPI_Init+0x224>)
 8013138:	f002 f84d 	bl	80151d6 <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI0_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 801313c:	2201      	movs	r2, #1
 801313e:	2103      	movs	r1, #3
 8013140:	485b      	ldr	r0, [pc, #364]	; (80132b0 <MIOS32_SPI_Init+0x224>)
 8013142:	f002 f854 	bl	80151ee <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI0_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 8013146:	2105      	movs	r1, #5
 8013148:	203a      	movs	r0, #58	; 0x3a
 801314a:	f7ff fd51 	bl	8012bf0 <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(0, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 801314e:	2103      	movs	r1, #3
 8013150:	2206      	movs	r2, #6
 8013152:	4620      	mov	r0, r4
 8013154:	f7ff ff12 	bl	8012f7c <MIOS32_SPI_TransferModeInit>
  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
 8013158:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  // SPI1
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI1

  // disable callback function
  spi_callback[1] = NULL;
 801315c:	f8c9 4004 	str.w	r4, [r9, #4]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 8013160:	2102      	movs	r1, #2
  case 1:
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
 8013162:	f8a8 2018 	strh.w	r2, [r8, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 8013166:	2001      	movs	r0, #1
#ifdef MIOS32_DONT_USE_SPI1
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK1_PORT, MIOS32_SPI1_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI1_RCLK2_PORT, MIOS32_SPI1_RCLK2_PIN, pin_value); break;
 8013168:	f8aa 5018 	strh.w	r5, [sl, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(1, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(1, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(1, MIOS32_SPI_PIN_DRIVER_WEAK);
 801316c:	f7ff fd66 	bl	8012c3c <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8013170:	2101      	movs	r1, #1
 8013172:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8013176:	f001 fefb 	bl	8014f70 <RCC_APB1PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 801317a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 801317e:	2101      	movs	r1, #1
 8013180:	f001 fede 	bl	8014f40 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8013184:	2101      	movs	r1, #1
 8013186:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801318a:	f001 fed9 	bl	8014f40 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
 801318e:	4849      	ldr	r0, [pc, #292]	; (80132b4 <MIOS32_SPI_Init+0x228>)
 8013190:	4621      	mov	r1, r4
 8013192:	f001 fdb2 	bl	8014cfa <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
 8013196:	4b48      	ldr	r3, [pc, #288]	; (80132b8 <MIOS32_SPI_Init+0x22c>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 8013198:	4846      	ldr	r0, [pc, #280]	; (80132b4 <MIOS32_SPI_Init+0x228>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
 801319a:	9302      	str	r3, [sp, #8]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 801319c:	a901      	add	r1, sp, #4
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI1_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_RX_CHN;
 801319e:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI1_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 80131a0:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80131a2:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 80131a4:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80131a6:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80131a8:	9507      	str	r5, [sp, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80131aa:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80131ac:	9409      	str	r4, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80131ae:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 80131b0:	970b      	str	r7, [sp, #44]	; 0x2c
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);
 80131b2:	f001 fd67 	bl	8014c84 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
 80131b6:	4841      	ldr	r0, [pc, #260]	; (80132bc <MIOS32_SPI_Init+0x230>)
 80131b8:	4621      	mov	r1, r4
 80131ba:	f001 fd9e 	bl	8014cfa <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 80131be:	483f      	ldr	r0, [pc, #252]	; (80132bc <MIOS32_SPI_Init+0x230>)
  DMA_Init(MIOS32_SPI1_DMA_RX_PTR, &DMA_InitStructure);

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
 80131c0:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 80131c2:	a901      	add	r1, sp, #4

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI1_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI1_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 80131c4:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 80131c6:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80131c8:	9604      	str	r6, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80131ca:	9507      	str	r5, [sp, #28]
  DMA_Init(MIOS32_SPI1_DMA_TX_PTR, &DMA_InitStructure);
 80131cc:	f001 fd5a 	bl	8014c84 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI1_PTR, ENABLE);
 80131d0:	2101      	movs	r1, #1
 80131d2:	483b      	ldr	r0, [pc, #236]	; (80132c0 <MIOS32_SPI_Init+0x234>)
 80131d4:	f001 ffff 	bl	80151d6 <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI1_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 80131d8:	2201      	movs	r2, #1
 80131da:	2103      	movs	r1, #3
 80131dc:	4838      	ldr	r0, [pc, #224]	; (80132c0 <MIOS32_SPI_Init+0x234>)
 80131de:	f002 f806 	bl	80151ee <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI1_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 80131e2:	2105      	movs	r1, #5
 80131e4:	200e      	movs	r0, #14
 80131e6:	f7ff fd03 	bl	8012bf0 <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(1, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 80131ea:	2206      	movs	r2, #6
 80131ec:	2103      	movs	r1, #3
 80131ee:	2001      	movs	r0, #1
 80131f0:	f7ff fec4 	bl	8012f7c <MIOS32_SPI_TransferModeInit>
  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 80131f4:	4833      	ldr	r0, [pc, #204]	; (80132c4 <MIOS32_SPI_Init+0x238>)
  // SPI2
  ///////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_USE_SPI2

  // disable callback function
  spi_callback[2] = NULL;
 80131f6:	f8c9 4008 	str.w	r4, [r9, #8]
  case 2:
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
 80131fa:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 80131fe:	f8a0 9018 	strh.w	r9, [r0, #24]
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8013202:	f44f 7180 	mov.w	r1, #256	; 0x100
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(2, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(2, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(2, MIOS32_SPI_PIN_DRIVER_WEAK);
 8013206:	2002      	movs	r0, #2
#ifdef MIOS32_DONT_USE_SPI2
    return -1; // disabled SPI port
#else
    switch( rc_pin ) {
    case 0: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK1_PORT, MIOS32_SPI2_RCLK1_PIN, pin_value); break;
    case 1: MIOS32_SYS_STM_PINSET(MIOS32_SPI2_RCLK2_PORT, MIOS32_SPI2_RCLK2_PIN, pin_value); break;
 8013208:	f8a8 1018 	strh.w	r1, [r8, #24]
  // set RC pin(s) to 1
  MIOS32_SPI_RC_PinSet(2, 0, 1); // spi, rc_pin, pin_value
  MIOS32_SPI_RC_PinSet(2, 1, 1); // spi, rc_pin, pin_value

  // IO configuration
  MIOS32_SPI_IO_Init(2, MIOS32_SPI_PIN_DRIVER_WEAK);
 801320c:	4601      	mov	r1, r0
 801320e:	f7ff fd15 	bl	8012c3c <MIOS32_SPI_IO_Init>

  // enable SPI peripheral clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8013212:	2101      	movs	r1, #1
 8013214:	4648      	mov	r0, r9
 8013216:	f001 feab 	bl	8014f70 <RCC_APB1PeriphClockCmd>

  // enable DMA1 and DMA2 clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 801321a:	2101      	movs	r1, #1
 801321c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8013220:	f001 fe8e 	bl	8014f40 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8013224:	2101      	movs	r1, #1
 8013226:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801322a:	f001 fe89 	bl	8014f40 <RCC_AHB1PeriphClockCmd>

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
 801322e:	4826      	ldr	r0, [pc, #152]	; (80132c8 <MIOS32_SPI_Init+0x23c>)
 8013230:	4621      	mov	r1, r4
 8013232:	f001 fd62 	bl	8014cfa <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
 8013236:	4a25      	ldr	r2, [pc, #148]	; (80132cc <MIOS32_SPI_Init+0x240>)
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 8013238:	4823      	ldr	r0, [pc, #140]	; (80132c8 <MIOS32_SPI_Init+0x23c>)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
 801323a:	9202      	str	r2, [sp, #8]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 801323c:	a901      	add	r1, sp, #4
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

  // DMA Configuration for SPI Rx Event
  DMA_Cmd(MIOS32_SPI2_DMA_RX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_RX_CHN;
 801323e:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&MIOS32_SPI2_PTR->DR;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8013240:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8013242:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8013244:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8013246:	9406      	str	r4, [sp, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8013248:	9507      	str	r5, [sp, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 801324a:	9408      	str	r4, [sp, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 801324c:	9409      	str	r4, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 801324e:	940a      	str	r4, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
 8013250:	970b      	str	r7, [sp, #44]	; 0x2c
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);
 8013252:	f001 fd17 	bl	8014c84 <DMA_Init>

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
 8013256:	481e      	ldr	r0, [pc, #120]	; (80132d0 <MIOS32_SPI_Init+0x244>)
 8013258:	4621      	mov	r1, r4
 801325a:	f001 fd4e 	bl	8014cfa <DMA_Cmd>
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 801325e:	481c      	ldr	r0, [pc, #112]	; (80132d0 <MIOS32_SPI_Init+0x244>)
  DMA_Init(MIOS32_SPI2_DMA_RX_PTR, &DMA_InitStructure);

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
 8013260:	9401      	str	r4, [sp, #4]
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 8013262:	a901      	add	r1, sp, #4

  // DMA Configuration for SPI Tx Event
  // (partly re-using previous DMA setup)
  DMA_Cmd(MIOS32_SPI2_DMA_TX_PTR, DISABLE);
  DMA_InitStructure.DMA_Channel = MIOS32_SPI2_DMA_TX_CHN;
  DMA_InitStructure.DMA_Memory0BaseAddr = 0; // will be configured later
 8013264:	9403      	str	r4, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = 0; // will be configured later
 8013266:	9405      	str	r4, [sp, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8013268:	9604      	str	r6, [sp, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801326a:	9507      	str	r5, [sp, #28]
  DMA_Init(MIOS32_SPI2_DMA_TX_PTR, &DMA_InitStructure);
 801326c:	f001 fd0a 	bl	8014c84 <DMA_Init>

  // enable SPI
  SPI_Cmd(MIOS32_SPI2_PTR, ENABLE);
 8013270:	2101      	movs	r1, #1
 8013272:	4818      	ldr	r0, [pc, #96]	; (80132d4 <MIOS32_SPI_Init+0x248>)
 8013274:	f001 ffaf 	bl	80151d6 <SPI_Cmd>

  // enable SPI interrupts to DMA
  SPI_I2S_DMACmd(MIOS32_SPI2_PTR, SPI_I2S_DMAReq_Tx | SPI_I2S_DMAReq_Rx, ENABLE);
 8013278:	2103      	movs	r1, #3
 801327a:	4816      	ldr	r0, [pc, #88]	; (80132d4 <MIOS32_SPI_Init+0x248>)
 801327c:	2201      	movs	r2, #1
 801327e:	f001 ffb6 	bl	80151ee <SPI_I2S_DMACmd>

  // Configure DMA interrupt
  MIOS32_IRQ_Install(MIOS32_SPI2_DMA_IRQ_CHANNEL, MIOS32_IRQ_SPI_DMA_PRIORITY);
 8013282:	2105      	movs	r1, #5
 8013284:	200d      	movs	r0, #13
 8013286:	f7ff fcb3 	bl	8012bf0 <MIOS32_IRQ_Install>

  // initial SPI peripheral configuration
  MIOS32_SPI_TransferModeInit(2, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
 801328a:	2002      	movs	r0, #2
 801328c:	2103      	movs	r1, #3
 801328e:	2206      	movs	r2, #6
 8013290:	f7ff fe74 	bl	8012f7c <MIOS32_SPI_TransferModeInit>
#endif /* MIOS32_DONT_USE_SPI2 */


  return 0; // no error
 8013294:	4620      	mov	r0, r4
 8013296:	e001      	b.n	801329c <MIOS32_SPI_Init+0x210>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8013298:	f04f 30ff 	mov.w	r0, #4294967295
  MIOS32_SPI_TransferModeInit(2, MIOS32_SPI_MODE_CLK1_PHASE1, MIOS32_SPI_PRESCALER_128);
#endif /* MIOS32_DONT_USE_SPI2 */


  return 0; // no error
}
 801329c:	b010      	add	sp, #64	; 0x40
 801329e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132a2:	bf00      	nop
 80132a4:	40026440 	.word	0x40026440
 80132a8:	4001300c 	.word	0x4001300c
 80132ac:	40026458 	.word	0x40026458
 80132b0:	40013000 	.word	0x40013000
 80132b4:	40026058 	.word	0x40026058
 80132b8:	4000380c 	.word	0x4000380c
 80132bc:	40026070 	.word	0x40026070
 80132c0:	40003800 	.word	0x40003800
 80132c4:	40020000 	.word	0x40020000
 80132c8:	40026040 	.word	0x40026040
 80132cc:	40003c0c 	.word	0x40003c0c
 80132d0:	40026088 	.word	0x40026088
 80132d4:	40003c00 	.word	0x40003c00
 80132d8:	200001ec 	.word	0x200001ec
 80132dc:	40020400 	.word	0x40020400
 80132e0:	40020c00 	.word	0x40020c00

080132e4 <MIOS32_SPI_TransferBlock>:
//! \return -1 if disabled SPI port selected
//! \return -2 if unsupported SPI port selected
//! \return -3 if function has been called during an ongoing DMA transfer
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferBlock(u8 spi, u8 *send_buffer, u8 *receive_buffer, u16 len, void *callback)
{
 80132e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  SPI_TypeDef *spi_ptr;
  DMA_Stream_TypeDef *dma_tx_ptr, *dma_rx_ptr;
  u32 dma_tx_irq_flags, dma_rx_irq_flags;

  switch( spi ) {
 80132e8:	2801      	cmp	r0, #1
//! \return -1 if disabled SPI port selected
//! \return -2 if unsupported SPI port selected
//! \return -3 if function has been called during an ongoing DMA transfer
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SPI_TransferBlock(u8 spi, u8 *send_buffer, u8 *receive_buffer, u16 len, void *callback)
{
 80132ea:	468c      	mov	ip, r1
 80132ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
  SPI_TypeDef *spi_ptr;
  DMA_Stream_TypeDef *dma_tx_ptr, *dma_rx_ptr;
  u32 dma_tx_irq_flags, dma_rx_irq_flags;

  switch( spi ) {
 80132f0:	d00f      	beq.n	8013312 <MIOS32_SPI_TransferBlock+0x2e>
 80132f2:	d307      	bcc.n	8013304 <MIOS32_SPI_TransferBlock+0x20>
 80132f4:	2802      	cmp	r0, #2
 80132f6:	d163      	bne.n	80133c0 <MIOS32_SPI_TransferBlock+0xdc>
#else
      spi_ptr = MIOS32_SPI2_PTR;
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI2_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI2_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI2_DMA_RX_IRQ_FLAGS;
 80132f8:	4935      	ldr	r1, [pc, #212]	; (80133d0 <MIOS32_SPI_TransferBlock+0xec>)
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI2_DMA_TX_IRQ_FLAGS;
 80132fa:	4f36      	ldr	r7, [pc, #216]	; (80133d4 <MIOS32_SPI_TransferBlock+0xf0>)
      dma_rx_ptr = MIOS32_SPI2_DMA_RX_PTR;
 80132fc:	4c36      	ldr	r4, [pc, #216]	; (80133d8 <MIOS32_SPI_TransferBlock+0xf4>)
    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
 80132fe:	4d37      	ldr	r5, [pc, #220]	; (80133dc <MIOS32_SPI_TransferBlock+0xf8>)

    case 2:
#ifdef MIOS32_DONT_USE_SPI2
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI2_PTR;
 8013300:	4e37      	ldr	r6, [pc, #220]	; (80133e0 <MIOS32_SPI_TransferBlock+0xfc>)
      dma_tx_ptr = MIOS32_SPI2_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI2_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI2_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI2_DMA_RX_IRQ_FLAGS;
      break;
 8013302:	e00c      	b.n	801331e <MIOS32_SPI_TransferBlock+0x3a>
#else
      spi_ptr = MIOS32_SPI0_PTR;
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI0_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI0_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI0_DMA_RX_IRQ_FLAGS;
 8013304:	4932      	ldr	r1, [pc, #200]	; (80133d0 <MIOS32_SPI_TransferBlock+0xec>)
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI0_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI0_DMA_RX_PTR;
 8013306:	4c37      	ldr	r4, [pc, #220]	; (80133e4 <MIOS32_SPI_TransferBlock+0x100>)
    case 0:
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
 8013308:	4d37      	ldr	r5, [pc, #220]	; (80133e8 <MIOS32_SPI_TransferBlock+0x104>)
  switch( spi ) {
    case 0:
#ifdef MIOS32_DONT_USE_SPI0
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI0_PTR;
 801330a:	4e38      	ldr	r6, [pc, #224]	; (80133ec <MIOS32_SPI_TransferBlock+0x108>)
      dma_tx_ptr = MIOS32_SPI0_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI0_DMA_TX_IRQ_FLAGS;
 801330c:	f04f 57f2 	mov.w	r7, #507510784	; 0x1e400000
 8013310:	e005      	b.n	801331e <MIOS32_SPI_TransferBlock+0x3a>
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
      dma_tx_ptr = MIOS32_SPI1_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI1_DMA_TX_IRQ_FLAGS;
 8013312:	4f37      	ldr	r7, [pc, #220]	; (80133f0 <MIOS32_SPI_TransferBlock+0x10c>)
      dma_rx_ptr = MIOS32_SPI1_DMA_RX_PTR;
 8013314:	4c37      	ldr	r4, [pc, #220]	; (80133f4 <MIOS32_SPI_TransferBlock+0x110>)
    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
      dma_tx_ptr = MIOS32_SPI1_DMA_TX_PTR;
 8013316:	4d38      	ldr	r5, [pc, #224]	; (80133f8 <MIOS32_SPI_TransferBlock+0x114>)

    case 1:
#ifdef MIOS32_DONT_USE_SPI1
      return -1; // disabled SPI port
#else
      spi_ptr = MIOS32_SPI1_PTR;
 8013318:	4e38      	ldr	r6, [pc, #224]	; (80133fc <MIOS32_SPI_TransferBlock+0x118>)
      dma_tx_ptr = MIOS32_SPI1_DMA_TX_PTR;
      dma_tx_irq_flags = MIOS32_SPI1_DMA_TX_IRQ_FLAGS;
      dma_rx_ptr = MIOS32_SPI1_DMA_RX_PTR;
      dma_rx_irq_flags = MIOS32_SPI1_DMA_RX_IRQ_FLAGS;
 801331a:	f04f 51f2 	mov.w	r1, #507510784	; 0x1e400000
    default:
      return -2; // unsupported SPI port
  }

  // exit if ongoing transfer
  if( dma_rx_ptr->NDTR )
 801331e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013322:	f1b9 0f00 	cmp.w	r9, #0
 8013326:	d14f      	bne.n	80133c8 <MIOS32_SPI_TransferBlock+0xe4>
    return -3;

  // set callback function
  spi_callback[spi] = callback;
 8013328:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8013408 <MIOS32_SPI_TransferBlock+0x124>
 801332c:	f84e 8020 	str.w	r8, [lr, r0, lsl #2]

  // ensure that previously received value doesn't cause DMA access
  if( spi_ptr->DR );
 8013330:	89b0      	ldrh	r0, [r6, #12]

  // configure Rx channel
  // TK: optimization method: read rx_CCR once, write back only when required
  // the channel must be disabled to configure new values
  u32 rx_CCR = dma_rx_ptr->CR & ~CCR_ENABLE;
 8013332:	6820      	ldr	r0, [r4, #0]
 8013334:	f020 0601 	bic.w	r6, r0, #1
  dma_rx_ptr->CR = rx_CCR;
 8013338:	6026      	str	r6, [r4, #0]
  if( receive_buffer != NULL ) {
 801333a:	b11a      	cbz	r2, 8013344 <MIOS32_SPI_TransferBlock+0x60>
    // enable memory addr. increment - bytes written into receive buffer
    dma_rx_ptr->M0AR = (u32)receive_buffer;
 801333c:	60e2      	str	r2, [r4, #12]
    rx_CCR |= DMA_MemoryInc_Enable;
 801333e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 8013342:	e007      	b.n	8013354 <MIOS32_SPI_TransferBlock+0x70>
  } else {
    // disable memory addr. increment - bytes written into dummy buffer
    rx_dummy_byte = 0xff;
 8013344:	4a2e      	ldr	r2, [pc, #184]	; (8013400 <MIOS32_SPI_TransferBlock+0x11c>)
 8013346:	26ff      	movs	r6, #255	; 0xff
    dma_rx_ptr->M0AR = (u32)&rx_dummy_byte;
    rx_CCR &= ~DMA_MemoryInc_Enable;
 8013348:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    // enable memory addr. increment - bytes written into receive buffer
    dma_rx_ptr->M0AR = (u32)receive_buffer;
    rx_CCR |= DMA_MemoryInc_Enable;
  } else {
    // disable memory addr. increment - bytes written into dummy buffer
    rx_dummy_byte = 0xff;
 801334c:	7016      	strb	r6, [r2, #0]
    dma_rx_ptr->M0AR = (u32)&rx_dummy_byte;
 801334e:	60e2      	str	r2, [r4, #12]
    rx_CCR &= ~DMA_MemoryInc_Enable;
 8013350:	f020 0601 	bic.w	r6, r0, #1
  }
  dma_rx_ptr->NDTR = len;
 8013354:	6063      	str	r3, [r4, #4]


  // configure Tx channel
  // TK: optimization method: read tx_CCR once, write back only when required
  // the channel must be disabled to configure new values
  u32 tx_CCR = dma_tx_ptr->CR & ~CCR_ENABLE;
 8013356:	682a      	ldr	r2, [r5, #0]
 8013358:	f022 0001 	bic.w	r0, r2, #1
  dma_tx_ptr->CR = tx_CCR;
 801335c:	6028      	str	r0, [r5, #0]
  if( send_buffer != NULL ) {
 801335e:	f1bc 0f00 	cmp.w	ip, #0
 8013362:	d004      	beq.n	801336e <MIOS32_SPI_TransferBlock+0x8a>
    // enable memory addr. increment - bytes read from send buffer
    dma_tx_ptr->M0AR = (u32)send_buffer;
 8013364:	f8c5 c00c 	str.w	ip, [r5, #12]
    tx_CCR |= DMA_MemoryInc_Enable;
 8013368:	f440 6980 	orr.w	r9, r0, #1024	; 0x400
 801336c:	e009      	b.n	8013382 <MIOS32_SPI_TransferBlock+0x9e>
  } else {
    // disable memory addr. increment - bytes read from dummy buffer
    tx_dummy_byte = 0xff;
 801336e:	4825      	ldr	r0, [pc, #148]	; (8013404 <MIOS32_SPI_TransferBlock+0x120>)
 8013370:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dma_tx_ptr->M0AR = (u32)&tx_dummy_byte;
    tx_CCR &= ~DMA_MemoryInc_Enable;
 8013374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    // enable memory addr. increment - bytes read from send buffer
    dma_tx_ptr->M0AR = (u32)send_buffer;
    tx_CCR |= DMA_MemoryInc_Enable;
  } else {
    // disable memory addr. increment - bytes read from dummy buffer
    tx_dummy_byte = 0xff;
 8013378:	f880 9000 	strb.w	r9, [r0]
    dma_tx_ptr->M0AR = (u32)&tx_dummy_byte;
 801337c:	60e8      	str	r0, [r5, #12]
    tx_CCR &= ~DMA_MemoryInc_Enable;
 801337e:	f022 0901 	bic.w	r9, r2, #1
  }
  dma_tx_ptr->NDTR = len;
 8013382:	606b      	str	r3, [r5, #4]

  // new for STM32F4 DMA: it's required to clear interrupt flags before DMA channel is enabled again
  DMA_ClearFlag(dma_rx_ptr, dma_rx_irq_flags);
 8013384:	4620      	mov	r0, r4
 8013386:	f001 fcc1 	bl	8014d0c <DMA_ClearFlag>
  DMA_ClearFlag(dma_tx_ptr, dma_tx_irq_flags);
 801338a:	4628      	mov	r0, r5
 801338c:	4639      	mov	r1, r7
 801338e:	f001 fcbd 	bl	8014d0c <DMA_ClearFlag>
 8013392:	f049 0301 	orr.w	r3, r9, #1

  // enable DMA interrupt if callback function active
  if( callback != NULL ) {
 8013396:	f1b8 0f00 	cmp.w	r8, #0
 801339a:	d006      	beq.n	80133aa <MIOS32_SPI_TransferBlock+0xc6>
    rx_CCR |= DMA_IT_TC;
 801339c:	f046 0611 	orr.w	r6, r6, #17
    dma_rx_ptr->CR = rx_CCR;
 80133a0:	6026      	str	r6, [r4, #0]

    // if no callback: wait until all bytes have been transmitted/received
    while( dma_rx_ptr->NDTR );
  }

  return 0; // no error;
 80133a2:	2000      	movs	r0, #0
  if( callback != NULL ) {
    rx_CCR |= DMA_IT_TC;
    dma_rx_ptr->CR = rx_CCR;

    // start DMA transfer
    dma_tx_ptr->CR = tx_CCR | CCR_ENABLE;
 80133a4:	602b      	str	r3, [r5, #0]
 80133a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else {
    rx_CCR &= ~DMA_IT_TC;
 80133aa:	f026 0110 	bic.w	r1, r6, #16
 80133ae:	f041 0601 	orr.w	r6, r1, #1
    dma_rx_ptr->CR = rx_CCR;
 80133b2:	6026      	str	r6, [r4, #0]

    // start DMA transfer
    dma_tx_ptr->CR = tx_CCR | CCR_ENABLE;
 80133b4:	602b      	str	r3, [r5, #0]

    // if no callback: wait until all bytes have been transmitted/received
    while( dma_rx_ptr->NDTR );
 80133b6:	6860      	ldr	r0, [r4, #4]
 80133b8:	2800      	cmp	r0, #0
 80133ba:	d1fc      	bne.n	80133b6 <MIOS32_SPI_TransferBlock+0xd2>
 80133bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      dma_rx_irq_flags = MIOS32_SPI2_DMA_RX_IRQ_FLAGS;
      break;
#endif

    default:
      return -2; // unsupported SPI port
 80133c0:	f06f 0001 	mvn.w	r0, #1
 80133c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  // exit if ongoing transfer
  if( dma_rx_ptr->NDTR )
    return -3;
 80133c8:	f06f 0002 	mvn.w	r0, #2
    // if no callback: wait until all bytes have been transmitted/received
    while( dma_rx_ptr->NDTR );
  }

  return 0; // no error;
}
 80133cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133d0:	10390000 	.word	0x10390000
 80133d4:	20000e40 	.word	0x20000e40
 80133d8:	40026040 	.word	0x40026040
 80133dc:	40026088 	.word	0x40026088
 80133e0:	40003c00 	.word	0x40003c00
 80133e4:	40026440 	.word	0x40026440
 80133e8:	40026458 	.word	0x40026458
 80133ec:	40013000 	.word	0x40013000
 80133f0:	20000039 	.word	0x20000039
 80133f4:	40026058 	.word	0x40026058
 80133f8:	40026070 	.word	0x40026070
 80133fc:	40003800 	.word	0x40003800
 8013400:	200001f9 	.word	0x200001f9
 8013404:	200001f8 	.word	0x200001f8
 8013408:	200001ec 	.word	0x200001ec

0801340c <DMA2_Stream2_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
// Called when callback function has been defined and SPI transfer has finished
/////////////////////////////////////////////////////////////////////////////
MIOS32_SPI0_DMA_IRQHANDLER_FUNC
{
 801340c:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI0_DMA_RX_PTR, MIOS32_SPI0_DMA_RX_IRQ_FLAGS);
 801340e:	4804      	ldr	r0, [pc, #16]	; (8013420 <DMA2_Stream2_IRQHandler+0x14>)
 8013410:	4904      	ldr	r1, [pc, #16]	; (8013424 <DMA2_Stream2_IRQHandler+0x18>)
 8013412:	f001 fc7b 	bl	8014d0c <DMA_ClearFlag>

  if( spi_callback[0] != NULL )
 8013416:	4b04      	ldr	r3, [pc, #16]	; (8013428 <DMA2_Stream2_IRQHandler+0x1c>)
 8013418:	6818      	ldr	r0, [r3, #0]
 801341a:	b100      	cbz	r0, 801341e <DMA2_Stream2_IRQHandler+0x12>
    spi_callback[0]();
 801341c:	4780      	blx	r0
 801341e:	bd08      	pop	{r3, pc}
 8013420:	40026440 	.word	0x40026440
 8013424:	10390000 	.word	0x10390000
 8013428:	200001ec 	.word	0x200001ec

0801342c <DMA1_Stream3_IRQHandler>:
}

MIOS32_SPI1_DMA_IRQHANDLER_FUNC
{
 801342c:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI1_DMA_RX_PTR, MIOS32_SPI1_DMA_RX_IRQ_FLAGS);
 801342e:	4805      	ldr	r0, [pc, #20]	; (8013444 <DMA1_Stream3_IRQHandler+0x18>)
 8013430:	f04f 51f2 	mov.w	r1, #507510784	; 0x1e400000
 8013434:	f001 fc6a 	bl	8014d0c <DMA_ClearFlag>

  if( spi_callback[1] != NULL )
 8013438:	4b03      	ldr	r3, [pc, #12]	; (8013448 <DMA1_Stream3_IRQHandler+0x1c>)
 801343a:	6858      	ldr	r0, [r3, #4]
 801343c:	b100      	cbz	r0, 8013440 <DMA1_Stream3_IRQHandler+0x14>
    spi_callback[1]();
 801343e:	4780      	blx	r0
 8013440:	bd08      	pop	{r3, pc}
 8013442:	bf00      	nop
 8013444:	40026058 	.word	0x40026058
 8013448:	200001ec 	.word	0x200001ec

0801344c <DMA1_Stream2_IRQHandler>:
}

MIOS32_SPI2_DMA_IRQHANDLER_FUNC
{
 801344c:	b508      	push	{r3, lr}
  DMA_ClearFlag(MIOS32_SPI2_DMA_RX_PTR, MIOS32_SPI2_DMA_RX_IRQ_FLAGS);
 801344e:	4804      	ldr	r0, [pc, #16]	; (8013460 <DMA1_Stream2_IRQHandler+0x14>)
 8013450:	4904      	ldr	r1, [pc, #16]	; (8013464 <DMA1_Stream2_IRQHandler+0x18>)
 8013452:	f001 fc5b 	bl	8014d0c <DMA_ClearFlag>

  if( spi_callback[2] != NULL )
 8013456:	4b04      	ldr	r3, [pc, #16]	; (8013468 <DMA1_Stream2_IRQHandler+0x1c>)
 8013458:	6898      	ldr	r0, [r3, #8]
 801345a:	b100      	cbz	r0, 801345e <DMA1_Stream2_IRQHandler+0x12>
    spi_callback[2]();
 801345c:	4780      	blx	r0
 801345e:	bd08      	pop	{r3, pc}
 8013460:	40026040 	.word	0x40026040
 8013464:	10390000 	.word	0x10390000
 8013468:	200001ec 	.word	0x200001ec

0801346c <MIOS32_BOARD_PinInitHlp>:

/////////////////////////////////////////////////////////////////////////////
//! Internally used help function to initialize a pin
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
 801346c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801346e:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8013470:	4668      	mov	r0, sp

/////////////////////////////////////////////////////////////////////////////
//! Internally used help function to initialize a pin
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
 8013472:	460e      	mov	r6, r1
 8013474:	4614      	mov	r4, r2
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8013476:	f001 fcb4 	bl	8014de2 <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801347a:	2302      	movs	r3, #2
 801347c:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_InitStructure.GPIO_Pin = pin_mask;
 8013480:	9600      	str	r6, [sp, #0]

  switch( mode ) {
 8013482:	2c06      	cmp	r4, #6
 8013484:	d829      	bhi.n	80134da <MIOS32_BOARD_PinInitHlp+0x6e>
 8013486:	e8df f004 	tbb	[pc, r4]
 801348a:	0426      	.short	0x0426
 801348c:	18130f09 	.word	0x18130f09
 8013490:	1d          	.byte	0x1d
 8013491:	00          	.byte	0x00
  case MIOS32_BOARD_PIN_MODE_IGNORE:
    return 0; // don't touch
  case MIOS32_BOARD_PIN_MODE_ANALOG:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8013492:	2003      	movs	r0, #3
 8013494:	f88d 0004 	strb.w	r0, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8013498:	2300      	movs	r3, #0
 801349a:	e002      	b.n	80134a2 <MIOS32_BOARD_PinInitHlp+0x36>
    break;
  case MIOS32_BOARD_PIN_MODE_INPUT:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801349c:	2300      	movs	r3, #0
 801349e:	f88d 3004 	strb.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80134a2:	f88d 3007 	strb.w	r3, [sp, #7]
    break;
 80134a6:	e012      	b.n	80134ce <MIOS32_BOARD_PinInitHlp+0x62>
  case MIOS32_BOARD_PIN_MODE_INPUT_PD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80134a8:	2200      	movs	r2, #0
 80134aa:	f88d 2004 	strb.w	r2, [sp, #4]
 80134ae:	e7f8      	b.n	80134a2 <MIOS32_BOARD_PinInitHlp+0x36>
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    break;
  case MIOS32_BOARD_PIN_MODE_INPUT_PU:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80134b0:	2100      	movs	r1, #0
 80134b2:	f88d 1004 	strb.w	r1, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80134b6:	2301      	movs	r3, #1
 80134b8:	e7f3      	b.n	80134a2 <MIOS32_BOARD_PinInitHlp+0x36>
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_PP:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80134ba:	2001      	movs	r0, #1
 80134bc:	f88d 0004 	strb.w	r0, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80134c0:	2300      	movs	r3, #0
 80134c2:	e002      	b.n	80134ca <MIOS32_BOARD_PinInitHlp+0x5e>
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_OD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80134c4:	2301      	movs	r3, #1
 80134c6:	f88d 3004 	strb.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80134ca:	f88d 3006 	strb.w	r3, [sp, #6]
  default:
    return -2; // invalid pin mode
  }

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);
 80134ce:	4628      	mov	r0, r5
 80134d0:	4669      	mov	r1, sp
 80134d2:	f001 fc39 	bl	8014d48 <GPIO_Init>

  return 0; // no error
 80134d6:	2000      	movs	r0, #0
 80134d8:	e001      	b.n	80134de <MIOS32_BOARD_PinInitHlp+0x72>
  case MIOS32_BOARD_PIN_MODE_OUTPUT_OD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    break;
  default:
    return -2; // invalid pin mode
 80134da:	f06f 0001 	mvn.w	r0, #1

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);

  return 0; // no error
}
 80134de:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

080134e0 <MIOS32_BOARD_Init>:
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 80134e0:	b920      	cbnz	r0, 80134ec <MIOS32_BOARD_Init+0xc>
    return -1; // unsupported mode

  j5_enable_mask = 0;
 80134e2:	4b04      	ldr	r3, [pc, #16]	; (80134f4 <MIOS32_BOARD_Init+0x14>)
  j10_enable_mask = 0;
 80134e4:	4904      	ldr	r1, [pc, #16]	; (80134f8 <MIOS32_BOARD_Init+0x18>)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  j5_enable_mask = 0;
 80134e6:	8018      	strh	r0, [r3, #0]
  j10_enable_mask = 0;
 80134e8:	8008      	strh	r0, [r1, #0]

  return 0; // no error
 80134ea:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80134ec:	f04f 30ff 	mov.w	r0, #4294967295

  j5_enable_mask = 0;
  j10_enable_mask = 0;

  return 0; // no error
}
 80134f0:	4770      	bx	lr
 80134f2:	bf00      	nop
 80134f4:	200001fc 	.word	0x200001fc
 80134f8:	200001fa 	.word	0x200001fa

080134fc <MIOS32_BOARD_LED_Init>:
//! \return 0 if initialisation passed
//! \return -1 if no LEDs specified for board
//! \return -2 if one or more LEDs not available on board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_LED_Init(u32 leds)
{
 80134fc:	b510      	push	{r4, lr}
 80134fe:	4604      	mov	r4, r0
#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1

  // 4 LEDs are available
  if( leds & 1 ) {
 8013500:	07e0      	lsls	r0, r4, #31
 8013502:	d505      	bpl.n	8013510 <MIOS32_BOARD_LED_Init+0x14>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_12, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED4 (Green)
 8013504:	4812      	ldr	r0, [pc, #72]	; (8013550 <MIOS32_BOARD_LED_Init+0x54>)
 8013506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801350a:	2205      	movs	r2, #5
 801350c:	f7ff ffae 	bl	801346c <MIOS32_BOARD_PinInitHlp>
  }

#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( leds & 2 ) {
 8013510:	07a1      	lsls	r1, r4, #30
 8013512:	d505      	bpl.n	8013520 <MIOS32_BOARD_LED_Init+0x24>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_13, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED3 (Orange)
 8013514:	480e      	ldr	r0, [pc, #56]	; (8013550 <MIOS32_BOARD_LED_Init+0x54>)
 8013516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801351a:	2205      	movs	r2, #5
 801351c:	f7ff ffa6 	bl	801346c <MIOS32_BOARD_PinInitHlp>
  }
#endif

#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( leds & 4 ) {
 8013520:	0762      	lsls	r2, r4, #29
 8013522:	d505      	bpl.n	8013530 <MIOS32_BOARD_LED_Init+0x34>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_14, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED5 (Red)
 8013524:	480a      	ldr	r0, [pc, #40]	; (8013550 <MIOS32_BOARD_LED_Init+0x54>)
 8013526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801352a:	2205      	movs	r2, #5
 801352c:	f7ff ff9e 	bl	801346c <MIOS32_BOARD_PinInitHlp>
  }
#endif

#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( leds & 8 ) {
 8013530:	0723      	lsls	r3, r4, #28
 8013532:	d505      	bpl.n	8013540 <MIOS32_BOARD_LED_Init+0x44>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_15, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED6 (Blue)
 8013534:	4806      	ldr	r0, [pc, #24]	; (8013550 <MIOS32_BOARD_LED_Init+0x54>)
 8013536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801353a:	2205      	movs	r2, #5
 801353c:	f7ff ff96 	bl	801346c <MIOS32_BOARD_PinInitHlp>
  }
#endif

  if( leds & 0xfffffff0)
    return -2; // LED doesn't exist
 8013540:	f034 030f 	bics.w	r3, r4, #15
#endif
  return 0; // no error
#else
  return -1; // no LED specified for board
#endif
}
 8013544:	bf14      	ite	ne
 8013546:	f06f 0001 	mvnne.w	r0, #1
 801354a:	2000      	moveq	r0, #0
 801354c:	bd10      	pop	{r4, pc}
 801354e:	bf00      	nop
 8013550:	40020c00 	.word	0x40020c00

08013554 <MIOS32_BOARD_LED_Set>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_LED_Set(u32 leds, u32 value)
{
#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( leds & 1 ) { // LED4 (Green)
 8013554:	07c2      	lsls	r2, r0, #31
 8013556:	d507      	bpl.n	8013568 <MIOS32_BOARD_LED_Set+0x14>
 8013558:	4b16      	ldr	r3, [pc, #88]	; (80135b4 <MIOS32_BOARD_LED_Set+0x60>)
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_12, value & 1);
 801355a:	f011 0f01 	tst.w	r1, #1
 801355e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013562:	bf14      	ite	ne
 8013564:	831a      	strhne	r2, [r3, #24]
 8013566:	835a      	strheq	r2, [r3, #26]
  }
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( leds & 2 ) { // LED3 (Orange)
 8013568:	0783      	lsls	r3, r0, #30
 801356a:	d507      	bpl.n	801357c <MIOS32_BOARD_LED_Set+0x28>
 801356c:	4b11      	ldr	r3, [pc, #68]	; (80135b4 <MIOS32_BOARD_LED_Set+0x60>)
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_13, value & 2);
 801356e:	f011 0f02 	tst.w	r1, #2
 8013572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013576:	bf14      	ite	ne
 8013578:	831a      	strhne	r2, [r3, #24]
 801357a:	835a      	strheq	r2, [r3, #26]
  }
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( leds & 4 ) { // LED5 (Red)
 801357c:	0742      	lsls	r2, r0, #29
 801357e:	d507      	bpl.n	8013590 <MIOS32_BOARD_LED_Set+0x3c>
 8013580:	4b0c      	ldr	r3, [pc, #48]	; (80135b4 <MIOS32_BOARD_LED_Set+0x60>)
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_14, value & 4);
 8013582:	f011 0f04 	tst.w	r1, #4
 8013586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801358a:	bf14      	ite	ne
 801358c:	831a      	strhne	r2, [r3, #24]
 801358e:	835a      	strheq	r2, [r3, #26]
  }
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( leds & 8 ) { // LED6 (Blue)
 8013590:	0703      	lsls	r3, r0, #28
 8013592:	d507      	bpl.n	80135a4 <MIOS32_BOARD_LED_Set+0x50>
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_15, value & 8);
 8013594:	f011 0f08 	tst.w	r1, #8
 8013598:	4906      	ldr	r1, [pc, #24]	; (80135b4 <MIOS32_BOARD_LED_Set+0x60>)
 801359a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801359e:	bf14      	ite	ne
 80135a0:	830b      	strhne	r3, [r1, #24]
 80135a2:	834b      	strheq	r3, [r1, #26]
  }
#endif

  if( leds & 0xfffffff0)
    return -2; // LED doesn't exist
 80135a4:	f030 030f 	bics.w	r3, r0, #15

  return 0; // no error
#else
  return -1; // no LED specified for board
#endif
}
 80135a8:	bf14      	ite	ne
 80135aa:	f06f 0001 	mvnne.w	r0, #1
 80135ae:	2000      	moveq	r0, #0
 80135b0:	4770      	bx	lr
 80135b2:	bf00      	nop
 80135b4:	40020c00 	.word	0x40020c00

080135b8 <MIOS32_BOARD_LED_Get>:
{
  u32 values = 0;

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( GPIOD->ODR & GPIO_Pin_12 ) // LED4 (Green)
 80135b8:	4b09      	ldr	r3, [pc, #36]	; (80135e0 <MIOS32_BOARD_LED_Get+0x28>)
 80135ba:	6958      	ldr	r0, [r3, #20]
    values |= (1 << 0);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( GPIOD->ODR & GPIO_Pin_13 ) // LED3 (Orange)
 80135bc:	695a      	ldr	r2, [r3, #20]
 80135be:	0491      	lsls	r1, r2, #18
    values |= (1 << 1);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( GPIOD->ODR & GPIO_Pin_14 ) // LED4 (Red)
 80135c0:	6959      	ldr	r1, [r3, #20]
    values |= (1 << 2);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( GPIOD->ODR & GPIO_Pin_15 ) // LED6 (Blue)
 80135c2:	695b      	ldr	r3, [r3, #20]
{
  u32 values = 0;

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( GPIOD->ODR & GPIO_Pin_12 ) // LED4 (Green)
 80135c4:	f3c0 3000 	ubfx	r0, r0, #12, #1
    values |= (1 << 0);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( GPIOD->ODR & GPIO_Pin_13 ) // LED3 (Orange)
    values |= (1 << 1);
 80135c8:	bf48      	it	mi
 80135ca:	f040 0002 	orrmi.w	r0, r0, #2
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( GPIOD->ODR & GPIO_Pin_14 ) // LED4 (Red)
 80135ce:	044a      	lsls	r2, r1, #17
    values |= (1 << 2);
 80135d0:	bf48      	it	mi
 80135d2:	f040 0004 	orrmi.w	r0, r0, #4
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( GPIOD->ODR & GPIO_Pin_15 ) // LED6 (Blue)
 80135d6:	0419      	lsls	r1, r3, #16
    values |= (1 << 3);
 80135d8:	bf48      	it	mi
 80135da:	f040 0008 	orrmi.w	r0, r0, #8
#endif
#endif

  return values;
}
 80135de:	4770      	bx	lr
 80135e0:	40020c00 	.word	0x40020c00

080135e4 <MIOS32_BOARD_J10_PinInit>:
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else

  if( pin >= J10_NUM_PINS )
 80135e4:	280f      	cmp	r0, #15
//!     <LI>MIOS32_BOARD_PIN_MODE_OUTPUT_OD: pin is used as output in open drain mode
//!   </UL>
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J10_PinInit(u8 pin, mios32_board_pin_mode_t mode)
{
 80135e6:	b510      	push	{r4, lr}
 80135e8:	460a      	mov	r2, r1
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else

  if( pin >= J10_NUM_PINS )
 80135ea:	d817      	bhi.n	801361c <MIOS32_BOARD_J10_PinInit+0x38>
 80135ec:	4b0d      	ldr	r3, [pc, #52]	; (8013624 <MIOS32_BOARD_J10_PinInit+0x40>)
 80135ee:	2101      	movs	r1, #1
    return -1; // pin not supported

  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
    // don't touch
    j10_enable_mask &= ~(1 << pin);
 80135f0:	fa01 f100 	lsl.w	r1, r1, r0
 80135f4:	881c      	ldrh	r4, [r3, #0]
#else

  if( pin >= J10_NUM_PINS )
    return -1; // pin not supported

  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
 80135f6:	b922      	cbnz	r2, 8013602 <MIOS32_BOARD_J10_PinInit+0x1e>
    // don't touch
    j10_enable_mask &= ~(1 << pin);
 80135f8:	ea24 0001 	bic.w	r0, r4, r1
 80135fc:	8018      	strh	r0, [r3, #0]

    if( status < 0 )
      return status;
  }

  return 0; // no error
 80135fe:	4610      	mov	r0, r2
 8013600:	bd10      	pop	{r4, pc}
  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
    // don't touch
    j10_enable_mask &= ~(1 << pin);
  } else {
    // enable pin
    j10_enable_mask |= (1 << pin);
 8013602:	4321      	orrs	r1, r4
 8013604:	8019      	strh	r1, [r3, #0]

    s32 status = MIOS32_BOARD_PinInitHlp(j10_pin[pin].port, j10_pin[pin].pin_mask, mode);
 8013606:	4b08      	ldr	r3, [pc, #32]	; (8013628 <MIOS32_BOARD_J10_PinInit+0x44>)
 8013608:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 801360c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8013610:	8889      	ldrh	r1, [r1, #4]
 8013612:	f7ff ff2b 	bl	801346c <MIOS32_BOARD_PinInitHlp>
 8013616:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 801361a:	bd10      	pop	{r4, pc}
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else

  if( pin >= J10_NUM_PINS )
    return -1; // pin not supported
 801361c:	f04f 30ff 	mov.w	r0, #4294967295
      return status;
  }

  return 0; // no error
#endif
}
 8013620:	bd10      	pop	{r4, pc}
 8013622:	bf00      	nop
 8013624:	200001fa 	.word	0x200001fa
 8013628:	0801c278 	.word	0x0801c278

0801362c <MIOS32_BOARD_J10_PinSet>:
s32 MIOS32_BOARD_J10_PinSet(u8 pin, u8 value)
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else
  if( pin >= J10_NUM_PINS )
 801362c:	280f      	cmp	r0, #15
 801362e:	d815      	bhi.n	801365c <MIOS32_BOARD_J10_PinSet+0x30>
    return -1; // pin not supported

  if( !(j10_enable_mask & (1 << pin)) )
 8013630:	4b0d      	ldr	r3, [pc, #52]	; (8013668 <MIOS32_BOARD_J10_PinSet+0x3c>)
 8013632:	881a      	ldrh	r2, [r3, #0]
 8013634:	fa42 f200 	asr.w	r2, r2, r0
 8013638:	07d3      	lsls	r3, r2, #31
 801363a:	d512      	bpl.n	8013662 <MIOS32_BOARD_J10_PinSet+0x36>
 801363c:	4b0b      	ldr	r3, [pc, #44]	; (801366c <MIOS32_BOARD_J10_PinSet+0x40>)
 801363e:	00c2      	lsls	r2, r0, #3
    return -2; // pin disabled

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);
 8013640:	b131      	cbz	r1, 8013650 <MIOS32_BOARD_J10_PinSet+0x24>
 8013642:	189a      	adds	r2, r3, r2
 8013644:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8013648:	8891      	ldrh	r1, [r2, #4]
 801364a:	8301      	strh	r1, [r0, #24]

  return 0; // no error
 801364c:	2000      	movs	r0, #0
 801364e:	4770      	bx	lr
    return -1; // pin not supported

  if( !(j10_enable_mask & (1 << pin)) )
    return -2; // pin disabled

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);
 8013650:	1899      	adds	r1, r3, r2
 8013652:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8013656:	888b      	ldrh	r3, [r1, #4]
 8013658:	8343      	strh	r3, [r0, #26]
 801365a:	e7f7      	b.n	801364c <MIOS32_BOARD_J10_PinSet+0x20>
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else
  if( pin >= J10_NUM_PINS )
    return -1; // pin not supported
 801365c:	f04f 30ff 	mov.w	r0, #4294967295
 8013660:	4770      	bx	lr

  if( !(j10_enable_mask & (1 << pin)) )
    return -2; // pin disabled
 8013662:	f06f 0001 	mvn.w	r0, #1

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);

  return 0; // no error
#endif
}
 8013666:	4770      	bx	lr
 8013668:	200001fa 	.word	0x200001fa
 801366c:	0801c278 	.word	0x0801c278

08013670 <MIOS32_BOARD_J15_PortInit>:
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  // currently only mode 0 and 1 supported
  if( mode != 0 && mode != 1 )
 8013670:	2801      	cmp	r0, #1
//!   <LI>1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
//! </UL>
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_PortInit(u32 mode)
{
 8013672:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013676:	4606      	mov	r6, r0
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  // currently only mode 0 and 1 supported
  if( mode != 0 && mode != 1 )
 8013678:	d850      	bhi.n	801371c <MIOS32_BOARD_J15_PortInit+0xac>
    return -1; // unsupported mode

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 801367a:	4668      	mov	r0, sp
 801367c:	f001 fbb1 	bl	8014de2 <GPIO_StructInit>

  J15_PIN_SCLK_0;
 8013680:	4c28      	ldr	r4, [pc, #160]	; (8013724 <MIOS32_BOARD_J15_PortInit+0xb4>)
  J15_PIN_RCLK_0;
  J15_PIN_RW(0);
 8013682:	4b29      	ldr	r3, [pc, #164]	; (8013728 <MIOS32_BOARD_J15_PortInit+0xb8>)
    return -1; // unsupported mode

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  J15_PIN_SCLK_0;
 8013684:	2240      	movs	r2, #64	; 0x40
  J15_PIN_RCLK_0;
 8013686:	f04f 0808 	mov.w	r8, #8
  J15_PIN_RW(0);
 801368a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  J15_PIN_E1(0);
 801368e:	f44f 7780 	mov.w	r7, #256	; 0x100
  J15_PIN_E2(0);
 8013692:	f44f 7000 	mov.w	r0, #512	; 0x200
    return -1; // unsupported mode

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  J15_PIN_SCLK_0;
 8013696:	8362      	strh	r2, [r4, #26]
#ifdef MIOS32_BOARD_LCD_E4_PORT
  LCD_PIN_E4(0);
#endif

  // configure push-pull pins
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8013698:	2501      	movs	r5, #1

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  J15_PIN_SCLK_0;
  J15_PIN_RCLK_0;
 801369a:	f8a4 801a 	strh.w	r8, [r4, #26]
  J15_PIN_RW(0);
 801369e:	8359      	strh	r1, [r3, #26]
  J15_PIN_E1(0);
 80136a0:	835f      	strh	r7, [r3, #26]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients

  GPIO_InitStructure.GPIO_Pin = J15_SCLK_PIN;
  GPIO_Init(J15_SCLK_PORT, &GPIO_InitStructure);
 80136a2:	4669      	mov	r1, sp

  J15_PIN_SCLK_0;
  J15_PIN_RCLK_0;
  J15_PIN_RW(0);
  J15_PIN_E1(0);
  J15_PIN_E2(0);
 80136a4:	8358      	strh	r0, [r3, #26]
  LCD_PIN_E4(0);
#endif

  // configure push-pull pins
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80136a6:	2300      	movs	r3, #0
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients

  GPIO_InitStructure.GPIO_Pin = J15_SCLK_PIN;
  GPIO_Init(J15_SCLK_PORT, &GPIO_InitStructure);
 80136a8:	4620      	mov	r0, r4
  LCD_PIN_E4(0);
#endif

  // configure push-pull pins
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80136aa:	f88d 3006 	strb.w	r3, [sp, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients

  GPIO_InitStructure.GPIO_Pin = J15_SCLK_PIN;
 80136ae:	9200      	str	r2, [sp, #0]
#ifdef MIOS32_BOARD_LCD_E4_PORT
  LCD_PIN_E4(0);
#endif

  // configure push-pull pins
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80136b0:	f88d 5004 	strb.w	r5, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients
 80136b4:	f88d 5005 	strb.w	r5, [sp, #5]

  GPIO_InitStructure.GPIO_Pin = J15_SCLK_PIN;
  GPIO_Init(J15_SCLK_PORT, &GPIO_InitStructure);
 80136b8:	f001 fb46 	bl	8014d48 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = J15_RCLK_PIN;
  GPIO_Init(J15_RCLK_PORT, &GPIO_InitStructure);
 80136bc:	4620      	mov	r0, r4
 80136be:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz; // weak driver to reduce transients

  GPIO_InitStructure.GPIO_Pin = J15_SCLK_PIN;
  GPIO_Init(J15_SCLK_PORT, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = J15_RCLK_PIN;
 80136c0:	f8cd 8000 	str.w	r8, [sp]
 80136c4:	463c      	mov	r4, r7
  GPIO_Init(J15_RCLK_PORT, &GPIO_InitStructure);
 80136c6:	f001 fb3f 	bl	8014d48 <GPIO_Init>

  // configure open-drain pins (if OD option enabled)
  if( mode )
 80136ca:	b10e      	cbz	r6, 80136d0 <MIOS32_BOARD_J15_PortInit+0x60>
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80136cc:	f88d 5006 	strb.w	r5, [sp, #6]

  GPIO_InitStructure.GPIO_Pin = J15_SER_PIN;
  GPIO_Init(J15_SER_PORT, &GPIO_InitStructure);
 80136d0:	4816      	ldr	r0, [pc, #88]	; (801372c <MIOS32_BOARD_J15_PortInit+0xbc>)

  // configure open-drain pins (if OD option enabled)
  if( mode )
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;

  GPIO_InitStructure.GPIO_Pin = J15_SER_PIN;
 80136d2:	9400      	str	r4, [sp, #0]
  GPIO_Init(J15_SER_PORT, &GPIO_InitStructure);
 80136d4:	4669      	mov	r1, sp
 80136d6:	f001 fb37 	bl	8014d48 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = J15_E1_PIN;
  GPIO_Init(J15_E1_PORT, &GPIO_InitStructure);
 80136da:	4813      	ldr	r0, [pc, #76]	; (8013728 <MIOS32_BOARD_J15_PortInit+0xb8>)
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;

  GPIO_InitStructure.GPIO_Pin = J15_SER_PIN;
  GPIO_Init(J15_SER_PORT, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = J15_E1_PIN;
 80136dc:	9400      	str	r4, [sp, #0]
  GPIO_Init(J15_E1_PORT, &GPIO_InitStructure);
 80136de:	4669      	mov	r1, sp
 80136e0:	f001 fb32 	bl	8014d48 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = J15_E2_PIN;
 80136e4:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_Init(J15_E2_PORT, &GPIO_InitStructure);
 80136e8:	480f      	ldr	r0, [pc, #60]	; (8013728 <MIOS32_BOARD_J15_PortInit+0xb8>)
  GPIO_Init(J15_SER_PORT, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = J15_E1_PIN;
  GPIO_Init(J15_E1_PORT, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = J15_E2_PIN;
 80136ea:	9200      	str	r2, [sp, #0]
  GPIO_Init(J15_E2_PORT, &GPIO_InitStructure);
 80136ec:	4669      	mov	r1, sp
 80136ee:	f001 fb2b 	bl	8014d48 <GPIO_Init>
#ifdef MIOS32_BOARD_LCD_E4_PORT
  GPIO_InitStructure.GPIO_Pin = LCD_E4_PIN;
  GPIO_Init(LCD_E4_PORT, &GPIO_InitStructure);
#endif

  GPIO_InitStructure.GPIO_Pin = J15_RW_PIN;
 80136f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80136f6:	9100      	str	r1, [sp, #0]
  GPIO_Init(J15_RW_PORT, &GPIO_InitStructure);
 80136f8:	480b      	ldr	r0, [pc, #44]	; (8013728 <MIOS32_BOARD_J15_PortInit+0xb8>)
 80136fa:	4669      	mov	r1, sp
 80136fc:	f001 fb24 	bl	8014d48 <GPIO_Init>

  // configure "busy" input with pull-up
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8013700:	2001      	movs	r0, #1

  GPIO_InitStructure.GPIO_Pin = J15_RW_PIN;
  GPIO_Init(J15_RW_PORT, &GPIO_InitStructure);

  // configure "busy" input with pull-up
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8013702:	2400      	movs	r4, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8013704:	f88d 0007 	strb.w	r0, [sp, #7]
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
 8013708:	2380      	movs	r3, #128	; 0x80
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);
 801370a:	4806      	ldr	r0, [pc, #24]	; (8013724 <MIOS32_BOARD_J15_PortInit+0xb4>)

  GPIO_InitStructure.GPIO_Pin = J15_RW_PIN;
  GPIO_Init(J15_RW_PORT, &GPIO_InitStructure);

  // configure "busy" input with pull-up
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801370c:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);
 8013710:	4669      	mov	r1, sp
  GPIO_Init(J15_RW_PORT, &GPIO_InitStructure);

  // configure "busy" input with pull-up
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
 8013712:	9300      	str	r3, [sp, #0]
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);
 8013714:	f001 fb18 	bl	8014d48 <GPIO_Init>

  return 0; // no error
 8013718:	4620      	mov	r0, r4
 801371a:	e001      	b.n	8013720 <MIOS32_BOARD_J15_PortInit+0xb0>
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  // currently only mode 0 and 1 supported
  if( mode != 0 && mode != 1 )
    return -1; // unsupported mode
 801371c:	f04f 30ff 	mov.w	r0, #4294967295
  GPIO_InitStructure.GPIO_Pin = J15_D7_PIN;
  GPIO_Init(J15_D7_PORT, &GPIO_InitStructure);

  return 0; // no error
#endif
}
 8013720:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 8013724:	40020c00 	.word	0x40020c00
 8013728:	40020800 	.word	0x40020800
 801372c:	40020000 	.word	0x40020000

08013730 <MIOS32_BOARD_J15_DataSet>:
//! to output an 8bit value on the data lines
//! \param[in] data the 8bit value
//! \return < 0 if access to data port not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_DataSet(u8 data)
{
 8013730:	2108      	movs	r1, #8
 8013732:	4b0e      	ldr	r3, [pc, #56]	; (801376c <MIOS32_BOARD_J15_DataSet+0x3c>)
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  int i;
  for(i=0; i<8; ++i, data <<= 1) {
    J15_PIN_SER(data & 0x80);
 8013734:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013738:	f44f 7280 	mov.w	r2, #256	; 0x100
 801373c:	bf14      	ite	ne
 801373e:	831a      	strhne	r2, [r3, #24]
 8013740:	835a      	strheq	r2, [r3, #26]
    J15_PIN_SCLK_0; // setup delay
 8013742:	4b0b      	ldr	r3, [pc, #44]	; (8013770 <MIOS32_BOARD_J15_DataSet+0x40>)
 8013744:	2240      	movs	r2, #64	; 0x40
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 8013746:	0040      	lsls	r0, r0, #1
 8013748:	3901      	subs	r1, #1
    J15_PIN_SER(data & 0x80);
    J15_PIN_SCLK_0; // setup delay
 801374a:	835a      	strh	r2, [r3, #26]
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 801374c:	b2c0      	uxtb	r0, r0
    J15_PIN_SER(data & 0x80);
    J15_PIN_SCLK_0; // setup delay
    J15_PIN_SCLK_0; // stretch...
 801374e:	835a      	strh	r2, [r3, #26]
    J15_PIN_SCLK_0; // stretch...
 8013750:	835a      	strh	r2, [r3, #26]
    J15_PIN_SCLK_0; // stretch...
 8013752:	835a      	strh	r2, [r3, #26]
    J15_PIN_SCLK_0; // stretch...
 8013754:	835a      	strh	r2, [r3, #26]
    J15_PIN_SCLK_1;
 8013756:	831a      	strh	r2, [r3, #24]
    J15_PIN_SCLK_1;
 8013758:	831a      	strh	r2, [r3, #24]
    J15_PIN_SCLK_1;
 801375a:	831a      	strh	r2, [r3, #24]
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 801375c:	d1e9      	bne.n	8013732 <MIOS32_BOARD_J15_DataSet+0x2>
    J15_PIN_SCLK_1;
    J15_PIN_SCLK_1;
  }

  // transfer to output register
  J15_PIN_RCLK_1;
 801375e:	2208      	movs	r2, #8
 8013760:	831a      	strh	r2, [r3, #24]
  J15_PIN_RCLK_1;
  J15_PIN_RCLK_0;

  return 0; // no error
#endif
}
 8013762:	4608      	mov	r0, r1
    J15_PIN_SCLK_1;
  }

  // transfer to output register
  J15_PIN_RCLK_1;
  J15_PIN_RCLK_1;
 8013764:	831a      	strh	r2, [r3, #24]
  J15_PIN_RCLK_1;
 8013766:	831a      	strh	r2, [r3, #24]
  J15_PIN_RCLK_0;
 8013768:	835a      	strh	r2, [r3, #26]

  return 0; // no error
#endif
}
 801376a:	4770      	bx	lr
 801376c:	40020000 	.word	0x40020000
 8013770:	40020c00 	.word	0x40020c00

08013774 <MIOS32_BOARD_J15_SerDataShift>:
//! (SCLK connected to J15A:E, Data line connected to J15A:RW)
//! \param[in] data the 8bit value
//! \return < 0 if access to data port not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_SerDataShift(u8 data)
{
 8013774:	b570      	push	{r4, r5, r6, lr}
 8013776:	4606      	mov	r6, r0
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();
 8013778:	f7ff fa12 	bl	8012ba0 <MIOS32_IRQ_Disable>
 801377c:	2508      	movs	r5, #8
 801377e:	4b16      	ldr	r3, [pc, #88]	; (80137d8 <MIOS32_BOARD_J15_SerDataShift+0x64>)

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
    J15_PIN_SERLCD_SCLK_0; // setup delay
 8013780:	4c15      	ldr	r4, [pc, #84]	; (80137d8 <MIOS32_BOARD_J15_SerDataShift+0x64>)
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
 8013782:	f016 0f80 	tst.w	r6, #128	; 0x80
 8013786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801378a:	bf14      	ite	ne
 801378c:	831a      	strhne	r2, [r3, #24]
 801378e:	835a      	strheq	r2, [r3, #26]
    J15_PIN_SERLCD_SCLK_0; // setup delay
 8013790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013794:	f44f 7000 	mov.w	r0, #512	; 0x200
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 8013798:	0076      	lsls	r6, r6, #1
 801379a:	3d01      	subs	r5, #1
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
    J15_PIN_SERLCD_SCLK_0; // setup delay
 801379c:	8359      	strh	r1, [r3, #26]
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 801379e:	b2f6      	uxtb	r6, r6
    J15_PIN_SERLCD_DATAOUT(data & 0x80);
    J15_PIN_SERLCD_SCLK_0; // setup delay
 80137a0:	8358      	strh	r0, [r3, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 80137a2:	8359      	strh	r1, [r3, #26]
 80137a4:	8358      	strh	r0, [r3, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 80137a6:	8359      	strh	r1, [r3, #26]
 80137a8:	8358      	strh	r0, [r3, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 80137aa:	8359      	strh	r1, [r3, #26]
 80137ac:	8358      	strh	r0, [r3, #26]
    J15_PIN_SERLCD_SCLK_0; // stretch...
 80137ae:	8359      	strh	r1, [r3, #26]
 80137b0:	8358      	strh	r0, [r3, #26]
    J15_PIN_SERLCD_SCLK_1;
 80137b2:	8319      	strh	r1, [r3, #24]
 80137b4:	8318      	strh	r0, [r3, #24]
    J15_PIN_SERLCD_SCLK_1;
 80137b6:	8319      	strh	r1, [r3, #24]
 80137b8:	8318      	strh	r0, [r3, #24]
    J15_PIN_SERLCD_SCLK_1;
 80137ba:	8319      	strh	r1, [r3, #24]
 80137bc:	8318      	strh	r0, [r3, #24]
  return -1; // LCD port not available
#else
  MIOS32_IRQ_Disable();

  int i;
  for(i=0; i<8; ++i, data <<= 1) {
 80137be:	d1de      	bne.n	801377e <MIOS32_BOARD_J15_SerDataShift+0xa>
  // Although I assume that this can't cause an issue (because CS is only relevant when
  // the display gets a SCLK_0->SCLK_1 clock), I feel better when we ensure a proper CS state
  // after each MIOS32_BOARD_J15_SerDataShift call.
  J15_PIN_SERLCD_SCLK_0;
  J15_PIN_SERLCD_SCLK_0;
  J15_PIN_SERLCD_DATAOUT(0); 
 80137c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  // With RW=1 the CS lines will go into high impedance state, and after 100..200 uS we will
  // see on the scope how CS line levels are changing, e.g. from high to mid level.
  // Although I assume that this can't cause an issue (because CS is only relevant when
  // the display gets a SCLK_0->SCLK_1 clock), I feel better when we ensure a proper CS state
  // after each MIOS32_BOARD_J15_SerDataShift call.
  J15_PIN_SERLCD_SCLK_0;
 80137c4:	8361      	strh	r1, [r4, #26]
 80137c6:	8360      	strh	r0, [r4, #26]
  J15_PIN_SERLCD_SCLK_0;
 80137c8:	8361      	strh	r1, [r4, #26]
 80137ca:	8360      	strh	r0, [r4, #26]
  J15_PIN_SERLCD_DATAOUT(0); 
 80137cc:	8363      	strh	r3, [r4, #26]

  MIOS32_IRQ_Enable();
 80137ce:	f7ff f9fb 	bl	8012bc8 <MIOS32_IRQ_Enable>

  return 0; // no error
#endif
}
 80137d2:	4628      	mov	r0, r5
 80137d4:	bd70      	pop	{r4, r5, r6, pc}
 80137d6:	bf00      	nop
 80137d8:	40020800 	.word	0x40020800

080137dc <MIOS32_BOARD_J15_RS_Set>:
//! to set the RS pin
//! \param[in] rs state of the RS pin
//! \return < 0 if access to RS pin not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_RS_Set(u8 rs)
{
 80137dc:	4b04      	ldr	r3, [pc, #16]	; (80137f0 <MIOS32_BOARD_J15_RS_Set+0x14>)
 80137de:	f44f 7280 	mov.w	r2, #256	; 0x100
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_SER(rs);
 80137e2:	b108      	cbz	r0, 80137e8 <MIOS32_BOARD_J15_RS_Set+0xc>
 80137e4:	831a      	strh	r2, [r3, #24]
 80137e6:	e000      	b.n	80137ea <MIOS32_BOARD_J15_RS_Set+0xe>
 80137e8:	835a      	strh	r2, [r3, #26]

  return 0; // no error
#endif
}
 80137ea:	2000      	movs	r0, #0
 80137ec:	4770      	bx	lr
 80137ee:	bf00      	nop
 80137f0:	40020000 	.word	0x40020000

080137f4 <MIOS32_BOARD_J15_RW_Set>:
//! to set the RW pin
//! \param[in] rw state of the RW pin
//! \return < 0 if access to RW pin not supported by board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
 80137f4:	4b04      	ldr	r3, [pc, #16]	; (8013808 <MIOS32_BOARD_J15_RW_Set+0x14>)
 80137f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 80137fa:	b108      	cbz	r0, 8013800 <MIOS32_BOARD_J15_RW_Set+0xc>
 80137fc:	831a      	strh	r2, [r3, #24]
 80137fe:	e000      	b.n	8013802 <MIOS32_BOARD_J15_RW_Set+0xe>
 8013800:	835a      	strh	r2, [r3, #26]

  return 0; // no error
#endif
}
 8013802:	2000      	movs	r0, #0
 8013804:	4770      	bx	lr
 8013806:	bf00      	nop
 8013808:	40020800 	.word	0x40020800

0801380c <MIOS32_BOARD_J15_E_Set>:
s32 MIOS32_BOARD_J15_E_Set(u8 lcd, u8 e)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  switch( lcd ) {
 801380c:	b110      	cbz	r0, 8013814 <MIOS32_BOARD_J15_E_Set+0x8>
 801380e:	2801      	cmp	r0, #1
 8013810:	d10f      	bne.n	8013832 <MIOS32_BOARD_J15_E_Set+0x26>
 8013812:	e005      	b.n	8013820 <MIOS32_BOARD_J15_E_Set+0x14>
 8013814:	4b08      	ldr	r3, [pc, #32]	; (8013838 <MIOS32_BOARD_J15_E_Set+0x2c>)
 8013816:	f44f 7280 	mov.w	r2, #256	; 0x100
    case 0: 
      J15_PIN_E1(e);
 801381a:	b141      	cbz	r1, 801382e <MIOS32_BOARD_J15_E_Set+0x22>
 801381c:	831a      	strh	r2, [r3, #24]
 801381e:	4770      	bx	lr
 8013820:	4b05      	ldr	r3, [pc, #20]	; (8013838 <MIOS32_BOARD_J15_E_Set+0x2c>)
 8013822:	f44f 7200 	mov.w	r2, #512	; 0x200
      return 0; // no error

    case 1: 
      J15_PIN_E2(e);
 8013826:	b111      	cbz	r1, 801382e <MIOS32_BOARD_J15_E_Set+0x22>
 8013828:	831a      	strh	r2, [r3, #24]
      return 0; // no error
 801382a:	2000      	movs	r0, #0
 801382c:	4770      	bx	lr
    case 0: 
      J15_PIN_E1(e);
      return 0; // no error

    case 1: 
      J15_PIN_E2(e);
 801382e:	835a      	strh	r2, [r3, #26]
 8013830:	e7fb      	b.n	801382a <MIOS32_BOARD_J15_E_Set+0x1e>
      return 0; // no error
#endif

  }

  return -1; // pin not available
 8013832:	f04f 30ff 	mov.w	r0, #4294967295
#endif
}
 8013836:	4770      	bx	lr
 8013838:	40020800 	.word	0x40020800

0801383c <MIOS32_BOARD_J15_GetD7In>:
s32 MIOS32_BOARD_J15_GetD7In(void)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  return J15_PIN_D7_IN ? 1 : 0;
 801383c:	4b02      	ldr	r3, [pc, #8]	; (8013848 <MIOS32_BOARD_J15_GetD7In+0xc>)
 801383e:	6918      	ldr	r0, [r3, #16]
#endif
}
 8013840:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8013844:	4770      	bx	lr
 8013846:	bf00      	nop
 8013848:	40020c00 	.word	0x40020c00

0801384c <MIOS32_BOARD_J15_D7InPullUpEnable>:
  return -1; // LCD port not available
#else
  return 0; // not relevant for MBHP_CORE_STM32 board
  // TODO: check if this is true 
#endif
}
 801384c:	2000      	movs	r0, #0
 801384e:	4770      	bx	lr

08013850 <MIOS32_BOARD_J15_PollUnbusy>:
s32 MIOS32_BOARD_J15_RS_Set(u8 rs)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_SER(rs);
 8013850:	4b1d      	ldr	r3, [pc, #116]	; (80138c8 <MIOS32_BOARD_J15_PollUnbusy+0x78>)
//! \return -1 if LCD not available
//! \return -2 on timeout
//! return >= 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_PollUnbusy(u8 lcd, u32 time_out)
{
 8013852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
s32 MIOS32_BOARD_J15_RS_Set(u8 rs)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_SER(rs);
 8013856:	f44f 7280 	mov.w	r2, #256	; 0x100
//! \return -1 if LCD not available
//! \return -2 on timeout
//! return >= 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_PollUnbusy(u8 lcd, u32 time_out)
{
 801385a:	460c      	mov	r4, r1
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 801385c:	f44f 6100 	mov.w	r1, #2048	; 0x800
s32 MIOS32_BOARD_J15_RS_Set(u8 rs)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_SER(rs);
 8013860:	835a      	strh	r2, [r3, #26]
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 8013862:	f8a3 1818 	strh.w	r1, [r3, #2072]	; 0x818

  // select read (will also disable output buffer of 74HC595)
  MIOS32_BOARD_J15_RW_Set(1);

  // check if E pin is available
  if( MIOS32_BOARD_J15_E_Set(lcd, 1) < 0 )
 8013866:	2101      	movs	r1, #1
//! \return -1 if LCD not available
//! \return -2 on timeout
//! return >= 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J15_PollUnbusy(u8 lcd, u32 time_out)
{
 8013868:	4607      	mov	r7, r0

  // select read (will also disable output buffer of 74HC595)
  MIOS32_BOARD_J15_RW_Set(1);

  // check if E pin is available
  if( MIOS32_BOARD_J15_E_Set(lcd, 1) < 0 )
 801386a:	f7ff ffcf 	bl	801380c <MIOS32_BOARD_J15_E_Set>
 801386e:	2800      	cmp	r0, #0
 8013870:	db25      	blt.n	80138be <MIOS32_BOARD_J15_PollUnbusy+0x6e>
 8013872:	2600      	movs	r6, #0
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 8013874:	b1c4      	cbz	r4, 80138a8 <MIOS32_BOARD_J15_PollUnbusy+0x58>
    MIOS32_BOARD_J15_E_Set(lcd, 1);
 8013876:	4638      	mov	r0, r7
 8013878:	2101      	movs	r1, #1
 801387a:	f7ff ffc7 	bl	801380c <MIOS32_BOARD_J15_E_Set>
 801387e:	250a      	movs	r5, #10
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 8013880:	4a12      	ldr	r2, [pc, #72]	; (80138cc <MIOS32_BOARD_J15_PollUnbusy+0x7c>)
 8013882:	f44f 6000 	mov.w	r0, #2048	; 0x800
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
    MIOS32_BOARD_J15_E_Set(lcd, 1);

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
 8013886:	3d01      	subs	r5, #1
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 8013888:	8310      	strh	r0, [r2, #24]
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
    MIOS32_BOARD_J15_E_Set(lcd, 1);

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
 801388a:	d1f9      	bne.n	8013880 <MIOS32_BOARD_J15_PollUnbusy+0x30>
      MIOS32_BOARD_J15_RW_Set(1);

    u32 busy = MIOS32_BOARD_J15_GetD7In();
 801388c:	f7ff ffd6 	bl	801383c <MIOS32_BOARD_J15_GetD7In>
    MIOS32_BOARD_J15_E_Set(lcd, 0);
 8013890:	4629      	mov	r1, r5

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
      MIOS32_BOARD_J15_RW_Set(1);

    u32 busy = MIOS32_BOARD_J15_GetD7In();
 8013892:	4680      	mov	r8, r0
    MIOS32_BOARD_J15_E_Set(lcd, 0);
 8013894:	4638      	mov	r0, r7
 8013896:	f7ff ffb9 	bl	801380c <MIOS32_BOARD_J15_E_Set>
    if( !busy && ++repeat_ctr >= 2)
 801389a:	f1b8 0f00 	cmp.w	r8, #0
 801389e:	d101      	bne.n	80138a4 <MIOS32_BOARD_J15_PollUnbusy+0x54>
 80138a0:	b916      	cbnz	r6, 80138a8 <MIOS32_BOARD_J15_PollUnbusy+0x58>
 80138a2:	2601      	movs	r6, #1
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 80138a4:	3c01      	subs	r4, #1
 80138a6:	e7e5      	b.n	8013874 <MIOS32_BOARD_J15_PollUnbusy+0x24>
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 80138a8:	4b08      	ldr	r3, [pc, #32]	; (80138cc <MIOS32_BOARD_J15_PollUnbusy+0x7c>)
 80138aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
  // deselect read (output buffers of 74HC595 enabled again)
  MIOS32_BOARD_J15_RW_Set(0);

  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error
 80138ae:	2c00      	cmp	r4, #0
s32 MIOS32_BOARD_J15_RW_Set(u8 rw)
{
#if J15_AVAILABLE == 0
  return -1; // LCD port not available
#else
  J15_PIN_RW(rw);
 80138b0:	8359      	strh	r1, [r3, #26]
  // deselect read (output buffers of 74HC595 enabled again)
  MIOS32_BOARD_J15_RW_Set(0);

  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error
 80138b2:	bf14      	ite	ne
 80138b4:	2000      	movne	r0, #0
 80138b6:	f06f 0001 	mvneq.w	r0, #1
 80138ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // select read (will also disable output buffer of 74HC595)
  MIOS32_BOARD_J15_RW_Set(1);

  // check if E pin is available
  if( MIOS32_BOARD_J15_E_Set(lcd, 1) < 0 )
    return -1; // LCD port not available
 80138be:	f04f 30ff 	mov.w	r0, #4294967295
  if( poll_ctr == 0 )
    return -2; // timeout error

  return 0; // no error
#endif
}
 80138c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c6:	bf00      	nop
 80138c8:	40020000 	.word	0x40020000
 80138cc:	40020800 	.word	0x40020800

080138d0 <MIOS32_DELAY_Init>:
//!
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Init(u32 mode)
{
 80138d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 80138d2:	4604      	mov	r4, r0
 80138d4:	b9b8      	cbnz	r0, 8013906 <MIOS32_DELAY_Init+0x36>
    return -1; // unsupported mode

  // enable timer clock
  if( MIOS32_DELAY_TIMER == TIM1 || MIOS32_DELAY_TIMER == TIM8 )
    RCC_APB2PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);
 80138d6:	2001      	movs	r0, #1
 80138d8:	4601      	mov	r1, r0
 80138da:	f001 fb55 	bl	8014f88 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 80138de:	20a7      	movs	r0, #167	; 0xa7
  else
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
 80138e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 80138e4:	f8ad 0004 	strh.w	r0, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(MIOS32_DELAY_TIMER, &TIM_TimeBaseStructure);
 80138e8:	a901      	add	r1, sp, #4
 80138ea:	4809      	ldr	r0, [pc, #36]	; (8013910 <MIOS32_DELAY_Init+0x40>)
  else
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
 80138ec:	9302      	str	r3, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80138ee:	f8ad 400c 	strh.w	r4, [sp, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80138f2:	f8ad 4006 	strh.w	r4, [sp, #6]
  TIM_TimeBaseInit(MIOS32_DELAY_TIMER, &TIM_TimeBaseStructure);
 80138f6:	f001 fc83 	bl	8015200 <TIM_TimeBaseInit>

  // enable counter
  TIM_Cmd(MIOS32_DELAY_TIMER, ENABLE);
 80138fa:	4805      	ldr	r0, [pc, #20]	; (8013910 <MIOS32_DELAY_Init+0x40>)
 80138fc:	2101      	movs	r1, #1
 80138fe:	f001 fcc9 	bl	8015294 <TIM_Cmd>

  return 0; // no error
 8013902:	4620      	mov	r0, r4
 8013904:	e001      	b.n	801390a <MIOS32_DELAY_Init+0x3a>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8013906:	f04f 30ff 	mov.w	r0, #4294967295

  // enable counter
  TIM_Cmd(MIOS32_DELAY_TIMER, ENABLE);

  return 0; // no error
}
 801390a:	b004      	add	sp, #16
 801390c:	bd10      	pop	{r4, pc}
 801390e:	bf00      	nop
 8013910:	40010000 	.word	0x40010000

08013914 <MIOS32_DELAY_Wait_uS>:
//! \param[in] uS delay (1..65535 microseconds)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Wait_uS(u16 uS)
{
  u16 start = MIOS32_DELAY_TIMER->CNT;
 8013914:	4b04      	ldr	r3, [pc, #16]	; (8013928 <MIOS32_DELAY_Wait_uS+0x14>)
 8013916:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013918:	b289      	uxth	r1, r1

  // note that this even works on 16bit counter wrap-arounds
  while( (u16)(MIOS32_DELAY_TIMER->CNT - start) <= uS );
 801391a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801391c:	1a52      	subs	r2, r2, r1
 801391e:	b292      	uxth	r2, r2
 8013920:	4282      	cmp	r2, r0
 8013922:	d9fa      	bls.n	801391a <MIOS32_DELAY_Wait_uS+0x6>

  return 0; // no error
}
 8013924:	2000      	movs	r0, #0
 8013926:	4770      	bx	lr
 8013928:	40010000 	.word	0x40010000

0801392c <MIOS32_AIN_Init>:
  // finally start initial conversion
  MIOS32_AIN_StartConversions();

  return 0;
#endif
}
 801392c:	f04f 30ff 	mov.w	r0, #4294967295
 8013930:	4770      	bx	lr

08013932 <MIOS32_AIN_Handler>:
  // start next scan
  MIOS32_AIN_StartConversions();

  return 0; // no error
#endif
}
 8013932:	f04f 30ff 	mov.w	r0, #4294967295
 8013936:	4770      	bx	lr

08013938 <USBD_USR_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
  *length = sizeof(MIOS32_USB_DeviceDescriptor);
 8013938:	2312      	movs	r3, #18
 801393a:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)MIOS32_USB_DeviceDescriptor;
}
 801393c:	4800      	ldr	r0, [pc, #0]	; (8013940 <USBD_USR_DeviceDescriptor+0x8>)
 801393e:	4770      	bx	lr
 8013940:	0801c374 	.word	0x0801c374

08013944 <USBD_USR_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8013944:	2304      	movs	r3, #4
 8013946:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)USBD_LangIDDesc;
}
 8013948:	4800      	ldr	r0, [pc, #0]	; (801394c <USBD_USR_LangIDStrDescriptor+0x8>)
 801394a:	4770      	bx	lr
 801394c:	0801c370 	.word	0x0801c370

08013950 <USBD_USR_Init>:
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
static void USBD_USR_Init(void)
{   
 8013950:	4770      	bx	lr

08013952 <USBD_USR_DeviceReset>:
*         Displays the message on LCD on device Reset Event
* @param  speed : device speed
* @retval None
*/
static void USBD_USR_DeviceReset(uint8_t speed )
{
 8013952:	4770      	bx	lr

08013954 <USBD_USR_DeviceConnected>:
*         Displays the message on LCD on device connection Event
* @param  None
* @retval Staus
*/
static void USBD_USR_DeviceConnected (void)
{
 8013954:	4770      	bx	lr

08013956 <USBD_USR_DeviceSuspended>:
*         Displays the message on LCD on device suspend Event
* @param  None
* @retval None
*/
static void USBD_USR_DeviceSuspended(void)
{
 8013956:	4770      	bx	lr

08013958 <USBD_USR_DeviceResumed>:
*         Displays the message on LCD on device resume Event
* @param  None
* @retval None
*/
static void USBD_USR_DeviceResumed(void)
{
 8013958:	4770      	bx	lr

0801395a <USBH_USR_Init>:
 *         Displays the message on LCD for host lib initialization
 * @param  None
 * @retval None
 */
static void USBH_USR_Init(void)
{
 801395a:	4770      	bx	lr

0801395c <USBH_USR_DeviceAttached>:
 *         Displays the message on LCD on device attached
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceAttached(void)
{  
 801395c:	4770      	bx	lr

0801395e <USBH_USR_UnrecoveredError>:
 * @brief  USBH_USR_UnrecoveredError
 * @param  None
 * @retval None
 */
static void USBH_USR_UnrecoveredError (void)
{
 801395e:	4770      	bx	lr

08013960 <USBH_USR_ResetDevice>:
 *         Reset USB Device
 * @param  None
 * @retval None
 */
static void USBH_USR_ResetDevice(void)
{
 8013960:	4770      	bx	lr

08013962 <USBH_USR_DeviceSpeedDetected>:
 *         Displays the message on LCD for device speed
 * @param  Devicespeed : Device Speed
 * @retval None
 */
static void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
{
 8013962:	4770      	bx	lr

08013964 <USBH_USR_Device_DescAvailable>:
 *         Displays the message on LCD for device descriptor
 * @param  DeviceDesc : device descriptor
 * @retval None
 */
static void USBH_USR_Device_DescAvailable(void *DeviceDesc)
{
 8013964:	4770      	bx	lr

08013966 <USBH_USR_DeviceAddressAssigned>:
 *         USB device is successfully assigned the Address
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceAddressAssigned(void)
{
 8013966:	4770      	bx	lr

08013968 <USBH_USR_Configuration_DescAvailable>:
 * @retval None
 */
static void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
						 USBH_InterfaceDesc_TypeDef *itfDesc,
						 USBH_EpDesc_TypeDef *epDesc)
{
 8013968:	4770      	bx	lr

0801396a <USBH_USR_Manufacturer_String>:
 *         Displays the message on LCD for Manufacturer String
 * @param  ManufacturerString : Manufacturer String of Device
 * @retval None
 */
static void USBH_USR_Manufacturer_String(void *ManufacturerString)
{
 801396a:	4770      	bx	lr

0801396c <USBH_USR_Product_String>:
 *         Displays the message on LCD for Product String
 * @param  ProductString : Product String of Device
 * @retval None
 */
static void USBH_USR_Product_String(void *ProductString)
{
 801396c:	4770      	bx	lr

0801396e <USBH_USR_SerialNum_String>:
 *         Displays the message on LCD for SerialNum_String
 * @param  SerialNumString : SerialNum_String of device
 * @retval None
 */
static void USBH_USR_SerialNum_String(void *SerialNumString)
{
 801396e:	4770      	bx	lr

08013970 <USBH_USR_EnumerationDone>:
 *         application jump to class
 * @param  None
 * @retval None
 */
static void USBH_USR_EnumerationDone(void)
{
 8013970:	4770      	bx	lr

08013972 <USBH_USR_DeviceNotSupported>:
 *         Device is not supported
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceNotSupported(void)
{
 8013972:	4770      	bx	lr

08013974 <USBH_USR_UserInput>:
 * @retval USBH_USR_Status : User response for key button
 */
static USBH_USR_Status USBH_USR_UserInput(void)
{
  return USBH_USR_RESP_OK;
}
 8013974:	2001      	movs	r0, #1
 8013976:	4770      	bx	lr

08013978 <USBH_USR_OverCurrentDetected>:
 *         Device Overcurrent detection event
 * @param  None
 * @retval None
 */
static void USBH_USR_OverCurrentDetected (void)
{
 8013978:	4770      	bx	lr

0801397a <USBH_USR_Application>:
* @retval Staus
*/
static int USBH_USR_Application(void)
{
  return (0);
}
 801397a:	2000      	movs	r0, #0
 801397c:	4770      	bx	lr

0801397e <USBH_USR_DeInit>:
 *         Deinit User state and associated variables
 * @param  None
 * @retval None
 */
static void USBH_USR_DeInit(void)
{
 801397e:	4770      	bx	lr

08013980 <MIOS32_USB_CLASS_Setup>:
					USB_SETUP_REQ *req)
{
  // not relevant for USB MIDI

  return USBD_OK;
}
 8013980:	2000      	movs	r0, #0
 8013982:	4770      	bx	lr

08013984 <MIOS32_USB_CLASS_EP0_RxReady>:
static uint8_t  MIOS32_USB_CLASS_EP0_RxReady (void  *pdev)
{ 
  // not relevant for USB MIDI
  
  return USBD_OK;
}
 8013984:	2000      	movs	r0, #0
 8013986:	4770      	bx	lr

08013988 <MIOS32_USB_CLASS_GetCfgDesc>:
  if( MIOS32_USB_ForceSingleUSB() ) {
    *length = sizeof (MIOS32_USB_ConfigDescriptor_SingleUSB);
    return (uint8_t *)MIOS32_USB_ConfigDescriptor_SingleUSB;
  }
#endif
  *length = sizeof (MIOS32_USB_ConfigDescriptor);
 8013988:	2365      	movs	r3, #101	; 0x65
 801398a:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)MIOS32_USB_ConfigDescriptor;
}
 801398c:	4800      	ldr	r0, [pc, #0]	; (8013990 <MIOS32_USB_CLASS_GetCfgDesc+0x8>)
 801398e:	4770      	bx	lr
 8013990:	0801c3b3 	.word	0x0801c3b3

08013994 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013994:	b510      	push	{r4, lr}
  const u8 serial_number_dummy_str[] = "42";
 8013996:	4b0b      	ldr	r3, [pc, #44]	; (80139c4 <USBD_USR_SerialStrDescriptor+0x30>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013998:	b08c      	sub	sp, #48	; 0x30
  const u8 serial_number_dummy_str[] = "42";
 801399a:	7898      	ldrb	r0, [r3, #2]
 801399c:	881a      	ldrh	r2, [r3, #0]
 801399e:	f88d 0006 	strb.w	r0, [sp, #6]

  u8 serial_number_str[40];
  if( MIOS32_SYS_SerialNumberGet((char *)serial_number_str) >= 0 ) {
 80139a2:	a802      	add	r0, sp, #8
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 80139a4:	460c      	mov	r4, r1
  const u8 serial_number_dummy_str[] = "42";
 80139a6:	f8ad 2004 	strh.w	r2, [sp, #4]

  u8 serial_number_str[40];
  if( MIOS32_SYS_SerialNumberGet((char *)serial_number_str) >= 0 ) {
 80139aa:	f7ff f809 	bl	80129c0 <MIOS32_SYS_SerialNumberGet>
 80139ae:	2800      	cmp	r0, #0
    USBD_GetString ((uint8_t*)serial_number_str, USBD_StrDesc, length);
 80139b0:	bfac      	ite	ge
 80139b2:	a802      	addge	r0, sp, #8
  } else {
    USBD_GetString ((uint8_t*)serial_number_dummy_str, USBD_StrDesc, length);
 80139b4:	a801      	addlt	r0, sp, #4
 80139b6:	4904      	ldr	r1, [pc, #16]	; (80139c8 <USBD_USR_SerialStrDescriptor+0x34>)
 80139b8:	4622      	mov	r2, r4
 80139ba:	f002 f87f 	bl	8015abc <USBD_GetString>
  }

  return USBD_StrDesc;
}
 80139be:	4802      	ldr	r0, [pc, #8]	; (80139c8 <USBD_USR_SerialStrDescriptor+0x34>)
 80139c0:	b00c      	add	sp, #48	; 0x30
 80139c2:	bd10      	pop	{r4, pc}
 80139c4:	0801c3a4 	.word	0x0801c3a4
 80139c8:	20011944 	.word	0x20011944

080139cc <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 80139cc:	b570      	push	{r4, r5, r6, lr}
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
 80139ce:	4b15      	ldr	r3, [pc, #84]	; (8013a24 <USBD_USR_ProductStrDescriptor+0x58>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 80139d0:	b086      	sub	sp, #24
 80139d2:	460a      	mov	r2, r1
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
 80139d4:	466d      	mov	r5, sp
 80139d6:	f103 0618 	add.w	r6, r3, #24
 80139da:	6818      	ldr	r0, [r3, #0]
 80139dc:	6859      	ldr	r1, [r3, #4]
 80139de:	462c      	mov	r4, r5
 80139e0:	c403      	stmia	r4!, {r0, r1}
 80139e2:	3308      	adds	r3, #8
 80139e4:	42b3      	cmp	r3, r6
 80139e6:	4625      	mov	r5, r4
 80139e8:	d1f7      	bne.n	80139da <USBD_USR_ProductStrDescriptor+0xe>
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 80139ea:	2300      	movs	r3, #0
*         return the product string descriptor
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
 80139ec:	480e      	ldr	r0, [pc, #56]	; (8013a28 <USBD_USR_ProductStrDescriptor+0x5c>)
 80139ee:	1819      	adds	r1, r3, r0
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 80139f0:	7808      	ldrb	r0, [r1, #0]
 80139f2:	b158      	cbz	r0, 8013a0c <USBD_USR_ProductStrDescriptor+0x40>
    if( product_str_user[j] < 0x20 || product_str_user[j] >= 0x80 )
 80139f4:	3820      	subs	r0, #32
      valid_str = 0;
 80139f6:	285f      	cmp	r0, #95	; 0x5f
 80139f8:	bf8c      	ite	hi
 80139fa:	2000      	movhi	r0, #0
 80139fc:	2001      	movls	r0, #1
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 80139fe:	3301      	adds	r3, #1
 8013a00:	2b20      	cmp	r3, #32
 8013a02:	d006      	beq.n	8013a12 <USBD_USR_ProductStrDescriptor+0x46>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	d1f1      	bne.n	80139ec <USBD_USR_ProductStrDescriptor+0x20>
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
  int len;

  // buffer[0] and [1] initialized below
  // check for user defined product string
  char *product_str_ptr = (char *)product_str;
 8013a08:	4668      	mov	r0, sp
 8013a0a:	e005      	b.n	8013a18 <USBD_USR_ProductStrDescriptor+0x4c>
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
    if( product_str_user[j] < 0x20 || product_str_user[j] >= 0x80 )
      valid_str = 0;
  }
  if( valid_str && len )
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d0fb      	beq.n	8013a08 <USBD_USR_ProductStrDescriptor+0x3c>
 8013a10:	e001      	b.n	8013a16 <USBD_USR_ProductStrDescriptor+0x4a>
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d0f8      	beq.n	8013a08 <USBD_USR_ProductStrDescriptor+0x3c>
    product_str_ptr = product_str_user;
 8013a16:	4804      	ldr	r0, [pc, #16]	; (8013a28 <USBD_USR_ProductStrDescriptor+0x5c>)
#endif

  USBD_GetString ((uint8_t*)product_str_ptr, USBD_StrDesc, length);
 8013a18:	4904      	ldr	r1, [pc, #16]	; (8013a2c <USBD_USR_ProductStrDescriptor+0x60>)
 8013a1a:	f002 f84f 	bl	8015abc <USBD_GetString>

  return USBD_StrDesc;
}
 8013a1e:	4803      	ldr	r0, [pc, #12]	; (8013a2c <USBD_USR_ProductStrDescriptor+0x60>)
 8013a20:	b006      	add	sp, #24
 8013a22:	bd70      	pop	{r4, r5, r6, pc}
 8013a24:	0801c0d8 	.word	0x0801c0d8
 8013a28:	08003fe0 	.word	0x08003fe0
 8013a2c:	20011944 	.word	0x20011944

08013a30 <USBD_USR_InterfaceStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 8013a30:	f7ff bfcc 	b.w	80139cc <USBD_USR_ProductStrDescriptor>

08013a34 <USBD_USR_ConfigStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 8013a34:	f7ff bfca 	b.w	80139cc <USBD_USR_ProductStrDescriptor>

08013a38 <MIOS32_USB_CLASS_GetUsrStrDesc>:
}


static uint8_t *MIOS32_USB_CLASS_GetUsrStrDesc(uint8_t speed, uint8_t index, uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 8013a38:	4611      	mov	r1, r2
 8013a3a:	f7ff bfc7 	b.w	80139cc <USBD_USR_ProductStrDescriptor>
	...

08013a40 <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 8013a42:	4c08      	ldr	r4, [pc, #32]	; (8013a64 <USBD_USR_ManufacturerStrDescriptor+0x24>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8013a44:	460a      	mov	r2, r1
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 8013a46:	6820      	ldr	r0, [r4, #0]
 8013a48:	6861      	ldr	r1, [r4, #4]
 8013a4a:	ab01      	add	r3, sp, #4
 8013a4c:	c303      	stmia	r3!, {r0, r1}
 8013a4e:	68a0      	ldr	r0, [r4, #8]
  USBD_GetString ((uint8_t*)vendor_str, USBD_StrDesc, length);
 8013a50:	4c05      	ldr	r4, [pc, #20]	; (8013a68 <USBD_USR_ManufacturerStrDescriptor+0x28>)
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 8013a52:	6018      	str	r0, [r3, #0]
  USBD_GetString ((uint8_t*)vendor_str, USBD_StrDesc, length);
 8013a54:	4621      	mov	r1, r4
 8013a56:	a801      	add	r0, sp, #4
 8013a58:	f002 f830 	bl	8015abc <USBD_GetString>
  return USBD_StrDesc;
}
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	b004      	add	sp, #16
 8013a60:	bd10      	pop	{r4, pc}
 8013a62:	bf00      	nop
 8013a64:	0801c3a7 	.word	0x0801c3a7
 8013a68:	20011944 	.word	0x20011944

08013a6c <MIOS32_USB_CLASS_DataOut>:
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataOut (void *pdev, uint8_t epnum)
{      
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == MIOS32_USB_MIDI_DATA_OUT_EP )
 8013a6c:	2902      	cmp	r1, #2
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataOut (void *pdev, uint8_t epnum)
{      
 8013a6e:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == MIOS32_USB_MIDI_DATA_OUT_EP )
 8013a70:	d103      	bne.n	8013a7a <MIOS32_USB_CLASS_DataOut+0xe>
    MIOS32_USB_MIDI_EP2_OUT_Callback(epnum, 0); // parameters not relevant for STM32F4
 8013a72:	4608      	mov	r0, r1
 8013a74:	2100      	movs	r1, #0
 8013a76:	f000 fc99 	bl	80143ac <MIOS32_USB_MIDI_EP2_OUT_Callback>
#endif

  return USBD_OK;
}
 8013a7a:	2000      	movs	r0, #0
 8013a7c:	bd08      	pop	{r3, pc}

08013a7e <MIOS32_USB_CLASS_DataIn>:
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataIn (void *pdev, uint8_t epnum)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == (MIOS32_USB_MIDI_DATA_IN_EP & 0x7f) )
 8013a7e:	2901      	cmp	r1, #1
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataIn (void *pdev, uint8_t epnum)
{
 8013a80:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == (MIOS32_USB_MIDI_DATA_IN_EP & 0x7f) )
 8013a82:	d103      	bne.n	8013a8c <MIOS32_USB_CLASS_DataIn+0xe>
    MIOS32_USB_MIDI_EP1_IN_Callback(epnum, 0); // parameters not relevant for STM32F4
 8013a84:	4608      	mov	r0, r1
 8013a86:	2100      	movs	r1, #0
 8013a88:	f000 fc88 	bl	801439c <MIOS32_USB_MIDI_EP1_IN_Callback>
#endif
  
  return USBD_OK;
}
 8013a8c:	2000      	movs	r0, #0
 8013a8e:	bd08      	pop	{r3, pc}

08013a90 <MIOS32_USB_CLASS_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DeInit (void  *pdev, 
					 uint8_t cfgidx)
{
 8013a90:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Close Endpoints
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_OUT_EP);
 8013a92:	2102      	movs	r1, #2
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DeInit (void  *pdev, 
					 uint8_t cfgidx)
{
 8013a94:	4604      	mov	r4, r0
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Close Endpoints
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_OUT_EP);
 8013a96:	f003 fc12 	bl	80172be <DCD_EP_Close>
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_IN_EP);
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	2181      	movs	r1, #129	; 0x81
 8013a9e:	f003 fc0e 	bl	80172be <DCD_EP_Close>
#endif
  
  return USBD_OK;
}
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	bd10      	pop	{r4, pc}

08013aa6 <USBH_USR_DeviceDisconnected>:
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceDisconnected (void)
{
  MIOS32_USB_MIDI_ChangeConnectionState(0);
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	f000 bb26 	b.w	80140f8 <MIOS32_USB_MIDI_ChangeConnectionState>

08013aac <USBD_USR_DeviceDisconnected>:
* @retval Staus
*/
static void USBD_USR_DeviceDisconnected (void)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  MIOS32_USB_MIDI_ChangeConnectionState(0);
 8013aac:	2000      	movs	r0, #0
 8013aae:	f000 bb23 	b.w	80140f8 <MIOS32_USB_MIDI_ChangeConnectionState>

08013ab2 <USBD_USR_DeviceConfigured>:
* @retval Staus
*/
static void USBD_USR_DeviceConfigured (void)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  MIOS32_USB_MIDI_ChangeConnectionState(1);
 8013ab2:	2001      	movs	r0, #1
 8013ab4:	f000 bb20 	b.w	80140f8 <MIOS32_USB_MIDI_ChangeConnectionState>

08013ab8 <MIOS32_USB_CLASS_Init>:
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8013ab8:	2102      	movs	r1, #2
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
 8013aba:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8013abc:	2240      	movs	r2, #64	; 0x40
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
 8013abe:	4604      	mov	r4, r0
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8013ac0:	460b      	mov	r3, r1
 8013ac2:	f003 fbdb 	bl	801727c <DCD_EP_Open>
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_IN_EP, MIOS32_USB_MIDI_DATA_IN_SIZE, USB_OTG_EP_BULK);
 8013ac6:	2181      	movs	r1, #129	; 0x81
 8013ac8:	2240      	movs	r2, #64	; 0x40
 8013aca:	2302      	movs	r3, #2
 8013acc:	4620      	mov	r0, r4
 8013ace:	f003 fbd5 	bl	801727c <DCD_EP_Open>

  // configuration for next transfer
  DCD_EP_PrepareRx(&USB_OTG_dev,
 8013ad2:	2102      	movs	r1, #2
 8013ad4:	4a03      	ldr	r2, [pc, #12]	; (8013ae4 <MIOS32_USB_CLASS_Init+0x2c>)
 8013ad6:	4804      	ldr	r0, [pc, #16]	; (8013ae8 <MIOS32_USB_CLASS_Init+0x30>)
 8013ad8:	2340      	movs	r3, #64	; 0x40
 8013ada:	f003 fc09 	bl	80172f0 <DCD_EP_PrepareRx>
		   (uint8_t*)(USB_rx_buffer),
		   MIOS32_USB_MIDI_DATA_OUT_SIZE);
#endif

  return USBD_OK;
}
 8013ade:	2000      	movs	r0, #0
 8013ae0:	bd10      	pop	{r4, pc}
 8013ae2:	bf00      	nop
 8013ae4:	20010de8 	.word	0x20010de8
 8013ae8:	20010e28 	.word	0x20010e28

08013aec <USB_OTG_BSP_Init>:
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 8013aec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 8013aee:	2001      	movs	r0, #1

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013af0:	4c24      	ldr	r4, [pc, #144]	; (8013b84 <USB_OTG_BSP_Init+0x98>)

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 8013af2:	4601      	mov	r1, r0
 8013af4:	f001 fa24 	bl	8014f40 <RCC_AHB1PeriphClockCmd>
  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013af8:	2000      	movs	r0, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;
 8013afa:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8013afe:	2502      	movs	r5, #2
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013b00:	2603      	movs	r6, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013b02:	f88d 0006 	strb.w	r0, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8013b06:	f88d 0007 	strb.w	r0, [sp, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013b0a:	4669      	mov	r1, sp
 8013b0c:	4620      	mov	r0, r4
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;
 8013b0e:	9300      	str	r3, [sp, #0]

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8013b10:	f88d 5004 	strb.w	r5, [sp, #4]
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013b14:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013b18:	f001 f916 	bl	8014d48 <GPIO_Init>

  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	2108      	movs	r1, #8
 8013b20:	220a      	movs	r2, #10
 8013b22:	f001 f96b 	bl	8014dfc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG1_FS) ;
 8013b26:	4620      	mov	r0, r4
 8013b28:	2109      	movs	r1, #9
 8013b2a:	220a      	movs	r2, #10
 8013b2c:	f001 f966 	bl	8014dfc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ;
 8013b30:	4620      	mov	r0, r4
 8013b32:	210b      	movs	r1, #11
 8013b34:	220a      	movs	r2, #10
 8013b36:	f001 f961 	bl	8014dfc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 8013b3a:	220a      	movs	r2, #10
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	210c      	movs	r1, #12
 8013b40:	f001 f95c 	bl	8014dfc <GPIO_PinAFConfig>

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 8013b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013b48:	9100      	str	r1, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8013b4a:	f88d 5004 	strb.w	r5, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013b4e:	4620      	mov	r0, r4
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8013b50:	2501      	movs	r5, #1
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013b52:	4669      	mov	r1, sp
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8013b54:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013b58:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8013b5c:	f001 f8f4 	bl	8014d48 <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;
 8013b60:	210a      	movs	r1, #10
 8013b62:	460a      	mov	r2, r1
 8013b64:	4620      	mov	r0, r4
 8013b66:	f001 f949 	bl	8014dfc <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8013b6a:	4629      	mov	r1, r5
 8013b6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8013b70:	f001 fa0a 	bl	8014f88 <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
 8013b74:	2080      	movs	r0, #128	; 0x80
 8013b76:	4629      	mov	r1, r5
 8013b78:	f001 f9ee 	bl	8014f58 <RCC_AHB2PeriphClockCmd>

  EXTI_ClearITPendingBit(EXTI_Line0);
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	f001 f8dd 	bl	8014d3c <EXTI_ClearITPendingBit>
}
 8013b82:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8013b84:	40020000 	.word	0x40020000

08013b88 <USB_OTG_BSP_EnableInterrupt>:
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
  MIOS32_IRQ_Install(OTG_FS_IRQn, MIOS32_IRQ_USB_PRIORITY);
 8013b88:	2043      	movs	r0, #67	; 0x43
 8013b8a:	2108      	movs	r1, #8
 8013b8c:	f7ff b830 	b.w	8012bf0 <MIOS32_IRQ_Install>

08013b90 <OTG_FS_IRQHandler>:
  * @brief  This function handles OTG_FS Handler.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8013b90:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_HOST
  if( USB_OTG_IsHostMode(&USB_OTG_dev) ) {
 8013b92:	4808      	ldr	r0, [pc, #32]	; (8013bb4 <OTG_FS_IRQHandler+0x24>)
 8013b94:	f002 fec8 	bl	8016928 <USB_OTG_IsHostMode>
 8013b98:	b118      	cbz	r0, 8013ba2 <OTG_FS_IRQHandler+0x12>
    USBH_OTG_ISR_Handler(&USB_OTG_dev);
 8013b9a:	4806      	ldr	r0, [pc, #24]	; (8013bb4 <OTG_FS_IRQHandler+0x24>)
 8013b9c:	f005 f8b6 	bl	8018d0c <USBH_OTG_ISR_Handler>
 8013ba0:	e002      	b.n	8013ba8 <OTG_FS_IRQHandler+0x18>
  } else {
    USBD_OTG_ISR_Handler(&USB_OTG_dev);
 8013ba2:	4804      	ldr	r0, [pc, #16]	; (8013bb4 <OTG_FS_IRQHandler+0x24>)
 8013ba4:	f003 fc22 	bl	80173ec <USBD_OTG_ISR_Handler>
  }

  STM32_USBO_OTG_ISR_Handler(&USB_OTG_dev);
 8013ba8:	4802      	ldr	r0, [pc, #8]	; (8013bb4 <OTG_FS_IRQHandler+0x24>)
#else
  USBD_OTG_ISR_Handler(&USB_OTG_dev);
#endif
}
 8013baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    USBH_OTG_ISR_Handler(&USB_OTG_dev);
  } else {
    USBD_OTG_ISR_Handler(&USB_OTG_dev);
  }

  STM32_USBO_OTG_ISR_Handler(&USB_OTG_dev);
 8013bae:	f005 b937 	b.w	8018e20 <STM32_USBO_OTG_ISR_Handler>
 8013bb2:	bf00      	nop
 8013bb4:	20010e28 	.word	0x20010e28

08013bb8 <USB_OTG_BSP_uDelay>:
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013bb8:	b280      	uxth	r0, r0
 8013bba:	f7ff beab 	b.w	8013914 <MIOS32_DELAY_Wait_uS>

08013bbe <USB_OTG_BSP_mDelay>:
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
  USB_OTG_BSP_uDelay(msec * 1000);
 8013bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013bc2:	4358      	muls	r0, r3
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013bc4:	b280      	uxth	r0, r0
 8013bc6:	f7ff bea5 	b.w	8013914 <MIOS32_DELAY_Wait_uS>
	...

08013bcc <USB_OTG_BSP_ConfigVBUS>:
  *         Configures the IO for the Vbus and OverCurrent
  * @param  None
  * @retval None
  */
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
 8013bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
 8013bce:	2004      	movs	r0, #4
 8013bd0:	2101      	movs	r1, #1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8013bd2:	4d0e      	ldr	r5, [pc, #56]	; (8013c0c <USB_OTG_BSP_ConfigVBUS+0x40>)
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
 8013bd4:	f001 f9b4 	bl	8014f40 <RCC_AHB1PeriphClockCmd>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013bd8:	2000      	movs	r0, #0
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8013bda:	2401      	movs	r4, #1
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013bdc:	2303      	movs	r3, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8013bde:	f88d 0006 	strb.w	r0, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8013be2:	f88d 0007 	strb.w	r0, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8013be6:	4669      	mov	r1, sp
 8013be8:	4628      	mov	r0, r5
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8013bea:	f88d 3005 	strb.w	r3, [sp, #5]
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8013bee:	9400      	str	r4, [sp, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8013bf0:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8013bf4:	f001 f8a8 	bl	8014d48 <GPIO_Init>

  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	4621      	mov	r1, r4
 8013bfc:	f001 f8fa 	bl	8014df4 <GPIO_SetBits>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013c00:	f44f 6054 	mov.w	r0, #3392	; 0xd40
 8013c04:	f7ff fe86 	bl	8013914 <MIOS32_DELAY_Wait_uS>
  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(GPIOC, GPIO_Pin_0);
  
  USB_OTG_BSP_mDelay(200);   /* Delay is need for stabilising the Vbus Low in Reset Condition, when Vbus=1 and Reset-button is pressed by user */
#endif
}
 8013c08:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013c0a:	bf00      	nop
 8013c0c:	40020800 	.word	0x40020800

08013c10 <USB_OTG_BSP_DriveVBUS>:
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
  { 
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8013c10:	4803      	ldr	r0, [pc, #12]	; (8013c20 <USB_OTG_BSP_DriveVBUS+0x10>)
  
  Bit 12 PPWR: Port power
  The application uses this field to control power to this port, and the core 
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
 8013c12:	b911      	cbnz	r1, 8013c1a <USB_OTG_BSP_DriveVBUS+0xa>
  { 
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8013c14:	2101      	movs	r1, #1
 8013c16:	f001 b8ed 	b.w	8014df4 <GPIO_SetBits>
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    GPIO_ResetBits(GPIOC, GPIO_Pin_0);
 8013c1a:	2101      	movs	r1, #1
 8013c1c:	f001 b8ec 	b.w	8014df8 <GPIO_ResetBits>
 8013c20:	40020800 	.word	0x40020800

08013c24 <MIOS32_USB_IsInitialized>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_IsInitialized(void)
{
  // we assume that initialisation has been done when B-Session valid flag is set
  __IO USB_OTG_GREGS *GREGS = (USB_OTG_GREGS *)(USB_OTG_FS_BASE_ADDR + USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  return (GREGS->GOTGCTL & (1 << 19)) ? 1 : 0;
 8013c24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8013c28:	6818      	ldr	r0, [r3, #0]
}
 8013c2a:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 8013c2e:	4770      	bx	lr

08013c30 <MIOS32_USB_ForceSingleUSB>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_ForceSingleUSB(void)
{
  u8 *single_usb_confirm = (u8 *)MIOS32_SYS_ADDR_SINGLE_USB_CONFIRM;
  u8 *single_usb = (u8 *)MIOS32_SYS_ADDR_SINGLE_USB;
  if( *single_usb_confirm == 0x42 && *single_usb < 0x80 )
 8013c30:	4b06      	ldr	r3, [pc, #24]	; (8013c4c <MIOS32_USB_ForceSingleUSB+0x1c>)
 8013c32:	7818      	ldrb	r0, [r3, #0]
 8013c34:	2842      	cmp	r0, #66	; 0x42
 8013c36:	d106      	bne.n	8013c46 <MIOS32_USB_ForceSingleUSB+0x16>
 8013c38:	4905      	ldr	r1, [pc, #20]	; (8013c50 <MIOS32_USB_ForceSingleUSB+0x20>)
 8013c3a:	7808      	ldrb	r0, [r1, #0]
 8013c3c:	f010 0f80 	tst.w	r0, #128	; 0x80
    return *single_usb;
 8013c40:	bf18      	it	ne
 8013c42:	2000      	movne	r0, #0
 8013c44:	4770      	bx	lr

  return 0;
 8013c46:	2000      	movs	r0, #0
}
 8013c48:	4770      	bx	lr
 8013c4a:	bf00      	nop
 8013c4c:	08003fd4 	.word	0x08003fd4
 8013c50:	08003fd5 	.word	0x08003fd5

08013c54 <MIOS32_USB_ForceDeviceMode>:
#ifdef MIOS32_DONT_USE_USB_HOST
  return 1;
#else
  u8 *enforce_usb_device_confirm = (u8 *)MIOS32_SYS_ADDR_ENFORCE_USB_DEVICE_CONFIRM;
  u8 *enforce_usb_device = (u8 *)MIOS32_SYS_ADDR_ENFORCE_USB_DEVICE;
  if( *enforce_usb_device_confirm == 0x42 && *enforce_usb_device < 0x80 )
 8013c54:	4b06      	ldr	r3, [pc, #24]	; (8013c70 <MIOS32_USB_ForceDeviceMode+0x1c>)
 8013c56:	7818      	ldrb	r0, [r3, #0]
 8013c58:	2842      	cmp	r0, #66	; 0x42
 8013c5a:	d106      	bne.n	8013c6a <MIOS32_USB_ForceDeviceMode+0x16>
 8013c5c:	4905      	ldr	r1, [pc, #20]	; (8013c74 <MIOS32_USB_ForceDeviceMode+0x20>)
 8013c5e:	7808      	ldrb	r0, [r1, #0]
 8013c60:	f010 0f80 	tst.w	r0, #128	; 0x80
    return *enforce_usb_device;
 8013c64:	bf18      	it	ne
 8013c66:	2000      	movne	r0, #0
 8013c68:	4770      	bx	lr

  return 0;
 8013c6a:	2000      	movs	r0, #0
#endif
}
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop
 8013c70:	08003fd6 	.word	0x08003fd6
 8013c74:	08003fd7 	.word	0x08003fd7

08013c78 <MIOS32_USB_Init>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
 8013c78:	2802      	cmp	r0, #2
//!   </UL>
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
 8013c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c7c:	4605      	mov	r5, r0
  // currently only mode 0..2 supported
  if( mode >= 3 )
 8013c7e:	d85d      	bhi.n	8013d3c <MIOS32_USB_Init+0xc4>
    return -1; // unsupported mode

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();
 8013c80:	f7ff ffd0 	bl	8013c24 <MIOS32_USB_IsInitialized>

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_dev, 
 8013c84:	4c2f      	ldr	r4, [pc, #188]	; (8013d44 <MIOS32_USB_Init+0xcc>)
            USB_OTG_FS_CORE_ID,
            &USB_Host,
            (USBH_Class_cb_TypeDef *)&MIOS32_MIDI_USBH_Callbacks, 
            (USBH_Usr_cb_TypeDef *)&USBH_USR_Callbacks);
 8013c86:	4b30      	ldr	r3, [pc, #192]	; (8013d48 <MIOS32_USB_Init+0xd0>)

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_dev, 
 8013c88:	4a30      	ldr	r2, [pc, #192]	; (8013d4c <MIOS32_USB_Init+0xd4>)
 8013c8a:	9300      	str	r3, [sp, #0]
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
    return -1; // unsupported mode

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();
 8013c8c:	4606      	mov	r6, r0

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_dev, 
 8013c8e:	2101      	movs	r1, #1
 8013c90:	4620      	mov	r0, r4
 8013c92:	4b2f      	ldr	r3, [pc, #188]	; (8013d50 <MIOS32_USB_Init+0xd8>)
 8013c94:	f001 ff53 	bl	8015b3e <USBH_Init>
            (USBH_Class_cb_TypeDef *)&MIOS32_MIDI_USBH_Callbacks, 
            (USBH_Usr_cb_TypeDef *)&USBH_USR_Callbacks);
#endif

  // change connection state to disconnected
  USBD_USR_DeviceDisconnected();
 8013c98:	f7ff ff08 	bl	8013aac <USBD_USR_DeviceDisconnected>

  if( mode == 0 && usb_is_initialized ) {
 8013c9c:	bb3d      	cbnz	r5, 8013cee <MIOS32_USB_Init+0x76>
 8013c9e:	f016 0fff 	tst.w	r6, #255	; 0xff
 8013ca2:	d024      	beq.n	8013cee <MIOS32_USB_Init+0x76>
#else

    // don't run complete driver init sequence to ensure that the connection doesn't get lost!

    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_dev);
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	f7ff ff21 	bl	8013aec <USB_OTG_BSP_Init>

    // USBD_Init sets these pointer in the handle
    USB_OTG_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
 8013caa:	492a      	ldr	r1, [pc, #168]	; (8013d54 <MIOS32_USB_Init+0xdc>)
    USB_OTG_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
 8013cac:	4a2a      	ldr	r2, [pc, #168]	; (8013d58 <MIOS32_USB_Init+0xe0>)
    USB_OTG_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;
 8013cae:	4b2b      	ldr	r3, [pc, #172]	; (8013d5c <MIOS32_USB_Init+0xe4>)

    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_dev);

    // USBD_Init sets these pointer in the handle
    USB_OTG_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
 8013cb0:	f8c4 15e4 	str.w	r1, [r4, #1508]	; 0x5e4
    USB_OTG_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
    USB_OTG_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;

    // some additional handle init stuff which doesn't hurt
    USB_OTG_SelectCore(&USB_OTG_dev, USB_OTG_FS_CORE_ID);
 8013cb4:	4620      	mov	r0, r4
 8013cb6:	2101      	movs	r1, #1
    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_dev);

    // USBD_Init sets these pointer in the handle
    USB_OTG_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
    USB_OTG_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
 8013cb8:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
    USB_OTG_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;
 8013cbc:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec

    // some additional handle init stuff which doesn't hurt
    USB_OTG_SelectCore(&USB_OTG_dev, USB_OTG_FS_CORE_ID);
 8013cc0:	f002 fd22 	bl	8016708 <USB_OTG_SelectCore>

    // enable interrupts
    USB_OTG_EnableGlobalInt(&USB_OTG_dev);
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f002 fdcc 	bl	8016862 <USB_OTG_EnableGlobalInt>
    USB_OTG_EnableDevInt(&USB_OTG_dev);
 8013cca:	4620      	mov	r0, r4
 8013ccc:	f003 f827 	bl	8016d1e <USB_OTG_EnableDevInt>
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_dev);
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	f7ff ff59 	bl	8013b88 <USB_OTG_BSP_EnableInterrupt>
#endif

    // select configuration
    USB_OTG_dev.dev.device_config = 1;
    USB_OTG_dev.dev.device_status = USB_OTG_CONFIGURED;
 8013cd6:	2003      	movs	r0, #3
    USB_OTG_EnableDevInt(&USB_OTG_dev);
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_dev);
#endif

    // select configuration
    USB_OTG_dev.dev.device_config = 1;
 8013cd8:	2101      	movs	r1, #1
    USB_OTG_dev.dev.device_status = USB_OTG_CONFIGURED;
 8013cda:	f884 0112 	strb.w	r0, [r4, #274]	; 0x112

    // init endpoints
    MIOS32_USB_CLASS_Init(&USB_OTG_dev, 1);
 8013cde:	4620      	mov	r0, r4
    USB_OTG_EnableDevInt(&USB_OTG_dev);
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_dev);
#endif

    // select configuration
    USB_OTG_dev.dev.device_config = 1;
 8013ce0:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
    USB_OTG_dev.dev.device_status = USB_OTG_CONFIGURED;

    // init endpoints
    MIOS32_USB_CLASS_Init(&USB_OTG_dev, 1);
 8013ce4:	f7ff fee8 	bl	8013ab8 <MIOS32_USB_CLASS_Init>

    // assume that device is (still) configured
    USBD_USR_DeviceConfigured();
 8013ce8:	f7ff fee3 	bl	8013ab2 <USBD_USR_DeviceConfigured>
 8013cec:	e011      	b.n	8013d12 <MIOS32_USB_Init+0x9a>
    // init USB device and driver
    USBD_Init(&USB_OTG_dev,
	      USB_OTG_FS_CORE_ID,
	      (USBD_DEVICE *)&USR_desc,
	      (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb,
	      (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks);
 8013cee:	481a      	ldr	r0, [pc, #104]	; (8013d58 <MIOS32_USB_Init+0xe0>)

    // assume that device is (still) configured
    USBD_USR_DeviceConfigured();
  } else {
    // init USB device and driver
    USBD_Init(&USB_OTG_dev,
 8013cf0:	4a1a      	ldr	r2, [pc, #104]	; (8013d5c <MIOS32_USB_Init+0xe4>)
 8013cf2:	4b18      	ldr	r3, [pc, #96]	; (8013d54 <MIOS32_USB_Init+0xdc>)
 8013cf4:	9000      	str	r0, [sp, #0]
 8013cf6:	2101      	movs	r1, #1
 8013cf8:	4812      	ldr	r0, [pc, #72]	; (8013d44 <MIOS32_USB_Init+0xcc>)
 8013cfa:	f001 fc6f 	bl	80155dc <USBD_Init>
	      (USBD_DEVICE *)&USR_desc,
	      (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb,
	      (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks);

    // disconnect device
    DCD_DevDisconnect(&USB_OTG_dev);
 8013cfe:	4811      	ldr	r0, [pc, #68]	; (8013d44 <MIOS32_USB_Init+0xcc>)
 8013d00:	f003 fb73 	bl	80173ea <DCD_DevDisconnect>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8013d04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013d08:	f7ff fe04 	bl	8013914 <MIOS32_DELAY_Wait_uS>

    // wait 50 mS
    USB_OTG_BSP_mDelay(50);

    // connect device
    DCD_DevConnect(&USB_OTG_dev);
 8013d0c:	480d      	ldr	r0, [pc, #52]	; (8013d44 <MIOS32_USB_Init+0xcc>)
 8013d0e:	f003 fb6b 	bl	80173e8 <DCD_DevConnect>
  }

#ifndef MIOS32_DONT_USE_USB_HOST
  // switch to host or device mode depending on the ID pin (Bootloader allows to overrule this pin)
  if( MIOS32_USB_ForceDeviceMode() || MIOS32_SYS_STM_PINGET(GPIOA, GPIO_Pin_10) ) {
 8013d12:	f7ff ff9f 	bl	8013c54 <MIOS32_USB_ForceDeviceMode>
 8013d16:	b920      	cbnz	r0, 8013d22 <MIOS32_USB_Init+0xaa>
 8013d18:	4c11      	ldr	r4, [pc, #68]	; (8013d60 <MIOS32_USB_Init+0xe8>)
 8013d1a:	6921      	ldr	r1, [r4, #16]
 8013d1c:	f411 6480 	ands.w	r4, r1, #1024	; 0x400
 8013d20:	d005      	beq.n	8013d2e <MIOS32_USB_Init+0xb6>
    USB_OTG_SetCurrentMode(&USB_OTG_dev, DEVICE_MODE);
 8013d22:	4808      	ldr	r0, [pc, #32]	; (8013d44 <MIOS32_USB_Init+0xcc>)
 8013d24:	2100      	movs	r1, #0
 8013d26:	f002 fde3 	bl	80168f0 <USB_OTG_SetCurrentMode>
    USB_OTG_DriveVbus(&USB_OTG_dev, 1);
    USB_OTG_SetCurrentMode(&USB_OTG_dev, HOST_MODE);
  }
#endif

  return 0; // no error
 8013d2a:	2000      	movs	r0, #0
  }

#ifndef MIOS32_DONT_USE_USB_HOST
  // switch to host or device mode depending on the ID pin (Bootloader allows to overrule this pin)
  if( MIOS32_USB_ForceDeviceMode() || MIOS32_SYS_STM_PINGET(GPIOA, GPIO_Pin_10) ) {
    USB_OTG_SetCurrentMode(&USB_OTG_dev, DEVICE_MODE);
 8013d2c:	e008      	b.n	8013d40 <MIOS32_USB_Init+0xc8>
  } else {
    USB_OTG_DriveVbus(&USB_OTG_dev, 1);
 8013d2e:	4805      	ldr	r0, [pc, #20]	; (8013d44 <MIOS32_USB_Init+0xcc>)
 8013d30:	2101      	movs	r1, #1
 8013d32:	f002 fe34 	bl	801699e <USB_OTG_DriveVbus>
    USB_OTG_SetCurrentMode(&USB_OTG_dev, HOST_MODE);
 8013d36:	4803      	ldr	r0, [pc, #12]	; (8013d44 <MIOS32_USB_Init+0xcc>)
 8013d38:	2101      	movs	r1, #1
 8013d3a:	e7f4      	b.n	8013d26 <MIOS32_USB_Init+0xae>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
    return -1; // unsupported mode
 8013d3c:	f04f 30ff 	mov.w	r0, #4294967295
    USB_OTG_SetCurrentMode(&USB_OTG_dev, HOST_MODE);
  }
#endif

  return 0; // no error
}
 8013d40:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8013d42:	bf00      	nop
 8013d44:	20010e28 	.word	0x20010e28
 8013d48:	0801c2f8 	.word	0x0801c2f8
 8013d4c:	200118bc 	.word	0x200118bc
 8013d50:	0801c434 	.word	0x0801c434
 8013d54:	0801c340 	.word	0x0801c340
 8013d58:	0801c418 	.word	0x0801c418
 8013d5c:	0801c388 	.word	0x0801c388
 8013d60:	40020000 	.word	0x40020000

08013d64 <USBH_ClassRequest>:
 */
static USBH_Status USBH_ClassRequest(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
  USBH_Status status = USBH_OK;
  return status;
}
 8013d64:	2000      	movs	r0, #0
 8013d66:	4770      	bx	lr

08013d68 <USBH_InterfaceDeInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013d68:	b538      	push	{r3, r4, r5, lr}
  if( USBH_hc_num_out ) {
 8013d6a:	4d0c      	ldr	r5, [pc, #48]	; (8013d9c <USBH_InterfaceDeInit+0x34>)
 8013d6c:	7829      	ldrb	r1, [r5, #0]
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013d6e:	4604      	mov	r4, r0
  if( USBH_hc_num_out ) {
 8013d70:	b139      	cbz	r1, 8013d82 <USBH_InterfaceDeInit+0x1a>
    USB_OTG_HC_Halt(pdev, USBH_hc_num_out);
 8013d72:	f002 ff9d 	bl	8016cb0 <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, USBH_hc_num_out);
 8013d76:	4620      	mov	r0, r4
 8013d78:	7829      	ldrb	r1, [r5, #0]
 8013d7a:	f002 f9f5 	bl	8016168 <USBH_Free_Channel>
    USBH_hc_num_out = 0;     /* Reset the Channel as Free */
 8013d7e:	2300      	movs	r3, #0
 8013d80:	702b      	strb	r3, [r5, #0]
  }

  if( USBH_hc_num_in ) {
 8013d82:	4d07      	ldr	r5, [pc, #28]	; (8013da0 <USBH_InterfaceDeInit+0x38>)
 8013d84:	7829      	ldrb	r1, [r5, #0]
 8013d86:	b141      	cbz	r1, 8013d9a <USBH_InterfaceDeInit+0x32>
    USB_OTG_HC_Halt(pdev, USBH_hc_num_in);
 8013d88:	4620      	mov	r0, r4
 8013d8a:	f002 ff91 	bl	8016cb0 <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, USBH_hc_num_in);
 8013d8e:	4620      	mov	r0, r4
 8013d90:	7829      	ldrb	r1, [r5, #0]
 8013d92:	f002 f9e9 	bl	8016168 <USBH_Free_Channel>
    USBH_hc_num_in = 0;     /* Reset the Channel as Free */
 8013d96:	2000      	movs	r0, #0
 8013d98:	7028      	strb	r0, [r5, #0]
 8013d9a:	bd38      	pop	{r3, r4, r5, pc}
 8013d9c:	2000045d 	.word	0x2000045d
 8013da0:	20000458 	.word	0x20000458

08013da4 <MIOS32_USB_MIDI_RxBufferHandler>:
//! USB Device Mode
//!
//! This handler receives new packages if the Tx buffer is not full
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_RxBufferHandler(void)
{
 8013da4:	b570      	push	{r4, r5, r6, lr}
  s16 count;

  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_dev.dev.class_cb == NULL ) {
 8013da6:	4c24      	ldr	r4, [pc, #144]	; (8013e38 <MIOS32_USB_MIDI_RxBufferHandler+0x94>)
 8013da8:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d042      	beq.n	8013e36 <MIOS32_USB_MIDI_RxBufferHandler+0x92>
    return;
  }

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();
 8013db0:	f7fe fef6 	bl	8012ba0 <MIOS32_IRQ_Disable>

  // check if we can receive new data and get packages to be received from OUT pipe
  u32 ep_num = MIOS32_USB_MIDI_DATA_OUT_EP & 0x7f;
  USB_OTG_EP *ep = &USB_OTG_dev.dev.out_ep[ep_num];
  if( rx_buffer_new_data && (count=ep->xfer_count>>2) ) {
 8013db4:	4821      	ldr	r0, [pc, #132]	; (8013e3c <MIOS32_USB_MIDI_RxBufferHandler+0x98>)
 8013db6:	7801      	ldrb	r1, [r0, #0]
 8013db8:	2900      	cmp	r1, #0
 8013dba:	d038      	beq.n	8013e2e <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
 8013dbc:	f8d4 63dc 	ldr.w	r6, [r4, #988]	; 0x3dc
 8013dc0:	08b6      	lsrs	r6, r6, #2
 8013dc2:	b2b3      	uxth	r3, r6
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d032      	beq.n	8013e2e <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
    // check if buffer is free
    if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-rx_buffer_size) ) {
 8013dc8:	4a1d      	ldr	r2, [pc, #116]	; (8013e40 <MIOS32_USB_MIDI_RxBufferHandler+0x9c>)
 8013dca:	8810      	ldrh	r0, [r2, #0]
 8013dcc:	b281      	uxth	r1, r0
 8013dce:	b21b      	sxth	r3, r3
 8013dd0:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
 8013dd4:	4293      	cmp	r3, r2
 8013dd6:	da2a      	bge.n	8013e2e <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
 8013dd8:	2400      	movs	r4, #0

      // copy received packages into receive buffer
      // this operation should be atomic
      do {
	mios32_midi_package_t package;
	package.ALL = *buf_addr++;
 8013dda:	4d1a      	ldr	r5, [pc, #104]	; (8013e44 <MIOS32_USB_MIDI_RxBufferHandler+0xa0>)
 8013ddc:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]

	if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
 8013de0:	f3c5 1003 	ubfx	r0, r5, #4, #4
 8013de4:	3010      	adds	r0, #16
 8013de6:	4629      	mov	r1, r5
 8013de8:	f7fd fe48 	bl	8011a7c <MIOS32_MIDI_SendPackageToRxCallback>
 8013dec:	b988      	cbnz	r0, 8013e12 <MIOS32_USB_MIDI_RxBufferHandler+0x6e>
	  rx_buffer[rx_buffer_head] = package.ALL;
 8013dee:	4b16      	ldr	r3, [pc, #88]	; (8013e48 <MIOS32_USB_MIDI_RxBufferHandler+0xa4>)
 8013df0:	4a16      	ldr	r2, [pc, #88]	; (8013e4c <MIOS32_USB_MIDI_RxBufferHandler+0xa8>)
 8013df2:	8819      	ldrh	r1, [r3, #0]
 8013df4:	b289      	uxth	r1, r1
 8013df6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]

	  if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8013dfa:	8819      	ldrh	r1, [r3, #0]
 8013dfc:	1c4a      	adds	r2, r1, #1
 8013dfe:	b291      	uxth	r1, r2
 8013e00:	293f      	cmp	r1, #63	; 0x3f
 8013e02:	8019      	strh	r1, [r3, #0]
	    rx_buffer_head = 0;
 8013e04:	bf88      	it	hi
 8013e06:	8018      	strhhi	r0, [r3, #0]
	  ++rx_buffer_size;
 8013e08:	480d      	ldr	r0, [pc, #52]	; (8013e40 <MIOS32_USB_MIDI_RxBufferHandler+0x9c>)
 8013e0a:	8803      	ldrh	r3, [r0, #0]
 8013e0c:	1c5a      	adds	r2, r3, #1
 8013e0e:	b291      	uxth	r1, r2
 8013e10:	8001      	strh	r1, [r0, #0]
 8013e12:	3401      	adds	r4, #1
/////////////////////////////////////////////////////////////////////////////
//! USB Device Mode
//!
//! This handler receives new packages if the Tx buffer is not full
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_RxBufferHandler(void)
 8013e14:	1b30      	subs	r0, r6, r4

	  if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
	    rx_buffer_head = 0;
	  ++rx_buffer_size;
	}
      } while( --count > 0 );
 8013e16:	b203      	sxth	r3, r0
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	dcde      	bgt.n	8013dda <MIOS32_USB_MIDI_RxBufferHandler+0x36>

      // notify, that data has been put into buffer
      rx_buffer_new_data = 0;
 8013e1c:	4907      	ldr	r1, [pc, #28]	; (8013e3c <MIOS32_USB_MIDI_RxBufferHandler+0x98>)

      // configuration for next transfer
      DCD_EP_PrepareRx(&USB_OTG_dev,
 8013e1e:	4806      	ldr	r0, [pc, #24]	; (8013e38 <MIOS32_USB_MIDI_RxBufferHandler+0x94>)
	  ++rx_buffer_size;
	}
      } while( --count > 0 );

      // notify, that data has been put into buffer
      rx_buffer_new_data = 0;
 8013e20:	2200      	movs	r2, #0
 8013e22:	700a      	strb	r2, [r1, #0]

      // configuration for next transfer
      DCD_EP_PrepareRx(&USB_OTG_dev,
 8013e24:	2340      	movs	r3, #64	; 0x40
 8013e26:	2102      	movs	r1, #2
 8013e28:	4a06      	ldr	r2, [pc, #24]	; (8013e44 <MIOS32_USB_MIDI_RxBufferHandler+0xa0>)
 8013e2a:	f003 fa61 	bl	80172f0 <DCD_EP_PrepareRx>
		       MIOS32_USB_MIDI_DATA_OUT_SIZE);
    }
  }

  MIOS32_IRQ_Enable();
}
 8013e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		       (uint8_t*)(USB_rx_buffer),
		       MIOS32_USB_MIDI_DATA_OUT_SIZE);
    }
  }

  MIOS32_IRQ_Enable();
 8013e32:	f7fe bec9 	b.w	8012bc8 <MIOS32_IRQ_Enable>
 8013e36:	bd70      	pop	{r4, r5, r6, pc}
 8013e38:	20010e28 	.word	0x20010e28
 8013e3c:	2000044e 	.word	0x2000044e
 8013e40:	20000302 	.word	0x20000302
 8013e44:	20010de8 	.word	0x20010de8
 8013e48:	20000450 	.word	0x20000450
 8013e4c:	2000034c 	.word	0x2000034c

08013e50 <MIOS32_USB_MIDI_TxBufferHandler>:
//! is not empty
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_TxBufferHandler(void)
{
  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_dev.dev.class_cb == NULL )
 8013e50:	4b23      	ldr	r3, [pc, #140]	; (8013ee0 <MIOS32_USB_MIDI_TxBufferHandler+0x90>)
 8013e52:	f8d3 05e4 	ldr.w	r0, [r3, #1508]	; 0x5e4
//!
//! This handler sends the new packages through the IN pipe if the buffer 
//! is not empty
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_TxBufferHandler(void)
{
 8013e56:	b510      	push	{r4, lr}
  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_dev.dev.class_cb == NULL )
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	d03f      	beq.n	8013edc <MIOS32_USB_MIDI_TxBufferHandler+0x8c>
  //   - last transfer finished
  //   - new packages are in the buffer
  //   - the device is configured

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();
 8013e5c:	f7fe fea0 	bl	8012ba0 <MIOS32_IRQ_Disable>

  if( !tx_buffer_busy && tx_buffer_size && transfer_possible ) {
 8013e60:	4920      	ldr	r1, [pc, #128]	; (8013ee4 <MIOS32_USB_MIDI_TxBufferHandler+0x94>)
 8013e62:	780a      	ldrb	r2, [r1, #0]
 8013e64:	2a00      	cmp	r2, #0
 8013e66:	d135      	bne.n	8013ed4 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
 8013e68:	4b1f      	ldr	r3, [pc, #124]	; (8013ee8 <MIOS32_USB_MIDI_TxBufferHandler+0x98>)
 8013e6a:	8818      	ldrh	r0, [r3, #0]
 8013e6c:	b281      	uxth	r1, r0
 8013e6e:	2900      	cmp	r1, #0
 8013e70:	d030      	beq.n	8013ed4 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
 8013e72:	4a1e      	ldr	r2, [pc, #120]	; (8013eec <MIOS32_USB_MIDI_TxBufferHandler+0x9c>)
 8013e74:	7810      	ldrb	r0, [r2, #0]
 8013e76:	2800      	cmp	r0, #0
 8013e78:	d02c      	beq.n	8013ed4 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
    s16 count = (tx_buffer_size > (MIOS32_USB_MIDI_DATA_IN_SIZE/4)) ? (MIOS32_USB_MIDI_DATA_IN_SIZE/4) : tx_buffer_size;
 8013e7a:	8819      	ldrh	r1, [r3, #0]
 8013e7c:	b28a      	uxth	r2, r1
 8013e7e:	2a10      	cmp	r2, #16
 8013e80:	bf98      	it	ls
 8013e82:	8819      	ldrhls	r1, [r3, #0]

    // notify that new package is sent
    tx_buffer_busy = 1;
 8013e84:	4b17      	ldr	r3, [pc, #92]	; (8013ee4 <MIOS32_USB_MIDI_TxBufferHandler+0x94>)

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();

  if( !tx_buffer_busy && tx_buffer_size && transfer_possible ) {
    s16 count = (tx_buffer_size > (MIOS32_USB_MIDI_DATA_IN_SIZE/4)) ? (MIOS32_USB_MIDI_DATA_IN_SIZE/4) : tx_buffer_size;
 8013e86:	bf94      	ite	ls
 8013e88:	b289      	uxthls	r1, r1
 8013e8a:	2110      	movhi	r1, #16

    // notify that new package is sent
    tx_buffer_busy = 1;
 8013e8c:	2001      	movs	r0, #1
 8013e8e:	7018      	strb	r0, [r3, #0]

    // send to IN pipe
    tx_buffer_size -= count;
 8013e90:	4815      	ldr	r0, [pc, #84]	; (8013ee8 <MIOS32_USB_MIDI_TxBufferHandler+0x98>)
 8013e92:	8802      	ldrh	r2, [r0, #0]
 8013e94:	1a53      	subs	r3, r2, r1
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	8002      	strh	r2, [r0, #0]

    u32 *buf_addr = (u32 *)USB_tx_buffer;
    int i;
    for(i=0; i<count; ++i) {
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	b20b      	sxth	r3, r1
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	da12      	bge.n	8013ec8 <MIOS32_USB_MIDI_TxBufferHandler+0x78>
      *(buf_addr++) = tx_buffer[tx_buffer_tail];
 8013ea2:	4b13      	ldr	r3, [pc, #76]	; (8013ef0 <MIOS32_USB_MIDI_TxBufferHandler+0xa0>)
 8013ea4:	4813      	ldr	r0, [pc, #76]	; (8013ef4 <MIOS32_USB_MIDI_TxBufferHandler+0xa4>)
 8013ea6:	881c      	ldrh	r4, [r3, #0]
 8013ea8:	b2a4      	uxth	r4, r4
 8013eaa:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8013eae:	4812      	ldr	r0, [pc, #72]	; (8013ef8 <MIOS32_USB_MIDI_TxBufferHandler+0xa8>)
 8013eb0:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
      if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8013eb4:	8818      	ldrh	r0, [r3, #0]
 8013eb6:	3001      	adds	r0, #1
 8013eb8:	b280      	uxth	r0, r0
 8013eba:	283f      	cmp	r0, #63	; 0x3f
 8013ebc:	8018      	strh	r0, [r3, #0]
 8013ebe:	d901      	bls.n	8013ec4 <MIOS32_USB_MIDI_TxBufferHandler+0x74>
	tx_buffer_tail = 0;
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	8018      	strh	r0, [r3, #0]
    // send to IN pipe
    tx_buffer_size -= count;

    u32 *buf_addr = (u32 *)USB_tx_buffer;
    int i;
    for(i=0; i<count; ++i) {
 8013ec4:	3201      	adds	r2, #1
 8013ec6:	e7e9      	b.n	8013e9c <MIOS32_USB_MIDI_TxBufferHandler+0x4c>
      *(buf_addr++) = tx_buffer[tx_buffer_tail];
      if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	tx_buffer_tail = 0;
    }

    DCD_EP_Tx(&USB_OTG_dev, MIOS32_USB_MIDI_DATA_IN_EP, (uint8_t*)&USB_tx_buffer, count*4);
 8013ec8:	4805      	ldr	r0, [pc, #20]	; (8013ee0 <MIOS32_USB_MIDI_TxBufferHandler+0x90>)
 8013eca:	4a0b      	ldr	r2, [pc, #44]	; (8013ef8 <MIOS32_USB_MIDI_TxBufferHandler+0xa8>)
 8013ecc:	2181      	movs	r1, #129	; 0x81
 8013ece:	009b      	lsls	r3, r3, #2
 8013ed0:	f003 fa2b 	bl	801732a <DCD_EP_Tx>
  }

  MIOS32_IRQ_Enable();
}
 8013ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    DCD_EP_Tx(&USB_OTG_dev, MIOS32_USB_MIDI_DATA_IN_EP, (uint8_t*)&USB_tx_buffer, count*4);
  }

  MIOS32_IRQ_Enable();
 8013ed8:	f7fe be76 	b.w	8012bc8 <MIOS32_IRQ_Enable>
 8013edc:	bd10      	pop	{r4, pc}
 8013ede:	bf00      	nop
 8013ee0:	20010e28 	.word	0x20010e28
 8013ee4:	2000034a 	.word	0x2000034a
 8013ee8:	20000454 	.word	0x20000454
 8013eec:	20000459 	.word	0x20000459
 8013ef0:	20000456 	.word	0x20000456
 8013ef4:	20000200 	.word	0x20000200
 8013ef8:	20000308 	.word	0x20000308

08013efc <USBH_Handle>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( transfer_possible ) {
 8013efe:	4b68      	ldr	r3, [pc, #416]	; (80140a0 <USBH_Handle+0x1a4>)
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013f00:	460f      	mov	r7, r1
  if( transfer_possible ) {
 8013f02:	7819      	ldrb	r1, [r3, #0]
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8013f04:	4605      	mov	r5, r0
  if( transfer_possible ) {
 8013f06:	2900      	cmp	r1, #0
 8013f08:	f000 80c8 	beq.w	801409c <USBH_Handle+0x1a0>
    USBH_HOST *pphost = phost;

    if( HCD_IsDeviceConnected(pdev) ) {
 8013f0c:	f003 fcf3 	bl	80178f6 <HCD_IsDeviceConnected>
 8013f10:	2800      	cmp	r0, #0
 8013f12:	f000 80c3 	beq.w	801409c <USBH_Handle+0x1a0>

      u8 force_rx_req = 0;

      if( USBH_MIDI_transfer_state == USBH_MIDI_TX ) {
 8013f16:	4c63      	ldr	r4, [pc, #396]	; (80140a4 <USBH_Handle+0x1a8>)
 8013f18:	7820      	ldrb	r0, [r4, #0]
 8013f1a:	2802      	cmp	r0, #2
 8013f1c:	d11b      	bne.n	8013f56 <USBH_Handle+0x5a>
	URB_STATE URB_State = HCD_GetURB_State(pdev, USBH_hc_num_out);
 8013f1e:	4e62      	ldr	r6, [pc, #392]	; (80140a8 <USBH_Handle+0x1ac>)
 8013f20:	4628      	mov	r0, r5
 8013f22:	7831      	ldrb	r1, [r6, #0]
 8013f24:	f003 fcee 	bl	8017904 <HCD_GetURB_State>

        if( URB_State == URB_IDLE ) {
 8013f28:	b180      	cbz	r0, 8013f4c <USBH_Handle+0x50>
	  // wait...
	} else if( URB_State == URB_DONE ) {
 8013f2a:	2801      	cmp	r0, #1
 8013f2c:	d063      	beq.n	8013ff6 <USBH_Handle+0xfa>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	} else if( URB_State == URB_STALL ) {
 8013f2e:	2804      	cmp	r0, #4
 8013f30:	d103      	bne.n	8013f3a <USBH_Handle+0x3e>
	  // Issue Clear Feature on OUT endpoint
	  if( USBH_ClrFeature(pdev, pphost, USBH_BulkOutEp, USBH_hc_num_out) == USBH_OK ) {
 8013f32:	4628      	mov	r0, r5
 8013f34:	4639      	mov	r1, r7
 8013f36:	4a5d      	ldr	r2, [pc, #372]	; (80140ac <USBH_Handle+0x1b0>)
 8013f38:	e052      	b.n	8013fe0 <USBH_Handle+0xe4>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_NOTREADY ) {
 8013f3a:	2802      	cmp	r0, #2
 8013f3c:	d108      	bne.n	8013f50 <USBH_Handle+0x54>
	  // send again
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 8013f3e:	4b5c      	ldr	r3, [pc, #368]	; (80140b0 <USBH_Handle+0x1b4>)
 8013f40:	485c      	ldr	r0, [pc, #368]	; (80140b4 <USBH_Handle+0x1b8>)
 8013f42:	781a      	ldrb	r2, [r3, #0]
 8013f44:	495c      	ldr	r1, [pc, #368]	; (80140b8 <USBH_Handle+0x1bc>)
 8013f46:	7833      	ldrb	r3, [r6, #0]
 8013f48:	f002 f99a 	bl	8016280 <USBH_BulkSendData>
  if( transfer_possible ) {
    USBH_HOST *pphost = phost;

    if( HCD_IsDeviceConnected(pdev) ) {

      u8 force_rx_req = 0;
 8013f4c:	2000      	movs	r0, #0
 8013f4e:	e054      	b.n	8013ffa <USBH_Handle+0xfe>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_NOTREADY ) {
	  // send again
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
	} else if( URB_State == URB_ERROR ) {
 8013f50:	2803      	cmp	r0, #3
 8013f52:	d1fb      	bne.n	8013f4c <USBH_Handle+0x50>
 8013f54:	e04f      	b.n	8013ff6 <USBH_Handle+0xfa>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	}
      } else if( USBH_MIDI_transfer_state == USBH_MIDI_RX ) {
 8013f56:	2801      	cmp	r0, #1
 8013f58:	d1f8      	bne.n	8013f4c <USBH_Handle+0x50>
	URB_STATE URB_State = HCD_GetURB_State(pdev, USBH_hc_num_in);
 8013f5a:	4e58      	ldr	r6, [pc, #352]	; (80140bc <USBH_Handle+0x1c0>)
 8013f5c:	4628      	mov	r0, r5
 8013f5e:	7831      	ldrb	r1, [r6, #0]
 8013f60:	f003 fcd0 	bl	8017904 <HCD_GetURB_State>
        if( URB_State == URB_IDLE || URB_State == URB_DONE ) {
 8013f64:	2801      	cmp	r0, #1
 8013f66:	d836      	bhi.n	8013fd6 <USBH_Handle+0xda>
	  // data received from receive
	  //u32 count = HCD_GetXferCnt(pdev, USBH_hc_num_in) / 4;
	  // Note: HCD_GetXferCnt returns a counter which isn't zeroed immediately on a USBH_BulkReceiveData() call
	  u32 count = USB_OTG_dev.host.hc[USBH_hc_num_in].xfer_count / 4;
 8013f68:	7835      	ldrb	r5, [r6, #0]
 8013f6a:	4952      	ldr	r1, [pc, #328]	; (80140b4 <USBH_Handle+0x1b8>)
 8013f6c:	eb01 1045 	add.w	r0, r1, r5, lsl #5
 8013f70:	f8d0 38a4 	ldr.w	r3, [r0, #2212]	; 0x8a4

	  // push data into FIFO
	  if( !count ) {
 8013f74:	089d      	lsrs	r5, r3, #2
 8013f76:	d101      	bne.n	8013f7c <USBH_Handle+0x80>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8013f78:	7025      	strb	r5, [r4, #0]
 8013f7a:	e7e7      	b.n	8013f4c <USBH_Handle+0x50>
	  } else if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-rx_buffer_size) ) {
 8013f7c:	4a50      	ldr	r2, [pc, #320]	; (80140c0 <USBH_Handle+0x1c4>)
 8013f7e:	8811      	ldrh	r1, [r2, #0]
 8013f80:	b288      	uxth	r0, r1
 8013f82:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
 8013f86:	429d      	cmp	r5, r3
 8013f88:	d2e0      	bcs.n	8013f4c <USBH_Handle+0x50>
	    u32 *buf_addr = (u32 *)USB_rx_buffer;

	    // copy received packages into receive buffer
	    // this operation should be atomic
	    MIOS32_IRQ_Disable();
 8013f8a:	f7fe fe09 	bl	8012ba0 <MIOS32_IRQ_Disable>
 8013f8e:	4e4d      	ldr	r6, [pc, #308]	; (80140c4 <USBH_Handle+0x1c8>)
	    do {
	      mios32_midi_package_t package;
	      package.ALL = *buf_addr++;
 8013f90:	f856 4f04 	ldr.w	r4, [r6, #4]!

	      if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
 8013f94:	f3c4 1003 	ubfx	r0, r4, #4, #4
 8013f98:	3010      	adds	r0, #16
 8013f9a:	4621      	mov	r1, r4
 8013f9c:	f7fd fd6e 	bl	8011a7c <MIOS32_MIDI_SendPackageToRxCallback>
 8013fa0:	b988      	cbnz	r0, 8013fc6 <USBH_Handle+0xca>
		rx_buffer[rx_buffer_head] = package.ALL;
 8013fa2:	4b49      	ldr	r3, [pc, #292]	; (80140c8 <USBH_Handle+0x1cc>)
 8013fa4:	881a      	ldrh	r2, [r3, #0]
 8013fa6:	b291      	uxth	r1, r2
 8013fa8:	4a48      	ldr	r2, [pc, #288]	; (80140cc <USBH_Handle+0x1d0>)
 8013faa:	f842 4021 	str.w	r4, [r2, r1, lsl #2]

		if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8013fae:	8819      	ldrh	r1, [r3, #0]
 8013fb0:	1c4a      	adds	r2, r1, #1
 8013fb2:	b291      	uxth	r1, r2
 8013fb4:	293f      	cmp	r1, #63	; 0x3f
 8013fb6:	8019      	strh	r1, [r3, #0]
		  rx_buffer_head = 0;
 8013fb8:	bf88      	it	hi
 8013fba:	8018      	strhhi	r0, [r3, #0]
		++rx_buffer_size;
 8013fbc:	4840      	ldr	r0, [pc, #256]	; (80140c0 <USBH_Handle+0x1c4>)
 8013fbe:	8803      	ldrh	r3, [r0, #0]
 8013fc0:	1c5a      	adds	r2, r3, #1
 8013fc2:	b291      	uxth	r1, r2
 8013fc4:	8001      	strh	r1, [r0, #0]
	      }
	    } while( --count > 0 );
 8013fc6:	3d01      	subs	r5, #1
 8013fc8:	d1e2      	bne.n	8013f90 <USBH_Handle+0x94>
	    MIOS32_IRQ_Enable();
 8013fca:	f7fe fdfd 	bl	8012bc8 <MIOS32_IRQ_Enable>

	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8013fce:	4835      	ldr	r0, [pc, #212]	; (80140a4 <USBH_Handle+0x1a8>)
 8013fd0:	7005      	strb	r5, [r0, #0]
	    force_rx_req = 1;
 8013fd2:	2001      	movs	r0, #1
 8013fd4:	e011      	b.n	8013ffa <USBH_Handle+0xfe>
	  }
	} else if( URB_State == URB_STALL ) {
 8013fd6:	2804      	cmp	r0, #4
 8013fd8:	d109      	bne.n	8013fee <USBH_Handle+0xf2>
	  // Issue Clear Feature on IN endpoint
	  if( USBH_ClrFeature(pdev, pphost, USBH_BulkInEp, USBH_hc_num_in) == USBH_OK ) {
 8013fda:	4a3d      	ldr	r2, [pc, #244]	; (80140d0 <USBH_Handle+0x1d4>)
 8013fdc:	4628      	mov	r0, r5
 8013fde:	4639      	mov	r1, r7
 8013fe0:	7812      	ldrb	r2, [r2, #0]
 8013fe2:	7833      	ldrb	r3, [r6, #0]
 8013fe4:	f002 fb22 	bl	801662c <USBH_ClrFeature>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d1af      	bne.n	8013f4c <USBH_Handle+0x50>
 8013fec:	e004      	b.n	8013ff8 <USBH_Handle+0xfc>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_ERROR || URB_State == URB_NOTREADY ) {
 8013fee:	1e82      	subs	r2, r0, #2
 8013ff0:	b2d3      	uxtb	r3, r2
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	d8aa      	bhi.n	8013f4c <USBH_Handle+0x50>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8013ff6:	2000      	movs	r0, #0
 8013ff8:	7020      	strb	r0, [r4, #0]
	}
      }


      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
 8013ffa:	4a2a      	ldr	r2, [pc, #168]	; (80140a4 <USBH_Handle+0x1a8>)
 8013ffc:	7811      	ldrb	r1, [r2, #0]
 8013ffe:	2900      	cmp	r1, #0
 8014000:	d14c      	bne.n	801409c <USBH_Handle+0x1a0>
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
 8014002:	2800      	cmp	r0, #0
 8014004:	d13f      	bne.n	8014086 <USBH_Handle+0x18a>
 8014006:	4c33      	ldr	r4, [pc, #204]	; (80140d4 <USBH_Handle+0x1d8>)
 8014008:	8820      	ldrh	r0, [r4, #0]
 801400a:	b283      	uxth	r3, r0
 801400c:	2b00      	cmp	r3, #0
 801400e:	d03a      	beq.n	8014086 <USBH_Handle+0x18a>
 8014010:	4a23      	ldr	r2, [pc, #140]	; (80140a0 <USBH_Handle+0x1a4>)
 8014012:	7811      	ldrb	r1, [r2, #0]
 8014014:	2900      	cmp	r1, #0
 8014016:	d036      	beq.n	8014086 <USBH_Handle+0x18a>
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();
 8014018:	f7fe fdc2 	bl	8012ba0 <MIOS32_IRQ_Disable>

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 801401c:	482e      	ldr	r0, [pc, #184]	; (80140d8 <USBH_Handle+0x1dc>)
 801401e:	8821      	ldrh	r1, [r4, #0]
 8014020:	8802      	ldrh	r2, [r0, #0]
 8014022:	b28b      	uxth	r3, r1
 8014024:	0891      	lsrs	r1, r2, #2
 8014026:	428b      	cmp	r3, r1

	  // send to IN pipe
	  tx_buffer_size -= count;
 8014028:	4b2a      	ldr	r3, [pc, #168]	; (80140d4 <USBH_Handle+0x1d8>)
      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 801402a:	bf98      	it	ls
 801402c:	8821      	ldrhls	r1, [r4, #0]

	  // send to IN pipe
	  tx_buffer_size -= count;
 801402e:	8818      	ldrh	r0, [r3, #0]
      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 8014030:	b28a      	uxth	r2, r1

	  // send to IN pipe
	  tx_buffer_size -= count;
 8014032:	1a81      	subs	r1, r0, r2
 8014034:	b288      	uxth	r0, r1
 8014036:	8018      	strh	r0, [r3, #0]

	  u32 *buf_addr = (u32 *)USB_tx_buffer;
	  int i;
	  for(i=0; i<count; ++i) {
 8014038:	2300      	movs	r3, #0
 801403a:	b211      	sxth	r1, r2
 801403c:	428b      	cmp	r3, r1
 801403e:	da12      	bge.n	8014066 <USBH_Handle+0x16a>
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
 8014040:	4926      	ldr	r1, [pc, #152]	; (80140dc <USBH_Handle+0x1e0>)
 8014042:	4827      	ldr	r0, [pc, #156]	; (80140e0 <USBH_Handle+0x1e4>)
 8014044:	880c      	ldrh	r4, [r1, #0]
 8014046:	b2a4      	uxth	r4, r4
 8014048:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 801404c:	481a      	ldr	r0, [pc, #104]	; (80140b8 <USBH_Handle+0x1bc>)
 801404e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8014052:	8808      	ldrh	r0, [r1, #0]
 8014054:	3001      	adds	r0, #1
 8014056:	b280      	uxth	r0, r0
 8014058:	283f      	cmp	r0, #63	; 0x3f
 801405a:	8008      	strh	r0, [r1, #0]
 801405c:	d901      	bls.n	8014062 <USBH_Handle+0x166>
	      tx_buffer_tail = 0;
 801405e:	2000      	movs	r0, #0
 8014060:	8008      	strh	r0, [r1, #0]
	  // send to IN pipe
	  tx_buffer_size -= count;

	  u32 *buf_addr = (u32 *)USB_tx_buffer;
	  int i;
	  for(i=0; i<count; ++i) {
 8014062:	3301      	adds	r3, #1
 8014064:	e7e9      	b.n	801403a <USBH_Handle+0x13e>
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	      tx_buffer_tail = 0;
	  }
	  
	  USBH_tx_count = count * 4;
 8014066:	0092      	lsls	r2, r2, #2
 8014068:	4b11      	ldr	r3, [pc, #68]	; (80140b0 <USBH_Handle+0x1b4>)
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 801406a:	4913      	ldr	r1, [pc, #76]	; (80140b8 <USBH_Handle+0x1bc>)
 801406c:	4811      	ldr	r0, [pc, #68]	; (80140b4 <USBH_Handle+0x1b8>)
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	      tx_buffer_tail = 0;
	  }
	  
	  USBH_tx_count = count * 4;
 801406e:	b2d2      	uxtb	r2, r2
 8014070:	701a      	strb	r2, [r3, #0]
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 8014072:	4b0d      	ldr	r3, [pc, #52]	; (80140a8 <USBH_Handle+0x1ac>)
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	f002 f903 	bl	8016280 <USBH_BulkSendData>

	  USBH_MIDI_transfer_state = USBH_MIDI_TX;
 801407a:	490a      	ldr	r1, [pc, #40]	; (80140a4 <USBH_Handle+0x1a8>)
 801407c:	2002      	movs	r0, #2
 801407e:	7008      	strb	r0, [r1, #0]

	  MIOS32_IRQ_Enable();
 8014080:	f7fe fda2 	bl	8012bc8 <MIOS32_IRQ_Enable>
 8014084:	e00a      	b.n	801409c <USBH_Handle+0x1a0>
	} else {
	  // request data from device
	  USBH_BulkReceiveData(&USB_OTG_dev, (u8 *)USB_rx_buffer, USBH_BulkInEpSize, USBH_hc_num_in);
 8014086:	4b17      	ldr	r3, [pc, #92]	; (80140e4 <USBH_Handle+0x1e8>)
 8014088:	480a      	ldr	r0, [pc, #40]	; (80140b4 <USBH_Handle+0x1b8>)
 801408a:	781a      	ldrb	r2, [r3, #0]
 801408c:	4b0b      	ldr	r3, [pc, #44]	; (80140bc <USBH_Handle+0x1c0>)
 801408e:	4916      	ldr	r1, [pc, #88]	; (80140e8 <USBH_Handle+0x1ec>)
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	f002 f90f 	bl	80162b4 <USBH_BulkReceiveData>
	  USBH_MIDI_transfer_state = USBH_MIDI_RX;
 8014096:	4a03      	ldr	r2, [pc, #12]	; (80140a4 <USBH_Handle+0x1a8>)
 8014098:	2001      	movs	r0, #1
 801409a:	7010      	strb	r0, [r2, #0]
      }
    }
  }

  return USBH_OK;
}
 801409c:	2000      	movs	r0, #0
 801409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a0:	20000459 	.word	0x20000459
 80140a4:	2000045c 	.word	0x2000045c
 80140a8:	2000045d 	.word	0x2000045d
 80140ac:	20000304 	.word	0x20000304
 80140b0:	20000452 	.word	0x20000452
 80140b4:	20010e28 	.word	0x20010e28
 80140b8:	20000308 	.word	0x20000308
 80140bc:	20000458 	.word	0x20000458
 80140c0:	20000302 	.word	0x20000302
 80140c4:	20010de4 	.word	0x20010de4
 80140c8:	20000450 	.word	0x20000450
 80140cc:	2000034c 	.word	0x2000034c
 80140d0:	20000305 	.word	0x20000305
 80140d4:	20000454 	.word	0x20000454
 80140d8:	2000045a 	.word	0x2000045a
 80140dc:	20000456 	.word	0x20000456
 80140e0:	20000200 	.word	0x20000200
 80140e4:	20000453 	.word	0x20000453
 80140e8:	20010de8 	.word	0x20010de8

080140ec <MIOS32_USB_MIDI_Init>:
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  return 0; // no error
}
 80140ec:	2800      	cmp	r0, #0
 80140ee:	bf14      	ite	ne
 80140f0:	f04f 30ff 	movne.w	r0, #4294967295
 80140f4:	2000      	moveq	r0, #0
 80140f6:	4770      	bx	lr

080140f8 <MIOS32_USB_MIDI_ChangeConnectionState>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 80140f8:	490e      	ldr	r1, [pc, #56]	; (8014134 <MIOS32_USB_MIDI_ChangeConnectionState+0x3c>)
 80140fa:	2300      	movs	r3, #0
//! \param[in] connected status (1 if connected)
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
 80140fc:	b510      	push	{r4, lr}
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 80140fe:	800b      	strh	r3, [r1, #0]
 8014100:	4c0d      	ldr	r4, [pc, #52]	; (8014138 <MIOS32_USB_MIDI_ChangeConnectionState+0x40>)
 8014102:	490e      	ldr	r1, [pc, #56]	; (801413c <MIOS32_USB_MIDI_ChangeConnectionState+0x44>)
 8014104:	8023      	strh	r3, [r4, #0]
 8014106:	800b      	strh	r3, [r1, #0]
  rx_buffer_new_data = 0; // no data received yet
 8014108:	4c0d      	ldr	r4, [pc, #52]	; (8014140 <MIOS32_USB_MIDI_ChangeConnectionState+0x48>)
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 801410a:	490e      	ldr	r1, [pc, #56]	; (8014144 <MIOS32_USB_MIDI_ChangeConnectionState+0x4c>)
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
  rx_buffer_new_data = 0; // no data received yet
 801410c:	7023      	strb	r3, [r4, #0]
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 801410e:	800b      	strh	r3, [r1, #0]
 8014110:	4c0d      	ldr	r4, [pc, #52]	; (8014148 <MIOS32_USB_MIDI_ChangeConnectionState+0x50>)
 8014112:	490e      	ldr	r1, [pc, #56]	; (801414c <MIOS32_USB_MIDI_ChangeConnectionState+0x54>)
 8014114:	8023      	strh	r3, [r4, #0]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 8014116:	461a      	mov	r2, r3
  rx_buffer_new_data = 0; // no data received yet
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 8014118:	800b      	strh	r3, [r1, #0]
 801411a:	4c0d      	ldr	r4, [pc, #52]	; (8014150 <MIOS32_USB_MIDI_ChangeConnectionState+0x58>)
 801411c:	4b0d      	ldr	r3, [pc, #52]	; (8014154 <MIOS32_USB_MIDI_ChangeConnectionState+0x5c>)
 801411e:	2101      	movs	r1, #1

  if( connected ) {
 8014120:	b120      	cbz	r0, 801412c <MIOS32_USB_MIDI_ChangeConnectionState+0x34>
    transfer_possible = 1;
    tx_buffer_busy = 0; // buffer not busy anymore

#ifndef MIOS32_DONT_USE_USB_HOST
    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8014122:	480d      	ldr	r0, [pc, #52]	; (8014158 <MIOS32_USB_MIDI_ChangeConnectionState+0x60>)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
  rx_buffer_new_data = 0; // no data received yet
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;

  if( connected ) {
    transfer_possible = 1;
 8014124:	7021      	strb	r1, [r4, #0]
    tx_buffer_busy = 0; // buffer not busy anymore
 8014126:	701a      	strb	r2, [r3, #0]

#ifndef MIOS32_DONT_USE_USB_HOST
    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8014128:	7002      	strb	r2, [r0, #0]
 801412a:	e001      	b.n	8014130 <MIOS32_USB_MIDI_ChangeConnectionState+0x38>
#endif
  } else {
    // cable disconnected: disable transfers
    transfer_possible = 0;
 801412c:	7022      	strb	r2, [r4, #0]
    tx_buffer_busy = 1; // buffer busy
 801412e:	7019      	strb	r1, [r3, #0]
  }

  return 0; // no error
}
 8014130:	2000      	movs	r0, #0
 8014132:	bd10      	pop	{r4, pc}
 8014134:	20000302 	.word	0x20000302
 8014138:	20000450 	.word	0x20000450
 801413c:	20000300 	.word	0x20000300
 8014140:	2000044e 	.word	0x2000044e
 8014144:	20000454 	.word	0x20000454
 8014148:	2000044c 	.word	0x2000044c
 801414c:	20000456 	.word	0x20000456
 8014150:	20000459 	.word	0x20000459
 8014154:	2000034a 	.word	0x2000034a
 8014158:	2000045c 	.word	0x2000045c

0801415c <MIOS32_USB_MIDI_CheckAvailable>:
//! \return 1: interface available
//! \return 0: interface not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
 801415c:	b510      	push	{r4, lr}
 801415e:	4604      	mov	r4, r0
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  if( MIOS32_USB_ForceSingleUSB() && cable >= 1 )
 8014160:	f7ff fd66 	bl	8013c30 <MIOS32_USB_ForceSingleUSB>
 8014164:	b92c      	cbnz	r4, 8014172 <MIOS32_USB_MIDI_CheckAvailable+0x16>
#endif

  if( cable >= MIOS32_USB_MIDI_NUM_PORTS )
    return 0;

  return transfer_possible ? 1 : 0;
 8014166:	4b04      	ldr	r3, [pc, #16]	; (8014178 <MIOS32_USB_MIDI_CheckAvailable+0x1c>)
 8014168:	7818      	ldrb	r0, [r3, #0]
 801416a:	3000      	adds	r0, #0
 801416c:	bf18      	it	ne
 801416e:	2001      	movne	r0, #1
 8014170:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  if( MIOS32_USB_ForceSingleUSB() && cable >= 1 )
    return 0;
 8014172:	2000      	movs	r0, #0

  if( cable >= MIOS32_USB_MIDI_NUM_PORTS )
    return 0;

  return transfer_possible ? 1 : 0;
}
 8014174:	bd10      	pop	{r4, pc}
 8014176:	bf00      	nop
 8014178:	20000459 	.word	0x20000459

0801417c <USBH_InterfaceInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB MIDI driver intialization
 */
static USBH_Status USBH_InterfaceInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 801417c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801417e:	460c      	mov	r4, r1
 8014180:	4605      	mov	r5, r0
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);
 8014182:	2000      	movs	r0, #0
 8014184:	f7ff ffb8 	bl	80140f8 <MIOS32_USB_MIDI_ChangeConnectionState>

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8014188:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801418c:	2b00      	cmp	r3, #0
 801418e:	d060      	beq.n	8014252 <USBH_InterfaceInit+0xd6>
    //MIOS32_MIDI_DebugPortSet(UART0);
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 8014190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014194:	2a01      	cmp	r2, #1
 8014196:	d103      	bne.n	80141a0 <USBH_InterfaceInit+0x24>
 8014198:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801419c:	2803      	cmp	r0, #3
 801419e:	d00a      	beq.n	80141b6 <USBH_InterfaceInit+0x3a>
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 80141a0:	2b01      	cmp	r3, #1
 80141a2:	dd56      	ble.n	8014252 <USBH_InterfaceInit+0xd6>
    //MIOS32_MIDI_DebugPortSet(UART0);
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 80141a4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	d152      	bne.n	8014252 <USBH_InterfaceInit+0xd6>
 80141ac:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80141b0:	2903      	cmp	r1, #3
 80141b2:	d14e      	bne.n	8014252 <USBH_InterfaceInit+0xd6>
 80141b4:	e000      	b.n	80141b8 <USBH_InterfaceInit+0x3c>
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 80141b6:	2300      	movs	r3, #0
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
	(pphost->device_prop.Itf_Desc[i].bInterfaceSubClass == 3) ) {

      if( pphost->device_prop.Ep_Desc[i][0].bEndpointAddress & 0x80 ) {
 80141b8:	1d5e      	adds	r6, r3, #5
 80141ba:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 80141be:	78ba      	ldrb	r2, [r7, #2]
 80141c0:	88b9      	ldrh	r1, [r7, #4]
 80141c2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80141c6:	d004      	beq.n	80141d2 <USBH_InterfaceInit+0x56>
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 80141c8:	4f27      	ldr	r7, [pc, #156]	; (8014268 <USBH_InterfaceInit+0xec>)
 80141ca:	703a      	strb	r2, [r7, #0]
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
 80141cc:	4a27      	ldr	r2, [pc, #156]	; (801426c <USBH_InterfaceInit+0xf0>)
 80141ce:	7011      	strb	r1, [r2, #0]
 80141d0:	e003      	b.n	80141da <USBH_InterfaceInit+0x5e>
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 80141d2:	4827      	ldr	r0, [pc, #156]	; (8014270 <USBH_InterfaceInit+0xf4>)
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
 80141d4:	4e27      	ldr	r6, [pc, #156]	; (8014274 <USBH_InterfaceInit+0xf8>)

      if( pphost->device_prop.Ep_Desc[i][0].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 80141d6:	7002      	strb	r2, [r0, #0]
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
 80141d8:	8031      	strh	r1, [r6, #0]
      }

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
 80141da:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80141de:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80141e2:	f893 605a 	ldrb.w	r6, [r3, #90]	; 0x5a
 80141e6:	4f22      	ldr	r7, [pc, #136]	; (8014270 <USBH_InterfaceInit+0xf4>)
 80141e8:	888a      	ldrh	r2, [r1, #4]
 80141ea:	f016 0f80 	tst.w	r6, #128	; 0x80
 80141ee:	d004      	beq.n	80141fa <USBH_InterfaceInit+0x7e>
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 80141f0:	4b1d      	ldr	r3, [pc, #116]	; (8014268 <USBH_InterfaceInit+0xec>)
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 80141f2:	491e      	ldr	r1, [pc, #120]	; (801426c <USBH_InterfaceInit+0xf0>)
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
      }

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 80141f4:	701e      	strb	r6, [r3, #0]
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 80141f6:	700a      	strb	r2, [r1, #0]
 80141f8:	e002      	b.n	8014200 <USBH_InterfaceInit+0x84>
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 80141fa:	481e      	ldr	r0, [pc, #120]	; (8014274 <USBH_InterfaceInit+0xf8>)

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 80141fc:	703e      	strb	r6, [r7, #0]
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 80141fe:	8002      	strh	r2, [r0, #0]
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8014200:	7839      	ldrb	r1, [r7, #0]
 8014202:	4e1d      	ldr	r6, [pc, #116]	; (8014278 <USBH_InterfaceInit+0xfc>)
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8014204:	4f18      	ldr	r7, [pc, #96]	; (8014268 <USBH_InterfaceInit+0xec>)
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8014206:	4628      	mov	r0, r5
 8014208:	f001 ff95 	bl	8016136 <USBH_Alloc_Channel>
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 801420c:	7839      	ldrb	r1, [r7, #0]
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 801420e:	7030      	strb	r0, [r6, #0]
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8014210:	4628      	mov	r0, r5
 8014212:	f001 ff90 	bl	8016136 <USBH_Alloc_Channel>
 8014216:	4f19      	ldr	r7, [pc, #100]	; (801427c <USBH_InterfaceInit+0x100>)

      /* Open the new channels */
      USBH_Open_Channel(pdev,
 8014218:	7831      	ldrb	r1, [r6, #0]
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 801421a:	7038      	strb	r0, [r7, #0]

      /* Open the new channels */
      USBH_Open_Channel(pdev,
 801421c:	2602      	movs	r6, #2
 801421e:	4815      	ldr	r0, [pc, #84]	; (8014274 <USBH_InterfaceInit+0xf8>)
 8014220:	9600      	str	r6, [sp, #0]
 8014222:	8800      	ldrh	r0, [r0, #0]
 8014224:	f894 2020 	ldrb.w	r2, [r4, #32]
 8014228:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801422c:	9001      	str	r0, [sp, #4]
 801422e:	4628      	mov	r0, r5
 8014230:	f001 ff3a 	bl	80160a8 <USBH_Open_Channel>
			pphost->device_prop.address,
			pphost->device_prop.speed,
			EP_TYPE_BULK,
			USBH_BulkOutEpSize);

      USBH_Open_Channel(pdev,
 8014234:	480d      	ldr	r0, [pc, #52]	; (801426c <USBH_InterfaceInit+0xf0>)
 8014236:	7839      	ldrb	r1, [r7, #0]
 8014238:	9600      	str	r6, [sp, #0]
 801423a:	7800      	ldrb	r0, [r0, #0]
 801423c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8014240:	9001      	str	r0, [sp, #4]
 8014242:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8014246:	4628      	mov	r0, r5
 8014248:	f001 ff2e 	bl	80160a8 <USBH_Open_Channel>
			pphost->device_prop.address,
			pphost->device_prop.speed,
			EP_TYPE_BULK,
			USBH_BulkInEpSize);

      MIOS32_USB_MIDI_ChangeConnectionState(1);
 801424c:	2001      	movs	r0, #1
 801424e:	f7ff ff53 	bl	80140f8 <MIOS32_USB_MIDI_ChangeConnectionState>
      break;
    }
  }

  if( MIOS32_USB_MIDI_CheckAvailable(0) ) {
 8014252:	2000      	movs	r0, #0
 8014254:	f7ff ff82 	bl	801415c <MIOS32_USB_MIDI_CheckAvailable>
 8014258:	b118      	cbz	r0, 8014262 <USBH_InterfaceInit+0xe6>
    pphost->usr_cb->DeviceNotSupported();
 801425a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801425e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8014260:	4798      	blx	r3
  }
	
  return USBH_OK;

}
 8014262:	2000      	movs	r0, #0
 8014264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014266:	bf00      	nop
 8014268:	20000305 	.word	0x20000305
 801426c:	20000453 	.word	0x20000453
 8014270:	20000304 	.word	0x20000304
 8014274:	2000045a 	.word	0x2000045a
 8014278:	2000045d 	.word	0x2000045d
 801427c:	20000458 	.word	0x20000458

08014280 <MIOS32_USB_MIDI_PackageSend_NonBlocking>:
//! \return -2: buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend_NonBlocking(mios32_midi_package_t package)
{
 8014280:	b538      	push	{r3, r4, r5, lr}
  // device available?
  if( !transfer_possible )
 8014282:	4c17      	ldr	r4, [pc, #92]	; (80142e0 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x60>)
 8014284:	7823      	ldrb	r3, [r4, #0]
//! \return -2: buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend_NonBlocking(mios32_midi_package_t package)
{
 8014286:	4605      	mov	r5, r0
  // device available?
  if( !transfer_possible )
 8014288:	b913      	cbnz	r3, 8014290 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x10>
    return -1;
 801428a:	f04f 30ff 	mov.w	r0, #4294967295
 801428e:	bd38      	pop	{r3, r4, r5, pc}

  // buffer full?
  if( tx_buffer_size >= (MIOS32_USB_MIDI_TX_BUFFER_SIZE-1) ) {
 8014290:	4814      	ldr	r0, [pc, #80]	; (80142e4 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x64>)
 8014292:	8801      	ldrh	r1, [r0, #0]
 8014294:	b28a      	uxth	r2, r1
 8014296:	2a3e      	cmp	r2, #62	; 0x3e
 8014298:	d907      	bls.n	80142aa <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x2a>
    // call USB handler, so that we are able to get the buffer free again on next execution
    // (this call simplifies polling loops!)
    MIOS32_USB_MIDI_TxBufferHandler();
 801429a:	f7ff fdd9 	bl	8013e50 <MIOS32_USB_MIDI_TxBufferHandler>

    // device still available?
    // (ensures that polling loop terminates if cable has been disconnected)
    if( !transfer_possible )
 801429e:	7823      	ldrb	r3, [r4, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d0f2      	beq.n	801428a <MIOS32_USB_MIDI_PackageSend_NonBlocking+0xa>
      return -1;

    // notify that buffer was full (request retry)
    return -2;
 80142a4:	f06f 0001 	mvn.w	r0, #1
 80142a8:	bd38      	pop	{r3, r4, r5, pc}
  }

  // put package into buffer - this operation should be atomic!
  MIOS32_IRQ_Disable();
 80142aa:	f7fe fc79 	bl	8012ba0 <MIOS32_IRQ_Disable>
  tx_buffer[tx_buffer_head++] = package.ALL;
 80142ae:	4b0e      	ldr	r3, [pc, #56]	; (80142e8 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x68>)
 80142b0:	490e      	ldr	r1, [pc, #56]	; (80142ec <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x6c>)
 80142b2:	8818      	ldrh	r0, [r3, #0]
 80142b4:	b282      	uxth	r2, r0
 80142b6:	1c50      	adds	r0, r2, #1
 80142b8:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 80142bc:	b282      	uxth	r2, r0
 80142be:	801a      	strh	r2, [r3, #0]
  if( tx_buffer_head >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 80142c0:	8819      	ldrh	r1, [r3, #0]
 80142c2:	b288      	uxth	r0, r1
 80142c4:	283f      	cmp	r0, #63	; 0x3f
 80142c6:	d901      	bls.n	80142cc <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x4c>
    tx_buffer_head = 0;
 80142c8:	2200      	movs	r2, #0
 80142ca:	801a      	strh	r2, [r3, #0]
  ++tx_buffer_size;
 80142cc:	4b05      	ldr	r3, [pc, #20]	; (80142e4 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x64>)
 80142ce:	8819      	ldrh	r1, [r3, #0]
 80142d0:	1c48      	adds	r0, r1, #1
 80142d2:	b282      	uxth	r2, r0
 80142d4:	801a      	strh	r2, [r3, #0]
  MIOS32_IRQ_Enable();
 80142d6:	f7fe fc77 	bl	8012bc8 <MIOS32_IRQ_Enable>

  return 0;
 80142da:	2000      	movs	r0, #0
}
 80142dc:	bd38      	pop	{r3, r4, r5, pc}
 80142de:	bf00      	nop
 80142e0:	20000459 	.word	0x20000459
 80142e4:	20000454 	.word	0x20000454
 80142e8:	2000044c 	.word	0x2000044c
 80142ec:	20000200 	.word	0x20000200

080142f0 <MIOS32_USB_MIDI_PackageSend>:
//! \return 0: no error
//! \return -1: USB not connected
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend(mios32_midi_package_t package)
{
 80142f0:	b510      	push	{r4, lr}
 80142f2:	4604      	mov	r4, r0
  // was successfull (MIDI port will be used by host), timeout value is
  // reset again

  s32 error;

  while( (error=MIOS32_USB_MIDI_PackageSend_NonBlocking(package)) == -2 ) {
 80142f4:	4620      	mov	r0, r4
 80142f6:	f7ff ffc3 	bl	8014280 <MIOS32_USB_MIDI_PackageSend_NonBlocking>
 80142fa:	1c83      	adds	r3, r0, #2
 80142fc:	d108      	bne.n	8014310 <MIOS32_USB_MIDI_PackageSend+0x20>
    if( timeout_ctr >= 10000 )
 80142fe:	4b07      	ldr	r3, [pc, #28]	; (801431c <MIOS32_USB_MIDI_PackageSend+0x2c>)
 8014300:	881a      	ldrh	r2, [r3, #0]
 8014302:	f242 710f 	movw	r1, #9999	; 0x270f
 8014306:	428a      	cmp	r2, r1
 8014308:	d807      	bhi.n	801431a <MIOS32_USB_MIDI_PackageSend+0x2a>
      break;
    ++timeout_ctr;
 801430a:	1c50      	adds	r0, r2, #1
 801430c:	8018      	strh	r0, [r3, #0]
 801430e:	e7f1      	b.n	80142f4 <MIOS32_USB_MIDI_PackageSend+0x4>
  }

  if( error >= 0 ) // no error: reset timeout counter
 8014310:	2800      	cmp	r0, #0
 8014312:	db02      	blt.n	801431a <MIOS32_USB_MIDI_PackageSend+0x2a>
    timeout_ctr = 0;
 8014314:	4b01      	ldr	r3, [pc, #4]	; (801431c <MIOS32_USB_MIDI_PackageSend+0x2c>)
 8014316:	2200      	movs	r2, #0
 8014318:	801a      	strh	r2, [r3, #0]

  return error;
}
 801431a:	bd10      	pop	{r4, pc}
 801431c:	20000348 	.word	0x20000348

08014320 <MIOS32_USB_MIDI_PackageReceive>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
  // package received?
  if( !rx_buffer_size )
 8014320:	4b11      	ldr	r3, [pc, #68]	; (8014368 <MIOS32_USB_MIDI_PackageReceive+0x48>)
//! \return -1 if no package in buffer
//! \return >= 0: number of packages which are still in the buffer
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
 8014322:	b510      	push	{r4, lr}
 8014324:	4604      	mov	r4, r0
  // package received?
  if( !rx_buffer_size )
 8014326:	8818      	ldrh	r0, [r3, #0]
 8014328:	b281      	uxth	r1, r0
 801432a:	b1d1      	cbz	r1, 8014362 <MIOS32_USB_MIDI_PackageReceive+0x42>
    return -1;

  // get package - this operation should be atomic!
  MIOS32_IRQ_Disable();
 801432c:	f7fe fc38 	bl	8012ba0 <MIOS32_IRQ_Disable>
  package->ALL = rx_buffer[rx_buffer_tail];
 8014330:	4b0e      	ldr	r3, [pc, #56]	; (801436c <MIOS32_USB_MIDI_PackageReceive+0x4c>)
 8014332:	490f      	ldr	r1, [pc, #60]	; (8014370 <MIOS32_USB_MIDI_PackageReceive+0x50>)
 8014334:	881a      	ldrh	r2, [r3, #0]
 8014336:	b290      	uxth	r0, r2
 8014338:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 801433c:	6022      	str	r2, [r4, #0]
  if( ++rx_buffer_tail >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 801433e:	881c      	ldrh	r4, [r3, #0]
 8014340:	1c60      	adds	r0, r4, #1
 8014342:	b281      	uxth	r1, r0
 8014344:	293f      	cmp	r1, #63	; 0x3f
 8014346:	8019      	strh	r1, [r3, #0]
 8014348:	d901      	bls.n	801434e <MIOS32_USB_MIDI_PackageReceive+0x2e>
    rx_buffer_tail = 0;
 801434a:	2200      	movs	r2, #0
 801434c:	801a      	strh	r2, [r3, #0]
  --rx_buffer_size;
 801434e:	4c06      	ldr	r4, [pc, #24]	; (8014368 <MIOS32_USB_MIDI_PackageReceive+0x48>)
 8014350:	8823      	ldrh	r3, [r4, #0]
 8014352:	1e58      	subs	r0, r3, #1
 8014354:	b281      	uxth	r1, r0
 8014356:	8021      	strh	r1, [r4, #0]
  MIOS32_IRQ_Enable();
 8014358:	f7fe fc36 	bl	8012bc8 <MIOS32_IRQ_Enable>

  return rx_buffer_size;
 801435c:	8822      	ldrh	r2, [r4, #0]
 801435e:	b290      	uxth	r0, r2
 8014360:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
  // package received?
  if( !rx_buffer_size )
    return -1;
 8014362:	f04f 30ff 	mov.w	r0, #4294967295
    rx_buffer_tail = 0;
  --rx_buffer_size;
  MIOS32_IRQ_Enable();

  return rx_buffer_size;
}
 8014366:	bd10      	pop	{r4, pc}
 8014368:	20000302 	.word	0x20000302
 801436c:	20000300 	.word	0x20000300
 8014370:	2000034c 	.word	0x2000034c

08014374 <MIOS32_USB_MIDI_Periodic_mS>:
//! model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_Periodic_mS(void)
{
 8014374:	b508      	push	{r3, lr}
  if( USB_OTG_IsHostMode(&USB_OTG_dev) ) {
 8014376:	4807      	ldr	r0, [pc, #28]	; (8014394 <MIOS32_USB_MIDI_Periodic_mS+0x20>)
 8014378:	f002 fad6 	bl	8016928 <USB_OTG_IsHostMode>
 801437c:	b120      	cbz	r0, 8014388 <MIOS32_USB_MIDI_Periodic_mS+0x14>
#ifndef MIOS32_DONT_USE_USB_HOST
    // process the USB host events
    USBH_Process(&USB_OTG_dev, &USB_Host);
 801437e:	4805      	ldr	r0, [pc, #20]	; (8014394 <MIOS32_USB_MIDI_Periodic_mS+0x20>)
 8014380:	4905      	ldr	r1, [pc, #20]	; (8014398 <MIOS32_USB_MIDI_Periodic_mS+0x24>)
 8014382:	f001 fcef 	bl	8015d64 <USBH_Process>
 8014386:	e003      	b.n	8014390 <MIOS32_USB_MIDI_Periodic_mS+0x1c>
#endif
  } else {
    // check for received packages
    MIOS32_USB_MIDI_RxBufferHandler();
 8014388:	f7ff fd0c 	bl	8013da4 <MIOS32_USB_MIDI_RxBufferHandler>

    // check for packages which should be transmitted
    MIOS32_USB_MIDI_TxBufferHandler();
 801438c:	f7ff fd60 	bl	8013e50 <MIOS32_USB_MIDI_TxBufferHandler>
  }

  return 0;
}
 8014390:	2000      	movs	r0, #0
 8014392:	bd08      	pop	{r3, pc}
 8014394:	20010e28 	.word	0x20010e28
 8014398:	200118bc 	.word	0x200118bc

0801439c <MIOS32_USB_MIDI_EP1_IN_Callback>:
//! \note also: bEP, bEPStatus only relevant for LPC17xx port
/////////////////////////////////////////////////////////////////////////////
void MIOS32_USB_MIDI_EP1_IN_Callback(u8 bEP, u8 bEPStatus)
{
  // package has been sent
  tx_buffer_busy = 0;
 801439c:	4b02      	ldr	r3, [pc, #8]	; (80143a8 <MIOS32_USB_MIDI_EP1_IN_Callback+0xc>)
 801439e:	2200      	movs	r2, #0
 80143a0:	701a      	strb	r2, [r3, #0]

  // check for next package
  MIOS32_USB_MIDI_TxBufferHandler();
 80143a2:	f7ff bd55 	b.w	8013e50 <MIOS32_USB_MIDI_TxBufferHandler>
 80143a6:	bf00      	nop
 80143a8:	2000034a 	.word	0x2000034a

080143ac <MIOS32_USB_MIDI_EP2_OUT_Callback>:
//! \note also: bEP, bEPStatus only relevant for LPC17xx port
/////////////////////////////////////////////////////////////////////////////
void MIOS32_USB_MIDI_EP2_OUT_Callback(u8 bEP, u8 bEPStatus)
{
  // put package into buffer
  rx_buffer_new_data = 1;
 80143ac:	4b02      	ldr	r3, [pc, #8]	; (80143b8 <MIOS32_USB_MIDI_EP2_OUT_Callback+0xc>)
 80143ae:	2201      	movs	r2, #1
 80143b0:	701a      	strb	r2, [r3, #0]
  MIOS32_USB_MIDI_RxBufferHandler();
 80143b2:	f7ff bcf7 	b.w	8013da4 <MIOS32_USB_MIDI_RxBufferHandler>
 80143b6:	bf00      	nop
 80143b8:	2000044e 	.word	0x2000044e

080143bc <MIOS32_UART_BaudrateSet>:
//! \return 0: baudrate has been changed
//! \return -1: uart not available
//! \return -2: function not prepared for this UART
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_BaudrateSet(u8 uart, u32 baudrate)
{
 80143bc:	b530      	push	{r4, r5, lr}
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80143be:	2801      	cmp	r0, #1
//! \return 0: baudrate has been changed
//! \return -1: uart not available
//! \return -2: function not prepared for this UART
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_BaudrateSet(u8 uart, u32 baudrate)
{
 80143c0:	b085      	sub	sp, #20
 80143c2:	4604      	mov	r4, r0
 80143c4:	460d      	mov	r5, r1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80143c6:	d81b      	bhi.n	8014400 <MIOS32_UART_BaudrateSet+0x44>
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80143c8:	f04f 010c 	mov.w	r1, #12

  USART_InitStructure.USART_BaudRate = baudrate;
 80143cc:	aa04      	add	r2, sp, #16
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;

  // USART configuration
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80143ce:	f04f 0300 	mov.w	r3, #0
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  USART_InitStructure.USART_BaudRate = baudrate;

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
 80143d2:	bf14      	ite	ne
 80143d4:	480c      	ldrne	r0, [pc, #48]	; (8014408 <MIOS32_UART_BaudrateSet+0x4c>)
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 80143d6:	480d      	ldreq	r0, [pc, #52]	; (801440c <MIOS32_UART_BaudrateSet+0x50>)
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80143d8:	f8ad 100a 	strh.w	r1, [sp, #10]
  USART_InitStructure.USART_BaudRate = baudrate;

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 80143dc:	4669      	mov	r1, sp
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;

  // USART configuration
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80143de:	f8ad 3004 	strh.w	r3, [sp, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80143e2:	f8ad 3006 	strh.w	r3, [sp, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 80143e6:	f8ad 3008 	strh.w	r3, [sp, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80143ea:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  USART_InitStructure.USART_BaudRate = baudrate;
 80143ee:	f842 5d10 	str.w	r5, [r2, #-16]!

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 80143f2:	f000 ff73 	bl	80152dc <USART_Init>
  default:
    return -2; // not prepared
  }

  // store baudrate in array
  uart_baudrate[uart] = baudrate;
 80143f6:	4806      	ldr	r0, [pc, #24]	; (8014410 <MIOS32_UART_BaudrateSet+0x54>)
 80143f8:	f840 5024 	str.w	r5, [r0, r4, lsl #2]

  return 0;
 80143fc:	2000      	movs	r0, #0
 80143fe:	e001      	b.n	8014404 <MIOS32_UART_BaudrateSet+0x48>
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;
 8014400:	f04f 30ff 	mov.w	r0, #4294967295
  // store baudrate in array
  uart_baudrate[uart] = baudrate;

  return 0;
#endif
}
 8014404:	b005      	add	sp, #20
 8014406:	bd30      	pop	{r4, r5, pc}
 8014408:	40004400 	.word	0x40004400
 801440c:	40004800 	.word	0x40004800
 8014410:	20000568 	.word	0x20000568

08014414 <MIOS32_UART_Init>:
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_Init(u32 mode)
{
 8014414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;

  // currently only mode 0 supported
  if( mode != 0 )
 8014416:	4604      	mov	r4, r0
 8014418:	2800      	cmp	r0, #0
 801441a:	f040 8084 	bne.w	8014526 <MIOS32_UART_Init+0x112>
  return -1; // no UARTs
#else

  // map UART pins
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_UART0_REMAP_FUNC;
 801441e:	2102      	movs	r1, #2
 8014420:	2207      	movs	r2, #7
 8014422:	4842      	ldr	r0, [pc, #264]	; (801452c <MIOS32_UART_Init+0x118>)
 8014424:	f000 fcea 	bl	8014dfc <GPIO_PinAFConfig>
 8014428:	2103      	movs	r1, #3
 801442a:	2207      	movs	r2, #7
 801442c:	483f      	ldr	r0, [pc, #252]	; (801452c <MIOS32_UART_Init+0x118>)
 801442e:	f000 fce5 	bl	8014dfc <GPIO_PinAFConfig>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_UART1_REMAP_FUNC;
 8014432:	2108      	movs	r1, #8
 8014434:	2207      	movs	r2, #7
 8014436:	483e      	ldr	r0, [pc, #248]	; (8014530 <MIOS32_UART_Init+0x11c>)
 8014438:	f000 fce0 	bl	8014dfc <GPIO_PinAFConfig>
 801443c:	2207      	movs	r2, #7
 801443e:	2109      	movs	r1, #9
 8014440:	483b      	ldr	r0, [pc, #236]	; (8014530 <MIOS32_UART_Init+0x11c>)
 8014442:	f000 fcdb 	bl	8014dfc <GPIO_PinAFConfig>
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART2_ASSIGNMENT != 0
  MIOS32_UART3_REMAP_FUNC;
#endif

  // configure UART pins
  GPIO_StructInit(&GPIO_InitStructure);
 8014446:	4668      	mov	r0, sp
  // outputs as open-drain
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
#if MIOS32_UART0_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8014448:	2501      	movs	r5, #1
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART2_ASSIGNMENT != 0
  MIOS32_UART3_REMAP_FUNC;
#endif

  // configure UART pins
  GPIO_StructInit(&GPIO_InitStructure);
 801444a:	f000 fcca 	bl	8014de2 <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;

  // outputs as open-drain
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
 801444e:	2604      	movs	r6, #4
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8014450:	2702      	movs	r7, #2
#if MIOS32_UART0_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8014452:	4836      	ldr	r0, [pc, #216]	; (801452c <MIOS32_UART_Init+0x118>)
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;

  // outputs as open-drain
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
 8014454:	9600      	str	r6, [sp, #0]
#if MIOS32_UART0_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8014456:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;

  // outputs as open-drain
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8014458:	f88d 7004 	strb.w	r7, [sp, #4]
  MIOS32_UART3_REMAP_FUNC;
#endif

  // configure UART pins
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 801445c:	f88d 4005 	strb.w	r4, [sp, #5]
  // outputs as open-drain
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
#if MIOS32_UART0_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8014460:	f88d 5006 	strb.w	r5, [sp, #6]
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 8014464:	f000 fc70 	bl	8014d48 <GPIO_Init>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
 8014468:	f44f 7380 	mov.w	r3, #256	; 0x100
#if MIOS32_UART1_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 801446c:	4830      	ldr	r0, [pc, #192]	; (8014530 <MIOS32_UART_Init+0x11c>)
#endif
  GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
 801446e:	9300      	str	r3, [sp, #0]
#if MIOS32_UART1_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 8014470:	4669      	mov	r1, sp
  GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8014472:	f88d 7004 	strb.w	r7, [sp, #4]
#if MIOS32_UART1_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8014476:	f88d 5006 	strb.w	r5, [sp, #6]
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 801447a:	f000 fc65 	bl	8014d48 <GPIO_Init>

  // inputs with internal pull-up
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
 801447e:	2008      	movs	r0, #8
 8014480:	9000      	str	r0, [sp, #0]
  GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
 8014482:	4669      	mov	r1, sp
 8014484:	4829      	ldr	r0, [pc, #164]	; (801452c <MIOS32_UART_Init+0x118>)
#endif
  GPIO_Init(MIOS32_UART3_TX_PORT, &GPIO_InitStructure);
#endif

  // inputs with internal pull-up
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8014486:	f88d 7004 	strb.w	r7, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 801448a:	f88d 5007 	strb.w	r5, [sp, #7]
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
  GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
 801448e:	f000 fc5b 	bl	8014d48 <GPIO_Init>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
 8014492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014496:	9100      	str	r1, [sp, #0]
  GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);
 8014498:	4825      	ldr	r0, [pc, #148]	; (8014530 <MIOS32_UART_Init+0x11c>)
#endif

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
 801449a:	4f26      	ldr	r7, [pc, #152]	; (8014534 <MIOS32_UART_Init+0x120>)
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
  GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
  GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);
 801449c:	4669      	mov	r1, sp
 801449e:	f000 fc53 	bl	8014d48 <GPIO_Init>
  GPIO_Init(MIOS32_UART3_RX_PORT, &GPIO_InitStructure);
#endif

  // enable all USART clocks
  // TODO: more generic approach for different UART selections
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_USART6, ENABLE);
 80144a2:	2030      	movs	r0, #48	; 0x30
 80144a4:	4629      	mov	r1, r5
 80144a6:	f000 fd6f 	bl	8014f88 <RCC_APB2PeriphClockCmd>
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB1Periph_USART3 | RCC_APB1Periph_UART4 | RCC_APB1Periph_UART5, ENABLE);
 80144aa:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 80144ae:	4629      	mov	r1, r5
 80144b0:	f000 fd5e 	bl	8014f70 <RCC_APB1PeriphClockCmd>

  // USART configuration
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_UART_BaudrateSet(0, MIOS32_UART0_BAUDRATE);
 80144b4:	f647 2112 	movw	r1, #31250	; 0x7a12
 80144b8:	4620      	mov	r0, r4
 80144ba:	f7ff ff7f 	bl	80143bc <MIOS32_UART_BaudrateSet>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_UART_BaudrateSet(1, MIOS32_UART1_BAUDRATE);
 80144be:	f647 2112 	movw	r1, #31250	; 0x7a12
 80144c2:	4628      	mov	r0, r5
 80144c4:	f7ff ff7a 	bl	80143bc <MIOS32_UART_BaudrateSet>
  MIOS32_UART_BaudrateSet(3, MIOS32_UART3_BAUDRATE);
#endif

  // configure and enable UART interrupts
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART0_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 80144c8:	4631      	mov	r1, r6
 80144ca:	2026      	movs	r0, #38	; 0x26
 80144cc:	f7fe fb90 	bl	8012bf0 <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART0, USART_IT_RXNE, ENABLE);
 80144d0:	462a      	mov	r2, r5
 80144d2:	4819      	ldr	r0, [pc, #100]	; (8014538 <MIOS32_UART_Init+0x124>)
 80144d4:	f240 5125 	movw	r1, #1317	; 0x525
 80144d8:	f000 ff68 	bl	80153ac <USART_ITConfig>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART1_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 80144dc:	4631      	mov	r1, r6
 80144de:	2027      	movs	r0, #39	; 0x27
 80144e0:	f7fe fb86 	bl	8012bf0 <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART1, USART_IT_RXNE, ENABLE);
 80144e4:	4815      	ldr	r0, [pc, #84]	; (801453c <MIOS32_UART_Init+0x128>)
#endif

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
 80144e6:	4e16      	ldr	r6, [pc, #88]	; (8014540 <MIOS32_UART_Init+0x12c>)
  USART_ITConfig(MIOS32_UART0, USART_IT_RXNE, ENABLE);
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART1_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
  USART_ITConfig(MIOS32_UART1, USART_IT_RXNE, ENABLE);
 80144e8:	f240 5125 	movw	r1, #1317	; 0x525
 80144ec:	462a      	mov	r2, r5
 80144ee:	f000 ff5d 	bl	80153ac <USART_ITConfig>

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 80144f2:	4a14      	ldr	r2, [pc, #80]	; (8014544 <MIOS32_UART_Init+0x130>)
 80144f4:	4b14      	ldr	r3, [pc, #80]	; (8014548 <MIOS32_UART_Init+0x134>)
#endif

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
 80144f6:	4815      	ldr	r0, [pc, #84]	; (801454c <MIOS32_UART_Init+0x138>)
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 80144f8:	4915      	ldr	r1, [pc, #84]	; (8014550 <MIOS32_UART_Init+0x13c>)
#endif

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
 80144fa:	703c      	strb	r4, [r7, #0]
 80144fc:	7034      	strb	r4, [r6, #0]
 80144fe:	7004      	strb	r4, [r0, #0]
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 8014500:	700c      	strb	r4, [r1, #0]
 8014502:	7014      	strb	r4, [r2, #0]
 8014504:	701c      	strb	r4, [r3, #0]
#endif

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
 8014506:	707c      	strb	r4, [r7, #1]
 8014508:	7074      	strb	r4, [r6, #1]
 801450a:	7044      	strb	r4, [r0, #1]
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 801450c:	704c      	strb	r4, [r1, #1]
  }

  // enable UARTs
#if MIOS32_UART0_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART0, ENABLE);
 801450e:	480a      	ldr	r0, [pc, #40]	; (8014538 <MIOS32_UART_Init+0x124>)

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 8014510:	7054      	strb	r4, [r2, #1]
  }

  // enable UARTs
#if MIOS32_UART0_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART0, ENABLE);
 8014512:	4629      	mov	r1, r5

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 8014514:	705c      	strb	r4, [r3, #1]
  }

  // enable UARTs
#if MIOS32_UART0_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART0, ENABLE);
 8014516:	f000 ff3d 	bl	8015394 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART1, ENABLE);
 801451a:	4808      	ldr	r0, [pc, #32]	; (801453c <MIOS32_UART_Init+0x128>)
 801451c:	4629      	mov	r1, r5
 801451e:	f000 ff39 	bl	8015394 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART3_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART3, ENABLE);
#endif

  return 0; // no error
 8014522:	4620      	mov	r0, r4
 8014524:	e001      	b.n	801452a <MIOS32_UART_Init+0x116>
{
  GPIO_InitTypeDef GPIO_InitStructure;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8014526:	f04f 30ff 	mov.w	r0, #4294967295
  USART_Cmd(MIOS32_UART3, ENABLE);
#endif

  return 0; // no error
#endif
}
 801452a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801452c:	40020000 	.word	0x40020000
 8014530:	40020c00 	.word	0x40020c00
 8014534:	20000460 	.word	0x20000460
 8014538:	40004400 	.word	0x40004400
 801453c:	40004800 	.word	0x40004800
 8014540:	20000564 	.word	0x20000564
 8014544:	20000570 	.word	0x20000570
 8014548:	2000045e 	.word	0x2000045e
 801454c:	20000462 	.word	0x20000462
 8014550:	20000566 	.word	0x20000566

08014554 <MIOS32_UART_RxBufferGet>:
s32 MIOS32_UART_RxBufferGet(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014554:	2801      	cmp	r0, #1
//! \return -2 if no new byte available
//! \return >= 0: number of received bytes
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_RxBufferGet(u8 uart)
{
 8014556:	b538      	push	{r3, r4, r5, lr}
 8014558:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801455a:	d81b      	bhi.n	8014594 <MIOS32_UART_RxBufferGet+0x40>
    return -1; // UART not available

  if( !rx_buffer_size[uart] )
 801455c:	4b10      	ldr	r3, [pc, #64]	; (80145a0 <MIOS32_UART_RxBufferGet+0x4c>)
 801455e:	5c18      	ldrb	r0, [r3, r0]
 8014560:	b1d8      	cbz	r0, 801459a <MIOS32_UART_RxBufferGet+0x46>
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8014562:	f7fe fb1d 	bl	8012ba0 <MIOS32_IRQ_Disable>
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 8014566:	4b0f      	ldr	r3, [pc, #60]	; (80145a4 <MIOS32_UART_RxBufferGet+0x50>)
 8014568:	490f      	ldr	r1, [pc, #60]	; (80145a8 <MIOS32_UART_RxBufferGet+0x54>)
 801456a:	5d1a      	ldrb	r2, [r3, r4]
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 801456c:	5d18      	ldrb	r0, [r3, r4]
  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 801456e:	eb02 1584 	add.w	r5, r2, r4, lsl #6
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8014572:	1c42      	adds	r2, r0, #1
  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 8014574:	5d4d      	ldrb	r5, [r1, r5]
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8014576:	b2d1      	uxtb	r1, r2
 8014578:	293f      	cmp	r1, #63	; 0x3f
 801457a:	5519      	strb	r1, [r3, r4]
 801457c:	d901      	bls.n	8014582 <MIOS32_UART_RxBufferGet+0x2e>
    rx_buffer_tail[uart] = 0;
 801457e:	2000      	movs	r0, #0
 8014580:	5518      	strb	r0, [r3, r4]
  --rx_buffer_size[uart];
 8014582:	4b07      	ldr	r3, [pc, #28]	; (80145a0 <MIOS32_UART_RxBufferGet+0x4c>)
 8014584:	5d1a      	ldrb	r2, [r3, r4]
 8014586:	1e51      	subs	r1, r2, #1
 8014588:	b2c8      	uxtb	r0, r1
 801458a:	5518      	strb	r0, [r3, r4]
  MIOS32_IRQ_Enable();
 801458c:	f7fe fb1c 	bl	8012bc8 <MIOS32_IRQ_Enable>

  return b; // return received byte
 8014590:	4628      	mov	r0, r5
 8014592:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 8014594:	f04f 30ff 	mov.w	r0, #4294967295
 8014598:	bd38      	pop	{r3, r4, r5, pc}

  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer
 801459a:	f06f 0001 	mvn.w	r0, #1
  --rx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return b; // return received byte
#endif
}
 801459e:	bd38      	pop	{r3, r4, r5, pc}
 80145a0:	20000460 	.word	0x20000460
 80145a4:	20000462 	.word	0x20000462
 80145a8:	200004e4 	.word	0x200004e4

080145ac <MIOS32_UART_RxBufferPut>:
s32 MIOS32_UART_RxBufferPut(u8 uart, u8 b)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80145ac:	2801      	cmp	r0, #1
//! \return -1 if UART not available
//! \return -2 if buffer full (retry)
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_RxBufferPut(u8 uart, u8 b)
{
 80145ae:	b538      	push	{r3, r4, r5, lr}
 80145b0:	4604      	mov	r4, r0
 80145b2:	460d      	mov	r5, r1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80145b4:	d81c      	bhi.n	80145f0 <MIOS32_UART_RxBufferPut+0x44>
    return -1; // UART not available

  if( rx_buffer_size[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80145b6:	4b11      	ldr	r3, [pc, #68]	; (80145fc <MIOS32_UART_RxBufferPut+0x50>)
 80145b8:	5c18      	ldrb	r0, [r3, r0]
 80145ba:	283f      	cmp	r0, #63	; 0x3f
 80145bc:	d81b      	bhi.n	80145f6 <MIOS32_UART_RxBufferPut+0x4a>
    return -2; // buffer full (retry)

  // copy received byte into receive buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
 80145be:	f7fe faef 	bl	8012ba0 <MIOS32_IRQ_Disable>
  rx_buffer[uart][rx_buffer_head[uart]] = b;
 80145c2:	4b0f      	ldr	r3, [pc, #60]	; (8014600 <MIOS32_UART_RxBufferPut+0x54>)
 80145c4:	490f      	ldr	r1, [pc, #60]	; (8014604 <MIOS32_UART_RxBufferPut+0x58>)
 80145c6:	5d1a      	ldrb	r2, [r3, r4]
 80145c8:	eb02 1084 	add.w	r0, r2, r4, lsl #6
  if( ++rx_buffer_head[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80145cc:	5d1a      	ldrb	r2, [r3, r4]
    return -2; // buffer full (retry)

  // copy received byte into receive buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
  rx_buffer[uart][rx_buffer_head[uart]] = b;
 80145ce:	540d      	strb	r5, [r1, r0]
  if( ++rx_buffer_head[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80145d0:	1c50      	adds	r0, r2, #1
 80145d2:	b2c1      	uxtb	r1, r0
 80145d4:	293f      	cmp	r1, #63	; 0x3f
 80145d6:	5519      	strb	r1, [r3, r4]
 80145d8:	d901      	bls.n	80145de <MIOS32_UART_RxBufferPut+0x32>
    rx_buffer_head[uart] = 0;
 80145da:	2200      	movs	r2, #0
 80145dc:	551a      	strb	r2, [r3, r4]
  ++rx_buffer_size[uart];
 80145de:	4b07      	ldr	r3, [pc, #28]	; (80145fc <MIOS32_UART_RxBufferPut+0x50>)
 80145e0:	5d18      	ldrb	r0, [r3, r4]
 80145e2:	1c41      	adds	r1, r0, #1
 80145e4:	b2ca      	uxtb	r2, r1
 80145e6:	551a      	strb	r2, [r3, r4]
  MIOS32_IRQ_Enable();
 80145e8:	f7fe faee 	bl	8012bc8 <MIOS32_IRQ_Enable>

  return 0; // no error
 80145ec:	2000      	movs	r0, #0
 80145ee:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 80145f0:	f04f 30ff 	mov.w	r0, #4294967295
 80145f4:	bd38      	pop	{r3, r4, r5, pc}

  if( rx_buffer_size[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
    return -2; // buffer full (retry)
 80145f6:	f06f 0001 	mvn.w	r0, #1
  ++rx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 80145fa:	bd38      	pop	{r3, r4, r5, pc}
 80145fc:	20000460 	.word	0x20000460
 8014600:	20000564 	.word	0x20000564
 8014604:	200004e4 	.word	0x200004e4

08014608 <MIOS32_UART_TxBufferGet>:
s32 MIOS32_UART_TxBufferGet(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014608:	2801      	cmp	r0, #1
//! \return -2 if no new byte available
//! \return >= 0: transmitted byte
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferGet(u8 uart)
{
 801460a:	b538      	push	{r3, r4, r5, lr}
 801460c:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801460e:	d81b      	bhi.n	8014648 <MIOS32_UART_TxBufferGet+0x40>
    return -1; // UART not available

  if( !tx_buffer_size[uart] )
 8014610:	4b10      	ldr	r3, [pc, #64]	; (8014654 <MIOS32_UART_TxBufferGet+0x4c>)
 8014612:	5c18      	ldrb	r0, [r3, r0]
 8014614:	b1d8      	cbz	r0, 801464e <MIOS32_UART_TxBufferGet+0x46>
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8014616:	f7fe fac3 	bl	8012ba0 <MIOS32_IRQ_Disable>
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 801461a:	4b0f      	ldr	r3, [pc, #60]	; (8014658 <MIOS32_UART_TxBufferGet+0x50>)
 801461c:	490f      	ldr	r1, [pc, #60]	; (801465c <MIOS32_UART_TxBufferGet+0x54>)
 801461e:	5d1a      	ldrb	r2, [r3, r4]
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 8014620:	5d18      	ldrb	r0, [r3, r4]
  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 8014622:	eb02 1584 	add.w	r5, r2, r4, lsl #6
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 8014626:	1c42      	adds	r2, r0, #1
  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 8014628:	5d4d      	ldrb	r5, [r1, r5]
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 801462a:	b2d1      	uxtb	r1, r2
 801462c:	293f      	cmp	r1, #63	; 0x3f
 801462e:	5519      	strb	r1, [r3, r4]
 8014630:	d901      	bls.n	8014636 <MIOS32_UART_TxBufferGet+0x2e>
    tx_buffer_tail[uart] = 0;
 8014632:	2000      	movs	r0, #0
 8014634:	5518      	strb	r0, [r3, r4]
  --tx_buffer_size[uart];
 8014636:	4b07      	ldr	r3, [pc, #28]	; (8014654 <MIOS32_UART_TxBufferGet+0x4c>)
 8014638:	5d1a      	ldrb	r2, [r3, r4]
 801463a:	1e51      	subs	r1, r2, #1
 801463c:	b2c8      	uxtb	r0, r1
 801463e:	5518      	strb	r0, [r3, r4]
  MIOS32_IRQ_Enable();
 8014640:	f7fe fac2 	bl	8012bc8 <MIOS32_IRQ_Enable>

  return b; // return transmitted byte
 8014644:	4628      	mov	r0, r5
 8014646:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 8014648:	f04f 30ff 	mov.w	r0, #4294967295
 801464c:	bd38      	pop	{r3, r4, r5, pc}

  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer
 801464e:	f06f 0001 	mvn.w	r0, #1
  --tx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return b; // return transmitted byte
#endif
}
 8014652:	bd38      	pop	{r3, r4, r5, pc}
 8014654:	20000566 	.word	0x20000566
 8014658:	2000045e 	.word	0x2000045e
 801465c:	20000464 	.word	0x20000464

08014660 <MIOS32_UART_TxBufferPutMore_NonBlocking>:
s32 MIOS32_UART_TxBufferPutMore_NonBlocking(u8 uart, u8 *buffer, u16 len)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8014660:	2801      	cmp	r0, #1
//! \return -2 if buffer full or cannot get all requested bytes (retry)
//! \return -3 if UART not supported by MIOS32_UART_TxBufferPut Routine
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferPutMore_NonBlocking(u8 uart, u8 *buffer, u16 len)
{
 8014662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014664:	4604      	mov	r4, r0
 8014666:	460d      	mov	r5, r1
 8014668:	4616      	mov	r6, r2
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801466a:	d830      	bhi.n	80146ce <MIOS32_UART_TxBufferPutMore_NonBlocking+0x6e>
    return -1; // UART not available

  if( (tx_buffer_size[uart]+len) >= MIOS32_UART_TX_BUFFER_SIZE )
 801466c:	4b1b      	ldr	r3, [pc, #108]	; (80146dc <MIOS32_UART_TxBufferPutMore_NonBlocking+0x7c>)
 801466e:	5c18      	ldrb	r0, [r3, r0]
 8014670:	1881      	adds	r1, r0, r2
 8014672:	293f      	cmp	r1, #63	; 0x3f
 8014674:	dc2e      	bgt.n	80146d4 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x74>
    return -2; // buffer full or cannot get all requested bytes (retry)

  // copy bytes to be transmitted into transmit buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
 8014676:	f7fe fa93 	bl	8012ba0 <MIOS32_IRQ_Disable>

  u16 i;
  for(i=0; i<len; ++i) {
 801467a:	4628      	mov	r0, r5
 801467c:	1b42      	subs	r2, r0, r5
 801467e:	b293      	uxth	r3, r2
 8014680:	42b3      	cmp	r3, r6
 8014682:	d220      	bcs.n	80146c6 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x66>
    tx_buffer[uart][tx_buffer_head[uart]] = *buffer++;
 8014684:	4b16      	ldr	r3, [pc, #88]	; (80146e0 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x80>)
 8014686:	4917      	ldr	r1, [pc, #92]	; (80146e4 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x84>)
 8014688:	5d1f      	ldrb	r7, [r3, r4]
 801468a:	eb07 1284 	add.w	r2, r7, r4, lsl #6
 801468e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8014692:	548f      	strb	r7, [r1, r2]

    if( ++tx_buffer_head[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 8014694:	5d1a      	ldrb	r2, [r3, r4]
 8014696:	1c51      	adds	r1, r2, #1
 8014698:	b2ca      	uxtb	r2, r1
 801469a:	2a3f      	cmp	r2, #63	; 0x3f
 801469c:	551a      	strb	r2, [r3, r4]
 801469e:	d901      	bls.n	80146a4 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x44>
      tx_buffer_head[uart] = 0;
 80146a0:	2100      	movs	r1, #0
 80146a2:	5519      	strb	r1, [r3, r4]

    // enable Tx interrupt if buffer was empty
    if( ++tx_buffer_size[uart] == 1 ) {
 80146a4:	4a0d      	ldr	r2, [pc, #52]	; (80146dc <MIOS32_UART_TxBufferPutMore_NonBlocking+0x7c>)
 80146a6:	5d13      	ldrb	r3, [r2, r4]
 80146a8:	1c59      	adds	r1, r3, #1
 80146aa:	b2cb      	uxtb	r3, r1
 80146ac:	2b01      	cmp	r3, #1
 80146ae:	5513      	strb	r3, [r2, r4]
 80146b0:	d1e4      	bne.n	801467c <MIOS32_UART_TxBufferPutMore_NonBlocking+0x1c>
      switch( uart ) {
 80146b2:	2c01      	cmp	r4, #1
        case 0: MIOS32_UART0->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 80146b4:	bf14      	ite	ne
 80146b6:	4b0c      	ldrne	r3, [pc, #48]	; (80146e8 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x88>)
        case 1: MIOS32_UART1->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 80146b8:	4b0c      	ldreq	r3, [pc, #48]	; (80146ec <MIOS32_UART_TxBufferPutMore_NonBlocking+0x8c>)
 80146ba:	899a      	ldrh	r2, [r3, #12]
 80146bc:	b291      	uxth	r1, r2
 80146be:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 80146c2:	819a      	strh	r2, [r3, #12]
 80146c4:	e7da      	b.n	801467c <MIOS32_UART_TxBufferPutMore_NonBlocking+0x1c>
        default: MIOS32_IRQ_Enable(); return -3; // uart not supported by routine (yet)
      }
    }
  }

  MIOS32_IRQ_Enable();
 80146c6:	f7fe fa7f 	bl	8012bc8 <MIOS32_IRQ_Enable>

  return 0; // no error
 80146ca:	2000      	movs	r0, #0
 80146cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 80146ce:	f04f 30ff 	mov.w	r0, #4294967295
 80146d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if( (tx_buffer_size[uart]+len) >= MIOS32_UART_TX_BUFFER_SIZE )
    return -2; // buffer full or cannot get all requested bytes (retry)
 80146d4:	f06f 0001 	mvn.w	r0, #1

  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 80146d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146da:	bf00      	nop
 80146dc:	20000566 	.word	0x20000566
 80146e0:	20000570 	.word	0x20000570
 80146e4:	20000464 	.word	0x20000464
 80146e8:	40004400 	.word	0x40004400
 80146ec:	40004800 	.word	0x40004800

080146f0 <MIOS32_UART_TxBufferPutMore>:
//! \return -1 if UART not available
//! \return -3 if UART not supported by MIOS32_UART_TxBufferPut Routine
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferPutMore(u8 uart, u8 *buffer, u16 len)
{
 80146f0:	b570      	push	{r4, r5, r6, lr}
 80146f2:	4606      	mov	r6, r0
 80146f4:	460d      	mov	r5, r1
 80146f6:	4614      	mov	r4, r2
  s32 error;

  while( (error=MIOS32_UART_TxBufferPutMore_NonBlocking(uart, buffer, len)) == -2 );
 80146f8:	4630      	mov	r0, r6
 80146fa:	4629      	mov	r1, r5
 80146fc:	4622      	mov	r2, r4
 80146fe:	f7ff ffaf 	bl	8014660 <MIOS32_UART_TxBufferPutMore_NonBlocking>
 8014702:	1c83      	adds	r3, r0, #2
 8014704:	d0f8      	beq.n	80146f8 <MIOS32_UART_TxBufferPutMore+0x8>

  return error;
}
 8014706:	bd70      	pop	{r4, r5, r6, pc}

08014708 <USART2_IRQHandler>:
// Interrupt handler for first UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
 8014708:	4b15      	ldr	r3, [pc, #84]	; (8014760 <USART2_IRQHandler+0x58>)
 801470a:	881a      	ldrh	r2, [r3, #0]
 801470c:	f002 0020 	and.w	r0, r2, #32
 8014710:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for first UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
 8014712:	b510      	push	{r4, lr}
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
 8014714:	b149      	cbz	r1, 801472a <USART2_IRQHandler+0x22>
    u8 b = MIOS32_UART0->DR;
 8014716:	889c      	ldrh	r4, [r3, #4]
 8014718:	b2e4      	uxtb	r4, r4

#if MIOS32_UART0_ASSIGNMENT == 1
    s32 status = MIOS32_MIDI_SendByteToRxCallback(UART0, b);
 801471a:	2020      	movs	r0, #32
 801471c:	4621      	mov	r1, r4
 801471e:	f7fd f9a3 	bl	8011a68 <MIOS32_MIDI_SendByteToRxCallback>
#else
    s32 status = 0;
#endif

    if( status == 0 && MIOS32_UART_RxBufferPut(0, b) < 0 ) {
 8014722:	b910      	cbnz	r0, 801472a <USART2_IRQHandler+0x22>
 8014724:	4621      	mov	r1, r4
 8014726:	f7ff ff41 	bl	80145ac <MIOS32_UART_RxBufferPut>
      // here we could add some error handling
    }
  }

  if( MIOS32_UART0->SR & (1 << 7) ) { // check if TXE flag is set
 801472a:	4c0d      	ldr	r4, [pc, #52]	; (8014760 <USART2_IRQHandler+0x58>)
 801472c:	8823      	ldrh	r3, [r4, #0]
 801472e:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8014732:	b290      	uxth	r0, r2
 8014734:	b198      	cbz	r0, 801475e <USART2_IRQHandler+0x56>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 8014736:	490b      	ldr	r1, [pc, #44]	; (8014764 <USART2_IRQHandler+0x5c>)
 8014738:	780b      	ldrb	r3, [r1, #0]
      // here we could add some error handling
    }
  }

  if( MIOS32_UART0->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(0) > 0 ) {
 801473a:	b153      	cbz	r3, 8014752 <USART2_IRQHandler+0x4a>
      s32 b = MIOS32_UART_TxBufferGet(0);
 801473c:	2000      	movs	r0, #0
 801473e:	f7ff ff63 	bl	8014608 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 8014742:	2800      	cmp	r0, #0
 8014744:	da02      	bge.n	801474c <USART2_IRQHandler+0x44>
	// here we could add some error handling
	MIOS32_UART0->DR = 0xff;
 8014746:	20ff      	movs	r0, #255	; 0xff
 8014748:	80a0      	strh	r0, [r4, #4]
 801474a:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART0->DR = b;
 801474c:	b282      	uxth	r2, r0
 801474e:	80a2      	strh	r2, [r4, #4]
 8014750:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART0->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 8014752:	89a2      	ldrh	r2, [r4, #12]
 8014754:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8014758:	0401      	lsls	r1, r0, #16
 801475a:	0c0b      	lsrs	r3, r1, #16
 801475c:	81a3      	strh	r3, [r4, #12]
 801475e:	bd10      	pop	{r4, pc}
 8014760:	40004400 	.word	0x40004400
 8014764:	20000566 	.word	0x20000566

08014768 <USART3_IRQHandler>:
// Interrupt handler for second UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
 8014768:	4b16      	ldr	r3, [pc, #88]	; (80147c4 <USART3_IRQHandler+0x5c>)
 801476a:	881a      	ldrh	r2, [r3, #0]
 801476c:	f002 0020 	and.w	r0, r2, #32
 8014770:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for second UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
 8014772:	b510      	push	{r4, lr}
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
 8014774:	b151      	cbz	r1, 801478c <USART3_IRQHandler+0x24>
    u8 b = MIOS32_UART1->DR;
 8014776:	889c      	ldrh	r4, [r3, #4]
 8014778:	b2e4      	uxtb	r4, r4

#if MIOS32_UART1_ASSIGNMENT == 1
    s32 status = MIOS32_MIDI_SendByteToRxCallback(UART1, b);
 801477a:	2021      	movs	r0, #33	; 0x21
 801477c:	4621      	mov	r1, r4
 801477e:	f7fd f973 	bl	8011a68 <MIOS32_MIDI_SendByteToRxCallback>
#else
    s32 status = 0;
#endif

    if( status == 0 && MIOS32_UART_RxBufferPut(1, b) < 0 ) {
 8014782:	b918      	cbnz	r0, 801478c <USART3_IRQHandler+0x24>
 8014784:	2001      	movs	r0, #1
 8014786:	4621      	mov	r1, r4
 8014788:	f7ff ff10 	bl	80145ac <MIOS32_UART_RxBufferPut>
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART1->SR & (1 << 7) ) { // check if TXE flag is set
 801478c:	4c0d      	ldr	r4, [pc, #52]	; (80147c4 <USART3_IRQHandler+0x5c>)
 801478e:	8823      	ldrh	r3, [r4, #0]
 8014790:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8014794:	b290      	uxth	r0, r2
 8014796:	b198      	cbz	r0, 80147c0 <USART3_IRQHandler+0x58>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 8014798:	490b      	ldr	r1, [pc, #44]	; (80147c8 <USART3_IRQHandler+0x60>)
 801479a:	784b      	ldrb	r3, [r1, #1]
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART1->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(1) > 0 ) {
 801479c:	b153      	cbz	r3, 80147b4 <USART3_IRQHandler+0x4c>
      s32 b = MIOS32_UART_TxBufferGet(1);
 801479e:	2001      	movs	r0, #1
 80147a0:	f7ff ff32 	bl	8014608 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 80147a4:	2800      	cmp	r0, #0
 80147a6:	da02      	bge.n	80147ae <USART3_IRQHandler+0x46>
	// here we could add some error handling
	MIOS32_UART1->DR = 0xff;
 80147a8:	20ff      	movs	r0, #255	; 0xff
 80147aa:	80a0      	strh	r0, [r4, #4]
 80147ac:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART1->DR = b;
 80147ae:	b282      	uxth	r2, r0
 80147b0:	80a2      	strh	r2, [r4, #4]
 80147b2:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART1->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 80147b4:	89a2      	ldrh	r2, [r4, #12]
 80147b6:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80147ba:	0401      	lsls	r1, r0, #16
 80147bc:	0c0b      	lsrs	r3, r1, #16
 80147be:	81a3      	strh	r3, [r4, #12]
 80147c0:	bd10      	pop	{r4, pc}
 80147c2:	bf00      	nop
 80147c4:	40004800 	.word	0x40004800
 80147c8:	20000566 	.word	0x20000566

080147cc <EV_IRQHandler>:
/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
  u32 SR1Register = iicx->base->SR1;
 80147cc:	6803      	ldr	r3, [r0, #0]
 80147ce:	8a9a      	ldrh	r2, [r3, #20]

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags
 80147d0:	8b19      	ldrh	r1, [r3, #24]
/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
  u32 SR1Register = iicx->base->SR1;
 80147d2:	b292      	uxth	r2, r2

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags

  /* If SB = 1, I2C master sent a START on the bus: EV5) */
  if( (SR1Register & 0x0001) == 0x0001 ) {
 80147d4:	07d1      	lsls	r1, r2, #31

/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
 80147d6:	b510      	push	{r4, lr}
  u32 SR1Register = iicx->base->SR1;

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags

  /* If SB = 1, I2C master sent a START on the bus: EV5) */
  if( (SR1Register & 0x0001) == 0x0001 ) {
 80147d8:	d50d      	bpl.n	80147f6 <EV_IRQHandler+0x2a>
    // don't send address if stop was requested (WRITE_WITHOUT_STOP - mode, start condition was sent)
    // we have to wait for the application to start the next transfer
    if( iicx->transfer_state.STOP_REQUESTED ) {
 80147da:	6941      	ldr	r1, [r0, #20]
 80147dc:	078a      	lsls	r2, r1, #30
 80147de:	d507      	bpl.n	80147f0 <EV_IRQHandler+0x24>
      // transfer finished
      iicx->transfer_state.BUSY = 0;
 80147e0:	7d02      	ldrb	r2, [r0, #20]
 80147e2:	f022 0101 	bic.w	r1, r2, #1
 80147e6:	7501      	strb	r1, [r0, #20]
      // disable all interrupts
      iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80147e8:	8898      	ldrh	r0, [r3, #4]
 80147ea:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80147ee:	e027      	b.n	8014840 <EV_IRQHandler+0x74>
      return;
    }

    /* Send the slave address for transmssion or for reception (according to the configured value
       in the write master write routine */
    iicx->base->DR = iicx->iic_address;
 80147f0:	7900      	ldrb	r0, [r0, #4]
 80147f2:	8218      	strh	r0, [r3, #16]
    return;
 80147f4:	bd10      	pop	{r4, pc}
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
 80147f6:	f002 0102 	and.w	r1, r2, #2
 80147fa:	b289      	uxth	r1, r1
 80147fc:	2900      	cmp	r1, #0
 80147fe:	d031      	beq.n	8014864 <EV_IRQHandler+0x98>
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 8014800:	7901      	ldrb	r1, [r0, #4]
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 8014802:	8a02      	ldrh	r2, [r0, #16]
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 8014804:	f011 0f01 	tst.w	r1, #1
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 8014808:	b291      	uxth	r1, r2
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 801480a:	d11d      	bne.n	8014848 <EV_IRQHandler+0x7c>
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 801480c:	2900      	cmp	r1, #0
 801480e:	d036      	beq.n	801487e <EV_IRQHandler+0xb2>
	iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

	// transfer finished
	iicx->transfer_state.BUSY = 0;	
      } else {
	if( iicx->buffer_ix < iicx->buffer_len ) {
 8014810:	8a42      	ldrh	r2, [r0, #18]
 8014812:	b291      	uxth	r1, r2
 8014814:	8a02      	ldrh	r2, [r0, #16]
 8014816:	b292      	uxth	r2, r2
 8014818:	4291      	cmp	r1, r2
 801481a:	d208      	bcs.n	801482e <EV_IRQHandler+0x62>
	  /* Write the first data in the data register */
	  iicx->base->DR = (iicx->tx_buffer_ptr == NULL) ? 0 : iicx->tx_buffer_ptr[iicx->buffer_ix++];
 801481c:	6882      	ldr	r2, [r0, #8]
 801481e:	b12a      	cbz	r2, 801482c <EV_IRQHandler+0x60>
 8014820:	8a41      	ldrh	r1, [r0, #18]
 8014822:	b289      	uxth	r1, r1
 8014824:	5c52      	ldrb	r2, [r2, r1]
 8014826:	3101      	adds	r1, #1
 8014828:	b289      	uxth	r1, r1
 801482a:	8241      	strh	r1, [r0, #18]
 801482c:	821a      	strh	r2, [r3, #16]
	}

	/* If no further data to be sent, disable the I2C BUF IT
	   in order to not have a TxE interrupt */
	if( iicx->buffer_ix >= iicx->buffer_len ) {
 801482e:	8a42      	ldrh	r2, [r0, #18]
 8014830:	8a00      	ldrh	r0, [r0, #16]
 8014832:	b291      	uxth	r1, r2
 8014834:	b282      	uxth	r2, r0
 8014836:	4291      	cmp	r1, r2
 8014838:	d378      	bcc.n	801492c <EV_IRQHandler+0x160>
	  iicx->base->CR2 &= (u16)~I2C_IT_BUF;
 801483a:	8899      	ldrh	r1, [r3, #4]
 801483c:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8014840:	0402      	lsls	r2, r0, #16
 8014842:	0c11      	lsrs	r1, r2, #16
 8014844:	8099      	strh	r1, [r3, #4]
 8014846:	bd10      	pop	{r4, pc}
      /* Master Receiver */

      /* At this stage, ADDR is cleared because both SR1 and SR2 were read.*/
      /* EV6_1: used for single byte reception. The ACK disable and the STOP
	 Programming should be done just after ADDR is cleared. */
      if( iicx->buffer_len == 1 ) {
 8014848:	2901      	cmp	r1, #1
 801484a:	d16f      	bne.n	801492c <EV_IRQHandler+0x160>
	/* Clear ACK */
	iicx->base->CR1 &= 0xFBFF; // CR1_ACK_Reset
 801484c:	881a      	ldrh	r2, [r3, #0]
 801484e:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8014852:	040a      	lsls	r2, r1, #16
 8014854:	0c11      	lsrs	r1, r2, #16
 8014856:	8019      	strh	r1, [r3, #0]
	/* Program the STOP */
	iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 8014858:	881a      	ldrh	r2, [r3, #0]
 801485a:	b291      	uxth	r1, r2
 801485c:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 8014860:	801a      	strh	r2, [r3, #0]
 8014862:	e05f      	b.n	8014924 <EV_IRQHandler+0x158>
    return;
  }

  /* Master transmits the remaing data: from data2 until the last one.  */
  /* If TXE is set */
  if( (SR1Register &0x0084) == 0x0080 ) {
 8014864:	f002 0184 	and.w	r1, r2, #132	; 0x84
 8014868:	2980      	cmp	r1, #128	; 0x80
 801486a:	d106      	bne.n	801487a <EV_IRQHandler+0xae>
    /* If there is still data to write */
    if( iicx->buffer_ix < iicx->buffer_len ) {
 801486c:	8a42      	ldrh	r2, [r0, #18]
 801486e:	b291      	uxth	r1, r2
 8014870:	8a02      	ldrh	r2, [r0, #16]
 8014872:	b292      	uxth	r2, r2
 8014874:	4291      	cmp	r1, r2
 8014876:	d3d1      	bcc.n	801481c <EV_IRQHandler+0x50>
 8014878:	e058      	b.n	801492c <EV_IRQHandler+0x160>

    return;
  }

  /* If BTF and TXE are set (EV8_2), program the STOP */
  if( (SR1Register & 0x0084) == 0x0084 ) {
 801487a:	2984      	cmp	r1, #132	; 0x84
 801487c:	d112      	bne.n	80148a4 <EV_IRQHandler+0xd8>
    /* Program the STOP */
    iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 801487e:	881a      	ldrh	r2, [r3, #0]
 8014880:	b291      	uxth	r1, r2
 8014882:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 8014886:	801a      	strh	r2, [r3, #0]
    iicx->transfer_state.STOP_REQUESTED = 1;
 8014888:	7d01      	ldrb	r1, [r0, #20]
 801488a:	f041 0202 	orr.w	r2, r1, #2
 801488e:	7502      	strb	r2, [r0, #20]

    // disable all interrupts
    iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014890:	8899      	ldrh	r1, [r3, #4]
 8014892:	f421 62e0 	bic.w	r2, r1, #1792	; 0x700
 8014896:	0411      	lsls	r1, r2, #16
 8014898:	0c0a      	lsrs	r2, r1, #16
 801489a:	809a      	strh	r2, [r3, #4]

    // transfer finished
    iicx->transfer_state.BUSY = 0;
 801489c:	7d03      	ldrb	r3, [r0, #20]
 801489e:	f023 0101 	bic.w	r1, r3, #1
 80148a2:	e042      	b.n	801492a <EV_IRQHandler+0x15e>

    return;
  }

  /* If RXNE is set */
  if( (SR1Register & 0x0040) == 0x0040 && iicx->rx_buffer_ptr != NULL ) {
 80148a4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80148a8:	b291      	uxth	r1, r2
 80148aa:	2900      	cmp	r1, #0
 80148ac:	d03e      	beq.n	801492c <EV_IRQHandler+0x160>
 80148ae:	68c1      	ldr	r1, [r0, #12]
 80148b0:	2900      	cmp	r1, #0
 80148b2:	d03b      	beq.n	801492c <EV_IRQHandler+0x160>
    /* Read the data register */

    u8 b = iicx->base->DR;
 80148b4:	8a1c      	ldrh	r4, [r3, #16]

    // failsave: still place in buffer?
    if( iicx->buffer_ix < iicx->buffer_len )
 80148b6:	8a42      	ldrh	r2, [r0, #18]

  /* If RXNE is set */
  if( (SR1Register & 0x0040) == 0x0040 && iicx->rx_buffer_ptr != NULL ) {
    /* Read the data register */

    u8 b = iicx->base->DR;
 80148b8:	b2e3      	uxtb	r3, r4

    // failsave: still place in buffer?
    if( iicx->buffer_ix < iicx->buffer_len )
 80148ba:	b294      	uxth	r4, r2
 80148bc:	8a02      	ldrh	r2, [r0, #16]
 80148be:	b292      	uxth	r2, r2
 80148c0:	4294      	cmp	r4, r2
 80148c2:	d205      	bcs.n	80148d0 <EV_IRQHandler+0x104>
      iicx->rx_buffer_ptr[iicx->buffer_ix++] = b;
 80148c4:	8a42      	ldrh	r2, [r0, #18]
 80148c6:	b292      	uxth	r2, r2
 80148c8:	548b      	strb	r3, [r1, r2]
 80148ca:	1c51      	adds	r1, r2, #1
 80148cc:	b28a      	uxth	r2, r1
 80148ce:	8242      	strh	r2, [r0, #18]

    // last byte received, disable interrupts and return.
    if( iicx->transfer_state.STOP_REQUESTED ) {
 80148d0:	6941      	ldr	r1, [r0, #20]
 80148d2:	0789      	lsls	r1, r1, #30
 80148d4:	d50b      	bpl.n	80148ee <EV_IRQHandler+0x122>
      // transfer finished
      iicx->transfer_state.BUSY = 0;
 80148d6:	7d02      	ldrb	r2, [r0, #20]
 80148d8:	f022 0101 	bic.w	r1, r2, #1
 80148dc:	7501      	strb	r1, [r0, #20]
      // disable all interrupts
      iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80148de:	6800      	ldr	r0, [r0, #0]
 80148e0:	8883      	ldrh	r3, [r0, #4]
 80148e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80148e6:	0411      	lsls	r1, r2, #16
 80148e8:	0c0b      	lsrs	r3, r1, #16
 80148ea:	8083      	strh	r3, [r0, #4]
      return;
 80148ec:	bd10      	pop	{r4, pc}
    }
 
    // request NAK and stop condition before receiving last data
    if( (iicx->buffer_ix >= iicx->buffer_len-1) || (iicx->transfer_state.ABORT_IF_FIRST_BYTE_0 && iicx->buffer_ix == 1 && b == 0x00) ) {
 80148ee:	8a42      	ldrh	r2, [r0, #18]
 80148f0:	b291      	uxth	r1, r2
 80148f2:	8a02      	ldrh	r2, [r0, #16]
 80148f4:	b292      	uxth	r2, r2
 80148f6:	3a01      	subs	r2, #1
 80148f8:	4291      	cmp	r1, r2
 80148fa:	da07      	bge.n	801490c <EV_IRQHandler+0x140>
 80148fc:	6941      	ldr	r1, [r0, #20]
 80148fe:	074a      	lsls	r2, r1, #29
 8014900:	d514      	bpl.n	801492c <EV_IRQHandler+0x160>
 8014902:	8a42      	ldrh	r2, [r0, #18]
 8014904:	b291      	uxth	r1, r2
 8014906:	2901      	cmp	r1, #1
 8014908:	d110      	bne.n	801492c <EV_IRQHandler+0x160>
 801490a:	b97b      	cbnz	r3, 801492c <EV_IRQHandler+0x160>
      /* Clear ACK */
      iicx->base->CR1 &= 0xFBFF; // CR1_ACK_Reset
 801490c:	6802      	ldr	r2, [r0, #0]
 801490e:	8813      	ldrh	r3, [r2, #0]
 8014910:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 8014914:	040b      	lsls	r3, r1, #16
 8014916:	0c19      	lsrs	r1, r3, #16
 8014918:	8011      	strh	r1, [r2, #0]
      /* Program the STOP */
      iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 801491a:	8813      	ldrh	r3, [r2, #0]
 801491c:	b299      	uxth	r1, r3
 801491e:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8014922:	8013      	strh	r3, [r2, #0]
      iicx->transfer_state.STOP_REQUESTED = 1;
 8014924:	7d03      	ldrb	r3, [r0, #20]
 8014926:	f043 0102 	orr.w	r1, r3, #2
 801492a:	7501      	strb	r1, [r0, #20]
 801492c:	bd10      	pop	{r4, pc}
	...

08014930 <ER_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC error interrupts
/////////////////////////////////////////////////////////////////////////////
static void ER_IRQHandler(iic_rec_t *iicx)
{
 8014930:	b538      	push	{r3, r4, r5, lr}
 8014932:	4604      	mov	r4, r0
  // Read SR1 and SR2 at the beginning (if not done so, flags may get lost)
  u32 event = I2C_GetLastEvent(iicx->base);
 8014934:	6800      	ldr	r0, [r0, #0]
 8014936:	f000 fa8d 	bl	8014e54 <I2C_GetLastEvent>
  // note that only one error number is available
  // the order of these checks defines the priority

  // bus error (start/stop condition during read
  // unlikely, should only be relevant for slave mode?)
  if( event & I2C_FLAG_BERR  ) {
 801493a:	4b17      	ldr	r3, [pc, #92]	; (8014998 <ER_IRQHandler+0x68>)
 801493c:	4003      	ands	r3, r0
// Internal function for handling IIC error interrupts
/////////////////////////////////////////////////////////////////////////////
static void ER_IRQHandler(iic_rec_t *iicx)
{
  // Read SR1 and SR2 at the beginning (if not done so, flags may get lost)
  u32 event = I2C_GetLastEvent(iicx->base);
 801493e:	4605      	mov	r5, r0
  // note that only one error number is available
  // the order of these checks defines the priority

  // bus error (start/stop condition during read
  // unlikely, should only be relevant for slave mode?)
  if( event & I2C_FLAG_BERR  ) {
 8014940:	b13b      	cbz	r3, 8014952 <ER_IRQHandler+0x22>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_BERR);
 8014942:	6820      	ldr	r0, [r4, #0]
 8014944:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 8014948:	f000 fa8c 	bl	8014e64 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_BUS;
 801494c:	f06f 0005 	mvn.w	r0, #5
 8014950:	61a0      	str	r0, [r4, #24]
  }

  // arbitration lost
  if( event & I2C_FLAG_ARLO ) {
 8014952:	4912      	ldr	r1, [pc, #72]	; (801499c <ER_IRQHandler+0x6c>)
 8014954:	4029      	ands	r1, r5
 8014956:	b131      	cbz	r1, 8014966 <ER_IRQHandler+0x36>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_ARLO);
 8014958:	6820      	ldr	r0, [r4, #0]
 801495a:	4911      	ldr	r1, [pc, #68]	; (80149a0 <ER_IRQHandler+0x70>)
 801495c:	f000 fa82 	bl	8014e64 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_ARBITRATION_LOST;
 8014960:	f06f 0204 	mvn.w	r2, #4
 8014964:	61a2      	str	r2, [r4, #24]
  }

  // no acknowledge received from slave (e.g. slave not connected)
  if( event & I2C_FLAG_AF ) {
 8014966:	4b0f      	ldr	r3, [pc, #60]	; (80149a4 <ER_IRQHandler+0x74>)
 8014968:	402b      	ands	r3, r5
 801496a:	b153      	cbz	r3, 8014982 <ER_IRQHandler+0x52>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_AF);
 801496c:	6820      	ldr	r0, [r4, #0]
 801496e:	490e      	ldr	r1, [pc, #56]	; (80149a8 <ER_IRQHandler+0x78>)
 8014970:	f000 fa78 	bl	8014e64 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_SLAVE_NOT_CONNECTED;
 8014974:	f06f 0006 	mvn.w	r0, #6
 8014978:	61a0      	str	r0, [r4, #24]
    // send stop condition to release bus
    I2C_GenerateSTOP(iicx->base, ENABLE);
 801497a:	2101      	movs	r1, #1
 801497c:	6820      	ldr	r0, [r4, #0]
 801497e:	f000 fa54 	bl	8014e2a <I2C_GenerateSTOP>
  }

  // disable interrupts
  I2C_ITConfig(iicx->base, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR, DISABLE);
 8014982:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8014986:	2200      	movs	r2, #0
 8014988:	6820      	ldr	r0, [r4, #0]
 801498a:	f000 fa5a 	bl	8014e42 <I2C_ITConfig>

  // notify that transfer has finished (due to the error)
  iicx->transfer_state.BUSY = 0;
 801498e:	7d21      	ldrb	r1, [r4, #20]
 8014990:	f021 0201 	bic.w	r2, r1, #1
 8014994:	7522      	strb	r2, [r4, #20]
 8014996:	bd38      	pop	{r3, r4, r5, pc}
 8014998:	10000100 	.word	0x10000100
 801499c:	10000200 	.word	0x10000200
 80149a0:	01000200 	.word	0x01000200
 80149a4:	10000400 	.word	0x10000400
 80149a8:	01000400 	.word	0x01000400

080149ac <I2C2_EV_IRQHandler>:
// interrupt vectors
/////////////////////////////////////////////////////////////////////////////

void I2C2_EV_IRQHandler(void)
{
  EV_IRQHandler((iic_rec_t *)&iic_rec[0]);
 80149ac:	4801      	ldr	r0, [pc, #4]	; (80149b4 <I2C2_EV_IRQHandler+0x8>)
 80149ae:	f7ff bf0d 	b.w	80147cc <EV_IRQHandler>
 80149b2:	bf00      	nop
 80149b4:	20000574 	.word	0x20000574

080149b8 <I2C2_ER_IRQHandler>:
}

void I2C2_ER_IRQHandler(void)
{
  ER_IRQHandler((iic_rec_t *)&iic_rec[0]);
 80149b8:	4801      	ldr	r0, [pc, #4]	; (80149c0 <I2C2_ER_IRQHandler+0x8>)
 80149ba:	f7ff bfb9 	b.w	8014930 <ER_IRQHandler>
 80149be:	bf00      	nop
 80149c0:	20000574 	.word	0x20000574

080149c4 <I2C1_EV_IRQHandler>:


#if MIOS32_IIC_NUM >= 2
void I2C1_EV_IRQHandler(void)
{
  EV_IRQHandler((iic_rec_t *)&iic_rec[1]);
 80149c4:	4801      	ldr	r0, [pc, #4]	; (80149cc <I2C1_EV_IRQHandler+0x8>)
 80149c6:	f7ff bf01 	b.w	80147cc <EV_IRQHandler>
 80149ca:	bf00      	nop
 80149cc:	20000598 	.word	0x20000598

080149d0 <I2C1_ER_IRQHandler>:
}

void I2C1_ER_IRQHandler(void)
{
  ER_IRQHandler((iic_rec_t *)&iic_rec[1]);
 80149d0:	4801      	ldr	r0, [pc, #4]	; (80149d8 <I2C1_ER_IRQHandler+0x8>)
 80149d2:	f7ff bfad 	b.w	8014930 <ER_IRQHandler>
 80149d6:	bf00      	nop
 80149d8:	20000598 	.word	0x20000598

080149dc <printchar>:

static void printchar(char **str, int c)
{
  //	extern int putchar(int c);
	
	if (str) {
 80149dc:	b128      	cbz	r0, 80149ea <printchar+0xe>
		**str = c;
 80149de:	6803      	ldr	r3, [r0, #0]
 80149e0:	7019      	strb	r1, [r3, #0]
		++(*str);
 80149e2:	6801      	ldr	r1, [r0, #0]
 80149e4:	1c4a      	adds	r2, r1, #1
 80149e6:	6002      	str	r2, [r0, #0]
 80149e8:	4770      	bx	lr
	}
#ifndef MIOS32_DONT_USE_COM
	else MIOS32_COM_SendChar(1, c); // (void)putchar(c);
 80149ea:	2001      	movs	r0, #1
 80149ec:	b2c9      	uxtb	r1, r1
 80149ee:	f7fd bb9f 	b.w	8012130 <MIOS32_COM_SendChar>

080149f2 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80149f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 80149f6:	1e14      	subs	r4, r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80149f8:	4680      	mov	r8, r0
 80149fa:	4689      	mov	r9, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 80149fc:	dc01      	bgt.n	8014a02 <prints+0x10>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 80149fe:	2720      	movs	r7, #32
 8014a00:	e00f      	b.n	8014a22 <prints+0x30>

	if (width > 0) {
 8014a02:	2200      	movs	r2, #0
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8014a04:	f819 1002 	ldrb.w	r1, [r9, r2]
 8014a08:	b109      	cbz	r1, 8014a0e <prints+0x1c>
 8014a0a:	3201      	adds	r2, #1
 8014a0c:	e7fa      	b.n	8014a04 <prints+0x12>
		if (len >= width) width = 0;
 8014a0e:	42a2      	cmp	r2, r4
		else width -= len;
 8014a10:	bfb4      	ite	lt
 8014a12:	ebc2 0404 	rsblt	r4, r2, r4

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 8014a16:	460c      	movge	r4, r1
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 8014a18:	f013 0f02 	tst.w	r3, #2
 8014a1c:	bf0c      	ite	eq
 8014a1e:	2720      	moveq	r7, #32
 8014a20:	2730      	movne	r7, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8014a22:	07db      	lsls	r3, r3, #31
 8014a24:	d40c      	bmi.n	8014a40 <prints+0x4e>
 8014a26:	4625      	mov	r5, r4
		for ( ; width > 0; --width) {
 8014a28:	2d00      	cmp	r5, #0
 8014a2a:	dd05      	ble.n	8014a38 <prints+0x46>
			printchar (out, padchar);
 8014a2c:	4640      	mov	r0, r8
 8014a2e:	4639      	mov	r1, r7
 8014a30:	f7ff ffd4 	bl	80149dc <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8014a34:	3d01      	subs	r5, #1
 8014a36:	e7f7      	b.n	8014a28 <prints+0x36>
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 8014a38:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8014a3c:	1ba4      	subs	r4, r4, r6
 8014a3e:	e000      	b.n	8014a42 <prints+0x50>
{
	register int pc = 0, padchar = ' ';
 8014a40:	2600      	movs	r6, #0
 8014a42:	4635      	mov	r5, r6
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 8014a44:	ebc6 0309 	rsb	r3, r6, r9
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8014a48:	5d59      	ldrb	r1, [r3, r5]
 8014a4a:	b121      	cbz	r1, 8014a56 <prints+0x64>
		printchar (out, *string);
 8014a4c:	4640      	mov	r0, r8
 8014a4e:	f7ff ffc5 	bl	80149dc <printchar>
		++pc;
 8014a52:	3501      	adds	r5, #1
 8014a54:	e7f6      	b.n	8014a44 <prints+0x52>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 8014a56:	4626      	mov	r6, r4
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8014a58:	2e00      	cmp	r6, #0
 8014a5a:	dd05      	ble.n	8014a68 <prints+0x76>
		printchar (out, padchar);
 8014a5c:	4640      	mov	r0, r8
 8014a5e:	4639      	mov	r1, r7
 8014a60:	f7ff ffbc 	bl	80149dc <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 8014a64:	3e01      	subs	r6, #1
 8014a66:	e7f7      	b.n	8014a58 <prints+0x66>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 8014a68:	2c00      	cmp	r4, #0
 8014a6a:	bfac      	ite	ge
 8014a6c:	1928      	addge	r0, r5, r4
 8014a6e:	1c28      	addlt	r0, r5, #0
 8014a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014a74 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8014a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014a78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014a7a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8014a7e:	4681      	mov	r9, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 8014a80:	460c      	mov	r4, r1

	if (i == 0) {
 8014a82:	b951      	cbnz	r1, 8014a9a <printi+0x26>
		print_buf[0] = '0';
 8014a84:	2230      	movs	r2, #48	; 0x30
 8014a86:	f88d 2004 	strb.w	r2, [sp, #4]
		print_buf[1] = '\0';
 8014a8a:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 8014a8e:	4632      	mov	r2, r6
 8014a90:	a901      	add	r1, sp, #4
 8014a92:	4643      	mov	r3, r8
 8014a94:	f7ff ffad 	bl	80149f2 <prints>
 8014a98:	e035      	b.n	8014b06 <printi+0x92>
	}

	if (sg && b == 10 && i < 0) {
 8014a9a:	b133      	cbz	r3, 8014aaa <printi+0x36>
 8014a9c:	2a0a      	cmp	r2, #10
 8014a9e:	d104      	bne.n	8014aaa <printi+0x36>
 8014aa0:	2900      	cmp	r1, #0
 8014aa2:	da02      	bge.n	8014aaa <printi+0x36>
		neg = 1;
		u = -i;
 8014aa4:	424c      	negs	r4, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 8014aa6:	2701      	movs	r7, #1
 8014aa8:	e000      	b.n	8014aac <printi+0x38>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8014aaa:	2700      	movs	r7, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 8014aac:	ad04      	add	r5, sp, #16
 8014aae:	2300      	movs	r3, #0
 8014ab0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014ab4:	46aa      	mov	sl, r5

	while (u) {
 8014ab6:	b16c      	cbz	r4, 8014ad4 <printi+0x60>
		t = u % b;
 8014ab8:	fbb4 f3f2 	udiv	r3, r4, r2
 8014abc:	fb02 4413 	mls	r4, r2, r3, r4
		if( t >= 10 )
 8014ac0:	2c09      	cmp	r4, #9
 8014ac2:	dd02      	ble.n	8014aca <printi+0x56>
			t += letbase - '0' - 10;
 8014ac4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014ac6:	393a      	subs	r1, #58	; 0x3a
 8014ac8:	1864      	adds	r4, r4, r1
		*--s = t + '0';
 8014aca:	3430      	adds	r4, #48	; 0x30
 8014acc:	f805 4d01 	strb.w	r4, [r5, #-1]!
		u /= b;
 8014ad0:	461c      	mov	r4, r3
 8014ad2:	e7ef      	b.n	8014ab4 <printi+0x40>
	}

	if (neg) {
 8014ad4:	b187      	cbz	r7, 8014af8 <printi+0x84>
		if( width && (pad & PAD_ZERO) ) {
 8014ad6:	b14e      	cbz	r6, 8014aec <printi+0x78>
 8014ad8:	f018 0f02 	tst.w	r8, #2
 8014adc:	d006      	beq.n	8014aec <printi+0x78>
			printchar (out, '-');
 8014ade:	4648      	mov	r0, r9
 8014ae0:	212d      	movs	r1, #45	; 0x2d
 8014ae2:	f7ff ff7b 	bl	80149dc <printchar>
			++pc;
			--width;
 8014ae6:	3e01      	subs	r6, #1
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 8014ae8:	2701      	movs	r7, #1
			--width;
 8014aea:	e005      	b.n	8014af8 <printi+0x84>
		}
		else {
			*--s = '-';
 8014aec:	202d      	movs	r0, #45	; 0x2d
 8014aee:	f105 3aff 	add.w	sl, r5, #4294967295
 8014af2:	f805 0c01 	strb.w	r0, [r5, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8014af6:	2700      	movs	r7, #0
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 8014af8:	4648      	mov	r0, r9
 8014afa:	4651      	mov	r1, sl
 8014afc:	4632      	mov	r2, r6
 8014afe:	4643      	mov	r3, r8
 8014b00:	f7ff ff77 	bl	80149f2 <prints>
 8014b04:	1838      	adds	r0, r7, r0
}
 8014b06:	b004      	add	sp, #16
 8014b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014b0c <print>:

static int print( char **out, const char *format, va_list args )
{
 8014b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b0e:	b089      	sub	sp, #36	; 0x24
 8014b10:	4606      	mov	r6, r0
 8014b12:	460d      	mov	r5, r1
 8014b14:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
 8014b16:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8014b18:	782b      	ldrb	r3, [r5, #0]
 8014b1a:	b123      	cbz	r3, 8014b26 <print+0x1a>
		if (*format == '%') {
 8014b1c:	2b25      	cmp	r3, #37	; 0x25
 8014b1e:	d179      	bne.n	8014c14 <print+0x108>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 8014b20:	7868      	ldrb	r0, [r5, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8014b22:	1c6a      	adds	r2, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
 8014b24:	b928      	cbnz	r0, 8014b32 <print+0x26>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 8014b26:	2e00      	cmp	r6, #0
 8014b28:	d07b      	beq.n	8014c22 <print+0x116>
 8014b2a:	6830      	ldr	r0, [r6, #0]
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	7002      	strb	r2, [r0, #0]
 8014b30:	e077      	b.n	8014c22 <print+0x116>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
 8014b32:	2825      	cmp	r0, #37	; 0x25
 8014b34:	d06d      	beq.n	8014c12 <print+0x106>
			if (*format == '-') {
 8014b36:	282d      	cmp	r0, #45	; 0x2d
 8014b38:	d102      	bne.n	8014b40 <print+0x34>
				++format;
 8014b3a:	1caa      	adds	r2, r5, #2
				pad = PAD_RIGHT;
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	e000      	b.n	8014b42 <print+0x36>
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 8014b40:	2300      	movs	r3, #0
 8014b42:	4617      	mov	r7, r2
 8014b44:	3201      	adds	r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8014b46:	7839      	ldrb	r1, [r7, #0]
 8014b48:	2930      	cmp	r1, #48	; 0x30
 8014b4a:	d102      	bne.n	8014b52 <print+0x46>
				++format;
				pad |= PAD_ZERO;
 8014b4c:	f043 0302 	orr.w	r3, r3, #2
 8014b50:	e7f7      	b.n	8014b42 <print+0x36>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8014b52:	2200      	movs	r2, #0
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8014b54:	7839      	ldrb	r1, [r7, #0]
 8014b56:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8014b5a:	fa5f fc80 	uxtb.w	ip, r0
 8014b5e:	463d      	mov	r5, r7
 8014b60:	3701      	adds	r7, #1
 8014b62:	f1bc 0f09 	cmp.w	ip, #9
 8014b66:	d803      	bhi.n	8014b70 <print+0x64>
				width *= 10;
				width += *format - '0';
 8014b68:	250a      	movs	r5, #10
 8014b6a:	fb05 0202 	mla	r2, r5, r2, r0
 8014b6e:	e7f1      	b.n	8014b54 <print+0x48>
			}
			if( *format == 's' ) {
 8014b70:	2973      	cmp	r1, #115	; 0x73
 8014b72:	d109      	bne.n	8014b88 <print+0x7c>
				register char *s = (char *)va_arg( args, int );
 8014b74:	9f05      	ldr	r7, [sp, #20]
 8014b76:	1d39      	adds	r1, r7, #4
 8014b78:	9105      	str	r1, [sp, #20]
 8014b7a:	6839      	ldr	r1, [r7, #0]
				pc += prints (out, s?s:"(null)", width, pad);
 8014b7c:	4f2a      	ldr	r7, [pc, #168]	; (8014c28 <print+0x11c>)
 8014b7e:	4630      	mov	r0, r6
 8014b80:	2900      	cmp	r1, #0
 8014b82:	bf08      	it	eq
 8014b84:	4639      	moveq	r1, r7
 8014b86:	e041      	b.n	8014c0c <print+0x100>
				continue;
			}
			if( *format == 'd' ) {
 8014b88:	2964      	cmp	r1, #100	; 0x64
 8014b8a:	d10e      	bne.n	8014baa <print+0x9e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8014b8c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014b90:	9905      	ldr	r1, [sp, #20]
 8014b92:	2361      	movs	r3, #97	; 0x61
 8014b94:	9302      	str	r3, [sp, #8]
 8014b96:	1d08      	adds	r0, r1, #4
 8014b98:	6809      	ldr	r1, [r1, #0]
 8014b9a:	9005      	str	r0, [sp, #20]
 8014b9c:	220a      	movs	r2, #10
 8014b9e:	4630      	mov	r0, r6
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	f7ff ff67 	bl	8014a74 <printi>
 8014ba6:	1824      	adds	r4, r4, r0
				continue;
 8014ba8:	e039      	b.n	8014c1e <print+0x112>
			}
			if( *format == 'x' ) {
 8014baa:	2978      	cmp	r1, #120	; 0x78
 8014bac:	d106      	bne.n	8014bbc <print+0xb0>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8014bae:	9905      	ldr	r1, [sp, #20]
 8014bb0:	1d08      	adds	r0, r1, #4
 8014bb2:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014bb6:	9005      	str	r0, [sp, #20]
 8014bb8:	2261      	movs	r2, #97	; 0x61
 8014bba:	e007      	b.n	8014bcc <print+0xc0>
				continue;
			}
			if( *format == 'X' ) {
 8014bbc:	2958      	cmp	r1, #88	; 0x58
 8014bbe:	d10a      	bne.n	8014bd6 <print+0xca>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8014bc0:	9905      	ldr	r1, [sp, #20]
 8014bc2:	1d08      	adds	r0, r1, #4
 8014bc4:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014bc8:	9005      	str	r0, [sp, #20]
 8014bca:	2241      	movs	r2, #65	; 0x41
 8014bcc:	9202      	str	r2, [sp, #8]
 8014bce:	4630      	mov	r0, r6
 8014bd0:	6809      	ldr	r1, [r1, #0]
 8014bd2:	2210      	movs	r2, #16
 8014bd4:	e00b      	b.n	8014bee <print+0xe2>
				continue;
			}
			if( *format == 'u' ) {
 8014bd6:	2975      	cmp	r1, #117	; 0x75
 8014bd8:	d10b      	bne.n	8014bf2 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8014bda:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014bde:	9905      	ldr	r1, [sp, #20]
 8014be0:	2361      	movs	r3, #97	; 0x61
 8014be2:	9302      	str	r3, [sp, #8]
 8014be4:	1d08      	adds	r0, r1, #4
 8014be6:	6809      	ldr	r1, [r1, #0]
 8014be8:	9005      	str	r0, [sp, #20]
 8014bea:	220a      	movs	r2, #10
 8014bec:	4630      	mov	r0, r6
 8014bee:	2300      	movs	r3, #0
 8014bf0:	e7d7      	b.n	8014ba2 <print+0x96>
				continue;
			}
			if( *format == 'c' ) {
 8014bf2:	2963      	cmp	r1, #99	; 0x63
 8014bf4:	d113      	bne.n	8014c1e <print+0x112>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8014bf6:	9905      	ldr	r1, [sp, #20]
 8014bf8:	1d08      	adds	r0, r1, #4
 8014bfa:	6809      	ldr	r1, [r1, #0]
 8014bfc:	9005      	str	r0, [sp, #20]
				scr[1] = '\0';
 8014bfe:	2000      	movs	r0, #0
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8014c00:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
 8014c04:	f88d 001d 	strb.w	r0, [sp, #29]
				pc += prints (out, scr, width, pad);
 8014c08:	a907      	add	r1, sp, #28
 8014c0a:	4630      	mov	r0, r6
 8014c0c:	f7ff fef1 	bl	80149f2 <prints>
 8014c10:	e7c9      	b.n	8014ba6 <print+0x9a>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8014c12:	4615      	mov	r5, r2
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 8014c14:	4630      	mov	r0, r6
 8014c16:	7829      	ldrb	r1, [r5, #0]
 8014c18:	f7ff fee0 	bl	80149dc <printchar>
			++pc;
 8014c1c:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8014c1e:	3501      	adds	r5, #1
 8014c20:	e77a      	b.n	8014b18 <print+0xc>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
 8014c22:	4620      	mov	r0, r4
 8014c24:	b009      	add	sp, #36	; 0x24
 8014c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c28:	0801c444 	.word	0x0801c444

08014c2c <sprintf>:
{
  return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 8014c2c:	b40e      	push	{r1, r2, r3}
 8014c2e:	b50f      	push	{r0, r1, r2, r3, lr}
 8014c30:	aa05      	add	r2, sp, #20
 8014c32:	9001      	str	r0, [sp, #4]
 8014c34:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
        return print( &out, format, args );
 8014c38:	a801      	add	r0, sp, #4

int sprintf(char *out, const char *format, ...)
{
        va_list args;
        
        va_start( args, format );
 8014c3a:	9203      	str	r2, [sp, #12]
        return print( &out, format, args );
 8014c3c:	f7ff ff66 	bl	8014b0c <print>
}
 8014c40:	b004      	add	sp, #16
 8014c42:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c46:	b003      	add	sp, #12
 8014c48:	4770      	bx	lr

08014c4a <vsprintf>:

// TK: added for alternative parameter passing
int vsprintf(char *out, const char *format, va_list args)
{
 8014c4a:	b507      	push	{r0, r1, r2, lr}
  char *_out;
  _out = out;
 8014c4c:	ab02      	add	r3, sp, #8
 8014c4e:	f843 0d04 	str.w	r0, [r3, #-4]!
  return print( &_out, format, args );
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7ff ff5a 	bl	8014b0c <print>
}
 8014c58:	bd0e      	pop	{r1, r2, r3, pc}
	...

08014c5c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8014c5c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8014c60:	4b02      	ldr	r3, [pc, #8]	; (8014c6c <NVIC_PriorityGroupConfig+0x10>)
 8014c62:	f440 3100 	orr.w	r1, r0, #131072	; 0x20000
 8014c66:	60d9      	str	r1, [r3, #12]
 8014c68:	4770      	bx	lr
 8014c6a:	bf00      	nop
 8014c6c:	e000ed00 	.word	0xe000ed00

08014c70 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8014c70:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8014c74:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 8014c78:	4b01      	ldr	r3, [pc, #4]	; (8014c80 <NVIC_SetVectorTable+0x10>)
 8014c7a:	4310      	orrs	r0, r2
 8014c7c:	6098      	str	r0, [r3, #8]
 8014c7e:	4770      	bx	lr
 8014c80:	e000ed00 	.word	0xe000ed00

08014c84 <DMA_Init>:
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8014c84:	6802      	ldr	r2, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8014c86:	4b13      	ldr	r3, [pc, #76]	; (8014cd4 <DMA_Init+0x50>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8014c88:	b510      	push	{r4, lr}
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8014c8a:	4013      	ands	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8014c8c:	68cc      	ldr	r4, [r1, #12]
 8014c8e:	680a      	ldr	r2, [r1, #0]
 8014c90:	4314      	orrs	r4, r2
 8014c92:	694a      	ldr	r2, [r1, #20]
 8014c94:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8014c96:	698a      	ldr	r2, [r1, #24]
 8014c98:	4314      	orrs	r4, r2
 8014c9a:	69ca      	ldr	r2, [r1, #28]
 8014c9c:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8014c9e:	6a0a      	ldr	r2, [r1, #32]
 8014ca0:	4314      	orrs	r4, r2
 8014ca2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8014ca4:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8014ca6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8014ca8:	4314      	orrs	r4, r2
 8014caa:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8014cac:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8014cae:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8014cb0:	4314      	orrs	r4, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8014cb2:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8014cb4:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8014cb6:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8014cb8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8014cba:	f022 0407 	bic.w	r4, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8014cbe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8014cc0:	431a      	orrs	r2, r3
 8014cc2:	4322      	orrs	r2, r4

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8014cc4:	6142      	str	r2, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8014cc6:	690b      	ldr	r3, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8014cc8:	684a      	ldr	r2, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8014cca:	6889      	ldr	r1, [r1, #8]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8014ccc:	6043      	str	r3, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8014cce:	6082      	str	r2, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8014cd0:	60c1      	str	r1, [r0, #12]
 8014cd2:	bd10      	pop	{r4, pc}
 8014cd4:	f01c803f 	.word	0xf01c803f

08014cd8 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8014cd8:	2300      	movs	r3, #0
 8014cda:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8014cdc:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8014cde:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8014ce0:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8014ce2:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8014ce4:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8014ce6:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8014ce8:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8014cea:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8014cec:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8014cee:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8014cf0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8014cf2:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8014cf4:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8014cf6:	6383      	str	r3, [r0, #56]	; 0x38
 8014cf8:	4770      	bx	lr

08014cfa <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8014cfa:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014cfc:	b111      	cbz	r1, 8014d04 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8014cfe:	f043 0101 	orr.w	r1, r3, #1
 8014d02:	e001      	b.n	8014d08 <DMA_Cmd+0xe>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8014d04:	f023 0101 	bic.w	r1, r3, #1
 8014d08:	6001      	str	r1, [r0, #0]
 8014d0a:	4770      	bx	lr

08014d0c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8014d0c:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8014d0e:	4b08      	ldr	r3, [pc, #32]	; (8014d30 <DMA_ClearFlag+0x24>)
 8014d10:	4a08      	ldr	r2, [pc, #32]	; (8014d34 <DMA_ClearFlag+0x28>)
 8014d12:	4c09      	ldr	r4, [pc, #36]	; (8014d38 <DMA_ClearFlag+0x2c>)
 8014d14:	42a0      	cmp	r0, r4
 8014d16:	bf8c      	ite	hi
 8014d18:	4610      	movhi	r0, r2
 8014d1a:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8014d1c:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8014d20:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8014d24:	f021 1382 	bic.w	r3, r1, #8519810	; 0x820082
 8014d28:	bf14      	ite	ne
 8014d2a:	60c3      	strne	r3, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8014d2c:	6083      	streq	r3, [r0, #8]
 8014d2e:	bd10      	pop	{r4, pc}
 8014d30:	40026000 	.word	0x40026000
 8014d34:	40026400 	.word	0x40026400
 8014d38:	4002640f 	.word	0x4002640f

08014d3c <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8014d3c:	4b01      	ldr	r3, [pc, #4]	; (8014d44 <EXTI_ClearITPendingBit+0x8>)
 8014d3e:	6158      	str	r0, [r3, #20]
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop
 8014d44:	40013c00 	.word	0x40013c00

08014d48 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8014d48:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8014d4a:	680e      	ldr	r6, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8014d4c:	2200      	movs	r2, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8014d4e:	2301      	movs	r3, #1
 8014d50:	fa03 f302 	lsl.w	r3, r3, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8014d54:	ea03 0506 	and.w	r5, r3, r6

    if (currentpin == pos)
 8014d58:	429d      	cmp	r5, r3
 8014d5a:	d13e      	bne.n	8014dda <GPIO_Init+0x92>
    {
      // TK: added check if MODER already initialized to target value to avoid glitches during reconfiguration of output pins!
      if( ((GPIOx->MODER >> (2*pinpos)) & 3) != GPIO_InitStruct->GPIO_Mode ) {
 8014d5c:	6807      	ldr	r7, [r0, #0]
 8014d5e:	790c      	ldrb	r4, [r1, #4]
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 8014d60:	0053      	lsls	r3, r2, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      // TK: added check if MODER already initialized to target value to avoid glitches during reconfiguration of output pins!
      if( ((GPIOx->MODER >> (2*pinpos)) & 3) != GPIO_InitStruct->GPIO_Mode ) {
 8014d62:	fa27 f703 	lsr.w	r7, r7, r3
 8014d66:	f007 0703 	and.w	r7, r7, #3
 8014d6a:	42a7      	cmp	r7, r4
 8014d6c:	d00d      	beq.n	8014d8a <GPIO_Init+0x42>
	GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8014d6e:	6807      	ldr	r7, [r0, #0]
 8014d70:	f04f 0c03 	mov.w	ip, #3
 8014d74:	fa0c fc03 	lsl.w	ip, ip, r3
 8014d78:	ea27 070c 	bic.w	r7, r7, ip
 8014d7c:	6007      	str	r7, [r0, #0]
	GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8014d7e:	6807      	ldr	r7, [r0, #0]
 8014d80:	fa04 fc03 	lsl.w	ip, r4, r3
 8014d84:	ea4c 0707 	orr.w	r7, ip, r7
 8014d88:	6007      	str	r7, [r0, #0]
      }

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8014d8a:	3c01      	subs	r4, #1
 8014d8c:	2c01      	cmp	r4, #1
 8014d8e:	d817      	bhi.n	8014dc0 <GPIO_Init+0x78>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8014d90:	6887      	ldr	r7, [r0, #8]
 8014d92:	2403      	movs	r4, #3
 8014d94:	fa04 f403 	lsl.w	r4, r4, r3
 8014d98:	ea27 0704 	bic.w	r7, r7, r4
 8014d9c:	6087      	str	r7, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8014d9e:	794c      	ldrb	r4, [r1, #5]
 8014da0:	6887      	ldr	r7, [r0, #8]
 8014da2:	fa04 f403 	lsl.w	r4, r4, r3
 8014da6:	433c      	orrs	r4, r7
 8014da8:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8014daa:	6844      	ldr	r4, [r0, #4]
 8014dac:	ea24 0505 	bic.w	r5, r4, r5
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8014db0:	798c      	ldrb	r4, [r1, #6]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8014db2:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8014db4:	6845      	ldr	r5, [r0, #4]
 8014db6:	fa04 f402 	lsl.w	r4, r4, r2
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8014dba:	b2a4      	uxth	r4, r4
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8014dbc:	432c      	orrs	r4, r5
 8014dbe:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8014dc0:	68c5      	ldr	r5, [r0, #12]
 8014dc2:	2403      	movs	r4, #3
 8014dc4:	fa04 f403 	lsl.w	r4, r4, r3
 8014dc8:	ea25 0504 	bic.w	r5, r5, r4
 8014dcc:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8014dce:	79cd      	ldrb	r5, [r1, #7]
 8014dd0:	68c4      	ldr	r4, [r0, #12]
 8014dd2:	fa05 f303 	lsl.w	r3, r5, r3
 8014dd6:	4323      	orrs	r3, r4
 8014dd8:	60c3      	str	r3, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8014dda:	3201      	adds	r2, #1
 8014ddc:	2a10      	cmp	r2, #16
 8014dde:	d1b6      	bne.n	8014d4e <GPIO_Init+0x6>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8014de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014de2 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8014de2:	2100      	movs	r1, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8014de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014de8:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8014dea:	7101      	strb	r1, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8014dec:	7141      	strb	r1, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8014dee:	7181      	strb	r1, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8014df0:	71c1      	strb	r1, [r0, #7]
 8014df2:	4770      	bx	lr

08014df4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8014df4:	8301      	strh	r1, [r0, #24]
 8014df6:	4770      	bx	lr

08014df8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8014df8:	8341      	strh	r1, [r0, #26]
 8014dfa:	4770      	bx	lr

08014dfc <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8014dfc:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8014e00:	08c9      	lsrs	r1, r1, #3
 8014e02:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8014e04:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8014e06:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8014e08:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8014e0c:	240f      	movs	r4, #15
 8014e0e:	fa04 f403 	lsl.w	r4, r4, r3
 8014e12:	ea25 0404 	bic.w	r4, r5, r4
 8014e16:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8014e1a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8014e1e:	fa02 f203 	lsl.w	r2, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8014e22:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8014e24:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8014e28:	bd30      	pop	{r4, r5, pc}

08014e2a <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8014e2a:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014e2c:	b119      	cbz	r1, 8014e36 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8014e2e:	b299      	uxth	r1, r3
 8014e30:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8014e34:	e003      	b.n	8014e3e <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8014e36:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8014e3a:	040a      	lsls	r2, r1, #16
 8014e3c:	0c13      	lsrs	r3, r2, #16
 8014e3e:	8003      	strh	r3, [r0, #0]
 8014e40:	4770      	bx	lr

08014e42 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8014e42:	8883      	ldrh	r3, [r0, #4]
 8014e44:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8014e46:	b10a      	cbz	r2, 8014e4c <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8014e48:	4319      	orrs	r1, r3
 8014e4a:	e001      	b.n	8014e50 <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8014e4c:	ea23 0101 	bic.w	r1, r3, r1
 8014e50:	8081      	strh	r1, [r0, #4]
 8014e52:	4770      	bx	lr

08014e54 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8014e54:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8014e56:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8014e58:	b299      	uxth	r1, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8014e5a:	ea41 4200 	orr.w	r2, r1, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8014e5e:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
 8014e62:	4770      	bx	lr

08014e64 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8014e64:	43c9      	mvns	r1, r1
 8014e66:	b28a      	uxth	r2, r1
 8014e68:	8282      	strh	r2, [r0, #20]
 8014e6a:	4770      	bx	lr

08014e6c <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8014e6c:	4b01      	ldr	r3, [pc, #4]	; (8014e74 <PWR_BackupAccessCmd+0x8>)
 8014e6e:	6018      	str	r0, [r3, #0]
 8014e70:	4770      	bx	lr
 8014e72:	bf00      	nop
 8014e74:	420e0020 	.word	0x420e0020

08014e78 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8014e78:	4b1e      	ldr	r3, [pc, #120]	; (8014ef4 <RCC_GetClocksFreq+0x7c>)
 8014e7a:	689a      	ldr	r2, [r3, #8]
 8014e7c:	f002 010c 	and.w	r1, r2, #12

  switch (tmp)
 8014e80:	2904      	cmp	r1, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8014e82:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8014e84:	d003      	beq.n	8014e8e <RCC_GetClocksFreq+0x16>
 8014e86:	2908      	cmp	r1, #8
 8014e88:	d003      	beq.n	8014e92 <RCC_GetClocksFreq+0x1a>
 8014e8a:	4b1b      	ldr	r3, [pc, #108]	; (8014ef8 <RCC_GetClocksFreq+0x80>)
 8014e8c:	e018      	b.n	8014ec0 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8014e8e:	4b1b      	ldr	r3, [pc, #108]	; (8014efc <RCC_GetClocksFreq+0x84>)
 8014e90:	e016      	b.n	8014ec0 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8014e92:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014e94:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8014e96:	6859      	ldr	r1, [r3, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8014e98:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8014e9c:	bf14      	ite	ne
 8014e9e:	4b17      	ldrne	r3, [pc, #92]	; (8014efc <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8014ea0:	4b15      	ldreq	r3, [pc, #84]	; (8014ef8 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014ea2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8014ea6:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8014eaa:	4a12      	ldr	r2, [pc, #72]	; (8014ef4 <RCC_GetClocksFreq+0x7c>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8014eac:	f3c1 1488 	ubfx	r4, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8014eb0:	6851      	ldr	r1, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8014eb2:	4363      	muls	r3, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8014eb4:	f3c1 4401 	ubfx	r4, r1, #16, #2
 8014eb8:	1c62      	adds	r2, r4, #1
 8014eba:	0051      	lsls	r1, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8014ebc:	fbb3 f3f1 	udiv	r3, r3, r1
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8014ec0:	490c      	ldr	r1, [pc, #48]	; (8014ef4 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8014ec2:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8014ec4:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8014ec6:	4a0e      	ldr	r2, [pc, #56]	; (8014f00 <RCC_GetClocksFreq+0x88>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8014ec8:	f3c4 1303 	ubfx	r3, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8014ecc:	5cd4      	ldrb	r4, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8014ece:	6803      	ldr	r3, [r0, #0]
 8014ed0:	fa23 f304 	lsr.w	r3, r3, r4
 8014ed4:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8014ed6:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8014ed8:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8014edc:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8014ede:	fa23 f404 	lsr.w	r4, r3, r4
 8014ee2:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8014ee4:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8014ee6:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8014eea:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8014eec:	fa23 f302 	lsr.w	r3, r3, r2
 8014ef0:	60c3      	str	r3, [r0, #12]
 8014ef2:	bd10      	pop	{r4, pc}
 8014ef4:	40023800 	.word	0x40023800
 8014ef8:	00f42400 	.word	0x00f42400
 8014efc:	007a1200 	.word	0x007a1200
 8014f00:	2000000d 	.word	0x2000000d

08014f04 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8014f04:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8014f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014f0c:	4b08      	ldr	r3, [pc, #32]	; (8014f30 <RCC_RTCCLKConfig+0x2c>)
 8014f0e:	d108      	bne.n	8014f22 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8014f10:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8014f12:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8014f16:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8014f1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8014f1e:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8014f20:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8014f22:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014f24:	0500      	lsls	r0, r0, #20
 8014f26:	ea41 5210 	orr.w	r2, r1, r0, lsr #20
 8014f2a:	671a      	str	r2, [r3, #112]	; 0x70
 8014f2c:	4770      	bx	lr
 8014f2e:	bf00      	nop
 8014f30:	40023800 	.word	0x40023800

08014f34 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8014f34:	4b01      	ldr	r3, [pc, #4]	; (8014f3c <RCC_RTCCLKCmd+0x8>)
 8014f36:	6018      	str	r0, [r3, #0]
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	42470e3c 	.word	0x42470e3c

08014f40 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8014f40:	4b04      	ldr	r3, [pc, #16]	; (8014f54 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8014f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014f44:	b109      	cbz	r1, 8014f4a <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8014f46:	4310      	orrs	r0, r2
 8014f48:	e001      	b.n	8014f4e <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8014f4a:	ea22 0000 	bic.w	r0, r2, r0
 8014f4e:	6318      	str	r0, [r3, #48]	; 0x30
 8014f50:	4770      	bx	lr
 8014f52:	bf00      	nop
 8014f54:	40023800 	.word	0x40023800

08014f58 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8014f58:	4b04      	ldr	r3, [pc, #16]	; (8014f6c <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8014f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014f5c:	b109      	cbz	r1, 8014f62 <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8014f5e:	4310      	orrs	r0, r2
 8014f60:	e001      	b.n	8014f66 <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8014f62:	ea22 0000 	bic.w	r0, r2, r0
 8014f66:	6358      	str	r0, [r3, #52]	; 0x34
 8014f68:	4770      	bx	lr
 8014f6a:	bf00      	nop
 8014f6c:	40023800 	.word	0x40023800

08014f70 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8014f70:	4b04      	ldr	r3, [pc, #16]	; (8014f84 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8014f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014f74:	b109      	cbz	r1, 8014f7a <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8014f76:	4310      	orrs	r0, r2
 8014f78:	e001      	b.n	8014f7e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8014f7a:	ea22 0000 	bic.w	r0, r2, r0
 8014f7e:	6418      	str	r0, [r3, #64]	; 0x40
 8014f80:	4770      	bx	lr
 8014f82:	bf00      	nop
 8014f84:	40023800 	.word	0x40023800

08014f88 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8014f88:	4b04      	ldr	r3, [pc, #16]	; (8014f9c <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8014f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014f8c:	b109      	cbz	r1, 8014f92 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8014f8e:	4310      	orrs	r0, r2
 8014f90:	e001      	b.n	8014f96 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8014f92:	ea22 0000 	bic.w	r0, r2, r0
 8014f96:	6458      	str	r0, [r3, #68]	; 0x44
 8014f98:	4770      	bx	lr
 8014f9a:	bf00      	nop
 8014f9c:	40023800 	.word	0x40023800

08014fa0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8014fa0:	4b04      	ldr	r3, [pc, #16]	; (8014fb4 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8014fa2:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014fa4:	b109      	cbz	r1, 8014faa <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8014fa6:	4310      	orrs	r0, r2
 8014fa8:	e001      	b.n	8014fae <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8014faa:	ea22 0000 	bic.w	r0, r2, r0
 8014fae:	6118      	str	r0, [r3, #16]
 8014fb0:	4770      	bx	lr
 8014fb2:	bf00      	nop
 8014fb4:	40023800 	.word	0x40023800

08014fb8 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8014fb8:	4b04      	ldr	r3, [pc, #16]	; (8014fcc <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8014fba:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014fbc:	b109      	cbz	r1, 8014fc2 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8014fbe:	4310      	orrs	r0, r2
 8014fc0:	e001      	b.n	8014fc6 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8014fc2:	ea22 0000 	bic.w	r0, r2, r0
 8014fc6:	6158      	str	r0, [r3, #20]
 8014fc8:	4770      	bx	lr
 8014fca:	bf00      	nop
 8014fcc:	40023800 	.word	0x40023800

08014fd0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8014fd0:	4b04      	ldr	r3, [pc, #16]	; (8014fe4 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8014fd2:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014fd4:	b109      	cbz	r1, 8014fda <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8014fd6:	4310      	orrs	r0, r2
 8014fd8:	e001      	b.n	8014fde <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8014fda:	ea22 0000 	bic.w	r0, r2, r0
 8014fde:	6218      	str	r0, [r3, #32]
 8014fe0:	4770      	bx	lr
 8014fe2:	bf00      	nop
 8014fe4:	40023800 	.word	0x40023800

08014fe8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8014fe8:	4b04      	ldr	r3, [pc, #16]	; (8014ffc <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8014fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014fec:	b109      	cbz	r1, 8014ff2 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8014fee:	4310      	orrs	r0, r2
 8014ff0:	e001      	b.n	8014ff6 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8014ff2:	ea22 0000 	bic.w	r0, r2, r0
 8014ff6:	6258      	str	r0, [r3, #36]	; 0x24
 8014ff8:	4770      	bx	lr
 8014ffa:	bf00      	nop
 8014ffc:	40023800 	.word	0x40023800

08015000 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
 8015000:	2100      	movs	r1, #0
  
  while (Value >= 10)
 8015002:	2809      	cmp	r0, #9
 8015004:	d904      	bls.n	8015010 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
 8015006:	1c4b      	adds	r3, r1, #1
    Value -= 10;
 8015008:	380a      	subs	r0, #10
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 801500a:	b2d9      	uxtb	r1, r3
    Value -= 10;
 801500c:	b2c0      	uxtb	r0, r0
 801500e:	e7f8      	b.n	8015002 <RTC_ByteToBcd2+0x2>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8015010:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
 8015014:	b2c0      	uxtb	r0, r0
 8015016:	4770      	bx	lr

08015018 <RTC_StructInit>:
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8015018:	2100      	movs	r1, #0
 801501a:	227f      	movs	r2, #127	; 0x7f
 801501c:	23ff      	movs	r3, #255	; 0xff
 801501e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015022:	4770      	bx	lr

08015024 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8015024:	b082      	sub	sp, #8
  __IO uint32_t initcounter = 0x00;
 8015026:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8015028:	490d      	ldr	r1, [pc, #52]	; (8015060 <RTC_EnterInitMode+0x3c>)
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
  __IO uint32_t initcounter = 0x00;
 801502a:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801502c:	68ca      	ldr	r2, [r1, #12]
 801502e:	0650      	lsls	r0, r2, #25
 8015030:	d413      	bmi.n	801505a <RTC_EnterInitMode+0x36>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8015032:	f04f 30ff 	mov.w	r0, #4294967295
 8015036:	60c8      	str	r0, [r1, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8015038:	4b09      	ldr	r3, [pc, #36]	; (8015060 <RTC_EnterInitMode+0x3c>)
 801503a:	68d9      	ldr	r1, [r3, #12]
      initcounter++;  
 801503c:	9801      	ldr	r0, [sp, #4]
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 801503e:	f001 0240 	and.w	r2, r1, #64	; 0x40
      initcounter++;  
 8015042:	1c41      	adds	r1, r0, #1
 8015044:	9101      	str	r1, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8015046:	9801      	ldr	r0, [sp, #4]
 8015048:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801504c:	d001      	beq.n	8015052 <RTC_EnterInitMode+0x2e>
 801504e:	2a00      	cmp	r2, #0
 8015050:	d0f2      	beq.n	8015038 <RTC_EnterInitMode+0x14>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8015052:	68db      	ldr	r3, [r3, #12]
    {
      status = SUCCESS;
 8015054:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8015058:	e000      	b.n	801505c <RTC_EnterInitMode+0x38>
      status = ERROR;
    }        
  }
  else
  {
    status = SUCCESS;  
 801505a:	2001      	movs	r0, #1
  } 
    
  return (status);  
}
 801505c:	b002      	add	sp, #8
 801505e:	4770      	bx	lr
 8015060:	40002800 	.word	0x40002800

08015064 <RTC_ExitInitMode>:
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8015064:	4b02      	ldr	r3, [pc, #8]	; (8015070 <RTC_ExitInitMode+0xc>)
 8015066:	68da      	ldr	r2, [r3, #12]
 8015068:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 801506c:	60d8      	str	r0, [r3, #12]
 801506e:	4770      	bx	lr
 8015070:	40002800 	.word	0x40002800

08015074 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8015074:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015076:	4c10      	ldr	r4, [pc, #64]	; (80150b8 <RTC_Init+0x44>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8015078:	4605      	mov	r5, r0
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801507a:	23ca      	movs	r3, #202	; 0xca
  RTC->WPR = 0x53;
 801507c:	2053      	movs	r0, #83	; 0x53
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801507e:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8015080:	6260      	str	r0, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8015082:	f7ff ffcf 	bl	8015024 <RTC_EnterInitMode>
 8015086:	b190      	cbz	r0, 80150ae <RTC_Init+0x3a>
    status = ERROR;
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8015088:	68a1      	ldr	r1, [r4, #8]
 801508a:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 801508e:	60a2      	str	r2, [r4, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8015090:	68a0      	ldr	r0, [r4, #8]
 8015092:	682b      	ldr	r3, [r5, #0]
 8015094:	ea40 0103 	orr.w	r1, r0, r3
 8015098:	60a1      	str	r1, [r4, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 801509a:	68aa      	ldr	r2, [r5, #8]
 801509c:	6122      	str	r2, [r4, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 801509e:	6920      	ldr	r0, [r4, #16]
 80150a0:	686b      	ldr	r3, [r5, #4]
 80150a2:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 80150a6:	6121      	str	r1, [r4, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 80150a8:	f7ff ffdc 	bl	8015064 <RTC_ExitInitMode>

    status = SUCCESS;    
 80150ac:	2001      	movs	r0, #1
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80150ae:	4b02      	ldr	r3, [pc, #8]	; (80150b8 <RTC_Init+0x44>)
 80150b0:	22ff      	movs	r2, #255	; 0xff
 80150b2:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 80150b4:	bd38      	pop	{r3, r4, r5, pc}
 80150b6:	bf00      	nop
 80150b8:	40002800 	.word	0x40002800

080150bc <RTC_WaitForSynchro>:
  __IO uint32_t synchrocounter = 0;
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80150bc:	480f      	ldr	r0, [pc, #60]	; (80150fc <RTC_WaitForSynchro+0x40>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 80150be:	b082      	sub	sp, #8
  __IO uint32_t synchrocounter = 0;
 80150c0:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80150c2:	22ca      	movs	r2, #202	; 0xca
  RTC->WPR = 0x53;
 80150c4:	2153      	movs	r1, #83	; 0x53
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
  __IO uint32_t synchrocounter = 0;
 80150c6:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80150c8:	6242      	str	r2, [r0, #36]	; 0x24
  RTC->WPR = 0x53;
 80150ca:	6241      	str	r1, [r0, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 80150cc:	68c3      	ldr	r3, [r0, #12]
 80150ce:	f023 02a0 	bic.w	r2, r3, #160	; 0xa0
 80150d2:	60c2      	str	r2, [r0, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 80150d4:	4b09      	ldr	r3, [pc, #36]	; (80150fc <RTC_WaitForSynchro+0x40>)
 80150d6:	68d8      	ldr	r0, [r3, #12]
    synchrocounter++;  
 80150d8:	9901      	ldr	r1, [sp, #4]
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 80150da:	f000 0220 	and.w	r2, r0, #32
    synchrocounter++;  
 80150de:	1c48      	adds	r0, r1, #1
 80150e0:	9001      	str	r0, [sp, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 80150e2:	9901      	ldr	r1, [sp, #4]
 80150e4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80150e8:	d001      	beq.n	80150ee <RTC_WaitForSynchro+0x32>
 80150ea:	2a00      	cmp	r2, #0
 80150ec:	d0f2      	beq.n	80150d4 <RTC_WaitForSynchro+0x18>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 80150ee:	68d8      	ldr	r0, [r3, #12]
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80150f0:	22ff      	movs	r2, #255	; 0xff
 80150f2:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
}
 80150f4:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80150f8:	b002      	add	sp, #8
 80150fa:	4770      	bx	lr
 80150fc:	40002800 	.word	0x40002800

08015100 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8015100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015102:	4b21      	ldr	r3, [pc, #132]	; (8015188 <RTC_SetTime+0x88>)
 8015104:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8015106:	6899      	ldr	r1, [r3, #8]
  ErrorStatus status = ERROR;
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8015108:	b920      	cbnz	r0, 8015114 <RTC_SetTime+0x14>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801510a:	f011 0640 	ands.w	r6, r1, #64	; 0x40
 801510e:	d127      	bne.n	8015160 <RTC_SetTime+0x60>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8015110:	70e6      	strb	r6, [r4, #3]
 8015112:	e025      	b.n	8015160 <RTC_SetTime+0x60>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8015114:	f011 0040 	ands.w	r0, r1, #64	; 0x40
 8015118:	d100      	bne.n	801511c <RTC_SetTime+0x1c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 801511a:	70e0      	strb	r0, [r4, #3]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801511c:	7865      	ldrb	r5, [r4, #1]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 801511e:	7822      	ldrb	r2, [r4, #0]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8015120:	78a0      	ldrb	r0, [r4, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8015122:	78e4      	ldrb	r4, [r4, #3]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8015124:	022b      	lsls	r3, r5, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8015126:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801512a:	4301      	orrs	r1, r0
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 801512c:	ea41 4504 	orr.w	r5, r1, r4, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015130:	4c15      	ldr	r4, [pc, #84]	; (8015188 <RTC_SetTime+0x88>)
 8015132:	21ca      	movs	r1, #202	; 0xca
  RTC->WPR = 0x53;
 8015134:	2053      	movs	r0, #83	; 0x53
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8015136:	6261      	str	r1, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8015138:	6260      	str	r0, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801513a:	f7ff ff73 	bl	8015024 <RTC_EnterInitMode>
 801513e:	b158      	cbz	r0, 8015158 <RTC_SetTime+0x58>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8015140:	f005 327f 	and.w	r2, r5, #2139062143	; 0x7f7f7f7f
 8015144:	f022 45fe 	bic.w	r5, r2, #2130706432	; 0x7f000000
 8015148:	6025      	str	r5, [r4, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 801514a:	f7ff ff8b 	bl	8015064 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 801514e:	f7ff ffb5 	bl	80150bc <RTC_WaitForSynchro>
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
  {
    status = ERROR;
 8015152:	3000      	adds	r0, #0
 8015154:	bf18      	it	ne
 8015156:	2001      	movne	r0, #1
      status = SUCCESS;
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8015158:	4b0b      	ldr	r3, [pc, #44]	; (8015188 <RTC_SetTime+0x88>)
 801515a:	21ff      	movs	r1, #255	; 0xff
 801515c:	6259      	str	r1, [r3, #36]	; 0x24
 801515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8015160:	7820      	ldrb	r0, [r4, #0]
 8015162:	f7ff ff4d 	bl	8015000 <RTC_ByteToBcd2>
 8015166:	4607      	mov	r7, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8015168:	7860      	ldrb	r0, [r4, #1]
 801516a:	f7ff ff49 	bl	8015000 <RTC_ByteToBcd2>
 801516e:	4606      	mov	r6, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8015170:	78a0      	ldrb	r0, [r4, #2]
 8015172:	f7ff ff45 	bl	8015000 <RTC_ByteToBcd2>
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8015176:	78e2      	ldrb	r2, [r4, #3]
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8015178:	ea40 4502 	orr.w	r5, r0, r2, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801517c:	ea45 4307 	orr.w	r3, r5, r7, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8015180:	ea43 2506 	orr.w	r5, r3, r6, lsl #8
 8015184:	e7d4      	b.n	8015130 <RTC_SetTime+0x30>
 8015186:	bf00      	nop
 8015188:	40002800 	.word	0x40002800

0801518c <RTC_TimeStructInit>:
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 801518c:	2300      	movs	r3, #0
 801518e:	70c3      	strb	r3, [r0, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8015190:	7003      	strb	r3, [r0, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8015192:	7043      	strb	r3, [r0, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8015194:	7083      	strb	r3, [r0, #2]
 8015196:	4770      	bx	lr

08015198 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8015198:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 801519a:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 801519c:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 801519e:	884c      	ldrh	r4, [r1, #2]
 80151a0:	4323      	orrs	r3, r4
 80151a2:	888c      	ldrh	r4, [r1, #4]
 80151a4:	4323      	orrs	r3, r4
 80151a6:	88cc      	ldrh	r4, [r1, #6]
 80151a8:	4323      	orrs	r3, r4
 80151aa:	890c      	ldrh	r4, [r1, #8]
 80151ac:	4323      	orrs	r3, r4
 80151ae:	894c      	ldrh	r4, [r1, #10]
 80151b0:	4323      	orrs	r3, r4
 80151b2:	898c      	ldrh	r4, [r1, #12]
 80151b4:	4323      	orrs	r3, r4
 80151b6:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80151b8:	8a09      	ldrh	r1, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80151ba:	4323      	orrs	r3, r4

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80151bc:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80151c0:	431a      	orrs	r2, r3
 80151c2:	b293      	uxth	r3, r2
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80151c4:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80151c6:	8b82      	ldrh	r2, [r0, #28]
 80151c8:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 80151cc:	041a      	lsls	r2, r3, #16
 80151ce:	0c13      	lsrs	r3, r2, #16
 80151d0:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80151d2:	8201      	strh	r1, [r0, #16]
 80151d4:	bd10      	pop	{r4, pc}

080151d6 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80151d6:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80151d8:	b119      	cbz	r1, 80151e2 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80151da:	b299      	uxth	r1, r3
 80151dc:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 80151e0:	e003      	b.n	80151ea <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80151e2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80151e6:	040a      	lsls	r2, r1, #16
 80151e8:	0c13      	lsrs	r3, r2, #16
 80151ea:	8003      	strh	r3, [r0, #0]
 80151ec:	4770      	bx	lr

080151ee <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80151ee:	8883      	ldrh	r3, [r0, #4]
 80151f0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80151f2:	b10a      	cbz	r2, 80151f8 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80151f4:	4319      	orrs	r1, r3
 80151f6:	e001      	b.n	80151fc <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80151f8:	ea23 0101 	bic.w	r1, r3, r1
 80151fc:	8081      	strh	r1, [r0, #4]
 80151fe:	4770      	bx	lr

08015200 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8015200:	4a1c      	ldr	r2, [pc, #112]	; (8015274 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8015202:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8015204:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8015206:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8015208:	d012      	beq.n	8015230 <TIM_TimeBaseInit+0x30>
 801520a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801520e:	4290      	cmp	r0, r2
 8015210:	d00e      	beq.n	8015230 <TIM_TimeBaseInit+0x30>
 8015212:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015216:	d00b      	beq.n	8015230 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8015218:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 801521c:	4290      	cmp	r0, r2
 801521e:	d007      	beq.n	8015230 <TIM_TimeBaseInit+0x30>
 8015220:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015224:	4290      	cmp	r0, r2
 8015226:	d003      	beq.n	8015230 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8015228:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801522c:	4290      	cmp	r0, r2
 801522e:	d103      	bne.n	8015238 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8015230:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8015232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8015236:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8015238:	4a0f      	ldr	r2, [pc, #60]	; (8015278 <TIM_TimeBaseInit+0x78>)
 801523a:	4290      	cmp	r0, r2
 801523c:	d008      	beq.n	8015250 <TIM_TimeBaseInit+0x50>
 801523e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015242:	4290      	cmp	r0, r2
 8015244:	d004      	beq.n	8015250 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8015246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 801524a:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 801524c:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 801524e:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8015250:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8015252:	684b      	ldr	r3, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8015254:	880a      	ldrh	r2, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8015256:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8015258:	4b06      	ldr	r3, [pc, #24]	; (8015274 <TIM_TimeBaseInit+0x74>)

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 801525a:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 801525c:	4298      	cmp	r0, r3
 801525e:	d003      	beq.n	8015268 <TIM_TimeBaseInit+0x68>
 8015260:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8015264:	4290      	cmp	r0, r2
 8015266:	d101      	bne.n	801526c <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8015268:	7a89      	ldrb	r1, [r1, #10]
 801526a:	8601      	strh	r1, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 801526c:	2301      	movs	r3, #1
 801526e:	8283      	strh	r3, [r0, #20]
 8015270:	4770      	bx	lr
 8015272:	bf00      	nop
 8015274:	40010000 	.word	0x40010000
 8015278:	40001000 	.word	0x40001000

0801527c <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 801527c:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801527e:	b119      	cbz	r1, 8015288 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8015280:	b299      	uxth	r1, r3
 8015282:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8015286:	e003      	b.n	8015290 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8015288:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 801528c:	040a      	lsls	r2, r1, #16
 801528e:	0c13      	lsrs	r3, r2, #16
 8015290:	8003      	strh	r3, [r0, #0]
 8015292:	4770      	bx	lr

08015294 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8015294:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8015296:	b119      	cbz	r1, 80152a0 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8015298:	b299      	uxth	r1, r3
 801529a:	f041 0301 	orr.w	r3, r1, #1
 801529e:	e003      	b.n	80152a8 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80152a0:	f023 0101 	bic.w	r1, r3, #1
 80152a4:	040a      	lsls	r2, r1, #16
 80152a6:	0c13      	lsrs	r3, r2, #16
 80152a8:	8003      	strh	r3, [r0, #0]
 80152aa:	4770      	bx	lr

080152ac <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80152ac:	8983      	ldrh	r3, [r0, #12]
 80152ae:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80152b0:	b10a      	cbz	r2, 80152b6 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80152b2:	4319      	orrs	r1, r3
 80152b4:	e001      	b.n	80152ba <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80152b6:	ea23 0101 	bic.w	r1, r3, r1
 80152ba:	8181      	strh	r1, [r0, #12]
 80152bc:	4770      	bx	lr

080152be <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80152be:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80152c0:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80152c2:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 80152c6:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80152c8:	d003      	beq.n	80152d2 <TIM_GetITStatus+0x14>
 80152ca:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 80152cc:	bf0c      	ite	eq
 80152ce:	2000      	moveq	r0, #0
 80152d0:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80152d2:	4770      	bx	lr

080152d4 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80152d4:	43c9      	mvns	r1, r1
 80152d6:	b28a      	uxth	r2, r1
 80152d8:	8202      	strh	r2, [r0, #16]
 80152da:	4770      	bx	lr

080152dc <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80152dc:	8a03      	ldrh	r3, [r0, #16]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80152de:	b530      	push	{r4, r5, lr}
 80152e0:	460d      	mov	r5, r1
 80152e2:	4604      	mov	r4, r0
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80152e4:	88ea      	ldrh	r2, [r5, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80152e6:	b298      	uxth	r0, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80152e8:	f420 5140 	bic.w	r1, r0, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80152ec:	4311      	orrs	r1, r2
 80152ee:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80152f0:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80152f2:	f423 50b0 	bic.w	r0, r3, #5632	; 0x1600
 80152f6:	f020 010c 	bic.w	r1, r0, #12
 80152fa:	040a      	lsls	r2, r1, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80152fc:	8928      	ldrh	r0, [r5, #8]
 80152fe:	88a9      	ldrh	r1, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8015300:	0c13      	lsrs	r3, r2, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8015302:	ea40 0201 	orr.w	r2, r0, r1
 8015306:	8968      	ldrh	r0, [r5, #10]
 8015308:	4302      	orrs	r2, r0
 801530a:	b291      	uxth	r1, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 801530c:	430b      	orrs	r3, r1
 801530e:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8015310:	8aa2      	ldrh	r2, [r4, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8015312:	89ab      	ldrh	r3, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8015314:	b290      	uxth	r0, r2

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8015316:	f420 7140 	bic.w	r1, r0, #768	; 0x300
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 801531a:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 801531c:	4319      	orrs	r1, r3
 801531e:	82a1      	strh	r1, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8015320:	4668      	mov	r0, sp
 8015322:	f7ff fda9 	bl	8014e78 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8015326:	4a1a      	ldr	r2, [pc, #104]	; (8015390 <USART_Init+0xb4>)
 8015328:	4294      	cmp	r4, r2
 801532a:	d003      	beq.n	8015334 <USART_Init+0x58>
 801532c:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8015330:	4284      	cmp	r4, r0
 8015332:	d101      	bne.n	8015338 <USART_Init+0x5c>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8015334:	9b03      	ldr	r3, [sp, #12]
 8015336:	e000      	b.n	801533a <USART_Init+0x5e>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8015338:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 801533a:	89a1      	ldrh	r1, [r4, #12]
 801533c:	b20a      	sxth	r2, r1
 801533e:	2a00      	cmp	r2, #0
 8015340:	f04f 0019 	mov.w	r0, #25
 8015344:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8015346:	fb00 f303 	mul.w	r3, r0, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 801534a:	da01      	bge.n	8015350 <USART_Init+0x74>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 801534c:	0051      	lsls	r1, r2, #1
 801534e:	e000      	b.n	8015352 <USART_Init+0x76>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8015350:	0091      	lsls	r1, r2, #2
 8015352:	fbb3 f1f1 	udiv	r1, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8015356:	2364      	movs	r3, #100	; 0x64
 8015358:	fbb1 f0f3 	udiv	r0, r1, r3
 801535c:	0102      	lsls	r2, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 801535e:	0910      	lsrs	r0, r2, #4
 8015360:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8015364:	89a0      	ldrh	r0, [r4, #12]
 8015366:	b200      	sxth	r0, r0
 8015368:	2800      	cmp	r0, #0
 801536a:	da06      	bge.n	801537a <USART_Init+0x9e>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 801536c:	00c9      	lsls	r1, r1, #3
 801536e:	3132      	adds	r1, #50	; 0x32
 8015370:	fbb1 f3f3 	udiv	r3, r1, r3
 8015374:	f003 0007 	and.w	r0, r3, #7
 8015378:	e005      	b.n	8015386 <USART_Init+0xaa>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 801537a:	0109      	lsls	r1, r1, #4
 801537c:	3132      	adds	r1, #50	; 0x32
 801537e:	fbb1 f3f3 	udiv	r3, r1, r3
 8015382:	f003 000f 	and.w	r0, r3, #15
 8015386:	4302      	orrs	r2, r0
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8015388:	b290      	uxth	r0, r2
 801538a:	8120      	strh	r0, [r4, #8]
}
 801538c:	b005      	add	sp, #20
 801538e:	bd30      	pop	{r4, r5, pc}
 8015390:	40011000 	.word	0x40011000

08015394 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8015394:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8015396:	b119      	cbz	r1, 80153a0 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8015398:	b299      	uxth	r1, r3
 801539a:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 801539e:	e003      	b.n	80153a8 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80153a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80153a4:	040a      	lsls	r2, r1, #16
 80153a6:	0c13      	lsrs	r3, r2, #16
 80153a8:	8183      	strh	r3, [r0, #12]
 80153aa:	4770      	bx	lr

080153ac <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80153ac:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80153b0:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80153b2:	2401      	movs	r4, #1
 80153b4:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80153b8:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80153ba:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80153be:	d101      	bne.n	80153c4 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 80153c0:	300c      	adds	r0, #12
 80153c2:	e004      	b.n	80153ce <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80153c4:	2b02      	cmp	r3, #2
 80153c6:	d101      	bne.n	80153cc <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 80153c8:	3010      	adds	r0, #16
 80153ca:	e000      	b.n	80153ce <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80153cc:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80153ce:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 80153d0:	b112      	cbz	r2, 80153d8 <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80153d2:	ea43 0201 	orr.w	r2, r3, r1
 80153d6:	e001      	b.n	80153dc <USART_ITConfig+0x30>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80153d8:	ea23 0201 	bic.w	r2, r3, r1
 80153dc:	6002      	str	r2, [r0, #0]
 80153de:	bd10      	pop	{r4, pc}

080153e0 <USBD_Resume>:
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 80153e0:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 80153e4:	b510      	push	{r4, lr}
 80153e6:	4604      	mov	r4, r0
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 80153e8:	6918      	ldr	r0, [r3, #16]
 80153ea:	4780      	blx	r0
  pdev->dev.device_status = pdev->dev.device_old_status;  
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 80153ec:	2103      	movs	r1, #3
 80153ee:	f884 1112 	strb.w	r1, [r4, #274]	; 0x112
  return USBD_OK;
}
 80153f2:	2000      	movs	r0, #0
 80153f4:	bd10      	pop	{r4, pc}

080153f6 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 80153f6:	b508      	push	{r3, lr}
  pdev->dev.device_old_status = pdev->dev.device_status;
 80153f8:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 80153fc:	2104      	movs	r1, #4
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
  pdev->dev.device_old_status = pdev->dev.device_status;
 80153fe:	f880 3113 	strb.w	r3, [r0, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8015402:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8015406:	f8d0 05e8 	ldr.w	r0, [r0, #1512]	; 0x5e8
 801540a:	68c2      	ldr	r2, [r0, #12]
 801540c:	4790      	blx	r2
  return USBD_OK;
}
 801540e:	2000      	movs	r0, #0
 8015410:	bd08      	pop	{r3, pc}

08015412 <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 8015412:	b508      	push	{r3, lr}
  if(pdev->dev.class_cb->SOF)
 8015414:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015418:	69d9      	ldr	r1, [r3, #28]
 801541a:	b101      	cbz	r1, 801541e <USBD_SOF+0xc>
  {
    pdev->dev.class_cb->SOF(pdev); 
 801541c:	4788      	blx	r1
  }
  return USBD_OK;
}
 801541e:	2000      	movs	r0, #0
 8015420:	bd08      	pop	{r3, pc}

08015422 <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8015422:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 8015424:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015428:	6a19      	ldr	r1, [r3, #32]
 801542a:	4788      	blx	r1
  return USBD_OK;
}
 801542c:	2000      	movs	r0, #0
 801542e:	bd08      	pop	{r3, pc}

08015430 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8015430:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 8015432:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015436:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015438:	4788      	blx	r1
  return USBD_OK;
}
 801543a:	2000      	movs	r0, #0
 801543c:	bd08      	pop	{r3, pc}

0801543e <USBD_Reset>:
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 801543e:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8015440:	b510      	push	{r4, lr}
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8015442:	2240      	movs	r2, #64	; 0x40
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8015444:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8015446:	460b      	mov	r3, r1
 8015448:	f001 ff18 	bl	801727c <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 801544c:	2180      	movs	r1, #128	; 0x80
 801544e:	2240      	movs	r2, #64	; 0x40
 8015450:	2300      	movs	r3, #0
 8015452:	4620      	mov	r0, r4
 8015454:	f001 ff12 	bl	801727c <DCD_EP_Open>
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8015458:	f8d4 05e8 	ldr.w	r0, [r4, #1512]	; 0x5e8
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 801545c:	2301      	movs	r3, #1
 801545e:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8015462:	6841      	ldr	r1, [r0, #4]
 8015464:	78a0      	ldrb	r0, [r4, #2]
 8015466:	4788      	blx	r1
  
  return USBD_OK;
}
 8015468:	2000      	movs	r0, #0
 801546a:	bd10      	pop	{r4, pc}

0801546c <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 801546c:	b513      	push	{r0, r1, r4, lr}
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 801546e:	4669      	mov	r1, sp
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 8015470:	4604      	mov	r4, r0
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8015472:	f000 f923 	bl	80156bc <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 8015476:	f89d 1000 	ldrb.w	r1, [sp]
 801547a:	f001 031f 	and.w	r3, r1, #31
 801547e:	2b01      	cmp	r3, #1
 8015480:	d00c      	beq.n	801549c <USBD_SetupStage+0x30>
 8015482:	d306      	bcc.n	8015492 <USBD_SetupStage+0x26>
 8015484:	2b02      	cmp	r3, #2
 8015486:	d10e      	bne.n	80154a6 <USBD_SetupStage+0x3a>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 8015488:	4620      	mov	r0, r4
 801548a:	4669      	mov	r1, sp
 801548c:	f000 f946 	bl	801571c <USBD_StdEPReq>
    break;
 8015490:	e00e      	b.n	80154b0 <USBD_SetupStage+0x44>
  USBD_ParseSetupRequest(pdev , &req);
  
  switch (req.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 8015492:	4620      	mov	r0, r4
 8015494:	4669      	mov	r1, sp
 8015496:	f000 f9bb 	bl	8015810 <USBD_StdDevReq>
    break;
 801549a:	e009      	b.n	80154b0 <USBD_SetupStage+0x44>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 801549c:	4620      	mov	r0, r4
 801549e:	4669      	mov	r1, sp
 80154a0:	f000 f99e 	bl	80157e0 <USBD_StdItfReq>
    break;
 80154a4:	e004      	b.n	80154b0 <USBD_SetupStage+0x44>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
    break;
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 80154a6:	4620      	mov	r0, r4
 80154a8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80154ac:	f001 ff58 	bl	8017360 <DCD_EP_Stall>
    break;
  }  
  return USBD_OK;
}
 80154b0:	2000      	movs	r0, #0
 80154b2:	bd1c      	pop	{r2, r3, r4, pc}

080154b4 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 80154b4:	b570      	push	{r4, r5, r6, lr}
 80154b6:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 80154b8:	2900      	cmp	r1, #0
 80154ba:	d147      	bne.n	801554c <USBD_DataInStage+0x98>
  {
    ep = &pdev->dev.in_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 80154bc:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 80154c0:	2b02      	cmp	r3, #2
 80154c2:	d137      	bne.n	8015534 <USBD_DataInStage+0x80>
    {
      if(ep->rem_data_len > ep->maxpacket)
 80154c4:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 80154c8:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d911      	bls.n	80154f4 <USBD_DataInStage+0x40>
      {
        ep->rem_data_len -=  ep->maxpacket;
 80154d0:	1ad2      	subs	r2, r2, r3
 80154d2:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
        if(pdev->cfg.dma_enable == 1)
 80154d6:	78c0      	ldrb	r0, [r0, #3]
 80154d8:	2801      	cmp	r0, #1
 80154da:	d104      	bne.n	80154e6 <USBD_DataInStage+0x32>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 80154dc:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 80154e0:	18cb      	adds	r3, r1, r3
 80154e2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        }
        USBD_CtlContinueSendData (pdev, 
 80154e6:	4620      	mov	r0, r4
 80154e8:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 80154ec:	b292      	uxth	r2, r2
 80154ee:	f000 f8b5 	bl	801565c <USBD_CtlContinueSendData>
 80154f2:	e01f      	b.n	8015534 <USBD_DataInStage+0x80>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 80154f4:	f8d0 513c 	ldr.w	r5, [r0, #316]	; 0x13c
 80154f8:	fbb5 f6f3 	udiv	r6, r5, r3
 80154fc:	fb03 5616 	mls	r6, r3, r6, r5
 8015500:	b95e      	cbnz	r6, 801551a <USBD_DataInStage+0x66>
 8015502:	429d      	cmp	r5, r3
 8015504:	d309      	bcc.n	801551a <USBD_DataInStage+0x66>
           (ep->total_data_len >= ep->maxpacket) &&
 8015506:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 801550a:	4295      	cmp	r5, r2
 801550c:	d205      	bcs.n	801551a <USBD_DataInStage+0x66>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 801550e:	4632      	mov	r2, r6
 8015510:	f000 f8a4 	bl	801565c <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8015514:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8015518:	e00c      	b.n	8015534 <USBD_DataInStage+0x80>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 801551a:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 801551e:	68c1      	ldr	r1, [r0, #12]
 8015520:	b129      	cbz	r1, 801552e <USBD_DataInStage+0x7a>
 8015522:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 8015526:	2b03      	cmp	r3, #3
 8015528:	d101      	bne.n	801552e <USBD_DataInStage+0x7a>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 801552a:	4620      	mov	r0, r4
 801552c:	4788      	blx	r1
          }          
          USBD_CtlReceiveStatus(pdev);
 801552e:	4620      	mov	r0, r4
 8015530:	f000 f8b5 	bl	801569e <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev.test_mode == 1)
 8015534:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
 8015538:	2a01      	cmp	r2, #1
 801553a:	d110      	bne.n	801555e <USBD_DataInStage+0xaa>
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 801553c:	4909      	ldr	r1, [pc, #36]	; (8015564 <USBD_DataInStage+0xb0>)
 801553e:	6920      	ldr	r0, [r4, #16]
 8015540:	680b      	ldr	r3, [r1, #0]
      }
    }
    if (pdev->dev.test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
 8015542:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8015544:	6043      	str	r3, [r0, #4]
      }
    }
    if (pdev->dev.test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
 8015546:	f884 2116 	strb.w	r2, [r4, #278]	; 0x116
 801554a:	e008      	b.n	801555e <USBD_DataInStage+0xaa>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 801554c:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015550:	695b      	ldr	r3, [r3, #20]
 8015552:	b123      	cbz	r3, 801555e <USBD_DataInStage+0xaa>
 8015554:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015558:	2a03      	cmp	r2, #3
 801555a:	d100      	bne.n	801555e <USBD_DataInStage+0xaa>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 801555c:	4798      	blx	r3
  }  
  return USBD_OK;
}
 801555e:	2000      	movs	r0, #0
 8015560:	bd70      	pop	{r4, r5, r6, pc}
 8015562:	bf00      	nop
 8015564:	20011940 	.word	0x20011940

08015568 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8015568:	b510      	push	{r4, lr}
 801556a:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 801556c:	bb59      	cbnz	r1, 80155c6 <USBD_DataOutStage+0x5e>
  {
    ep = &pdev->dev.out_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 801556e:	f890 1111 	ldrb.w	r1, [r0, #273]	; 0x111
 8015572:	2903      	cmp	r1, #3
 8015574:	d130      	bne.n	80155d8 <USBD_DataOutStage+0x70>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8015576:	f8d0 2390 	ldr.w	r2, [r0, #912]	; 0x390
 801557a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 801557e:	429a      	cmp	r2, r3
 8015580:	d914      	bls.n	80155ac <USBD_DataOutStage+0x44>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8015582:	1ad2      	subs	r2, r2, r3
 8015584:	f8c0 2390 	str.w	r2, [r0, #912]	; 0x390
        
        if(pdev->cfg.dma_enable == 1)
 8015588:	78c0      	ldrb	r0, [r0, #3]
 801558a:	2801      	cmp	r0, #1
 801558c:	d104      	bne.n	8015598 <USBD_DataOutStage+0x30>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 801558e:	f8d4 1380 	ldr.w	r1, [r4, #896]	; 0x380
 8015592:	18c8      	adds	r0, r1, r3
 8015594:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
        }        
        USBD_CtlContinueRx (pdev, 
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8015598:	429a      	cmp	r2, r3
 801559a:	bf28      	it	cs
 801559c:	461a      	movcs	r2, r3
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 801559e:	4620      	mov	r0, r4
 80155a0:	f8d4 1380 	ldr.w	r1, [r4, #896]	; 0x380
 80155a4:	b292      	uxth	r2, r2
 80155a6:	f000 f862 	bl	801566e <USBD_CtlContinueRx>
 80155aa:	e015      	b.n	80155d8 <USBD_DataOutStage+0x70>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 80155ac:	f8d0 15e4 	ldr.w	r1, [r0, #1508]	; 0x5e4
 80155b0:	690b      	ldr	r3, [r1, #16]
 80155b2:	b123      	cbz	r3, 80155be <USBD_DataOutStage+0x56>
 80155b4:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80155b8:	2a03      	cmp	r2, #3
 80155ba:	d100      	bne.n	80155be <USBD_DataOutStage+0x56>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 80155bc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80155be:	4620      	mov	r0, r4
 80155c0:	f000 f85e 	bl	8015680 <USBD_CtlSendStatus>
 80155c4:	e008      	b.n	80155d8 <USBD_DataOutStage+0x70>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 80155c6:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80155ca:	699b      	ldr	r3, [r3, #24]
 80155cc:	b123      	cbz	r3, 80155d8 <USBD_DataOutStage+0x70>
 80155ce:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80155d2:	2a03      	cmp	r2, #3
 80155d4:	d100      	bne.n	80155d8 <USBD_DataOutStage+0x70>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 80155d6:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80155d8:	2000      	movs	r0, #0
 80155da:	bd10      	pop	{r4, pc}

080155dc <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 80155dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155e0:	9f06      	ldr	r7, [sp, #24]
 80155e2:	4604      	mov	r4, r0
 80155e4:	4616      	mov	r6, r2
 80155e6:	4698      	mov	r8, r3
 80155e8:	460d      	mov	r5, r1
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 80155ea:	f7fe fa7f 	bl	8013aec <USB_OTG_BSP_Init>
  pdev->dev.class_cb = class_cb;
  pdev->dev.usr_cb = usr_cb;  
  pdev->dev.usr_device = pDevice;    
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 80155ee:	4620      	mov	r0, r4
 80155f0:	4629      	mov	r1, r5
  USB_OTG_BSP_Init(pdev);  
  
  USBD_DeInit(pdev);
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 80155f2:	f8c4 85e4 	str.w	r8, [r4, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 80155f6:	f8c4 75e8 	str.w	r7, [r4, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 80155fa:	f8c4 65ec 	str.w	r6, [r4, #1516]	; 0x5ec
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 80155fe:	f001 fdf2 	bl	80171e6 <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 8015602:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 8015606:	6818      	ldr	r0, [r3, #0]
 8015608:	4780      	blx	r0
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 801560a:	4620      	mov	r0, r4
}
 801560c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8015610:	f7fe baba 	b.w	8013b88 <USB_OTG_BSP_EnableInterrupt>

08015614 <USBD_SetCfg>:
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8015614:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8015618:	b510      	push	{r4, lr}
 801561a:	4604      	mov	r4, r0
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 801561c:	681a      	ldr	r2, [r3, #0]
 801561e:	4790      	blx	r2
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8015620:	f8d4 05e8 	ldr.w	r0, [r4, #1512]	; 0x5e8
 8015624:	6881      	ldr	r1, [r0, #8]
 8015626:	4788      	blx	r1
  return USBD_OK; 
}
 8015628:	2000      	movs	r0, #0
 801562a:	bd10      	pop	{r4, pc}

0801562c <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 801562c:	b508      	push	{r3, lr}
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 801562e:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8015632:	685a      	ldr	r2, [r3, #4]
 8015634:	4790      	blx	r2
  return USBD_OK;
}
 8015636:	2000      	movs	r0, #0
 8015638:	bd08      	pop	{r3, pc}

0801563a <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 801563a:	b538      	push	{r3, r4, r5, lr}
 801563c:	4604      	mov	r4, r0
 801563e:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
 8015640:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 8015644:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8015648:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
  pdev->dev.in_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 801564a:	2202      	movs	r2, #2
 801564c:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8015650:	2100      	movs	r1, #0
 8015652:	462a      	mov	r2, r5
 8015654:	f001 fe69 	bl	801732a <DCD_EP_Tx>
 
  return ret;
}
 8015658:	2000      	movs	r0, #0
 801565a:	bd38      	pop	{r3, r4, r5, pc}

0801565c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 801565c:	b510      	push	{r4, lr}
 801565e:	460c      	mov	r4, r1
 8015660:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8015662:	2100      	movs	r1, #0
 8015664:	4622      	mov	r2, r4
 8015666:	f001 fe60 	bl	801732a <DCD_EP_Tx>
  
  
  return ret;
}
 801566a:	2000      	movs	r0, #0
 801566c:	bd10      	pop	{r4, pc}

0801566e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 801566e:	b510      	push	{r4, lr}
 8015670:	460c      	mov	r4, r1
 8015672:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_PrepareRx (pdev,
 8015674:	2100      	movs	r1, #0
 8015676:	4622      	mov	r2, r4
 8015678:	f001 fe3a 	bl	80172f0 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
}
 801567c:	2000      	movs	r0, #0
 801567e:	bd10      	pop	{r4, pc}

08015680 <USBD_CtlSendStatus>:
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 8015680:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8015682:	2304      	movs	r3, #4
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8015684:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 8015686:	460a      	mov	r2, r1
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8015688:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 801568a:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_Tx (pdev,
 801568e:	460b      	mov	r3, r1
 8015690:	f001 fe4b 	bl	801732a <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8015694:	4620      	mov	r0, r4
 8015696:	f001 fd88 	bl	80171aa <USB_OTG_EP0_OutStart>
  
  return ret;
}
 801569a:	2000      	movs	r0, #0
 801569c:	bd10      	pop	{r4, pc}

0801569e <USBD_CtlReceiveStatus>:
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 801569e:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 80156a0:	2305      	movs	r3, #5
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80156a2:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 80156a4:	460a      	mov	r2, r1
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80156a6:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 80156a8:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 80156ac:	460b      	mov	r3, r1
 80156ae:	f001 fe1f 	bl	80172f0 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 80156b2:	4620      	mov	r0, r4
 80156b4:	f001 fd79 	bl	80171aa <USB_OTG_EP0_OutStart>
  
  return ret;
}
 80156b8:	2000      	movs	r0, #0
 80156ba:	bd10      	pop	{r4, pc}

080156bc <USBD_ParseSetupRequest>:
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 80156bc:	f890 35cc 	ldrb.w	r3, [r0, #1484]	; 0x5cc
 80156c0:	700b      	strb	r3, [r1, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 80156c2:	f890 25cd 	ldrb.w	r2, [r0, #1485]	; 0x5cd
 80156c6:	704a      	strb	r2, [r1, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 80156c8:	f890 35ce 	ldrb.w	r3, [r0, #1486]	; 0x5ce
 80156cc:	f890 25cf 	ldrb.w	r2, [r0, #1487]	; 0x5cf
 80156d0:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80156d4:	804a      	strh	r2, [r1, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 80156d6:	f890 35d0 	ldrb.w	r3, [r0, #1488]	; 0x5d0
 80156da:	f890 25d1 	ldrb.w	r2, [r0, #1489]	; 0x5d1
 80156de:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80156e2:	808a      	strh	r2, [r1, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 80156e4:	f890 35d2 	ldrb.w	r3, [r0, #1490]	; 0x5d2
 80156e8:	f890 25d3 	ldrb.w	r2, [r0, #1491]	; 0x5d3
 80156ec:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80156f0:	b293      	uxth	r3, r2
 80156f2:	80cb      	strh	r3, [r1, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 80156f4:	2101      	movs	r1, #1
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 80156f6:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 80156fa:	f880 1111 	strb.w	r1, [r0, #273]	; 0x111
 80156fe:	4770      	bx	lr

08015700 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8015700:	b510      	push	{r4, lr}
  
  DCD_EP_Stall(pdev , 0x80);
 8015702:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8015704:	4604      	mov	r4, r0
  
  DCD_EP_Stall(pdev , 0x80);
 8015706:	f001 fe2b 	bl	8017360 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 801570a:	4620      	mov	r0, r4
 801570c:	2100      	movs	r1, #0
 801570e:	f001 fe27 	bl	8017360 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 8015712:	4620      	mov	r0, r4
}
 8015714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                            USB_SETUP_REQ *req)
{
  
  DCD_EP_Stall(pdev , 0x80);
  DCD_EP_Stall(pdev , 0);
  USB_OTG_EP0_OutStart(pdev);  
 8015718:	f001 bd47 	b.w	80171aa <USB_OTG_EP0_OutStart>

0801571c <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 801571c:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 801571e:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 8015720:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 8015722:	2e01      	cmp	r6, #1
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8015724:	4604      	mov	r4, r0
 8015726:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 8015728:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 801572a:	d011      	beq.n	8015750 <USBD_StdEPReq+0x34>
 801572c:	d329      	bcc.n	8015782 <USBD_StdEPReq+0x66>
 801572e:	2e03      	cmp	r6, #3
 8015730:	d151      	bne.n	80157d6 <USBD_StdEPReq+0xba>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 8015732:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015736:	2a02      	cmp	r2, #2
 8015738:	d02a      	beq.n	8015790 <USBD_StdEPReq+0x74>
 801573a:	2a03      	cmp	r2, #3
 801573c:	d149      	bne.n	80157d2 <USBD_StdEPReq+0xb6>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 801573e:	8849      	ldrh	r1, [r1, #2]
 8015740:	b9a9      	cbnz	r1, 801576e <USBD_StdEPReq+0x52>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8015742:	b1a3      	cbz	r3, 801576e <USBD_StdEPReq+0x52>
 8015744:	2b80      	cmp	r3, #128	; 0x80
 8015746:	d012      	beq.n	801576e <USBD_StdEPReq+0x52>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 8015748:	4619      	mov	r1, r3
 801574a:	f001 fe09 	bl	8017360 <DCD_EP_Stall>
 801574e:	e00e      	b.n	801576e <USBD_StdEPReq+0x52>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 8015750:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015754:	2a02      	cmp	r2, #2
 8015756:	d01b      	beq.n	8015790 <USBD_StdEPReq+0x74>
 8015758:	2a03      	cmp	r2, #3
 801575a:	d13a      	bne.n	80157d2 <USBD_StdEPReq+0xb6>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 801575c:	8849      	ldrh	r1, [r1, #2]
 801575e:	2900      	cmp	r1, #0
 8015760:	d139      	bne.n	80157d6 <USBD_StdEPReq+0xba>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8015762:	b153      	cbz	r3, 801577a <USBD_StdEPReq+0x5e>
 8015764:	2b80      	cmp	r3, #128	; 0x80
 8015766:	d008      	beq.n	801577a <USBD_StdEPReq+0x5e>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 8015768:	4619      	mov	r1, r3
 801576a:	f001 fe17 	bl	801739c <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 801576e:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 8015772:	4629      	mov	r1, r5
 8015774:	6883      	ldr	r3, [r0, #8]
 8015776:	4620      	mov	r0, r4
 8015778:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801577a:	4620      	mov	r0, r4
 801577c:	f7ff ff80 	bl	8015680 <USBD_CtlSendStatus>
 8015780:	e029      	b.n	80157d6 <USBD_StdEPReq+0xba>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 8015782:	f890 5112 	ldrb.w	r5, [r0, #274]	; 0x112
 8015786:	2d02      	cmp	r5, #2
 8015788:	d002      	beq.n	8015790 <USBD_StdEPReq+0x74>
 801578a:	2d03      	cmp	r5, #3
 801578c:	d121      	bne.n	80157d2 <USBD_StdEPReq+0xb6>
 801578e:	e006      	b.n	801579e <USBD_StdEPReq+0x82>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8015790:	b30b      	cbz	r3, 80157d6 <USBD_StdEPReq+0xba>
 8015792:	2b80      	cmp	r3, #128	; 0x80
 8015794:	d01f      	beq.n	80157d6 <USBD_StdEPReq+0xba>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8015796:	4619      	mov	r1, r3
 8015798:	f001 fde2 	bl	8017360 <DCD_EP_Stall>
 801579c:	e01b      	b.n	80157d6 <USBD_StdEPReq+0xba>
      break;	
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 801579e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80157a2:	f04f 0028 	mov.w	r0, #40	; 0x28
 80157a6:	d006      	beq.n	80157b6 <USBD_StdEPReq+0x9a>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 80157a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80157ac:	fb00 4102 	mla	r1, r0, r2, r4
 80157b0:	f891 311e 	ldrb.w	r3, [r1, #286]	; 0x11e
 80157b4:	e003      	b.n	80157be <USBD_StdEPReq+0xa2>
          USBD_ep_status = 0x0000;  
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 80157b6:	fb00 4303 	mla	r3, r0, r3, r4
 80157ba:	f893 3376 	ldrb.w	r3, [r3, #886]	; 0x376
 80157be:	4807      	ldr	r0, [pc, #28]	; (80157dc <USBD_StdEPReq+0xc0>)
 80157c0:	b103      	cbz	r3, 80157c4 <USBD_StdEPReq+0xa8>
        {
          USBD_ep_status = 0x0001;     
 80157c2:	2301      	movs	r3, #1
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 80157c4:	6003      	str	r3, [r0, #0]
        }      
      }
      USBD_CtlSendData (pdev,
 80157c6:	4905      	ldr	r1, [pc, #20]	; (80157dc <USBD_StdEPReq+0xc0>)
 80157c8:	4620      	mov	r0, r4
 80157ca:	2202      	movs	r2, #2
 80157cc:	f7ff ff35 	bl	801563a <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 80157d0:	e001      	b.n	80157d6 <USBD_StdEPReq+0xba>
      
    default:                         
       USBD_CtlError(pdev , req);
 80157d2:	f7ff ff95 	bl	8015700 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 80157d6:	2000      	movs	r0, #0
 80157d8:	bd70      	pop	{r4, r5, r6, pc}
 80157da:	bf00      	nop
 80157dc:	200005c4 	.word	0x200005c4

080157e0 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80157e0:	b538      	push	{r3, r4, r5, lr}
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 80157e2:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80157e6:	2b03      	cmp	r3, #3
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80157e8:	4604      	mov	r4, r0
 80157ea:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 80157ec:	d10c      	bne.n	8015808 <USBD_StdItfReq+0x28>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 80157ee:	790a      	ldrb	r2, [r1, #4]
 80157f0:	2a01      	cmp	r2, #1
 80157f2:	d809      	bhi.n	8015808 <USBD_StdItfReq+0x28>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 80157f4:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80157f8:	689a      	ldr	r2, [r3, #8]
 80157fa:	4790      	blx	r2
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80157fc:	88e8      	ldrh	r0, [r5, #6]
 80157fe:	b928      	cbnz	r0, 801580c <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8015800:	4620      	mov	r0, r4
 8015802:	f7ff ff3d 	bl	8015680 <USBD_CtlSendStatus>
 8015806:	e001      	b.n	801580c <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8015808:	f7ff ff7a 	bl	8015700 <USBD_CtlError>
    break;
  }
  return ret;
}
 801580c:	2000      	movs	r0, #0
 801580e:	bd38      	pop	{r3, r4, r5, pc}

08015810 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8015810:	b570      	push	{r4, r5, r6, lr}
  USBD_Status ret = USBD_OK;  

  switch (req->bRequest) 
 8015812:	784b      	ldrb	r3, [r1, #1]
 8015814:	2b05      	cmp	r3, #5
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8015816:	b0a2      	sub	sp, #136	; 0x88
 8015818:	4604      	mov	r4, r0
 801581a:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK;  

  switch (req->bRequest) 
 801581c:	f000 8083 	beq.w	8015926 <USBD_StdDevReq+0x116>
 8015820:	d808      	bhi.n	8015834 <USBD_StdDevReq+0x24>
 8015822:	2b01      	cmp	r3, #1
 8015824:	f000 8115 	beq.w	8015a52 <USBD_StdDevReq+0x242>
 8015828:	f0c0 80da 	bcc.w	80159e0 <USBD_StdDevReq+0x1d0>
 801582c:	2b03      	cmp	r3, #3
 801582e:	f040 8133 	bne.w	8015a98 <USBD_StdDevReq+0x288>
 8015832:	e0e6      	b.n	8015a02 <USBD_StdDevReq+0x1f2>
 8015834:	2b08      	cmp	r3, #8
 8015836:	f000 80c5 	beq.w	80159c4 <USBD_StdDevReq+0x1b4>
 801583a:	d803      	bhi.n	8015844 <USBD_StdDevReq+0x34>
 801583c:	2b06      	cmp	r3, #6
 801583e:	f040 812b 	bne.w	8015a98 <USBD_StdDevReq+0x288>
 8015842:	e006      	b.n	8015852 <USBD_StdDevReq+0x42>
 8015844:	2b09      	cmp	r3, #9
 8015846:	f000 808e 	beq.w	8015966 <USBD_StdDevReq+0x156>
 801584a:	2b55      	cmp	r3, #85	; 0x55
 801584c:	f040 8124 	bne.w	8015a98 <USBD_StdDevReq+0x288>
 8015850:	e10f      	b.n	8015a72 <USBD_StdDevReq+0x262>
                               USB_SETUP_REQ *req)
{
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 8015852:	8848      	ldrh	r0, [r1, #2]
 8015854:	0a01      	lsrs	r1, r0, #8
 8015856:	1e4b      	subs	r3, r1, #1
 8015858:	2b06      	cmp	r3, #6
 801585a:	f200 811d 	bhi.w	8015a98 <USBD_StdDevReq+0x288>
 801585e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015862:	0007      	.short	0x0007
 8015864:	0027001a 	.word	0x0027001a
 8015868:	011b011b 	.word	0x011b011b
 801586c:	011b011b 	.word	0x011b011b
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 8015870:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 8015874:	78a0      	ldrb	r0, [r4, #2]
 8015876:	680a      	ldr	r2, [r1, #0]
 8015878:	f10d 0106 	add.w	r1, sp, #6
 801587c:	4790      	blx	r2
 801587e:	4601      	mov	r1, r0
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 8015880:	88e8      	ldrh	r0, [r5, #6]
 8015882:	2840      	cmp	r0, #64	; 0x40
 8015884:	d003      	beq.n	801588e <USBD_StdDevReq+0x7e>
 8015886:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 801588a:	2b01      	cmp	r3, #1
 801588c:	d13b      	bne.n	8015906 <USBD_StdDevReq+0xf6>
    {                  
      len = 8;
 801588e:	2208      	movs	r2, #8
 8015890:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015894:	e037      	b.n	8015906 <USBD_StdDevReq+0xf6>
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8015896:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 801589a:	f10d 0106 	add.w	r1, sp, #6
 801589e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80158a0:	78a0      	ldrb	r0, [r4, #2]
 80158a2:	4790      	blx	r2
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80158a4:	2302      	movs	r3, #2
 80158a6:	7043      	strb	r3, [r0, #1]
      len = 8;
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 80158a8:	4601      	mov	r1, r0
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    pdev->dev.pConfig_descriptor = pbuf;    
 80158aa:	f8c4 05f0 	str.w	r0, [r4, #1520]	; 0x5f0
 80158ae:	e02a      	b.n	8015906 <USBD_StdDevReq+0xf6>
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80158b0:	b2c1      	uxtb	r1, r0
 80158b2:	78a0      	ldrb	r0, [r4, #2]
 80158b4:	2905      	cmp	r1, #5
 80158b6:	d81f      	bhi.n	80158f8 <USBD_StdDevReq+0xe8>
 80158b8:	e8df f001 	tbb	[pc, r1]
 80158bc:	0f0b0703 	.word	0x0f0b0703
 80158c0:	1713      	.short	0x1713
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 80158c2:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 80158c6:	6853      	ldr	r3, [r2, #4]
 80158c8:	e012      	b.n	80158f0 <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 80158ca:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 80158ce:	688b      	ldr	r3, [r1, #8]
 80158d0:	e00e      	b.n	80158f0 <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 80158d2:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 80158d6:	68db      	ldr	r3, [r3, #12]
 80158d8:	e00a      	b.n	80158f0 <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 80158da:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 80158de:	6913      	ldr	r3, [r2, #16]
 80158e0:	e006      	b.n	80158f0 <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 80158e2:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 80158e6:	694b      	ldr	r3, [r1, #20]
 80158e8:	e002      	b.n	80158f0 <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 80158ea:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 80158ee:	6993      	ldr	r3, [r2, #24]
 80158f0:	f10d 0106 	add.w	r1, sp, #6
 80158f4:	4798      	blx	r3
 80158f6:	e005      	b.n	8015904 <USBD_StdDevReq+0xf4>
      break;
      
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
 80158f8:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 80158fc:	f10d 0206 	add.w	r2, sp, #6
 8015900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015902:	4798      	blx	r3
 8015904:	4601      	mov	r1, r0
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8015906:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801590a:	2800      	cmp	r0, #0
 801590c:	f000 80c8 	beq.w	8015aa0 <USBD_StdDevReq+0x290>
 8015910:	88ea      	ldrh	r2, [r5, #6]
 8015912:	2a00      	cmp	r2, #0
 8015914:	f000 80c4 	beq.w	8015aa0 <USBD_StdDevReq+0x290>
  {
    
    len = MIN(len , req->wLength);
 8015918:	4282      	cmp	r2, r0
 801591a:	bf28      	it	cs
 801591c:	4602      	movcs	r2, r0
 801591e:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 8015922:	4620      	mov	r0, r4
 8015924:	e0b5      	b.n	8015a92 <USBD_StdDevReq+0x282>
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8015926:	888a      	ldrh	r2, [r1, #4]
 8015928:	2a00      	cmp	r2, #0
 801592a:	f040 80b5 	bne.w	8015a98 <USBD_StdDevReq+0x288>
 801592e:	88c9      	ldrh	r1, [r1, #6]
 8015930:	2900      	cmp	r1, #0
 8015932:	f040 80b1 	bne.w	8015a98 <USBD_StdDevReq+0x288>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8015936:	886e      	ldrh	r6, [r5, #2]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8015938:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 801593c:	f006 037f 	and.w	r3, r6, #127	; 0x7f
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8015940:	2a03      	cmp	r2, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8015942:	461e      	mov	r6, r3
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8015944:	f000 80a8 	beq.w	8015a98 <USBD_StdDevReq+0x288>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 8015948:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 801594c:	4619      	mov	r1, r3
 801594e:	f001 fd43 	bl	80173d8 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 8015952:	4620      	mov	r0, r4
 8015954:	f7ff fe94 	bl	8015680 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8015958:	b10e      	cbz	r6, 801595e <USBD_StdDevReq+0x14e>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 801595a:	2002      	movs	r0, #2
 801595c:	e000      	b.n	8015960 <USBD_StdDevReq+0x150>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 801595e:	2001      	movs	r0, #1
 8015960:	f884 0112 	strb.w	r0, [r4, #274]	; 0x112
 8015964:	e09c      	b.n	8015aa0 <USBD_StdDevReq+0x290>
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8015966:	788b      	ldrb	r3, [r1, #2]
 8015968:	4a4f      	ldr	r2, [pc, #316]	; (8015aa8 <USBD_StdDevReq+0x298>)
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 801596a:	2b01      	cmp	r3, #1
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 801596c:	7013      	strb	r3, [r2, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 801596e:	f200 8093 	bhi.w	8015a98 <USBD_StdDevReq+0x288>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 8015972:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015976:	2a02      	cmp	r2, #2
 8015978:	d003      	beq.n	8015982 <USBD_StdDevReq+0x172>
 801597a:	2a03      	cmp	r2, #3
 801597c:	f040 808e 	bne.w	8015a9c <USBD_StdDevReq+0x28c>
 8015980:	e008      	b.n	8015994 <USBD_StdDevReq+0x184>
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 8015982:	2b00      	cmp	r3, #0
 8015984:	d061      	beq.n	8015a4a <USBD_StdDevReq+0x23a>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 8015986:	2101      	movs	r1, #1
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8015988:	2303      	movs	r3, #3
    switch (pdev->dev.device_status) 
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 801598a:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 801598e:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
 8015992:	e014      	b.n	80159be <USBD_StdDevReq+0x1ae>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 8015994:	b943      	cbnz	r3, 80159a8 <USBD_StdDevReq+0x198>
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8015996:	2102      	movs	r1, #2
 8015998:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 801599c:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 80159a0:	4619      	mov	r1, r3
 80159a2:	f7ff fe43 	bl	801562c <USBD_ClrCfg>
 80159a6:	e050      	b.n	8015a4a <USBD_StdDevReq+0x23a>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 80159a8:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
 80159ac:	2901      	cmp	r1, #1
 80159ae:	d04c      	beq.n	8015a4a <USBD_StdDevReq+0x23a>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 80159b0:	f7ff fe3c 	bl	801562c <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 80159b4:	483c      	ldr	r0, [pc, #240]	; (8015aa8 <USBD_StdDevReq+0x298>)
 80159b6:	7801      	ldrb	r1, [r0, #0]
        USBD_SetCfg(pdev , cfgidx);
 80159b8:	4620      	mov	r0, r4
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 80159ba:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 80159be:	f7ff fe29 	bl	8015614 <USBD_SetCfg>
 80159c2:	e042      	b.n	8015a4a <USBD_StdDevReq+0x23a>
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 
  if (req->wLength != 1) 
 80159c4:	88ca      	ldrh	r2, [r1, #6]
 80159c6:	2a01      	cmp	r2, #1
 80159c8:	d166      	bne.n	8015a98 <USBD_StdDevReq+0x288>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev.device_status )  
 80159ca:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80159ce:	2b02      	cmp	r3, #2
 80159d0:	d004      	beq.n	80159dc <USBD_StdDevReq+0x1cc>
 80159d2:	2b03      	cmp	r3, #3
 80159d4:	d162      	bne.n	8015a9c <USBD_StdDevReq+0x28c>
                        1);
      break;
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 80159d6:	f500 7188 	add.w	r1, r0, #272	; 0x110
 80159da:	e05a      	b.n	8015a92 <USBD_StdDevReq+0x282>
  {
    switch (pdev->dev.device_status )  
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 80159dc:	4933      	ldr	r1, [pc, #204]	; (8015aac <USBD_StdDevReq+0x29c>)
 80159de:	e058      	b.n	8015a92 <USBD_StdDevReq+0x282>
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
  
    
  switch (pdev->dev.device_status) 
 80159e0:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80159e4:	1e93      	subs	r3, r2, #2
 80159e6:	2b01      	cmp	r3, #1
 80159e8:	d858      	bhi.n	8015a9c <USBD_StdDevReq+0x28c>
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
#else
    USBD_cfg_status = 0x00;                                    
 80159ea:	4831      	ldr	r0, [pc, #196]	; (8015ab0 <USBD_StdDevReq+0x2a0>)
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 80159ec:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
#else
    USBD_cfg_status = 0x00;                                    
 80159f0:	2100      	movs	r1, #0
 80159f2:	6001      	str	r1, [r0, #0]
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 80159f4:	b10a      	cbz	r2, 80159fa <USBD_StdDevReq+0x1ea>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80159f6:	2302      	movs	r3, #2
 80159f8:	6003      	str	r3, [r0, #0]
    }
    
    USBD_CtlSendData (pdev, 
 80159fa:	4620      	mov	r0, r4
 80159fc:	492c      	ldr	r1, [pc, #176]	; (8015ab0 <USBD_StdDevReq+0x2a0>)
 80159fe:	2202      	movs	r2, #2
 8015a00:	e047      	b.n	8015a92 <USBD_StdDevReq+0x282>
{

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015a02:	884b      	ldrh	r3, [r1, #2]
 8015a04:	2b01      	cmp	r3, #1
 8015a06:	d02d      	beq.n	8015a64 <USBD_StdDevReq+0x254>
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8015a08:	2b02      	cmp	r3, #2
 8015a0a:	d149      	bne.n	8015aa0 <USBD_StdDevReq+0x290>
           ((req->wIndex & 0xFF) == 0))
 8015a0c:	888a      	ldrh	r2, [r1, #4]
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8015a0e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8015a12:	d145      	bne.n	8015aa0 <USBD_StdDevReq+0x290>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8015a14:	6900      	ldr	r0, [r0, #16]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8015a16:	0a11      	lsrs	r1, r2, #8
 8015a18:	1e4a      	subs	r2, r1, #1
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8015a1a:	6843      	ldr	r3, [r0, #4]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8015a1c:	2a04      	cmp	r2, #4
 8015a1e:	d80f      	bhi.n	8015a40 <USBD_StdDevReq+0x230>
 8015a20:	e8df f002 	tbb	[pc, r2]
 8015a24:	09070503 	.word	0x09070503
 8015a28:	0b          	.byte	0x0b
 8015a29:	00          	.byte	0x00
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 8015a2a:	2001      	movs	r0, #1
 8015a2c:	e006      	b.n	8015a3c <USBD_StdDevReq+0x22c>
      break;
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 8015a2e:	2002      	movs	r0, #2
 8015a30:	e004      	b.n	8015a3c <USBD_StdDevReq+0x22c>
      break;
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 8015a32:	2003      	movs	r0, #3
 8015a34:	e002      	b.n	8015a3c <USBD_StdDevReq+0x22c>
      break;
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 8015a36:	2004      	movs	r0, #4
 8015a38:	e000      	b.n	8015a3c <USBD_StdDevReq+0x22c>
      break;
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 8015a3a:	2005      	movs	r0, #5
 8015a3c:	f360 1306 	bfi	r3, r0, #4, #3
      break;
    }
    SET_TEST_MODE = dctl;
 8015a40:	491c      	ldr	r1, [pc, #112]	; (8015ab4 <USBD_StdDevReq+0x2a4>)
 8015a42:	600b      	str	r3, [r1, #0]
    pdev->dev.test_mode = 1;
 8015a44:	2301      	movs	r3, #1
 8015a46:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	f7ff fe18 	bl	8015680 <USBD_CtlSendStatus>
 8015a50:	e026      	b.n	8015aa0 <USBD_StdDevReq+0x290>
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  switch (pdev->dev.device_status)
 8015a52:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8015a56:	1e93      	subs	r3, r2, #2
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d81f      	bhi.n	8015a9c <USBD_StdDevReq+0x28c>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8015a5c:	884a      	ldrh	r2, [r1, #2]
 8015a5e:	2a01      	cmp	r2, #1
 8015a60:	d11e      	bne.n	8015aa0 <USBD_StdDevReq+0x290>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8015a62:	2300      	movs	r3, #0
      pdev->dev.class_cb->Setup (pdev, req);   
 8015a64:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8015a68:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 8015a6c:	6893      	ldr	r3, [r2, #8]
 8015a6e:	4798      	blx	r3
 8015a70:	e7eb      	b.n	8015a4a <USBD_StdDevReq+0x23a>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  case 0x55:
    if( (req->bmRequest == 0xc0) && (req->wValue == 0) && (req->wLength == 0x0080) ) {
 8015a72:	7809      	ldrb	r1, [r1, #0]
 8015a74:	29c0      	cmp	r1, #192	; 0xc0
 8015a76:	d10f      	bne.n	8015a98 <USBD_StdDevReq+0x288>
 8015a78:	886b      	ldrh	r3, [r5, #2]
 8015a7a:	b96b      	cbnz	r3, 8015a98 <USBD_StdDevReq+0x288>
 8015a7c:	88ee      	ldrh	r6, [r5, #6]
 8015a7e:	2e80      	cmp	r6, #128	; 0x80
 8015a80:	d10a      	bne.n	8015a98 <USBD_StdDevReq+0x288>
      const uint8_t midi_indicator[128] = {
 8015a82:	490d      	ldr	r1, [pc, #52]	; (8015ab8 <USBD_StdDevReq+0x2a8>)
 8015a84:	4632      	mov	r2, r6
 8015a86:	a802      	add	r0, sp, #8
 8015a88:	f006 f960 	bl	801bd4c <memcpy>
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2F,0x55,0x46,0x1F,
	0x00,0xD8,0x48,0x40,0x37,0x6A,0xF7,0x6A,0x00,0x30,0x00,0x00,0xC7,0x06,0x2E,0x73,
	0x4A,0x2C,0x13,0x7B,0xE9,0x7F,0x32,0x00,0x2A,0x28,0x0D,0x9B,0xFE,0x0B,0x21,0xEF,
	0x42,0x2A,0x2F,0x73,0xB5,0xB8,0xDA,0x76,0xE6,0x79,0xBF,0x0F,0xEB,0x79,0x3E,0x0B};

      USBD_CtlSendData(pdev, (uint8_t *)midi_indicator, 0x80);
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	a902      	add	r1, sp, #8
 8015a90:	4632      	mov	r2, r6
 8015a92:	f7ff fdd2 	bl	801563a <USBD_CtlSendData>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  case 0x55:
    if( (req->bmRequest == 0xc0) && (req->wValue == 0) && (req->wLength == 0x0080) ) {
 8015a96:	e003      	b.n	8015aa0 <USBD_StdDevReq+0x290>
      USBD_CtlError(pdev , req);
    }
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8015a98:	4620      	mov	r0, r4
 8015a9a:	4629      	mov	r1, r5
 8015a9c:	f7ff fe30 	bl	8015700 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8015aa0:	2000      	movs	r0, #0
 8015aa2:	b022      	add	sp, #136	; 0x88
 8015aa4:	bd70      	pop	{r4, r5, r6, pc}
 8015aa6:	bf00      	nop
 8015aa8:	200005bc 	.word	0x200005bc
 8015aac:	200005c8 	.word	0x200005c8
 8015ab0:	200005c0 	.word	0x200005c0
 8015ab4:	20011940 	.word	0x20011940
 8015ab8:	0801c44b 	.word	0x0801c44b

08015abc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015abc:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8015abe:	b1c0      	cbz	r0, 8015af2 <USBD_GetString+0x36>
 8015ac0:	2300      	movs	r3, #0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 8015ac2:	5cc5      	ldrb	r5, [r0, r3]
 8015ac4:	b2dc      	uxtb	r4, r3
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	2d00      	cmp	r5, #0
 8015aca:	d1fa      	bne.n	8015ac2 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8015acc:	1c63      	adds	r3, r4, #1
 8015ace:	005b      	lsls	r3, r3, #1
 8015ad0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8015ad2:	2203      	movs	r2, #3
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
 8015ad4:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8015ad6:	704a      	strb	r2, [r1, #1]
  * @param  desc : descriptor buffer
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
 8015ad8:	3801      	subs	r0, #1
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8015ada:	2302      	movs	r3, #2
    
    while (*desc != NULL) 
 8015adc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8015ae0:	b13a      	cbz	r2, 8015af2 <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 8015ae2:	1c5c      	adds	r4, r3, #1
 8015ae4:	54ca      	strb	r2, [r1, r3]
      unicode[idx++] =  0x00;
 8015ae6:	b2e2      	uxtb	r2, r4
 8015ae8:	3302      	adds	r3, #2
 8015aea:	2400      	movs	r4, #0
 8015aec:	548c      	strb	r4, [r1, r2]
 8015aee:	b2db      	uxtb	r3, r3
 8015af0:	e7f4      	b.n	8015adc <USBD_GetString+0x20>
 8015af2:	bd30      	pop	{r4, r5, pc}

08015af4 <USBH_Connected>:
  * @param  selected device
  * @retval Status
*/
uint8_t USBH_Connected (USB_OTG_CORE_HANDLE *pdev)
{
  pdev->host.ConnSts = 1;
 8015af4:	2301      	movs	r3, #1
 8015af6:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  return 0;
}
 8015afa:	2000      	movs	r0, #0
 8015afc:	4770      	bx	lr

08015afe <USBH_Disconnected>:
* @retval Status
*/

uint8_t USBH_Disconnected (USB_OTG_CORE_HANDLE *pdev)
{
  pdev->host.ConnSts = 0;
 8015afe:	2300      	movs	r3, #0
 8015b00:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  return 0;  
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	4770      	bx	lr

08015b08 <USBH_SOF>:

uint8_t USBH_SOF (USB_OTG_CORE_HANDLE *pdev)
{
  /* This callback could be used to implement a scheduler process */
  return 0;  
}
 8015b08:	2000      	movs	r0, #0
 8015b0a:	4770      	bx	lr

08015b0c <USBH_DeInit>:
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8015b0c:	b570      	push	{r4, r5, r6, lr}
  /* Software Init */
  
  phost->gState = HOST_IDLE;
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
 8015b0e:	2301      	movs	r3, #1
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 8015b10:	2500      	movs	r5, #0
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 8015b12:	2240      	movs	r2, #64	; 0x40
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8015b14:	460c      	mov	r4, r1
  /* Software Init */
  
  phost->gState = HOST_IDLE;
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
 8015b16:	70cb      	strb	r3, [r1, #3]
  
  phost->Control.state = CTRL_SETUP;
 8015b18:	770b      	strb	r3, [r1, #28]
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 8015b1a:	718a      	strb	r2, [r1, #6]
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
 8015b1c:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8015b20:	4606      	mov	r6, r0
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 8015b22:	700d      	strb	r5, [r1, #0]
  phost->gStateBkp = HOST_IDLE; 
 8015b24:	704d      	strb	r5, [r1, #1]
  phost->EnumState = ENUM_IDLE;
 8015b26:	708d      	strb	r5, [r1, #2]
  phost->RequestState = CMD_SEND;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
 8015b28:	f881 5020 	strb.w	r5, [r1, #32]
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
  
  USBH_Free_Channel  (pdev, phost->Control.hc_num_in);
 8015b2c:	7909      	ldrb	r1, [r1, #4]
 8015b2e:	f000 fb1b 	bl	8016168 <USBH_Free_Channel>
  USBH_Free_Channel  (pdev, phost->Control.hc_num_out);  
 8015b32:	4630      	mov	r0, r6
 8015b34:	7961      	ldrb	r1, [r4, #5]
 8015b36:	f000 fb17 	bl	8016168 <USBH_Free_Channel>
  return USBH_OK;
}
 8015b3a:	4628      	mov	r0, r5
 8015b3c:	bd70      	pop	{r4, r5, r6, pc}

08015b3e <USBH_Init>:
void USBH_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBH_HOST *phost,               
               USBH_Class_cb_TypeDef *class_cb, 
               USBH_Usr_cb_TypeDef *usr_cb)
{
 8015b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b42:	9f06      	ldr	r7, [sp, #24]
 8015b44:	4614      	mov	r4, r2
 8015b46:	4698      	mov	r8, r3
 8015b48:	4605      	mov	r5, r0
 8015b4a:	460e      	mov	r6, r1
     
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8015b4c:	f7fd ffce 	bl	8013aec <USB_OTG_BSP_Init>
  
  /* configure GPIO pin used for switching VBUS power */
  USB_OTG_BSP_ConfigVBUS(0);  
 8015b50:	2000      	movs	r0, #0
 8015b52:	f7fe f83b 	bl	8013bcc <USB_OTG_BSP_ConfigVBUS>
  
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
 8015b56:	4621      	mov	r1, r4
 8015b58:	4628      	mov	r0, r5
 8015b5a:	f7ff ffd7 	bl	8015b0c <USBH_DeInit>
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
  phost->usr_cb = usr_cb;  
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 8015b5e:	4631      	mov	r1, r6
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
  
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
 8015b60:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
  phost->usr_cb = usr_cb;  
 8015b64:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 8015b68:	4628      	mov	r0, r5
 8015b6a:	f001 fe8b 	bl	8017884 <HCD_Init>
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
 8015b6e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015b72:	6818      	ldr	r0, [r3, #0]
 8015b74:	4780      	blx	r0
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8015b76:	4628      	mov	r0, r5
}
 8015b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8015b7c:	f7fe b804 	b.w	8013b88 <USB_OTG_BSP_EnableInterrupt>

08015b80 <USBH_ErrorHandle>:
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 8015b80:	1f0b      	subs	r3, r1, #4
 8015b82:	2b01      	cmp	r3, #1
  *         This function handles the Error on Host side.
  * @param  errType : Type of Error or Busy/OK state
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
 8015b84:	b510      	push	{r4, lr}
 8015b86:	4604      	mov	r4, r0
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 8015b88:	d806      	bhi.n	8015b98 <USBH_ErrorHandle+0x18>
       (errType == USBH_UNRECOVERED_ERROR) )
  {
    phost->usr_cb->UnrecoveredError(); 
 8015b8a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8015b8e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8015b90:	4780      	blx	r0
    phost->gState = HOST_ERROR_STATE;   
 8015b92:	210a      	movs	r1, #10
 8015b94:	7021      	strb	r1, [r4, #0]
 8015b96:	bd10      	pop	{r4, pc}
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
 8015b98:	2906      	cmp	r1, #6
 8015b9a:	d105      	bne.n	8015ba8 <USBH_ErrorHandle+0x28>
  {
    phost->gState = HOST_ERROR_STATE;  
    /* user callback for initalization */
    phost->usr_cb->Init();
 8015b9c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    phost->gState = HOST_ERROR_STATE;   
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
  {
    phost->gState = HOST_ERROR_STATE;  
 8015ba0:	200a      	movs	r0, #10
 8015ba2:	7020      	strb	r0, [r4, #0]
    /* user callback for initalization */
    phost->usr_cb->Init();
 8015ba4:	680a      	ldr	r2, [r1, #0]
 8015ba6:	4790      	blx	r2
 8015ba8:	bd10      	pop	{r4, pc}
	...

08015bac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8015bac:	b570      	push	{r4, r5, r6, lr}
 8015bae:	4605      	mov	r5, r0
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;

  
  switch (phost->Control.state)
 8015bb0:	7f08      	ldrb	r0, [r1, #28]
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;
 8015bb2:	2300      	movs	r3, #0
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8015bb4:	460c      	mov	r4, r1
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;
 8015bb6:	748b      	strb	r3, [r1, #18]

  
  switch (phost->Control.state)
 8015bb8:	1e41      	subs	r1, r0, #1
 8015bba:	290a      	cmp	r1, #10
 8015bbc:	f200 80cd 	bhi.w	8015d5a <USBH_HandleControl+0x1ae>
 8015bc0:	e8df f001 	tbb	[pc, r1]
 8015bc4:	3f370e06 	.word	0x3f370e06
 8015bc8:	81796759 	.word	0x81796759
 8015bcc:	aa9a      	.short	0xaa9a
 8015bce:	bc          	.byte	0xbc
 8015bcf:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (pdev, 
 8015bd0:	4628      	mov	r0, r5
 8015bd2:	f104 0114 	add.w	r1, r4, #20
 8015bd6:	7962      	ldrb	r2, [r4, #5]
 8015bd8:	f000 fb05 	bl	80161e6 <USBH_CtlSendSetup>
	                   phost->Control.setup.d8 , 
	                   phost->Control.hc_num_out);  
    phost->Control.state = CTRL_SETUP_WAIT;  
 8015bdc:	2302      	movs	r3, #2
 8015bde:	e0b4      	b.n	8015d4a <USBH_HandleControl+0x19e>
    break; 
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
 8015be0:	4628      	mov	r0, r5
 8015be2:	7961      	ldrb	r1, [r4, #5]
 8015be4:	f001 fe8e 	bl	8017904 <HCD_GetURB_State>
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
 8015be8:	2801      	cmp	r0, #1
 8015bea:	d11a      	bne.n	8015c22 <USBH_HandleControl+0x76>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8015bec:	7d22      	ldrb	r2, [r4, #20]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 8015bee:	8b61      	ldrh	r1, [r4, #26]
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8015bf0:	f022 037f 	bic.w	r3, r2, #127	; 0x7f
 8015bf4:	b2d8      	uxtb	r0, r3
 8015bf6:	4a5a      	ldr	r2, [pc, #360]	; (8015d60 <USBH_HandleControl+0x1b4>)
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 8015bf8:	b139      	cbz	r1, 8015c0a <USBH_HandleControl+0x5e>
      {        
        timeout = DATA_STAGE_TIMEOUT;
 8015bfa:	f241 3188 	movw	r1, #5000	; 0x1388
 8015bfe:	8011      	strh	r1, [r2, #0]
        if (direction == USB_D2H)
 8015c00:	b108      	cbz	r0, 8015c06 <USBH_HandleControl+0x5a>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8015c02:	2003      	movs	r0, #3
 8015c04:	e007      	b.n	8015c16 <USBH_HandleControl+0x6a>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8015c06:	2005      	movs	r0, #5
 8015c08:	e005      	b.n	8015c16 <USBH_HandleControl+0x6a>
        } 
      }
      /* No DATA stage */
      else
      {
        timeout = NODATA_STAGE_TIMEOUT;
 8015c0a:	2332      	movs	r3, #50	; 0x32
 8015c0c:	8013      	strh	r3, [r2, #0]
        
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8015c0e:	b108      	cbz	r0, 8015c14 <USBH_HandleControl+0x68>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8015c10:	2009      	movs	r0, #9
 8015c12:	e000      	b.n	8015c16 <USBH_HandleControl+0x6a>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8015c14:	2007      	movs	r0, #7
 8015c16:	7720      	strb	r0, [r4, #28]
        } 
      }          
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
 8015c18:	4628      	mov	r0, r5
 8015c1a:	f001 fe6f 	bl	80178fc <HCD_GetCurrentFrame>
 8015c1e:	8220      	strh	r0, [r4, #16]
 8015c20:	e09b      	b.n	8015d5a <USBH_HandleControl+0x1ae>
    }
    else if(URB_Status == URB_ERROR)
 8015c22:	2803      	cmp	r0, #3
 8015c24:	f040 8099 	bne.w	8015d5a <USBH_HandleControl+0x1ae>
    {
      phost->Control.state = CTRL_ERROR;     
 8015c28:	210b      	movs	r1, #11
      phost->Control.status = CTRL_XACTERR;
 8015c2a:	2005      	movs	r0, #5
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
    }
    else if(URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;     
 8015c2c:	7721      	strb	r1, [r4, #28]
      phost->Control.status = CTRL_XACTERR;
 8015c2e:	74a0      	strb	r0, [r4, #18]
 8015c30:	e093      	b.n	8015d5a <USBH_HandleControl+0x1ae>
    }    
    break;
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 8015c32:	7923      	ldrb	r3, [r4, #4]
 8015c34:	68a1      	ldr	r1, [r4, #8]
 8015c36:	89a2      	ldrh	r2, [r4, #12]
 8015c38:	4628      	mov	r0, r5
 8015c3a:	f000 fb0b 	bl	8016254 <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.hc_num_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8015c3e:	2304      	movs	r3, #4
 8015c40:	e083      	b.n	8015d4a <USBH_HandleControl+0x19e>
    break;    
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8015c42:	4628      	mov	r0, r5
 8015c44:	7921      	ldrb	r1, [r4, #4]
 8015c46:	f001 fe5d 	bl	8017904 <HCD_GetURB_State>
    
    /* check is DATA packet transfered successfully */
    if  (URB_Status == URB_DONE)
 8015c4a:	2801      	cmp	r0, #1
 8015c4c:	d102      	bne.n	8015c54 <USBH_HandleControl+0xa8>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8015c4e:	2309      	movs	r3, #9
 8015c50:	7723      	strb	r3, [r4, #28]
 8015c52:	e006      	b.n	8015c62 <USBH_HandleControl+0xb6>
    }
   
    /* manage error cases*/
    if  (URB_Status == URB_STALL) 
 8015c54:	2804      	cmp	r0, #4
 8015c56:	d102      	bne.n	8015c5e <USBH_HandleControl+0xb2>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8015c58:	7862      	ldrb	r2, [r4, #1]
 8015c5a:	7022      	strb	r2, [r4, #0]
 8015c5c:	e07d      	b.n	8015d5a <USBH_HandleControl+0x1ae>
    }   
    else if (URB_Status == URB_ERROR)
 8015c5e:	2803      	cmp	r0, #3
 8015c60:	d06a      	beq.n	8015d38 <USBH_HandleControl+0x18c>
    {
      /* Device error */
      phost->Control.state = CTRL_ERROR;    
    }
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
 8015c62:	4628      	mov	r0, r5
 8015c64:	f001 fe4a 	bl	80178fc <HCD_GetCurrentFrame>
 8015c68:	4a3d      	ldr	r2, [pc, #244]	; (8015d60 <USBH_HandleControl+0x1b4>)
 8015c6a:	8a21      	ldrh	r1, [r4, #16]
 8015c6c:	8813      	ldrh	r3, [r2, #0]
 8015c6e:	1a40      	subs	r0, r0, r1
 8015c70:	4298      	cmp	r0, r3
 8015c72:	d972      	bls.n	8015d5a <USBH_HandleControl+0x1ae>
 8015c74:	e060      	b.n	8015d38 <USBH_HandleControl+0x18c>
    }   
    break;
    
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    pdev->host.hc[phost->Control.hc_num_out].toggle_out = 1; 
 8015c76:	7963      	ldrb	r3, [r4, #5]
 8015c78:	eb05 1143 	add.w	r1, r5, r3, lsl #5
 8015c7c:	2001      	movs	r0, #1
 8015c7e:	f881 08a9 	strb.w	r0, [r1, #2217]	; 0x8a9
        
    USBH_CtlSendData (pdev,
 8015c82:	7963      	ldrb	r3, [r4, #5]
 8015c84:	68a1      	ldr	r1, [r4, #8]
 8015c86:	89a2      	ldrh	r2, [r4, #12]
 8015c88:	4628      	mov	r0, r5
 8015c8a:	f000 fac3 	bl	8016214 <USBH_CtlSendData>
    



    
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8015c8e:	2306      	movs	r3, #6
 8015c90:	e05b      	b.n	8015d4a <USBH_HandleControl+0x19e>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);     
 8015c92:	4628      	mov	r0, r5
 8015c94:	7961      	ldrb	r1, [r4, #5]
 8015c96:	f001 fe35 	bl	8017904 <HCD_GetURB_State>
    if  (URB_Status == URB_DONE)
 8015c9a:	2801      	cmp	r0, #1
 8015c9c:	d101      	bne.n	8015ca2 <USBH_HandleControl+0xf6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8015c9e:	2307      	movs	r3, #7
 8015ca0:	e053      	b.n	8015d4a <USBH_HandleControl+0x19e>
    }
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
 8015ca2:	2804      	cmp	r0, #4
 8015ca4:	d103      	bne.n	8015cae <USBH_HandleControl+0x102>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8015ca6:	7862      	ldrb	r2, [r4, #1]
      phost->Control.state = CTRL_STALLED;  
 8015ca8:	230c      	movs	r3, #12
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8015caa:	7022      	strb	r2, [r4, #0]
 8015cac:	e04d      	b.n	8015d4a <USBH_HandleControl+0x19e>
      phost->Control.state = CTRL_STALLED;  
    } 
    else if  (URB_Status == URB_NOTREADY)
 8015cae:	2802      	cmp	r0, #2
 8015cb0:	d140      	bne.n	8015d34 <USBH_HandleControl+0x188>
    { 
      /* Nack received from device */
      phost->Control.state = CTRL_DATA_OUT;
 8015cb2:	2305      	movs	r3, #5
 8015cb4:	e049      	b.n	8015d4a <USBH_HandleControl+0x19e>
    break;
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (pdev,
 8015cb6:	2100      	movs	r1, #0
 8015cb8:	7923      	ldrb	r3, [r4, #4]
 8015cba:	4628      	mov	r0, r5
 8015cbc:	460a      	mov	r2, r1
 8015cbe:	f000 fac9 	bl	8016254 <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.hc_num_in);
    
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8015cc2:	2308      	movs	r3, #8
 8015cc4:	e041      	b.n	8015d4a <USBH_HandleControl+0x19e>
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	7921      	ldrb	r1, [r4, #4]
 8015cca:	f001 fe1b 	bl	8017904 <HCD_GetURB_State>
    
    if  ( URB_Status == URB_DONE)
 8015cce:	2801      	cmp	r0, #1
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 8015cd0:	4606      	mov	r6, r0
    
    if  ( URB_Status == URB_DONE)
 8015cd2:	d027      	beq.n	8015d24 <USBH_HandleControl+0x178>
    { /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.state = CTRL_COMPLETE;
    }
    
    else if (URB_Status == URB_ERROR)
 8015cd4:	2803      	cmp	r0, #3
 8015cd6:	d02f      	beq.n	8015d38 <USBH_HandleControl+0x18c>
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 8015cd8:	4628      	mov	r0, r5
 8015cda:	f001 fe0f 	bl	80178fc <HCD_GetCurrentFrame>
      - phost->Control.timer) > timeout)
 8015cde:	4a20      	ldr	r2, [pc, #128]	; (8015d60 <USBH_HandleControl+0x1b4>)
 8015ce0:	8a21      	ldrh	r1, [r4, #16]
 8015ce2:	8813      	ldrh	r3, [r2, #0]
 8015ce4:	1a40      	subs	r0, r0, r1
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 8015ce6:	4298      	cmp	r0, r3
 8015ce8:	d826      	bhi.n	8015d38 <USBH_HandleControl+0x18c>
      - phost->Control.timer) > timeout)
    {
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
 8015cea:	2e04      	cmp	r6, #4
 8015cec:	d135      	bne.n	8015d5a <USBH_HandleControl+0x1ae>
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 8015cee:	7861      	ldrb	r1, [r4, #1]
      phost->Control.status = CTRL_STALL;
 8015cf0:	74a6      	strb	r6, [r4, #18]
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 8015cf2:	7021      	strb	r1, [r4, #0]
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
 8015cf4:	2003      	movs	r0, #3
 8015cf6:	bd70      	pop	{r4, r5, r6, pc}
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 8015cf8:	7960      	ldrb	r0, [r4, #5]
 8015cfa:	3045      	adds	r0, #69	; 0x45
 8015cfc:	eb05 1140 	add.w	r1, r5, r0, lsl #5
    USBH_CtlSendData (pdev,
 8015d00:	4628      	mov	r0, r5
      status = USBH_NOT_SUPPORTED;
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 8015d02:	7a4a      	ldrb	r2, [r1, #9]
 8015d04:	f082 0301 	eor.w	r3, r2, #1
 8015d08:	724b      	strb	r3, [r1, #9]
    USBH_CtlSendData (pdev,
 8015d0a:	2100      	movs	r1, #0
 8015d0c:	7963      	ldrb	r3, [r4, #5]
 8015d0e:	460a      	mov	r2, r1
 8015d10:	f000 fa80 	bl	8016214 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.hc_num_out);
    
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8015d14:	230a      	movs	r3, #10
 8015d16:	e018      	b.n	8015d4a <USBH_HandleControl+0x19e>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
 8015d18:	4628      	mov	r0, r5
 8015d1a:	7961      	ldrb	r1, [r4, #5]
 8015d1c:	f001 fdf2 	bl	8017904 <HCD_GetURB_State>
    if  (URB_Status == URB_DONE)
 8015d20:	2801      	cmp	r0, #1
 8015d22:	d103      	bne.n	8015d2c <USBH_HandleControl+0x180>
    { 
      phost->gState =   phost->gStateBkp; 
 8015d24:	7860      	ldrb	r0, [r4, #1]
      phost->Control.state = CTRL_COMPLETE; 
 8015d26:	230d      	movs	r3, #13
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
    if  (URB_Status == URB_DONE)
    { 
      phost->gState =   phost->gStateBkp; 
 8015d28:	7020      	strb	r0, [r4, #0]
 8015d2a:	e00e      	b.n	8015d4a <USBH_HandleControl+0x19e>
      phost->Control.state = CTRL_COMPLETE; 
    }
    else if  (URB_Status == URB_NOTREADY)
 8015d2c:	2802      	cmp	r0, #2
 8015d2e:	d101      	bne.n	8015d34 <USBH_HandleControl+0x188>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8015d30:	2309      	movs	r3, #9
 8015d32:	e00a      	b.n	8015d4a <USBH_HandleControl+0x19e>
    }      
    else if (URB_Status == URB_ERROR)
 8015d34:	2803      	cmp	r0, #3
 8015d36:	d110      	bne.n	8015d5a <USBH_HandleControl+0x1ae>
    {
      phost->Control.state = CTRL_ERROR;      
 8015d38:	230b      	movs	r3, #11
 8015d3a:	e006      	b.n	8015d4a <USBH_HandleControl+0x19e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015d3c:	7ba2      	ldrb	r2, [r4, #14]
 8015d3e:	1c53      	adds	r3, r2, #1
 8015d40:	b2d8      	uxtb	r0, r3
 8015d42:	2802      	cmp	r0, #2
 8015d44:	73a0      	strb	r0, [r4, #14]
 8015d46:	d802      	bhi.n	8015d4e <USBH_HandleControl+0x1a2>
    {
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8015d48:	2301      	movs	r3, #1
 8015d4a:	7723      	strb	r3, [r4, #28]
 8015d4c:	e005      	b.n	8015d5a <USBH_HandleControl+0x1ae>
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
      phost->gState =   phost->gStateBkp;
 8015d4e:	7862      	ldrb	r2, [r4, #1]
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
 8015d50:	2108      	movs	r1, #8
 8015d52:	74a1      	strb	r1, [r4, #18]
      phost->gState =   phost->gStateBkp;
 8015d54:	7022      	strb	r2, [r4, #0]
      
      status = USBH_FAIL;
 8015d56:	2002      	movs	r0, #2
 8015d58:	bd70      	pop	{r4, r5, r6, pc}
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
 8015d5a:	2000      	movs	r0, #0
    
  default:
    break;
  }
  return status;
}
 8015d5c:	bd70      	pop	{r4, r5, r6, pc}
 8015d5e:	bf00      	nop
 8015d60:	200005cc 	.word	0x200005cc

08015d64 <USBH_Process>:
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 8015d64:	b570      	push	{r4, r5, r6, lr}
 8015d66:	b094      	sub	sp, #80	; 0x50
  volatile USBH_Status status = USBH_FAIL;
 8015d68:	2602      	movs	r6, #2
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 8015d6a:	4605      	mov	r5, r0
 8015d6c:	460c      	mov	r4, r1
  volatile USBH_Status status = USBH_FAIL;
 8015d6e:	f88d 600f 	strb.w	r6, [sp, #15]
  
  
  /* check for Host port events */
  if ((HCD_IsDeviceConnected(pdev) == 0)&& (phost->gState != HOST_IDLE)) 
 8015d72:	f001 fdc0 	bl	80178f6 <HCD_IsDeviceConnected>
 8015d76:	b920      	cbnz	r0, 8015d82 <USBH_Process+0x1e>
 8015d78:	7823      	ldrb	r3, [r4, #0]
 8015d7a:	b113      	cbz	r3, 8015d82 <USBH_Process+0x1e>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED) 
 8015d7c:	42b3      	cmp	r3, r6
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8015d7e:	bf18      	it	ne
 8015d80:	7026      	strbne	r6, [r4, #0]
    }
  }
    
  switch (phost->gState)
 8015d82:	7820      	ldrb	r0, [r4, #0]
 8015d84:	280a      	cmp	r0, #10
 8015d86:	f200 818b 	bhi.w	80160a0 <USBH_Process+0x33c>
 8015d8a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8015d8e:	000b      	.short	0x000b
 8015d90:	01720017 	.word	0x01720017
 8015d94:	00530189 	.word	0x00530189
 8015d98:	01510145 	.word	0x01510145
 8015d9c:	0136015e 	.word	0x0136015e
 8015da0:	01630189 	.word	0x01630189
  {
  
  case HOST_IDLE :
    
    if (HCD_IsDeviceConnected(pdev))  
 8015da4:	4628      	mov	r0, r5
 8015da6:	f001 fda6 	bl	80178f6 <HCD_IsDeviceConnected>
 8015daa:	2800      	cmp	r0, #0
 8015dac:	f000 8178 	beq.w	80160a0 <USBH_Process+0x33c>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8015db0:	2201      	movs	r2, #1
 8015db2:	7022      	strb	r2, [r4, #0]
      USB_OTG_BSP_mDelay(100);
 8015db4:	2064      	movs	r0, #100	; 0x64
 8015db6:	f7fd ff02 	bl	8013bbe <USB_OTG_BSP_mDelay>
 8015dba:	e171      	b.n	80160a0 <USBH_Process+0x33c>
    }
    break;
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
 8015dbc:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8015dc0:	68b0      	ldr	r0, [r6, #8]
 8015dc2:	4780      	blx	r0
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 8015dc4:	2100      	movs	r1, #0
 8015dc6:	4628      	mov	r0, r5
 8015dc8:	f000 f9b5 	bl	8016136 <USBH_Alloc_Channel>
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 8015dcc:	2180      	movs	r1, #128	; 0x80
    break;
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 8015dce:	7160      	strb	r0, [r4, #5]
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 8015dd0:	4628      	mov	r0, r5
 8015dd2:	f000 f9b0 	bl	8016136 <USBH_Alloc_Channel>
 8015dd6:	7120      	strb	r0, [r4, #4]
  
    /* Reset USB Device */
    if ( HCD_ResetPort(pdev) == 0)
 8015dd8:	4628      	mov	r0, r5
 8015dda:	f001 fd87 	bl	80178ec <HCD_ResetPort>
 8015dde:	4606      	mov	r6, r0
 8015de0:	2800      	cmp	r0, #0
 8015de2:	f040 815d 	bne.w	80160a0 <USBH_Process+0x33c>
    {
      phost->usr_cb->ResetDevice();
 8015de6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8015dea:	68cb      	ldr	r3, [r1, #12]
 8015dec:	4798      	blx	r3
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8015dee:	4628      	mov	r0, r5
 8015df0:	f001 fd76 	bl	80178e0 <HCD_GetCurrentSpeed>
      
      phost->gState = HOST_ENUMERATION;
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8015df4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
      phost->usr_cb->ResetDevice();
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8015df8:	b2c0      	uxtb	r0, r0
 8015dfa:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      
      phost->gState = HOST_ENUMERATION;
 8015dfe:	2204      	movs	r2, #4
 8015e00:	7022      	strb	r2, [r4, #0]
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8015e02:	698b      	ldr	r3, [r1, #24]
 8015e04:	4798      	blx	r3
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8015e06:	79a0      	ldrb	r0, [r4, #6]
 8015e08:	7921      	ldrb	r1, [r4, #4]
 8015e0a:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015e0e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8015e12:	9001      	str	r0, [sp, #4]
 8015e14:	9600      	str	r6, [sp, #0]
 8015e16:	4628      	mov	r0, r5
 8015e18:	f000 f946 	bl	80160a8 <USBH_Open_Channel>
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8015e1c:	79a0      	ldrb	r0, [r4, #6]
 8015e1e:	7961      	ldrb	r1, [r4, #5]
 8015e20:	9001      	str	r0, [sp, #4]
 8015e22:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015e26:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8015e2a:	9600      	str	r6, [sp, #0]
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	f000 f93b 	bl	80160a8 <USBH_Open_Channel>
 8015e32:	e135      	b.n	80160a0 <USBH_Process+0x33c>
static USBH_Status USBH_HandleEnum(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  USBH_Status Status = USBH_BUSY;  
  uint8_t Local_Buffer[64];
  
  switch (phost->EnumState)
 8015e34:	78a3      	ldrb	r3, [r4, #2]
 8015e36:	2b09      	cmp	r3, #9
 8015e38:	f200 8132 	bhi.w	80160a0 <USBH_Process+0x33c>
 8015e3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015e40:	002c000a 	.word	0x002c000a
 8015e44:	0064003c 	.word	0x0064003c
 8015e48:	0082006e 	.word	0x0082006e
 8015e4c:	00b4009b 	.word	0x00b4009b
 8015e50:	00d700cc 	.word	0x00d700cc
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(pdev , phost, 8) == USBH_OK)
 8015e54:	4628      	mov	r0, r5
 8015e56:	4621      	mov	r1, r4
 8015e58:	2208      	movs	r2, #8
 8015e5a:	f000 fa87 	bl	801636c <USBH_Get_DevDesc>
 8015e5e:	4606      	mov	r6, r0
 8015e60:	2800      	cmp	r0, #0
 8015e62:	f040 811d 	bne.w	80160a0 <USBH_Process+0x33c>
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
 8015e66:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8015e6a:	71a0      	strb	r0, [r4, #6]
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
 8015e6c:	4628      	mov	r0, r5
 8015e6e:	f001 fd3d 	bl	80178ec <HCD_ResetPort>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8015e72:	79a2      	ldrb	r2, [r4, #6]
 8015e74:	7961      	ldrb	r1, [r4, #5]
 8015e76:	9201      	str	r2, [sp, #4]
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	70a3      	strb	r3, [r4, #2]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8015e7c:	4632      	mov	r2, r6
 8015e7e:	4633      	mov	r3, r6
 8015e80:	9600      	str	r6, [sp, #0]
 8015e82:	4628      	mov	r0, r5
 8015e84:	f000 f93a 	bl	80160fc <USBH_Modify_Channel>
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
      
      USBH_Modify_Channel (pdev,
 8015e88:	79a0      	ldrb	r0, [r4, #6]
 8015e8a:	7921      	ldrb	r1, [r4, #4]
 8015e8c:	9001      	str	r0, [sp, #4]
 8015e8e:	9600      	str	r6, [sp, #0]
 8015e90:	4628      	mov	r0, r5
 8015e92:	4632      	mov	r2, r6
 8015e94:	4633      	mov	r3, r6
 8015e96:	e034      	b.n	8015f02 <USBH_Process+0x19e>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(pdev, phost, USB_DEVICE_DESC_SIZE)\
 8015e98:	4628      	mov	r0, r5
 8015e9a:	4621      	mov	r1, r4
 8015e9c:	2212      	movs	r2, #18
 8015e9e:	f000 fa65 	bl	801636c <USBH_Get_DevDesc>
 8015ea2:	2800      	cmp	r0, #0
 8015ea4:	f040 80fc 	bne.w	80160a0 <USBH_Process+0x33c>
      == USBH_OK)
    {
      /* user callback for device descriptor available */
      phost->usr_cb->DeviceDescAvailable(&phost->device_prop.Dev_Desc);      
 8015ea8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8015eac:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8015eb0:	69ca      	ldr	r2, [r1, #28]
 8015eb2:	4790      	blx	r2
      phost->EnumState = ENUM_SET_ADDR;
 8015eb4:	2002      	movs	r0, #2
 8015eb6:	e098      	b.n	8015fea <USBH_Process+0x286>
    }
    break;
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8015eb8:	4628      	mov	r0, r5
 8015eba:	4621      	mov	r1, r4
 8015ebc:	2201      	movs	r2, #1
 8015ebe:	f000 fb99 	bl	80165f4 <USBH_SetAddress>
 8015ec2:	4606      	mov	r6, r0
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	f040 80eb 	bne.w	80160a0 <USBH_Process+0x33c>
    {
      USB_OTG_BSP_mDelay(2);
 8015eca:	2002      	movs	r0, #2
 8015ecc:	f7fd fe77 	bl	8013bbe <USB_OTG_BSP_mDelay>
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 8015ed0:	2101      	movs	r1, #1
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 8015ed2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
    {
      USB_OTG_BSP_mDelay(2);
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 8015ed6:	f884 1020 	strb.w	r1, [r4, #32]
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 8015eda:	6a02      	ldr	r2, [r0, #32]
 8015edc:	4790      	blx	r2
      phost->EnumState = ENUM_GET_CFG_DESC;
 8015ede:	2303      	movs	r3, #3
 8015ee0:	70a3      	strb	r3, [r4, #2]
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
 8015ee2:	7921      	ldrb	r1, [r4, #4]
 8015ee4:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015ee8:	9600      	str	r6, [sp, #0]
 8015eea:	4633      	mov	r3, r6
 8015eec:	9601      	str	r6, [sp, #4]
 8015eee:	4628      	mov	r0, r5
 8015ef0:	f000 f904 	bl	80160fc <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
 8015ef4:	7961      	ldrb	r1, [r4, #5]
 8015ef6:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015efa:	9600      	str	r6, [sp, #0]
 8015efc:	9601      	str	r6, [sp, #4]
 8015efe:	4628      	mov	r0, r5
 8015f00:	4633      	mov	r3, r6
 8015f02:	f000 f8fb 	bl	80160fc <USBH_Modify_Channel>
 8015f06:	e0cb      	b.n	80160a0 <USBH_Process+0x33c>
    }
    break;
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(pdev, 
 8015f08:	4628      	mov	r0, r5
 8015f0a:	4621      	mov	r1, r4
 8015f0c:	2209      	movs	r2, #9
 8015f0e:	f000 fa83 	bl	8016418 <USBH_Get_CfgDesc>
 8015f12:	2800      	cmp	r0, #0
 8015f14:	f040 80c4 	bne.w	80160a0 <USBH_Process+0x33c>
                          phost,
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8015f18:	2004      	movs	r0, #4
 8015f1a:	e066      	b.n	8015fea <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(pdev, 
 8015f1c:	4628      	mov	r0, r5
 8015f1e:	4621      	mov	r1, r4
 8015f20:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015f22:	f000 fa79 	bl	8016418 <USBH_Get_CfgDesc>
 8015f26:	2800      	cmp	r0, #0
 8015f28:	f040 80ba 	bne.w	80160a0 <USBH_Process+0x33c>
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
    {
      /* User callback for configuration descriptors available */
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 8015f2c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015f30:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8015f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f36:	f104 013e 	add.w	r1, r4, #62	; 0x3e
 8015f3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015f3e:	4798      	blx	r3
                                                      phost->device_prop.Itf_Desc,
                                                      phost->device_prop.Ep_Desc[0]);
      
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8015f40:	2005      	movs	r0, #5
 8015f42:	e052      	b.n	8015fea <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device_prop.Dev_Desc.iManufacturer != 0)
 8015f44:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8015f48:	b172      	cbz	r2, 8015f68 <USBH_Process+0x204>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(pdev,
 8015f4a:	20ff      	movs	r0, #255	; 0xff
 8015f4c:	9000      	str	r0, [sp, #0]
 8015f4e:	4621      	mov	r1, r4
 8015f50:	4628      	mov	r0, r5
 8015f52:	ab04      	add	r3, sp, #16
 8015f54:	f000 f9e2 	bl	801631c <USBH_Get_StringDesc>
 8015f58:	2800      	cmp	r0, #0
 8015f5a:	f040 80a1 	bne.w	80160a0 <USBH_Process+0x33c>
                               phost->device_prop.Dev_Desc.iManufacturer, 
                               Local_Buffer , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        phost->usr_cb->ManufacturerString(Local_Buffer);
 8015f5e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015f62:	a804      	add	r0, sp, #16
 8015f64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8015f66:	e003      	b.n	8015f70 <USBH_Process+0x20c>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
 8015f68:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015f6c:	484d      	ldr	r0, [pc, #308]	; (80160a4 <USBH_Process+0x340>)
 8015f6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8015f70:	4788      	blx	r1
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015f72:	2006      	movs	r0, #6
 8015f74:	e039      	b.n	8015fea <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iProduct != 0)
 8015f76:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8015f7a:	b172      	cbz	r2, 8015f9a <USBH_Process+0x236>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(pdev,
 8015f7c:	20ff      	movs	r0, #255	; 0xff
 8015f7e:	9000      	str	r0, [sp, #0]
 8015f80:	4621      	mov	r1, r4
 8015f82:	4628      	mov	r0, r5
 8015f84:	ab04      	add	r3, sp, #16
 8015f86:	f000 f9c9 	bl	801631c <USBH_Get_StringDesc>
 8015f8a:	2800      	cmp	r0, #0
 8015f8c:	f040 8088 	bne.w	80160a0 <USBH_Process+0x33c>
                               phost->device_prop.Dev_Desc.iProduct, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        phost->usr_cb->ProductString(Local_Buffer);
 8015f90:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015f94:	a804      	add	r0, sp, #16
 8015f96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8015f98:	e003      	b.n	8015fa2 <USBH_Process+0x23e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ProductString("N/A");
 8015f9a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015f9e:	4841      	ldr	r0, [pc, #260]	; (80160a4 <USBH_Process+0x340>)
 8015fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015fa2:	4788      	blx	r1
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015fa4:	2007      	movs	r0, #7
 8015fa6:	e020      	b.n	8015fea <USBH_Process+0x286>
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iSerialNumber != 0)
 8015fa8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8015fac:	b16a      	cbz	r2, 8015fca <USBH_Process+0x266>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(pdev, 
 8015fae:	20ff      	movs	r0, #255	; 0xff
 8015fb0:	9000      	str	r0, [sp, #0]
 8015fb2:	4621      	mov	r1, r4
 8015fb4:	4628      	mov	r0, r5
 8015fb6:	ab04      	add	r3, sp, #16
 8015fb8:	f000 f9b0 	bl	801631c <USBH_Get_StringDesc>
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	d16f      	bne.n	80160a0 <USBH_Process+0x33c>
                               phost->device_prop.Dev_Desc.iSerialNumber, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
        phost->usr_cb->SerialNumString(Local_Buffer);
 8015fc0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015fc4:	a804      	add	r0, sp, #16
 8015fc6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8015fc8:	e003      	b.n	8015fd2 <USBH_Process+0x26e>
        phost->EnumState = ENUM_SET_CONFIGURATION;
      }
    }
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
 8015fca:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015fce:	4835      	ldr	r0, [pc, #212]	; (80160a4 <USBH_Process+0x340>)
 8015fd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8015fd2:	4788      	blx	r1
      phost->EnumState = ENUM_SET_CONFIGURATION;
 8015fd4:	2008      	movs	r0, #8
 8015fd6:	e008      	b.n	8015fea <USBH_Process+0x286>
    }  
    break;
      
  case ENUM_SET_CONFIGURATION:
    /* set configuration  (default config) */
    if (USBH_SetCfg(pdev, 
 8015fd8:	4628      	mov	r0, r5
 8015fda:	4621      	mov	r1, r4
 8015fdc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8015fe0:	f000 fb16 	bl	8016610 <USBH_SetCfg>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d15b      	bne.n	80160a0 <USBH_Process+0x33c>
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
    {
      phost->EnumState = ENUM_DEV_CONFIGURED;
 8015fe8:	2009      	movs	r0, #9
 8015fea:	70a0      	strb	r0, [r4, #2]
 8015fec:	e058      	b.n	80160a0 <USBH_Process+0x33c>
    if ( USBH_HandleEnum(pdev , phost) == USBH_OK)
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      
      /* user callback for end of device basic enumeration */
      phost->usr_cb->EnumerationDone();
 8015fee:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8015ff2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8015ff4:	4790      	blx	r2
      
      phost->gState  = HOST_USR_INPUT;    
 8015ff6:	2208      	movs	r2, #8
 8015ff8:	e051      	b.n	801609e <USBH_Process+0x33a>
    }
    break;
    
  case HOST_USR_INPUT:    
    /*The function should return user response true to move to class state */
    if ( phost->usr_cb->UserInput() == USBH_USR_RESP_OK)
 8015ffa:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8015ffe:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8016000:	4790      	blx	r2
 8016002:	2801      	cmp	r0, #1
 8016004:	d14c      	bne.n	80160a0 <USBH_Process+0x33c>
    {
      if((phost->class_cb->Init(pdev, phost))\
 8016006:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8016008:	4628      	mov	r0, r5
 801600a:	681a      	ldr	r2, [r3, #0]
 801600c:	4621      	mov	r1, r4
 801600e:	4790      	blx	r2
 8016010:	2800      	cmp	r0, #0
 8016012:	d145      	bne.n	80160a0 <USBH_Process+0x33c>
        == USBH_OK)
      {
        phost->gState  = HOST_CLASS_REQUEST;     
 8016014:	2205      	movs	r2, #5
 8016016:	e042      	b.n	801609e <USBH_Process+0x33a>
    }   
    break;
    
  case HOST_CLASS_REQUEST:  
    /* process class standard contol requests state machine */ 
    status = phost->class_cb->Requests(pdev, phost);
 8016018:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 801601a:	4628      	mov	r0, r5
 801601c:	688a      	ldr	r2, [r1, #8]
 801601e:	4621      	mov	r1, r4
 8016020:	4790      	blx	r2
 8016022:	f88d 000f 	strb.w	r0, [sp, #15]
    
     if(status == USBH_OK)
 8016026:	f89d 000f 	ldrb.w	r0, [sp, #15]
 801602a:	b940      	cbnz	r0, 801603e <USBH_Process+0x2da>
     {
       phost->gState  = HOST_CLASS;
 801602c:	2206      	movs	r2, #6
 801602e:	e036      	b.n	801609e <USBH_Process+0x33a>
 
    
    break;    
  case HOST_CLASS:   
    /* process class state machine */
    status = phost->class_cb->Machine(pdev, phost);
 8016030:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8016032:	4621      	mov	r1, r4
 8016034:	68c3      	ldr	r3, [r0, #12]
 8016036:	4628      	mov	r0, r5
 8016038:	4798      	blx	r3
 801603a:	f88d 000f 	strb.w	r0, [sp, #15]
    USBH_ErrorHandle(phost, status);
 801603e:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8016042:	4620      	mov	r0, r4
 8016044:	f7ff fd9c 	bl	8015b80 <USBH_ErrorHandle>
    break;       
 8016048:	e02a      	b.n	80160a0 <USBH_Process+0x33c>
    
  case HOST_CTRL_XFER:
    /* process control transfer state machine */
    USBH_HandleControl(pdev, phost);    
 801604a:	4628      	mov	r0, r5
 801604c:	4621      	mov	r1, r4
 801604e:	f7ff fdad 	bl	8015bac <USBH_HandleControl>
    break;
 8016052:	e025      	b.n	80160a0 <USBH_Process+0x33c>
  case HOST_SUSPENDED:
    break;
  
  case HOST_ERROR_STATE:
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8016054:	4621      	mov	r1, r4
 8016056:	4628      	mov	r0, r5
 8016058:	f7ff fd58 	bl	8015b0c <USBH_DeInit>
    phost->usr_cb->DeInit();
 801605c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8016060:	684b      	ldr	r3, [r1, #4]
 8016062:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop);
 8016064:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8016066:	f104 0120 	add.w	r1, r4, #32
 801606a:	6842      	ldr	r2, [r0, #4]
 801606c:	4628      	mov	r0, r5
 801606e:	4790      	blx	r2
    break;
 8016070:	e016      	b.n	80160a0 <USBH_Process+0x33c>
    
  case HOST_DEV_DISCONNECTED :
    
    /* Manage User disconnect operations*/
    phost->usr_cb->DeviceDisconnected();
 8016072:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8016076:	690b      	ldr	r3, [r1, #16]
 8016078:	4798      	blx	r3
    
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 801607a:	4621      	mov	r1, r4
 801607c:	4628      	mov	r0, r5
 801607e:	f7ff fd45 	bl	8015b0c <USBH_DeInit>
    phost->usr_cb->DeInit();
 8016082:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8016086:	6850      	ldr	r0, [r2, #4]
 8016088:	4780      	blx	r0
    phost->class_cb->DeInit(pdev, &phost->device_prop); 
 801608a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 801608c:	4628      	mov	r0, r5
 801608e:	684b      	ldr	r3, [r1, #4]
 8016090:	f104 0120 	add.w	r1, r4, #32
 8016094:	4798      	blx	r3
    USBH_DeAllocate_AllChannel(pdev);  
 8016096:	4628      	mov	r0, r5
 8016098:	f000 f872 	bl	8016180 <USBH_DeAllocate_AllChannel>
    phost->gState = HOST_IDLE;
 801609c:	2200      	movs	r2, #0
 801609e:	7022      	strb	r2, [r4, #0]
    
  default :
    break;
  }

}
 80160a0:	b014      	add	sp, #80	; 0x50
 80160a2:	bd70      	pop	{r4, r5, r6, pc}
 80160a4:	0801c4cb 	.word	0x0801c4cb

080160a8 <USBH_Open_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80160a8:	b570      	push	{r4, r5, r6, lr}

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 80160aa:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 80160ae:	f8b4 5a70 	ldrh.w	r5, [r4, #2672]	; 0xa70
 80160b2:	eb00 1441 	add.w	r4, r0, r1, lsl #5
 80160b6:	f005 067f 	and.w	r6, r5, #127	; 0x7f
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
  pdev->host.hc[hc_num].dev_addr = dev_address;  
 80160ba:	f884 2890 	strb.w	r2, [r4, #2192]	; 0x890
  pdev->host.hc[hc_num].ep_type = ep_type;  
 80160be:	f89d 2010 	ldrb.w	r2, [sp, #16]
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 80160c2:	f884 6891 	strb.w	r6, [r4, #2193]	; 0x891
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
 80160c6:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 80160ca:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].dev_addr = dev_address;  
  pdev->host.hc[hc_num].ep_type = ep_type;  
 80160ce:	f884 2895 	strb.w	r2, [r4, #2197]	; 0x895
  pdev->host.hc[hc_num].max_packet = mps; 
 80160d2:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  pdev->host.hc[hc_num].speed = speed; 
 80160d6:	f884 3893 	strb.w	r3, [r4, #2195]	; 0x893
  pdev->host.hc[hc_num].toggle_in = 0; 
 80160da:	f101 0245 	add.w	r2, r1, #69	; 0x45
 80160de:	eb00 1242 	add.w	r2, r0, r2, lsl #5

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
  pdev->host.hc[hc_num].dev_addr = dev_address;  
  pdev->host.hc[hc_num].ep_type = ep_type;  
  pdev->host.hc[hc_num].max_packet = mps; 
 80160e2:	f8a4 5896 	strh.w	r5, [r4, #2198]	; 0x896
  pdev->host.hc[hc_num].speed = speed; 
  pdev->host.hc[hc_num].toggle_in = 0; 
 80160e6:	2500      	movs	r5, #0
 80160e8:	7215      	strb	r5, [r2, #8]
  pdev->host.hc[hc_num].toggle_out = 0;   
 80160ea:	7255      	strb	r5, [r2, #9]
  if(speed == HPRT0_PRTSPD_HIGH_SPEED)
 80160ec:	b913      	cbnz	r3, 80160f4 <USBH_Open_Channel+0x4c>
  {
    pdev->host.hc[hc_num].do_ping = 1;
 80160ee:	2301      	movs	r3, #1
 80160f0:	f884 3894 	strb.w	r3, [r4, #2196]	; 0x894
  }
  
  USB_OTG_HC_Init(pdev, hc_num) ;
 80160f4:	f000 fcde 	bl	8016ab4 <USB_OTG_HC_Init>
  
  return HC_OK; 

}
 80160f8:	2000      	movs	r0, #0
 80160fa:	bd70      	pop	{r4, r5, r6, pc}

080160fc <USBH_Modify_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80160fc:	b570      	push	{r4, r5, r6, lr}
 80160fe:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  
  if(dev_address != 0)
 8016102:	b11a      	cbz	r2, 801610c <USBH_Modify_Channel+0x10>
  {
    pdev->host.hc[hc_num].dev_addr = dev_address;  
 8016104:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8016108:	f885 2890 	strb.w	r2, [r5, #2192]	; 0x890
  }
  
  if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
 801610c:	014a      	lsls	r2, r1, #5
 801610e:	1885      	adds	r5, r0, r2
 8016110:	f8b5 6896 	ldrh.w	r6, [r5, #2198]	; 0x896
 8016114:	42a6      	cmp	r6, r4
 8016116:	d002      	beq.n	801611e <USBH_Modify_Channel+0x22>
 8016118:	b10c      	cbz	r4, 801611e <USBH_Modify_Channel+0x22>
  {
    pdev->host.hc[hc_num].max_packet = mps; 
 801611a:	f8a5 4896 	strh.w	r4, [r5, #2198]	; 0x896
  }
  
  if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
 801611e:	1882      	adds	r2, r0, r2
 8016120:	f892 4893 	ldrb.w	r4, [r2, #2195]	; 0x893
 8016124:	429c      	cmp	r4, r3
 8016126:	d002      	beq.n	801612e <USBH_Modify_Channel+0x32>
 8016128:	b10b      	cbz	r3, 801612e <USBH_Modify_Channel+0x32>
  {
    pdev->host.hc[hc_num].speed = speed; 
 801612a:	f882 3893 	strb.w	r3, [r2, #2195]	; 0x893
  }
  
  USB_OTG_HC_Init(pdev, hc_num);
 801612e:	f000 fcc1 	bl	8016ab4 <USB_OTG_HC_Init>
  return HC_OK; 

}
 8016132:	2000      	movs	r0, #0
 8016134:	bd70      	pop	{r4, r5, r6, pc}

08016136 <USBH_Alloc_Channel>:
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
{
 8016136:	b510      	push	{r4, lr}
 8016138:	2300      	movs	r3, #0
  * @brief  USBH_Alloc_Channel
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
 801613a:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 801613e:	b2da      	uxtb	r2, r3
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
  {
	if ((pdev->host.channel[idx] & HC_USED) == 0)
 8016140:	f9b4 4a70 	ldrsh.w	r4, [r4, #2672]	; 0xa70
 8016144:	2c00      	cmp	r4, #0
 8016146:	db08      	blt.n	801615a <USBH_Alloc_Channel+0x24>
  
  hc_num =  USBH_GetFreeChannel(pdev);

  if (hc_num != HC_ERROR)
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
 8016148:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801614c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8016150:	ea6f 4351 	mvn.w	r3, r1, lsr #17
 8016154:	f8a0 3a70 	strh.w	r3, [r0, #2672]	; 0xa70
 8016158:	e004      	b.n	8016164 <USBH_Alloc_Channel+0x2e>
 801615a:	3301      	adds	r3, #1
  */
static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
 801615c:	2b08      	cmp	r3, #8
 801615e:	d1ec      	bne.n	801613a <USBH_Alloc_Channel+0x4>
	if ((pdev->host.channel[idx] & HC_USED) == 0)
	{
	   return idx;
	} 
  }
  return HC_ERROR;
 8016160:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if (hc_num != HC_ERROR)
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
  }
  return hc_num;
}
 8016164:	b2d0      	uxtb	r0, r2
 8016166:	bd10      	pop	{r4, pc}

08016168 <USBH_Free_Channel>:
  * @param  idx: Channel number to be freed 
  * @retval Status
  */
uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
{
   if(idx < HC_MAX)
 8016168:	2907      	cmp	r1, #7
 801616a:	d807      	bhi.n	801617c <USBH_Free_Channel+0x14>
   {
	 pdev->host.channel[idx] &= HC_USED_MASK;
 801616c:	f201 5134 	addw	r1, r1, #1332	; 0x534
 8016170:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8016174:	8903      	ldrh	r3, [r0, #8]
 8016176:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 801617a:	8102      	strh	r2, [r0, #8]
   }
   return USBH_OK;
}
 801617c:	2000      	movs	r0, #0
 801617e:	4770      	bx	lr

08016180 <USBH_DeAllocate_AllChannel>:
{
   uint8_t idx;
   
   for (idx = 2; idx < HC_MAX ; idx ++)
   {
	 pdev->host.channel[idx] = 0;
 8016180:	2300      	movs	r3, #0
 8016182:	f8a0 3a74 	strh.w	r3, [r0, #2676]	; 0xa74
 8016186:	f8a0 3a76 	strh.w	r3, [r0, #2678]	; 0xa76
 801618a:	f8a0 3a78 	strh.w	r3, [r0, #2680]	; 0xa78
 801618e:	f8a0 3a7a 	strh.w	r3, [r0, #2682]	; 0xa7a
 8016192:	f8a0 3a7c 	strh.w	r3, [r0, #2684]	; 0xa7c
 8016196:	f8a0 3a7e 	strh.w	r3, [r0, #2686]	; 0xa7e
   }
   return USBH_OK;
}
 801619a:	4618      	mov	r0, r3
 801619c:	4770      	bx	lr

0801619e <USBH_CtlReq>:
                             uint16_t            length)
{
  USBH_Status status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 801619e:	78c8      	ldrb	r0, [r1, #3]
 80161a0:	2801      	cmp	r0, #1
  */
USBH_Status USBH_CtlReq     (USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 80161a2:	b510      	push	{r4, lr}
  USBH_Status status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 80161a4:	d004      	beq.n	80161b0 <USBH_CtlReq+0x12>
 80161a6:	2802      	cmp	r0, #2
 80161a8:	f04f 0301 	mov.w	r3, #1
 80161ac:	d119      	bne.n	80161e2 <USBH_CtlReq+0x44>
 80161ae:	e008      	b.n	80161c2 <USBH_CtlReq+0x24>
                                           uint8_t* buff, 
                                           uint16_t length)
{
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 80161b0:	780c      	ldrb	r4, [r1, #0]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
  phost->Control.buff = buff; 
  phost->Control.length = length;
 80161b2:	818b      	strh	r3, [r1, #12]
                                           uint8_t* buff, 
                                           uint16_t length)
{
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 80161b4:	704c      	strb	r4, [r1, #1]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
 80161b6:	2407      	movs	r4, #7
 80161b8:	700c      	strb	r4, [r1, #0]
  phost->Control.buff = buff; 
 80161ba:	608a      	str	r2, [r1, #8]
  phost->Control.length = length;
  phost->Control.state = CTRL_SETUP;  
 80161bc:	7708      	strb	r0, [r1, #28]
  switch (phost->RequestState)
  {
  case CMD_SEND:
    /* Start a SETUP transfer */
    USBH_SubmitSetupRequest(phost, buff, length);
    phost->RequestState = CMD_WAIT;
 80161be:	2302      	movs	r3, #2
 80161c0:	e008      	b.n	80161d4 <USBH_CtlReq+0x36>
    status = USBH_BUSY;
    break;
    
  case CMD_WAIT:
     if (phost->Control.state == CTRL_COMPLETE ) 
 80161c2:	7f0a      	ldrb	r2, [r1, #28]
 80161c4:	2a0d      	cmp	r2, #13
 80161c6:	d103      	bne.n	80161d0 <USBH_CtlReq+0x32>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
      phost->Control.state =CTRL_IDLE;  
 80161c8:	2000      	movs	r0, #0
    
  case CMD_WAIT:
     if (phost->Control.state == CTRL_COMPLETE ) 
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 80161ca:	70cb      	strb	r3, [r1, #3]
      phost->Control.state =CTRL_IDLE;  
 80161cc:	7708      	strb	r0, [r1, #28]
 80161ce:	bd10      	pop	{r4, pc}
      status = USBH_OK;      
    }
    else if  (phost->Control.state == CTRL_ERROR)
 80161d0:	2a0b      	cmp	r2, #11
 80161d2:	d101      	bne.n	80161d8 <USBH_CtlReq+0x3a>
    {
      /* Failure Mode */
      phost->RequestState = CMD_SEND;
 80161d4:	70cb      	strb	r3, [r1, #3]
 80161d6:	bd10      	pop	{r4, pc}
      status = USBH_FAIL;
    }   
     else if  (phost->Control.state == CTRL_STALLED )
 80161d8:	2a0c      	cmp	r2, #12
 80161da:	d102      	bne.n	80161e2 <USBH_CtlReq+0x44>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 80161dc:	70cb      	strb	r3, [r1, #3]
      status = USBH_NOT_SUPPORTED;
 80161de:	2003      	movs	r0, #3
 80161e0:	bd10      	pop	{r4, pc}
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
  USBH_Status status;
  status = USBH_BUSY;
 80161e2:	4618      	mov	r0, r3
    
  default:
    break; 
  }
  return status;
}
 80161e4:	bd10      	pop	{r4, pc}

080161e6 <USBH_CtlSendSetup>:
  * @param  hc_num: Host channel Number
  * @retval Status
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
 80161e6:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 80161e8:	eb00 1442 	add.w	r4, r0, r2, lsl #5
 80161ec:	2500      	movs	r5, #0
 80161ee:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 80161f2:	f102 0515 	add.w	r5, r2, #21
 80161f6:	eb00 1345 	add.w	r3, r0, r5, lsl #5
 80161fa:	2503      	movs	r5, #3
  pdev->host.hc[hc_num].xfer_buff = buff;
 80161fc:	f8c3 15fc 	str.w	r1, [r3, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   
 8016200:	2108      	movs	r1, #8
 8016202:	f8c4 18a0 	str.w	r1, [r4, #2208]	; 0x8a0
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
  pdev->host.hc[hc_num].ep_is_in = 0;
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8016206:	f883 55f8 	strb.w	r5, [r3, #1528]	; 0x5f8
  pdev->host.hc[hc_num].xfer_buff = buff;
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   

  return (USBH_Status)HCD_SubmitRequest (pdev , hc_num);   
 801620a:	4611      	mov	r1, r2
 801620c:	f001 fb7e 	bl	801790c <HCD_SubmitRequest>
}
 8016210:	b2c0      	uxtb	r0, r0
 8016212:	bd38      	pop	{r3, r4, r5, pc}

08016214 <USBH_CtlSendData>:
  */
USBH_Status USBH_CtlSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8016214:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8016216:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 801621a:	2500      	movs	r5, #0
 801621c:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016220:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
 8016224:	4625      	mov	r5, r4
  pdev->host.hc[hc_num].xfer_len = length;
 8016226:	f8c4 28a0 	str.w	r2, [r4, #2208]	; 0x8a0
 
  if ( length == 0 )
 801622a:	b912      	cbnz	r2, 8016232 <USBH_CtlSendData+0x1e>
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
 801622c:	2101      	movs	r1, #1
 801622e:	f884 18a9 	strb.w	r1, [r4, #2217]	; 0x8a9
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8016232:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8016236:	f892 18a9 	ldrb.w	r1, [r2, #2217]	; 0x8a9
 801623a:	f103 0215 	add.w	r2, r3, #21
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 801623e:	eb00 1242 	add.w	r2, r0, r2, lsl #5
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8016242:	b101      	cbz	r1, 8016246 <USBH_CtlSendData+0x32>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8016244:	2102      	movs	r1, #2
 8016246:	f882 15f8 	strb.w	r1, [r2, #1528]	; 0x5f8
 }

  HCD_SubmitRequest (pdev , hc_num);   
 801624a:	4619      	mov	r1, r3
 801624c:	f001 fb5e 	bl	801790c <HCD_SubmitRequest>
   
  return USBH_OK;
}
 8016250:	2000      	movs	r0, #0
 8016252:	bd38      	pop	{r3, r4, r5, pc}

08016254 <USBH_CtlReceiveData>:
  */
USBH_Status USBH_CtlReceiveData(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8016254:	b570      	push	{r4, r5, r6, lr}

  pdev->host.hc[hc_num].ep_is_in = 1;
 8016256:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 801625a:	2601      	movs	r6, #1
 801625c:	f885 6892 	strb.w	r6, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8016260:	f103 0615 	add.w	r6, r3, #21
 8016264:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 8016268:	2602      	movs	r6, #2
  pdev->host.hc[hc_num].xfer_buff = buff;
 801626a:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
                                uint16_t length,
                                uint8_t hc_num)
{

  pdev->host.hc[hc_num].ep_is_in = 1;
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 801626e:	f884 65f8 	strb.w	r6, [r4, #1528]	; 0x5f8
  pdev->host.hc[hc_num].xfer_buff = buff;
  pdev->host.hc[hc_num].xfer_len = length;  
 8016272:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0

  HCD_SubmitRequest (pdev , hc_num);   
 8016276:	4619      	mov	r1, r3
 8016278:	f001 fb48 	bl	801790c <HCD_SubmitRequest>
  
  return USBH_OK;
  
}
 801627c:	2000      	movs	r0, #0
 801627e:	bd70      	pop	{r4, r5, r6, pc}

08016280 <USBH_BulkSendData>:
  */
USBH_Status USBH_BulkSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
 8016280:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8016282:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8016286:	2400      	movs	r4, #0
 8016288:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 801628c:	f103 0415 	add.w	r4, r3, #21
 8016290:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;  
 8016294:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
  pdev->host.hc[hc_num].ep_is_in = 0;
  pdev->host.hc[hc_num].xfer_buff = buff;
 8016298:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;  

 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 801629c:	f895 18a9 	ldrb.w	r1, [r5, #2217]	; 0x8a9
 80162a0:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 80162a4:	b101      	cbz	r1, 80162a8 <USBH_BulkSendData+0x28>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 80162a6:	2102      	movs	r1, #2
 80162a8:	7221      	strb	r1, [r4, #8]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 80162aa:	4619      	mov	r1, r3
 80162ac:	f001 fb2e 	bl	801790c <HCD_SubmitRequest>
  return USBH_OK;
}
 80162b0:	2000      	movs	r0, #0
 80162b2:	bd38      	pop	{r3, r4, r5, pc}

080162b4 <USBH_BulkReceiveData>:
  */
USBH_Status USBH_BulkReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 80162b4:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 1;   
 80162b6:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80162ba:	2401      	movs	r4, #1
 80162bc:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 80162c0:	f103 0415 	add.w	r4, r3, #21
 80162c4:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;
 80162c8:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
  pdev->host.hc[hc_num].ep_is_in = 1;   
  pdev->host.hc[hc_num].xfer_buff = buff;
 80162cc:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;
  

  if( pdev->host.hc[hc_num].toggle_in == 0)
 80162d0:	f895 18a8 	ldrb.w	r1, [r5, #2216]	; 0x8a8
 80162d4:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 80162d8:	b101      	cbz	r1, 80162dc <USBH_BulkReceiveData+0x28>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 80162da:	2102      	movs	r1, #2
 80162dc:	7221      	strb	r1, [r4, #8]
  }

  HCD_SubmitRequest (pdev , hc_num);  
 80162de:	4619      	mov	r1, r3
 80162e0:	f001 fb14 	bl	801790c <HCD_SubmitRequest>
  return USBH_OK;
}
 80162e4:	2000      	movs	r0, #0
 80162e6:	bd38      	pop	{r3, r4, r5, pc}

080162e8 <USBH_GetDescriptor>:
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 80162e8:	b530      	push	{r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80162ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
  phost->Control.setup.b.wValue.w = value_idx;
 80162ee:	82cb      	strh	r3, [r1, #22]
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 80162f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 80162f4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80162f8:	9d03      	ldr	r5, [sp, #12]
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80162fa:	750a      	strb	r2, [r1, #20]
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80162fc:	2206      	movs	r2, #6
  phost->Control.setup.b.wValue.w = value_idx;
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 80162fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
 8016302:	bf0c      	ite	eq
 8016304:	f240 4309 	movweq	r3, #1033	; 0x409
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8016308:	2300      	movne	r3, #0
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801630a:	754a      	strb	r2, [r1, #21]
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 801630c:	830b      	strh	r3, [r1, #24]
  }
  phost->Control.setup.b.wLength.w = length;           
  return USBH_CtlReq(pdev, phost, buff , length );     
 801630e:	462a      	mov	r2, r5
 8016310:	4623      	mov	r3, r4
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
  }
  phost->Control.setup.b.wLength.w = length;           
 8016312:	834c      	strh	r4, [r1, #26]
  return USBH_CtlReq(pdev, phost, buff , length );     
}
 8016314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
  }
  phost->Control.setup.b.wLength.w = length;           
  return USBH_CtlReq(pdev, phost, buff , length );     
 8016318:	f7ff bf41 	b.w	801619e <USBH_CtlReq>

0801631c <USBH_Get_StringDesc>:
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 801631c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801631e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8016322:	461d      	mov	r5, r3
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8016324:	f442 7340 	orr.w	r3, r2, #768	; 0x300
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  pdev->host.Rx_Buffer,
 8016328:	f200 52f4 	addw	r2, r0, #1524	; 0x5f4
                                uint8_t *buff, 
                                uint16_t length)
{
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 801632c:	e88d 0044 	stmia.w	sp, {r2, r6}
 8016330:	2200      	movs	r2, #0
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8016332:	4604      	mov	r4, r0
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8016334:	f7ff ffd8 	bl	80162e8 <USBH_GetDescriptor>
 8016338:	b9b8      	cbnz	r0, 801636a <USBH_Get_StringDesc+0x4e>
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 801633a:	f894 35f5 	ldrb.w	r3, [r4, #1525]	; 0x5f5
 801633e:	2b03      	cmp	r3, #3
 8016340:	d113      	bne.n	801636a <USBH_Get_StringDesc+0x4e>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8016342:	f894 15f4 	ldrb.w	r1, [r4, #1524]	; 0x5f4
 8016346:	1e8a      	subs	r2, r1, #2
 8016348:	4296      	cmp	r6, r2
 801634a:	bfa8      	it	ge
 801634c:	4616      	movge	r6, r2
 801634e:	b2b6      	uxth	r6, r6
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 8016350:	f204 54f6 	addw	r4, r4, #1526	; 0x5f6
    
    for (idx = 0; idx < strlength; idx+=2 )
 8016354:	4603      	mov	r3, r0
 8016356:	42b3      	cmp	r3, r6
 8016358:	d205      	bcs.n	8016366 <USBH_Get_StringDesc+0x4a>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801635a:	5ce1      	ldrb	r1, [r4, r3]
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 801635c:	1c9a      	adds	r2, r3, #2
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801635e:	f805 1b01 	strb.w	r1, [r5], #1
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 8016362:	b293      	uxth	r3, r2
 8016364:	e7f7      	b.n	8016356 <USBH_Get_StringDesc+0x3a>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
      pdest++;
    }  
    *pdest = 0; /* mark end of string */  
 8016366:	2300      	movs	r3, #0
 8016368:	702b      	strb	r3, [r5, #0]
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
  }
  return status;
}
 801636a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0801636c <USBH_Get_DevDesc>:
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 801636c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  if((status = USBH_GetDescriptor(pdev, 
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  pdev->host.Rx_Buffer,
 801636e:	f200 53f4 	addw	r3, r0, #1524	; 0x5f4
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8016372:	4616      	mov	r6, r2
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 8016374:	e88d 0048 	stmia.w	sp, {r3, r6}
 8016378:	2200      	movs	r2, #0
 801637a:	f44f 7380 	mov.w	r3, #256	; 0x100
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 801637e:	4604      	mov	r4, r0
 8016380:	460d      	mov	r5, r1
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 8016382:	f7ff ffb1 	bl	80162e8 <USBH_GetDescriptor>
 8016386:	2800      	cmp	r0, #0
 8016388:	d145      	bne.n	8016416 <USBH_Get_DevDesc+0xaa>
*/
static void  USBH_ParseDevDesc (USBH_DevDesc_TypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 801638a:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 801638e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8016392:	f894 15f5 	ldrb.w	r1, [r4, #1525]	; 0x5f5
 8016396:	f885 1023 	strb.w	r1, [r5, #35]	; 0x23
  dev_desc->bcdUSB             = LE16 (buf +  2);
 801639a:	f894 25f7 	ldrb.w	r2, [r4, #1527]	; 0x5f7
 801639e:	f894 35f6 	ldrb.w	r3, [r4, #1526]	; 0x5f6
 80163a2:	eb03 2102 	add.w	r1, r3, r2, lsl #8
 80163a6:	84a9      	strh	r1, [r5, #36]	; 0x24
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80163a8:	f894 25f8 	ldrb.w	r2, [r4, #1528]	; 0x5f8
 80163ac:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80163b0:	f894 35f9 	ldrb.w	r3, [r4, #1529]	; 0x5f9
 80163b4:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80163b8:	f894 15fa 	ldrb.w	r1, [r4, #1530]	; 0x5fa
 80163bc:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80163c0:	f894 25fb 	ldrb.w	r2, [r4, #1531]	; 0x5fb
  
  if (length > 8)
 80163c4:	2e08      	cmp	r6, #8
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
  dev_desc->bcdUSB             = LE16 (buf +  2);
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80163c6:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  
  if (length > 8)
 80163ca:	d924      	bls.n	8016416 <USBH_Get_DevDesc+0xaa>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80163cc:	f894 15fd 	ldrb.w	r1, [r4, #1533]	; 0x5fd
 80163d0:	f894 35fc 	ldrb.w	r3, [r4, #1532]	; 0x5fc
 80163d4:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 80163d8:	856a      	strh	r2, [r5, #42]	; 0x2a
    dev_desc->idProduct          = LE16 (buf + 10);
 80163da:	f894 15ff 	ldrb.w	r1, [r4, #1535]	; 0x5ff
 80163de:	f894 35fe 	ldrb.w	r3, [r4, #1534]	; 0x5fe
 80163e2:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 80163e6:	85aa      	strh	r2, [r5, #44]	; 0x2c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80163e8:	f894 1601 	ldrb.w	r1, [r4, #1537]	; 0x601
 80163ec:	f894 3600 	ldrb.w	r3, [r4, #1536]	; 0x600
 80163f0:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 80163f4:	85ea      	strh	r2, [r5, #46]	; 0x2e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80163f6:	f894 1602 	ldrb.w	r1, [r4, #1538]	; 0x602
 80163fa:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80163fe:	f894 3603 	ldrb.w	r3, [r4, #1539]	; 0x603
 8016402:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8016406:	f894 2604 	ldrb.w	r2, [r4, #1540]	; 0x604
 801640a:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 801640e:	f894 1605 	ldrb.w	r1, [r4, #1541]	; 0x605
 8016412:	f885 1033 	strb.w	r1, [r5, #51]	; 0x33
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
  }
  return status;      
}
 8016416:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08016418 <USBH_Get_CfgDesc>:
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 8016418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801641c:	4617      	mov	r7, r2
 801641e:	b08d      	sub	sp, #52	; 0x34
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
 8016420:	f200 54f4 	addw	r4, r0, #1524	; 0x5f4

{
  USBH_Status status;
  uint16_t index = 0;
  
  if((status = USBH_GetDescriptor(pdev,
 8016424:	e88d 0090 	stmia.w	sp, {r4, r7}
 8016428:	2200      	movs	r2, #0
 801642a:	f44f 7300 	mov.w	r3, #512	; 0x200
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 801642e:	4606      	mov	r6, r0
 8016430:	460d      	mov	r5, r1
  USBH_Status status;
  uint16_t index = 0;
  
  if((status = USBH_GetDescriptor(pdev,
 8016432:	f7ff ff59 	bl	80162e8 <USBH_GetDescriptor>
 8016436:	9002      	str	r0, [sp, #8]
 8016438:	2800      	cmp	r0, #0
 801643a:	f040 80d1 	bne.w	80165e0 <USBH_Get_CfgDesc+0x1c8>
 801643e:	9b02      	ldr	r3, [sp, #8]
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
 8016440:	b29a      	uxth	r2, r3
 8016442:	42ba      	cmp	r2, r7
 8016444:	d206      	bcs.n	8016454 <USBH_Get_CfgDesc+0x3c>
* @param  itf_desc: Interface Descriptor address
* @param  ep_desc: Endpoint Descriptor address
* @param  length: Length of the descriptor
* @retval Status
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
 8016446:	18f2      	adds	r2, r6, r3
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
    {
      USBH_CfgDesc[index] = pdev->host.Rx_Buffer[index];
 8016448:	4867      	ldr	r0, [pc, #412]	; (80165e8 <USBH_Get_CfgDesc+0x1d0>)
 801644a:	f892 15f4 	ldrb.w	r1, [r2, #1524]	; 0x5f4
 801644e:	5419      	strb	r1, [r3, r0]
 8016450:	3301      	adds	r3, #1
 8016452:	e7f5      	b.n	8016440 <USBH_Get_CfgDesc+0x28>
  
  
  pdesc   = (USBH_DescHeader_t *)buf;
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8016454:	f896 05f4 	ldrb.w	r0, [r6, #1524]	; 0x5f4
 8016458:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 801645c:	f896 15f5 	ldrb.w	r1, [r6, #1525]	; 0x5f5
 8016460:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8016464:	f896 25f7 	ldrb.w	r2, [r6, #1527]	; 0x5f7
 8016468:	f896 35f6 	ldrb.w	r3, [r6, #1526]	; 0x5f6
 801646c:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8016470:	86e8      	strh	r0, [r5, #54]	; 0x36
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8016472:	f896 15f8 	ldrb.w	r1, [r6, #1528]	; 0x5f8
 8016476:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 801647a:	f896 25f9 	ldrb.w	r2, [r6, #1529]	; 0x5f9
 801647e:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8016482:	f896 35fa 	ldrb.w	r3, [r6, #1530]	; 0x5fa
 8016486:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 801648a:	f896 05fb 	ldrb.w	r0, [r6, #1531]	; 0x5fb
 801648e:	f885 003b 	strb.w	r0, [r5, #59]	; 0x3b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8016492:	f896 25fc 	ldrb.w	r2, [r6, #1532]	; 0x5fc
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8016496:	2f09      	cmp	r7, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8016498:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 801649c:	f240 80a0 	bls.w	80165e0 <USBH_Get_CfgDesc+0x1c8>
  {
    ptr = USB_LEN_CFG_DESC;
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 80164a0:	2902      	cmp	r1, #2
 80164a2:	d905      	bls.n	80164b0 <USBH_Get_CfgDesc+0x98>
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 80164a4:	4851      	ldr	r0, [pc, #324]	; (80165ec <USBH_Get_CfgDesc+0x1d4>)
    prev_itf = 0; 
 80164a6:	4952      	ldr	r1, [pc, #328]	; (80165f0 <USBH_Get_CfgDesc+0x1d8>)
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 80164a8:	2300      	movs	r3, #0
 80164aa:	8003      	strh	r3, [r0, #0]
    prev_itf = 0; 
 80164ac:	700b      	strb	r3, [r1, #0]
 80164ae:	e097      	b.n	80165e0 <USBH_Get_CfgDesc+0x1c8>
 80164b0:	494f      	ldr	r1, [pc, #316]	; (80165f0 <USBH_Get_CfgDesc+0x1d8>)
 80164b2:	484e      	ldr	r0, [pc, #312]	; (80165ec <USBH_Get_CfgDesc+0x1d4>)
 80164b4:	780b      	ldrb	r3, [r1, #0]
 80164b6:	f8b0 9000 	ldrh.w	r9, [r0]
 80164ba:	930a      	str	r3, [sp, #40]	; 0x28
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
  {
    ptr = USB_LEN_CFG_DESC;
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 80164bc:	2209      	movs	r2, #9
    {
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
 80164be:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
 80164c0:	4291      	cmp	r1, r2
 80164c2:	d9ef      	bls.n	80164a4 <USBH_Get_CfgDesc+0x8c>
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80164c4:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80164c6:	18e4      	adds	r4, r4, r3
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80164c8:	18d2      	adds	r2, r2, r3
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80164ca:	7860      	ldrb	r0, [r4, #1]
 80164cc:	2804      	cmp	r0, #4
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80164ce:	b292      	uxth	r2, r2
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80164d0:	d1f5      	bne.n	80164be <USBH_Get_CfgDesc+0xa6>
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
          pif               = &itf_desc[if_ix];
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 80164d2:	f894 b003 	ldrb.w	fp, [r4, #3]
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 80164d6:	78a7      	ldrb	r7, [r4, #2]
          pif               = &itf_desc[if_ix];
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 80164d8:	f1bb 0f02 	cmp.w	fp, #2
 80164dc:	d8ef      	bhi.n	80164be <USBH_Get_CfgDesc+0xa6>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80164de:	7826      	ldrb	r6, [r4, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80164e0:	7961      	ldrb	r1, [r4, #5]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80164e2:	9605      	str	r6, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80164e4:	7926      	ldrb	r6, [r4, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80164e6:	9106      	str	r1, [sp, #24]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80164e8:	79a3      	ldrb	r3, [r4, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80164ea:	79e0      	ldrb	r0, [r4, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80164ec:	7a21      	ldrb	r1, [r4, #8]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80164ee:	9307      	str	r3, [sp, #28]
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 80164f0:	2e02      	cmp	r6, #2
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80164f2:	9008      	str	r0, [sp, #32]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80164f4:	9109      	str	r1, [sp, #36]	; 0x24
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 80164f6:	d8e2      	bhi.n	80164be <USBH_Get_CfgDesc+0xa6>
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 80164f8:	b2fb      	uxtb	r3, r7
          pif               = &itf_desc[if_ix];
 80164fa:	b258      	sxtb	r0, r3
 80164fc:	2109      	movs	r1, #9
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 80164fe:	9303      	str	r3, [sp, #12]
          pif               = &itf_desc[if_ix];
 8016500:	fb01 5300 	mla	r3, r1, r0, r5
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8016504:	3005      	adds	r0, #5
 8016506:	eb05 1100 	add.w	r1, r5, r0, lsl #4
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
          pif               = &itf_desc[if_ix];
 801650a:	333e      	adds	r3, #62	; 0x3e
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 801650c:	9104      	str	r1, [sp, #16]
 801650e:	f04f 0800 	mov.w	r8, #0
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
 8016512:	fa4f fc88 	sxtb.w	ip, r8
 8016516:	45b4      	cmp	ip, r6
 8016518:	dad1      	bge.n	80164be <USBH_Get_CfgDesc+0xa6>
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 801651a:	7820      	ldrb	r0, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 801651c:	1824      	adds	r4, r4, r0
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 801651e:	1812      	adds	r2, r2, r0
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8016520:	7861      	ldrb	r1, [r4, #1]
 8016522:	2905      	cmp	r1, #5
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8016524:	b292      	uxth	r2, r2
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8016526:	d1f4      	bne.n	8016512 <USBH_Get_CfgDesc+0xfa>
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8016528:	9804      	ldr	r0, [sp, #16]
 801652a:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
                
                if(prev_itf != if_ix)
 801652e:	9803      	ldr	r0, [sp, #12]
 8016530:	fa4f fa80 	sxtb.w	sl, r0
 8016534:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016536:	4550      	cmp	r0, sl
 8016538:	d013      	beq.n	8016562 <USBH_Get_CfgDesc+0x14a>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801653a:	9805      	ldr	r0, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 801653c:	709f      	strb	r7, [r3, #2]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801653e:	7018      	strb	r0, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8016540:	9806      	ldr	r0, [sp, #24]
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8016542:	f883 b003 	strb.w	fp, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8016546:	7158      	strb	r0, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8016548:	9807      	ldr	r0, [sp, #28]
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 801654a:	711e      	strb	r6, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 801654c:	7198      	strb	r0, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 801654e:	9808      	ldr	r0, [sp, #32]
              {  
                pep               = &ep_desc[if_ix][ep_ix];
                
                if(prev_itf != if_ix)
                {
                  prev_itf = if_ix;
 8016550:	970a      	str	r7, [sp, #40]	; 0x28
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8016552:	71d8      	strb	r0, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8016554:	9809      	ldr	r0, [sp, #36]	; 0x24
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8016556:	f04f 0e04 	mov.w	lr, #4
 801655a:	f883 e001 	strb.w	lr, [r3, #1]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 801655e:	7218      	strb	r0, [r3, #8]
 8016560:	e018      	b.n	8016594 <USBH_Get_CfgDesc+0x17c>
                  prev_itf = if_ix;
                  USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif); 
                }
                else
                {
                  if(prev_ep_size > LE16((uint8_t *)pdesc + 4))
 8016562:	f894 a004 	ldrb.w	sl, [r4, #4]
 8016566:	7960      	ldrb	r0, [r4, #5]
 8016568:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
 801656c:	45d1      	cmp	r9, sl
 801656e:	dca6      	bgt.n	80164be <USBH_Get_CfgDesc+0xa6>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8016570:	9805      	ldr	r0, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8016572:	709f      	strb	r7, [r3, #2]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8016574:	7018      	strb	r0, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8016576:	9806      	ldr	r0, [sp, #24]
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8016578:	f883 b003 	strb.w	fp, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 801657c:	7158      	strb	r0, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 801657e:	9807      	ldr	r0, [sp, #28]
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8016580:	711e      	strb	r6, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8016582:	7198      	strb	r0, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8016584:	9808      	ldr	r0, [sp, #32]
 8016586:	71d8      	strb	r0, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8016588:	9809      	ldr	r0, [sp, #36]	; 0x24
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 801658a:	f04f 0904 	mov.w	r9, #4
 801658e:	f883 9001 	strb.w	r9, [r3, #1]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8016592:	7218      	strb	r0, [r3, #8]
*/
static void  USBH_ParseEPDesc (USBH_EpDesc_TypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8016594:	f894 9000 	ldrb.w	r9, [r4]
 8016598:	9804      	ldr	r0, [sp, #16]
 801659a:	f800 903c 	strb.w	r9, [r0, ip, lsl #3]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 801659e:	f894 c001 	ldrb.w	ip, [r4, #1]
 80165a2:	f881 c001 	strb.w	ip, [r1, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80165a6:	78a0      	ldrb	r0, [r4, #2]
 80165a8:	7088      	strb	r0, [r1, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80165aa:	f894 e003 	ldrb.w	lr, [r4, #3]
 80165ae:	f881 e003 	strb.w	lr, [r1, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80165b2:	f894 9005 	ldrb.w	r9, [r4, #5]
 80165b6:	f894 c004 	ldrb.w	ip, [r4, #4]
 80165ba:	eb0c 2009 	add.w	r0, ip, r9, lsl #8
 80165be:	8088      	strh	r0, [r1, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80165c0:	f894 e006 	ldrb.w	lr, [r4, #6]
 80165c4:	f881 e006 	strb.w	lr, [r1, #6]
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 80165c8:	f894 9005 	ldrb.w	r9, [r4, #5]
 80165cc:	7921      	ldrb	r1, [r4, #4]
                ep_ix++;
 80165ce:	f108 0801 	add.w	r8, r8, #1
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 80165d2:	eb01 2009 	add.w	r0, r1, r9, lsl #8
 80165d6:	fa1f f980 	uxth.w	r9, r0
                ep_ix++;
 80165da:	fa5f f888 	uxtb.w	r8, r8
 80165de:	e798      	b.n	8016512 <USBH_Get_CfgDesc+0xfa>
                       pdev->host.Rx_Buffer,
                       length); 
    
  }
  return status;
}
 80165e0:	9802      	ldr	r0, [sp, #8]
 80165e2:	b00d      	add	sp, #52	; 0x34
 80165e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165e8:	200119a8 	.word	0x200119a8
 80165ec:	200005ce 	.word	0x200005ce
 80165f0:	200005d0 	.word	0x200005d0

080165f4 <USBH_SetAddress>:
* @retval Status
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
 80165f4:	b530      	push	{r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80165f6:	2400      	movs	r4, #0
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80165f8:	2505      	movs	r5, #5
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80165fa:	82ca      	strh	r2, [r1, #22]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 80165fc:	4623      	mov	r3, r4
 80165fe:	4622      	mov	r2, r4
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016600:	750c      	strb	r4, [r1, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8016602:	754d      	strb	r5, [r1, #21]
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
  phost->Control.setup.b.wIndex.w = 0;
 8016604:	830c      	strh	r4, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;
 8016606:	834c      	strh	r4, [r1, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
}
 8016608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 801660c:	f7ff bdc7 	b.w	801619e <USBH_CtlReq>

08016610 <USBH_SetCfg>:
* @retval Status
*/
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
 8016610:	b530      	push	{r4, r5, lr}
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8016612:	2400      	movs	r4, #0
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8016614:	2509      	movs	r5, #9
  phost->Control.setup.b.wValue.w = cfg_idx;
 8016616:	82ca      	strh	r2, [r1, #22]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8016618:	4623      	mov	r3, r4
 801661a:	4622      	mov	r2, r4
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 801661c:	750c      	strb	r4, [r1, #20]
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801661e:	754d      	strb	r5, [r1, #21]
  phost->Control.setup.b.wValue.w = cfg_idx;
  phost->Control.setup.b.wIndex.w = 0;
 8016620:	830c      	strh	r4, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;           
 8016622:	834c      	strh	r4, [r1, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
}
 8016624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
  phost->Control.setup.b.wValue.w = cfg_idx;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8016628:	f7ff bdb9 	b.w	801619e <USBH_CtlReq>

0801662c <USBH_ClrFeature>:
*/
USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
 801662c:	b530      	push	{r4, r5, lr}
 801662e:	f103 0345 	add.w	r3, r3, #69	; 0x45
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 8016632:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
 8016636:	2402      	movs	r4, #2
 8016638:	750c      	strb	r4, [r1, #20]
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801663a:	2501      	movs	r5, #1
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801663c:	2400      	movs	r4, #0
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
 801663e:	f012 0f80 	tst.w	r2, #128	; 0x80
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8016642:	754d      	strb	r5, [r1, #21]
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
  phost->Control.setup.b.wIndex.w = ep_num;
 8016644:	830a      	strh	r2, [r1, #24]
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016646:	82cc      	strh	r4, [r1, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
 8016648:	834c      	strh	r4, [r1, #26]
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 801664a:	bf14      	ite	ne
 801664c:	721c      	strbne	r4, [r3, #8]
  }
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
 801664e:	725c      	strbeq	r4, [r3, #9]
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 8016650:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016652:	4625      	mov	r5, r4
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 8016654:	4613      	mov	r3, r2
}
 8016656:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 801665a:	f7ff bda0 	b.w	801619e <USBH_CtlReq>
	...

08016660 <USB_OTG_EnableCommonInt>:
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8016660:	68c3      	ldr	r3, [r0, #12]
  int_mask.b.usbsuspend = 1; 
  
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
 8016662:	4803      	ldr	r0, [pc, #12]	; (8016670 <USB_OTG_EnableCommonInt+0x10>)
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8016664:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8016668:	615a      	str	r2, [r3, #20]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 801666a:	6198      	str	r0, [r3, #24]
 801666c:	4770      	bx	lr
 801666e:	bf00      	nop
 8016670:	d0000804 	.word	0xd0000804

08016674 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8016674:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 8016676:	2300      	movs	r3, #0
 8016678:	4c10      	ldr	r4, [pc, #64]	; (80166bc <USB_OTG_CoreReset+0x48>)
 801667a:	9301      	str	r3, [sp, #4]
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 801667c:	4605      	mov	r5, r0
  
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 801667e:	2003      	movs	r0, #3
 8016680:	f7fd fa9a 	bl	8013bb8 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8016684:	68e8      	ldr	r0, [r5, #12]
 8016686:	6902      	ldr	r2, [r0, #16]
    if (++count > 200000)
 8016688:	3c01      	subs	r4, #1
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 801668a:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 801668c:	d013      	beq.n	80166b6 <USB_OTG_CoreReset+0x42>
    {
      return USB_OTG_OK;
    }
  }
  while (greset.b.ahbidle == 0);
 801668e:	9901      	ldr	r1, [sp, #4]
 8016690:	2900      	cmp	r1, #0
 8016692:	daf4      	bge.n	801667e <USB_OTG_CoreReset+0xa>
  /* Core Soft Reset */
  count = 0;
  greset.b.csftrst = 1;
 8016694:	9b01      	ldr	r3, [sp, #4]
 8016696:	f043 0201 	orr.w	r2, r3, #1
 801669a:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 801669c:	9901      	ldr	r1, [sp, #4]
 801669e:	4a07      	ldr	r2, [pc, #28]	; (80166bc <USB_OTG_CoreReset+0x48>)
 80166a0:	6101      	str	r1, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80166a2:	6903      	ldr	r3, [r0, #16]
    if (++count > 200000)
 80166a4:	3a01      	subs	r2, #1
  count = 0;
  greset.b.csftrst = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80166a6:	9301      	str	r3, [sp, #4]
    if (++count > 200000)
 80166a8:	d002      	beq.n	80166b0 <USB_OTG_CoreReset+0x3c>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 80166aa:	9901      	ldr	r1, [sp, #4]
 80166ac:	07c9      	lsls	r1, r1, #31
 80166ae:	d4f8      	bmi.n	80166a2 <USB_OTG_CoreReset+0x2e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80166b0:	2003      	movs	r0, #3
 80166b2:	f7fd fa81 	bl	8013bb8 <USB_OTG_BSP_uDelay>
  return status;
}
 80166b6:	2000      	movs	r0, #0
 80166b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80166ba:	bf00      	nop
 80166bc:	00030d41 	.word	0x00030d41

080166c0 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 80166c0:	b530      	push	{r4, r5, lr}
  USB_OTG_STS status = USB_OTG_OK;
  if (pdev->cfg.dma_enable == 0)
 80166c2:	78c4      	ldrb	r4, [r0, #3]
 80166c4:	b96c      	cbnz	r4, 80166e2 <USB_OTG_WritePacket+0x22>
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 80166c6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80166ca:	3303      	adds	r3, #3
    fifo = pdev->regs.DFIFO[ch_ep_num];
 80166cc:	f8d0 50d0 	ldr.w	r5, [r0, #208]	; 0xd0
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80166d0:	109b      	asrs	r3, r3, #2
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 80166d2:	4622      	mov	r2, r4
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d004      	beq.n	80166e2 <USB_OTG_WritePacket+0x22>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 80166d8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 80166dc:	3201      	adds	r2, #1
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 80166de:	6028      	str	r0, [r5, #0]
 80166e0:	e7f8      	b.n	80166d4 <USB_OTG_WritePacket+0x14>
    }
  }
  return status;
}
 80166e2:	2000      	movs	r0, #0
 80166e4:	bd30      	pop	{r4, r5, pc}

080166e6 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 80166e6:	b510      	push	{r4, lr}
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 80166e8:	3203      	adds	r2, #3
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 80166ea:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 80166ee:	1092      	asrs	r2, r2, #2
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80166f0:	2300      	movs	r3, #0
 80166f2:	4293      	cmp	r3, r2
 80166f4:	ea4f 0083 	mov.w	r0, r3, lsl #2
 80166f8:	d004      	beq.n	8016704 <USB_OTG_ReadPacket+0x1e>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 80166fa:	6820      	ldr	r0, [r4, #0]
 80166fc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8016700:	3301      	adds	r3, #1
 8016702:	e7f6      	b.n	80166f2 <USB_OTG_ReadPacket+0xc>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
}
 8016704:	1808      	adds	r0, r1, r0
 8016706:	bd10      	pop	{r4, pc}

08016708 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8016708:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 801670a:	2300      	movs	r3, #0
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 801670c:	2201      	movs	r2, #1
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 801670e:	2440      	movs	r4, #64	; 0x40
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8016710:	2901      	cmp	r1, #1
                               USB_OTG_CORE_ID_TypeDef coreID)
{
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 8016712:	70c3      	strb	r3, [r0, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8016714:	7082      	strb	r2, [r0, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8016716:	8084      	strh	r4, [r0, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8016718:	d10c      	bne.n	8016734 <USB_OTG_SelectCore+0x2c>
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
    pdev->cfg.dev_endpoints    = 4 ;
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 801671a:	2302      	movs	r3, #2
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
 801671c:	2608      	movs	r6, #8
    pdev->cfg.dev_endpoints    = 4 ;
 801671e:	2204      	movs	r2, #4
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8016720:	f44f 74a0 	mov.w	r4, #320	; 0x140
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8016724:	7203      	strb	r3, [r0, #8]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8016726:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 8 ;
 8016728:	7006      	strb	r6, [r0, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 801672a:	7042      	strb	r2, [r0, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 801672c:	80c4      	strh	r4, [r0, #6]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 801672e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8016732:	e009      	b.n	8016748 <USB_OTG_SelectCore+0x40>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8016734:	b941      	cbnz	r1, 8016748 <USB_OTG_SelectCore+0x40>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
 8016736:	230c      	movs	r3, #12
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8016738:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 12 ;
 801673a:	7003      	strb	r3, [r0, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 801673c:	2106      	movs	r1, #6
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 801673e:	f44f 65a0 	mov.w	r5, #1280	; 0x500
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8016742:	4b20      	ldr	r3, [pc, #128]	; (80167c4 <USB_OTG_SelectCore+0xbc>)
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
    pdev->cfg.dev_endpoints    = 6 ;
 8016744:	7041      	strb	r1, [r0, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8016746:	80c5      	strh	r5, [r0, #6]
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8016748:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 801674c:	7845      	ldrb	r5, [r0, #1]
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 801674e:	6101      	str	r1, [r0, #16]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8016750:	60c3      	str	r3, [r0, #12]
 8016752:	4602      	mov	r2, r0
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8016754:	4619      	mov	r1, r3
 8016756:	2400      	movs	r4, #0
 8016758:	3204      	adds	r2, #4
 801675a:	42ac      	cmp	r4, r5
 801675c:	f101 0620 	add.w	r6, r1, #32
 8016760:	d208      	bcs.n	8016774 <USB_OTG_SelectCore+0x6c>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 8016762:	f501 6710 	add.w	r7, r1, #2304	; 0x900
 8016766:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 801676a:	6511      	str	r1, [r2, #80]	; 0x50
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 801676c:	6157      	str	r7, [r2, #20]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 801676e:	3401      	adds	r4, #1
 8016770:	4631      	mov	r1, r6
 8016772:	e7f1      	b.n	8016758 <USB_OTG_SelectCore+0x50>
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8016774:	f503 6480 	add.w	r4, r3, #1024	; 0x400
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8016778:	f503 6188 	add.w	r1, r3, #1088	; 0x440
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 801677c:	6144      	str	r4, [r0, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 801677e:	7804      	ldrb	r4, [r0, #0]
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8016780:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8016784:	2200      	movs	r2, #0
 8016786:	f503 61a0 	add.w	r1, r3, #1280	; 0x500
 801678a:	42a2      	cmp	r2, r4
 801678c:	d206      	bcs.n	801679c <USB_OTG_SelectCore+0x94>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 801678e:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8016792:	3201      	adds	r2, #1
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8016794:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 8016798:	3120      	adds	r1, #32
 801679a:	e7f6      	b.n	801678a <USB_OTG_SelectCore+0x82>
 801679c:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80167a0:	2200      	movs	r2, #0
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80167a2:	42a2      	cmp	r2, r4
 80167a4:	d207      	bcs.n	80167b6 <USB_OTG_SelectCore+0xae>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 80167a6:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80167aa:	3201      	adds	r2, #1
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80167ac:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
 80167b0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80167b4:	e7f5      	b.n	80167a2 <USB_OTG_SelectCore+0x9a>
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 80167b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80167ba:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  
  return status;
}
 80167be:	2000      	movs	r0, #0
 80167c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167c2:	bf00      	nop
 80167c4:	40040000 	.word	0x40040000

080167c8 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 80167c8:	b538      	push	{r3, r4, r5, lr}
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80167ca:	7a03      	ldrb	r3, [r0, #8]
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
 80167cc:	2500      	movs	r5, #0
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80167ce:	2b01      	cmp	r3, #1
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 80167d0:	4604      	mov	r4, r0
 80167d2:	68c3      	ldr	r3, [r0, #12]
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80167d4:	d11f      	bne.n	8016816 <USB_OTG_CoreInit+0x4e>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 80167d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
    gccfg.b.pwdn = 0;
    
    if (pdev->cfg.Sof_output)
 80167d8:	7a61      	ldrb	r1, [r4, #9]
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
    gccfg.b.pwdn = 0;
 80167da:	f365 4010 	bfi	r0, r5, #16, #1
    
    if (pdev->cfg.Sof_output)
 80167de:	b109      	cbz	r1, 80167e4 <USB_OTG_CoreInit+0x1c>
    {
      gccfg.b.sofouten = 1;   
 80167e0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80167e4:	6398      	str	r0, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80167e6:	68da      	ldr	r2, [r3, #12]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 80167e8:	f36f 1286 	bfc	r2, #6, #1
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 80167ec:	f36f 5296 	bfc	r2, #22, #1
    
    usbcfg.b.ulpi_fsls = 0;
 80167f0:	f36f 4251 	bfc	r2, #17, #1
    usbcfg.b.ulpi_clk_sus_m = 0;
 80167f4:	f36f 42d3 	bfc	r2, #19, #1
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80167f8:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 80167fa:	4620      	mov	r0, r4
 80167fc:	f7ff ff3a 	bl	8016674 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 8016800:	78e3      	ldrb	r3, [r4, #3]
 8016802:	2b01      	cmp	r3, #1
 8016804:	d119      	bne.n	801683a <USB_OTG_CoreInit+0x72>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8016806:	2105      	movs	r1, #5
 8016808:	f361 0544 	bfi	r5, r1, #1, #4
      ahbcfg.b.dmaenable = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 801680c:	68e0      	ldr	r0, [r4, #12]
    
    if(pdev->cfg.dma_enable == 1)
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
      ahbcfg.b.dmaenable = 1;
 801680e:	f045 0520 	orr.w	r5, r5, #32
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8016812:	6085      	str	r5, [r0, #8]
 8016814:	e011      	b.n	801683a <USB_OTG_CoreInit+0x72>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8016816:	68da      	ldr	r2, [r3, #12]
    usbcfg.b.physel  = 1; /* FS Interface */
 8016818:	f042 0140 	orr.w	r1, r2, #64	; 0x40
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 801681c:	60d9      	str	r1, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 801681e:	f7ff ff29 	bl	8016674 <USB_OTG_CoreReset>
    gccfg.b.vbussensingB = 1 ;     
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
 8016822:	7a60      	ldrb	r0, [r4, #9]
    {
      gccfg.b.sofouten = 1;  
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8016824:	68e3      	ldr	r3, [r4, #12]
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
    {
      gccfg.b.sofouten = 1;  
 8016826:	2800      	cmp	r0, #0
 8016828:	bf0c      	ite	eq
 801682a:	f44f 1234 	moveq.w	r2, #2949120	; 0x2d0000
 801682e:	f44f 1274 	movne.w	r2, #3997696	; 0x3d0000
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8016832:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8016834:	2014      	movs	r0, #20
 8016836:	f7fd f9c2 	bl	8013bbe <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 801683a:	78e2      	ldrb	r2, [r4, #3]
 801683c:	2a01      	cmp	r2, #1
 801683e:	d106      	bne.n	801684e <USB_OTG_CoreInit+0x86>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8016840:	68e3      	ldr	r3, [r4, #12]
 8016842:	6899      	ldr	r1, [r3, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8016844:	f021 003e 	bic.w	r0, r1, #62	; 0x3e
    ahbcfg.b.dmaenable = 1;
 8016848:	f040 022a 	orr.w	r2, r0, #42	; 0x2a
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 801684c:	609a      	str	r2, [r3, #8]
    
  }
  /* initialize OTG features */
#ifdef  USE_OTG_MODE
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 801684e:	68e3      	ldr	r3, [r4, #12]
 8016850:	68d9      	ldr	r1, [r3, #12]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
 8016852:	f441 7040 	orr.w	r0, r1, #768	; 0x300
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8016856:	60d8      	str	r0, [r3, #12]
  USB_OTG_EnableCommonInt(pdev);
 8016858:	4620      	mov	r0, r4
 801685a:	f7ff ff01 	bl	8016660 <USB_OTG_EnableCommonInt>
#endif
  return status;
}
 801685e:	2000      	movs	r0, #0
 8016860:	bd38      	pop	{r3, r4, r5, pc}

08016862 <USB_OTG_EnableGlobalInt>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8016862:	68c3      	ldr	r3, [r0, #12]
 8016864:	689a      	ldr	r2, [r3, #8]
 8016866:	f042 0001 	orr.w	r0, r2, #1
 801686a:	6098      	str	r0, [r3, #8]
  return status;
}
 801686c:	2000      	movs	r0, #0
 801686e:	4770      	bx	lr

08016870 <USB_OTG_DisableGlobalInt>:
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8016870:	68c3      	ldr	r3, [r0, #12]
 8016872:	689a      	ldr	r2, [r3, #8]
 8016874:	f022 0001 	bic.w	r0, r2, #1
 8016878:	6098      	str	r0, [r3, #8]
  return status;
}
 801687a:	2000      	movs	r0, #0
 801687c:	4770      	bx	lr
	...

08016880 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8016880:	b507      	push	{r0, r1, r2, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
 8016882:	2300      	movs	r3, #0
 8016884:	9301      	str	r3, [sp, #4]
  greset.b.txfflsh = 1;
 8016886:	9a01      	ldr	r2, [sp, #4]
 8016888:	f042 0320 	orr.w	r3, r2, #32
 801688c:	9301      	str	r3, [sp, #4]
  greset.b.txfnum  = num;
 801688e:	9a01      	ldr	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8016890:	4b09      	ldr	r3, [pc, #36]	; (80168b8 <USB_OTG_FlushTxFifo+0x38>)
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
 8016892:	f361 128a 	bfi	r2, r1, #6, #5
 8016896:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8016898:	68c2      	ldr	r2, [r0, #12]
 801689a:	9801      	ldr	r0, [sp, #4]
 801689c:	6110      	str	r0, [r2, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 801689e:	6911      	ldr	r1, [r2, #16]
    if (++count > 200000)
 80168a0:	3b01      	subs	r3, #1
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80168a2:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 80168a4:	d002      	beq.n	80168ac <USB_OTG_FlushTxFifo+0x2c>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 80168a6:	9801      	ldr	r0, [sp, #4]
 80168a8:	0680      	lsls	r0, r0, #26
 80168aa:	d4f8      	bmi.n	801689e <USB_OTG_FlushTxFifo+0x1e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80168ac:	2003      	movs	r0, #3
 80168ae:	f7fd f983 	bl	8013bb8 <USB_OTG_BSP_uDelay>
  return status;
}
 80168b2:	2000      	movs	r0, #0
 80168b4:	bd0e      	pop	{r1, r2, r3, pc}
 80168b6:	bf00      	nop
 80168b8:	00030d41 	.word	0x00030d41

080168bc <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 80168bc:	b507      	push	{r0, r1, r2, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 80168be:	2300      	movs	r3, #0
 80168c0:	9301      	str	r3, [sp, #4]
  greset.b.rxfflsh = 1;
 80168c2:	9901      	ldr	r1, [sp, #4]
 80168c4:	f041 0210 	orr.w	r2, r1, #16
 80168c8:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80168ca:	68c0      	ldr	r0, [r0, #12]
 80168cc:	9b01      	ldr	r3, [sp, #4]
 80168ce:	4a07      	ldr	r2, [pc, #28]	; (80168ec <USB_OTG_FlushRxFifo+0x30>)
 80168d0:	6103      	str	r3, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80168d2:	6901      	ldr	r1, [r0, #16]
    if (++count > 200000)
 80168d4:	3a01      	subs	r2, #1
  greset.d32 = 0;
  greset.b.rxfflsh = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80168d6:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 80168d8:	d002      	beq.n	80168e0 <USB_OTG_FlushRxFifo+0x24>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 80168da:	9b01      	ldr	r3, [sp, #4]
 80168dc:	06d9      	lsls	r1, r3, #27
 80168de:	d4f8      	bmi.n	80168d2 <USB_OTG_FlushRxFifo+0x16>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80168e0:	2003      	movs	r0, #3
 80168e2:	f7fd f969 	bl	8013bb8 <USB_OTG_BSP_uDelay>
  return status;
}
 80168e6:	2000      	movs	r0, #0
 80168e8:	bd0e      	pop	{r1, r2, r3, pc}
 80168ea:	bf00      	nop
 80168ec:	00030d41 	.word	0x00030d41

080168f0 <USB_OTG_SetCurrentMode>:
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80168f0:	68c2      	ldr	r2, [r0, #12]
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 80168f2:	b508      	push	{r3, lr}
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80168f4:	68d3      	ldr	r3, [r2, #12]
  
  usbcfg.b.force_host = 0;
  usbcfg.b.force_dev = 0;
  
  if ( mode == HOST_MODE)
 80168f6:	2901      	cmp	r1, #1
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  usbcfg.b.force_host = 0;
 80168f8:	f36f 735d 	bfc	r3, #29, #1
  usbcfg.b.force_dev = 0;
 80168fc:	f36f 739e 	bfc	r3, #30, #1
  
  if ( mode == HOST_MODE)
 8016900:	d102      	bne.n	8016908 <USB_OTG_SetCurrentMode+0x18>
  {
    usbcfg.b.force_host = 1;
 8016902:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016906:	e002      	b.n	801690e <USB_OTG_SetCurrentMode+0x1e>
  }
  else if ( mode == DEVICE_MODE)
 8016908:	b909      	cbnz	r1, 801690e <USB_OTG_SetCurrentMode+0x1e>
  {
    usbcfg.b.force_dev = 1;
 801690a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_BSP_mDelay(50);
 801690e:	2032      	movs	r0, #50	; 0x32
  else if ( mode == DEVICE_MODE)
  {
    usbcfg.b.force_dev = 1;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8016910:	60d3      	str	r3, [r2, #12]
  USB_OTG_BSP_mDelay(50);
 8016912:	f7fd f954 	bl	8013bbe <USB_OTG_BSP_mDelay>
  return status;
}
 8016916:	2000      	movs	r0, #0
 8016918:	bd08      	pop	{r3, pc}

0801691a <USB_OTG_IsDeviceMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 801691a:	68c3      	ldr	r3, [r0, #12]
 801691c:	6958      	ldr	r0, [r3, #20]
 801691e:	f000 0101 	and.w	r1, r0, #1
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
}
 8016922:	f081 0001 	eor.w	r0, r1, #1
 8016926:	4770      	bx	lr

08016928 <USB_OTG_IsHostMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8016928:	68c3      	ldr	r3, [r0, #12]
 801692a:	6958      	ldr	r0, [r3, #20]
* @retval num_in_ep
*/
uint8_t USB_OTG_IsHostMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) == HOST_MODE);
}
 801692c:	f000 0001 	and.w	r0, r0, #1
 8016930:	4770      	bx	lr

08016932 <USB_OTG_ReadCoreItr>:
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v = 0;
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8016932:	68c3      	ldr	r3, [r0, #12]
 8016934:	695a      	ldr	r2, [r3, #20]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8016936:	6998      	ldr	r0, [r3, #24]
  return v;
}
 8016938:	4010      	ands	r0, r2
 801693a:	4770      	bx	lr

0801693c <USB_OTG_IsEvenFrame>:
* @param  pdev : Selected device
* @retval Frame number
*/
uint8_t USB_OTG_IsEvenFrame (USB_OTG_CORE_HANDLE *pdev) 
{
  return !(USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0x1);
 801693c:	6943      	ldr	r3, [r0, #20]
 801693e:	6898      	ldr	r0, [r3, #8]
 8016940:	f000 0101 	and.w	r1, r0, #1
}
 8016944:	f081 0001 	eor.w	r0, r1, #1
 8016948:	4770      	bx	lr

0801694a <USB_OTG_EnableHostInt>:
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 801694a:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 801694c:	68c3      	ldr	r3, [r0, #12]
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 801694e:	4604      	mov	r4, r0
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
 8016950:	2500      	movs	r5, #0
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8016952:	f04f 32ff 	mov.w	r2, #4294967295
{
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 8016956:	619d      	str	r5, [r3, #24]
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8016958:	615a      	str	r2, [r3, #20]
  
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 801695a:	f7ff fe81 	bl	8016660 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 801695e:	78e0      	ldrb	r0, [r4, #3]
  {  
    intmsk.b.rxstsqlvl  = 1;
 8016960:	42a8      	cmp	r0, r5
 8016962:	bf0c      	ite	eq
 8016964:	2110      	moveq	r1, #16
 8016966:	4629      	movne	r1, r5
  }  
  intmsk.b.portintr   = 1;
  intmsk.b.hcintr     = 1;
  intmsk.b.disconnect = 1;  
 8016968:	f041 530c 	orr.w	r3, r1, #587202560	; 0x23000000
  intmsk.b.sofintr    = 1;  
 801696c:	f043 0208 	orr.w	r2, r3, #8
  intmsk.b.incomplisoout  = 1; 
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8016970:	68e3      	ldr	r3, [r4, #12]
 8016972:	6999      	ldr	r1, [r3, #24]
  }  
  intmsk.b.portintr   = 1;
  intmsk.b.hcintr     = 1;
  intmsk.b.disconnect = 1;  
  intmsk.b.sofintr    = 1;  
  intmsk.b.incomplisoout  = 1; 
 8016974:	f442 1000 	orr.w	r0, r2, #2097152	; 0x200000
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8016978:	ea21 0100 	bic.w	r1, r1, r0
 801697c:	ea41 0200 	orr.w	r2, r1, r0
 8016980:	619a      	str	r2, [r3, #24]
  return status;
}
 8016982:	4628      	mov	r0, r5
 8016984:	bd38      	pop	{r3, r4, r5, pc}

08016986 <USB_OTG_InitFSLSPClkSel>:
*/
void USB_OTG_InitFSLSPClkSel(USB_OTG_CORE_HANDLE *pdev , uint8_t freq)
{
  USB_OTG_HCFG_TypeDef   hcfg;
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8016986:	6943      	ldr	r3, [r0, #20]
 8016988:	681a      	ldr	r2, [r3, #0]
  hcfg.b.fslspclksel = freq;
 801698a:	f361 0201 	bfi	r2, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 801698e:	601a      	str	r2, [r3, #0]
 8016990:	4770      	bx	lr

08016992 <USB_OTG_ReadHPRT0>:
*/
uint32_t USB_OTG_ReadHPRT0(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8016992:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 8016996:	6818      	ldr	r0, [r3, #0]
  hprt0.b.prtena = 0;
  hprt0.b.prtconndet = 0;
  hprt0.b.prtenchng = 0;
  hprt0.b.prtovrcurrchng = 0;
  return hprt0.d32;
}
 8016998:	f020 002e 	bic.w	r0, r0, #46	; 0x2e
 801699c:	4770      	bx	lr

0801699e <USB_OTG_DriveVbus>:
* @param  pdev : Selected device
* @param  state : VBUS state
* @retval None
*/
void USB_OTG_DriveVbus (USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 801699e:	b538      	push	{r3, r4, r5, lr}
 80169a0:	4604      	mov	r4, r0
 80169a2:	460d      	mov	r5, r1
  USB_OTG_HPRT0_TypeDef     hprt0;
  
  hprt0.d32 = 0;
  
  /* enable disable the external charge pump */
  USB_OTG_BSP_DriveVBUS(pdev, state);
 80169a4:	f7fd f934 	bl	8013c10 <USB_OTG_BSP_DriveVBUS>
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 80169a8:	4620      	mov	r0, r4
 80169aa:	f7ff fff2 	bl	8016992 <USB_OTG_ReadHPRT0>
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
 80169ae:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80169b2:	f002 0110 	and.w	r1, r2, #16
 80169b6:	b2cb      	uxtb	r3, r1
 80169b8:	b933      	cbnz	r3, 80169c8 <USB_OTG_DriveVbus+0x2a>
 80169ba:	2d01      	cmp	r5, #1
 80169bc:	d104      	bne.n	80169c8 <USB_OTG_DriveVbus+0x2a>
  {
    hprt0.b.prtpwr = 1;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80169be:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
  {
    hprt0.b.prtpwr = 1;
 80169c2:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80169c6:	6010      	str	r0, [r2, #0]
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
 80169c8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80169cc:	f001 0310 	and.w	r3, r1, #16
 80169d0:	b2da      	uxtb	r2, r3
 80169d2:	b12a      	cbz	r2, 80169e0 <USB_OTG_DriveVbus+0x42>
 80169d4:	b925      	cbnz	r5, 80169e0 <USB_OTG_DriveVbus+0x42>
  {
    hprt0.b.prtpwr = 0;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80169d6:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    hprt0.b.prtpwr = 1;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
  {
    hprt0.b.prtpwr = 0;
 80169da:	f365 300c 	bfi	r0, r5, #12, #1
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80169de:	6008      	str	r0, [r1, #0]
  }
  
  USB_OTG_BSP_mDelay(200);
 80169e0:	20c8      	movs	r0, #200	; 0xc8
}
 80169e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  {
    hprt0.b.prtpwr = 0;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  }
  
  USB_OTG_BSP_mDelay(200);
 80169e6:	f7fd b8ea 	b.w	8013bbe <USB_OTG_BSP_mDelay>

080169ea <USB_OTG_ReadHostAllChannels_intr>:
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadHostAllChannels_intr (USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32 (&pdev->regs.HREGS->HAINT));
 80169ea:	6943      	ldr	r3, [r0, #20]
 80169ec:	6958      	ldr	r0, [r3, #20]
}
 80169ee:	4770      	bx	lr

080169f0 <USB_OTG_ResetPort>:
* @retval status
* @note : (1)The application must wait at least 10 ms (+ 10 ms security)
*   before clearing the reset bit.
*/
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 80169f0:	b538      	push	{r3, r4, r5, lr}
 80169f2:	4605      	mov	r5, r0
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 80169f4:	f7ff ffcd 	bl	8016992 <USB_OTG_ReadHPRT0>
  hprt0.b.prtrst = 1;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80169f8:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  hprt0.b.prtrst = 1;
 80169fc:	f440 7480 	orr.w	r4, r0, #256	; 0x100
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8016a00:	601c      	str	r4, [r3, #0]
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
 8016a02:	200a      	movs	r0, #10
 8016a04:	f7fd f8db 	bl	8013bbe <USB_OTG_BSP_mDelay>
  hprt0.b.prtrst = 0;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8016a08:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  hprt0.b.prtrst = 1;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
  hprt0.b.prtrst = 0;
 8016a0c:	f36f 2408 	bfc	r4, #8, #1
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8016a10:	6004      	str	r4, [r0, #0]
  USB_OTG_BSP_mDelay (20);   
 8016a12:	2014      	movs	r0, #20
 8016a14:	f7fd f8d3 	bl	8013bbe <USB_OTG_BSP_mDelay>
  return 1;
}
 8016a18:	2001      	movs	r0, #1
 8016a1a:	bd38      	pop	{r3, r4, r5, pc}

08016a1c <USB_OTG_CoreInitHost>:
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
{
 8016a1c:	b570      	push	{r4, r5, r6, lr}
 8016a1e:	4604      	mov	r4, r0
#endif
  hcfg.d32 = 0;
  
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
 8016a20:	f7fd f8d4 	bl	8013bcc <USB_OTG_BSP_ConfigVBUS>
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8016a24:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  //USB_OTG_OTGCTL_TypeDef          gotgctl;
#endif
  
  uint32_t                        i = 0;
  
  nptxfifosize.d32 = 0;  
 8016a28:	2500      	movs	r5, #0
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8016a2a:	601d      	str	r5, [r3, #0]
  
  /* Initialize Host Configuration Register */
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8016a2c:	7a21      	ldrb	r1, [r4, #8]
 8016a2e:	2901      	cmp	r1, #1
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_30_60_MHZ); 
 8016a30:	bf08      	it	eq
 8016a32:	4629      	moveq	r1, r5
 8016a34:	4620      	mov	r0, r4
  }
  else
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_48_MHZ); 
 8016a36:	bf18      	it	ne
 8016a38:	2101      	movne	r1, #1
 8016a3a:	f7ff ffa4 	bl	8016986 <USB_OTG_InitFSLSPClkSel>
  }
  USB_OTG_ResetPort(pdev);
 8016a3e:	4620      	mov	r0, r4
 8016a40:	f7ff ffd6 	bl	80169f0 <USB_OTG_ResetPort>
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8016a44:	6960      	ldr	r0, [r4, #20]
 8016a46:	6802      	ldr	r2, [r0, #0]
  hcfg.b.fslssupp = 0;
 8016a48:	f36f 0282 	bfc	r2, #2, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8016a4c:	6002      	str	r2, [r0, #0]
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 8016a4e:	7ae3      	ldrb	r3, [r4, #11]
 8016a50:	2b01      	cmp	r3, #1
#endif
  
  uint32_t                        i = 0;
  
  nptxfifosize.d32 = 0;  
  ptxfifosize.d32 = 0;
 8016a52:	462e      	mov	r6, r5
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 8016a54:	d10e      	bne.n	8016a74 <USB_OTG_CoreInitHost+0x58>
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8016a56:	2080      	movs	r0, #128	; 0x80
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 8016a58:	22e0      	movs	r2, #224	; 0xe0
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8016a5a:	68e1      	ldr	r1, [r4, #12]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
 8016a5c:	f360 050f 	bfi	r5, r0, #0, #16
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 8016a60:	f362 060f 	bfi	r6, r2, #0, #16
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
 8016a64:	f2c0 0560 	movt	r5, #96	; 0x60
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
 8016a68:	f2c0 0660 	movt	r6, #96	; 0x60
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8016a6c:	6248      	str	r0, [r1, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 8016a6e:	628d      	str	r5, [r1, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 8016a70:	f8c1 6100 	str.w	r6, [r1, #256]	; 0x100
  
#ifdef USE_OTG_MODE
  /* Clear Host Set HNP Enable in the USB_OTG Control Register */
  //gotgctl.b.hstsethnpen = 1;
  //USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, (1 << 11), 0);
 8016a74:	68e3      	ldr	r3, [r4, #12]
 8016a76:	6819      	ldr	r1, [r3, #0]
 8016a78:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 8016a7c:	6018      	str	r0, [r3, #0]
#endif
  
  /* Make sure the FIFOs are flushed. */
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
 8016a7e:	2110      	movs	r1, #16
 8016a80:	4620      	mov	r0, r4
 8016a82:	f7ff fefd 	bl	8016880 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8016a86:	4620      	mov	r0, r4
 8016a88:	f7ff ff18 	bl	80168bc <USB_OTG_FlushRxFifo>
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	7822      	ldrb	r2, [r4, #0]
 8016a90:	4293      	cmp	r3, r2
 8016a92:	d20a      	bcs.n	8016aaa <USB_OTG_CoreInitHost+0x8e>
/**
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
 8016a94:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 8016a98:	f04f 32ff 	mov.w	r2, #4294967295
 8016a9c:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 8016aa0:	2100      	movs	r1, #0
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 8016aa2:	6082      	str	r2, [r0, #8]
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8016aa4:	3301      	adds	r3, #1
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 8016aa6:	60c1      	str	r1, [r0, #12]
 8016aa8:	e7f1      	b.n	8016a8e <USB_OTG_CoreInitHost+0x72>
  }
#ifndef USE_OTG_MODE
  USB_OTG_DriveVbus(pdev, 1);
#endif
  
  USB_OTG_EnableHostInt(pdev);
 8016aaa:	4620      	mov	r0, r4
 8016aac:	f7ff ff4d 	bl	801694a <USB_OTG_EnableHostInt>
  return status;
}
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	bd70      	pop	{r4, r5, r6, pc}

08016ab4 <USB_OTG_HC_Init>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Init(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8016ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
  hcintmsk.d32 = 0;
  hcchar.d32 = 0;
  
  /* Clear old interrupt conditions for this host channel. */
  hcint.d32 = 0xFFFFFFFF;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINT, hcint.d32);
 8016ab6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8016aba:	f04f 35ff 	mov.w	r5, #4294967295
 8016abe:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8016ac2:	60a5      	str	r5, [r4, #8]
  
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
  
  if (pdev->cfg.dma_enable == 1)
 8016ac4:	78c6      	ldrb	r6, [r0, #3]
  USB_OTG_HCINTn_TypeDef     hcint;
  
  
  gintmsk.d32 = 0;
  hcintmsk.d32 = 0;
  hcchar.d32 = 0;
 8016ac6:	2200      	movs	r2, #0
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
  
  if (pdev->cfg.dma_enable == 1)
  {
    hcintmsk.b.ahberr = 1;
 8016ac8:	2e01      	cmp	r6, #1
 8016aca:	bf0c      	ite	eq
 8016acc:	2304      	moveq	r3, #4
 8016ace:	4613      	movne	r3, r2
  }
  
  switch (pdev->host.hc[hc_num].ep_type) 
 8016ad0:	014e      	lsls	r6, r1, #5
 8016ad2:	1987      	adds	r7, r0, r6
 8016ad4:	f897 5895 	ldrb.w	r5, [r7, #2197]	; 0x895
 8016ad8:	2d03      	cmp	r5, #3
 8016ada:	d82b      	bhi.n	8016b34 <USB_OTG_HC_Init+0x80>
 8016adc:	e8df f005 	tbb	[pc, r5]
 8016ae0:	14022002 	.word	0x14022002
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.nak = 1;  
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016ae4:	eb00 1641 	add.w	r6, r0, r1, lsl #5
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
 8016ae8:	f043 0789 	orr.w	r7, r3, #137	; 0x89
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.nak = 1;  
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016aec:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
 8016af0:	b115      	cbz	r5, 8016af8 <USB_OTG_HC_Init+0x44>
    {
      hcintmsk.b.bblerr = 1;
 8016af2:	f447 63a2 	orr.w	r3, r7, #1296	; 0x510
 8016af6:	e01d      	b.n	8016b34 <USB_OTG_HC_Init+0x80>
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
      if (pdev->host.hc[hc_num].do_ping) 
 8016af8:	f896 6894 	ldrb.w	r6, [r6, #2196]	; 0x894
    {
      hcintmsk.b.bblerr = 1;
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
 8016afc:	f447 638a 	orr.w	r3, r7, #1104	; 0x450
      if (pdev->host.hc[hc_num].do_ping) 
 8016b00:	b1c6      	cbz	r6, 8016b34 <USB_OTG_HC_Init+0x80>
      {
        hcintmsk.b.ack = 1;
 8016b02:	f447 638e 	orr.w	r3, r7, #1136	; 0x470
 8016b06:	e015      	b.n	8016b34 <USB_OTG_HC_Init+0x80>
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016b08:	eb00 1641 	add.w	r6, r0, r1, lsl #5
    break;
  case EP_TYPE_INTR:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.nak = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
 8016b0c:	f043 0799 	orr.w	r7, r3, #153	; 0x99
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016b10:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.nak = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
 8016b14:	f447 63c0 	orr.w	r3, r7, #1536	; 0x600
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016b18:	b165      	cbz	r5, 8016b34 <USB_OTG_HC_Init+0x80>
    {
      hcintmsk.b.bblerr = 1;
 8016b1a:	f447 63e0 	orr.w	r3, r7, #1792	; 0x700
 8016b1e:	e009      	b.n	8016b34 <USB_OTG_HC_Init+0x80>
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016b20:	1986      	adds	r6, r0, r6
      hcintmsk.b.bblerr = 1;
    }
    
    break;
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
 8016b22:	f043 0701 	orr.w	r7, r3, #1
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016b26:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
    
    break;
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
 8016b2a:	f447 7308 	orr.w	r3, r7, #544	; 0x220
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8016b2e:	b10d      	cbz	r5, 8016b34 <USB_OTG_HC_Init+0x80>
    {
      hcintmsk.b.xacterr = 1;
      hcintmsk.b.bblerr = 1;
 8016b30:	f447 7368 	orr.w	r3, r7, #928	; 0x3a0
    }
    break;
  }
  
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
 8016b34:	60e3      	str	r3, [r4, #12]
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8016b36:	6943      	ldr	r3, [r0, #20]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 8016b38:	2701      	movs	r7, #1
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8016b3a:	699e      	ldr	r6, [r3, #24]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 8016b3c:	fa07 f701 	lsl.w	r7, r7, r1
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8016b40:	4337      	orrs	r7, r6
 8016b42:	619f      	str	r7, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 8016b44:	68c3      	ldr	r3, [r0, #12]
 8016b46:	699d      	ldr	r5, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 8016b48:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  intr_enable = (1 << hc_num);
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 8016b4c:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 8016b50:	619d      	str	r5, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 8016b52:	f890 1890 	ldrb.w	r1, [r0, #2192]	; 0x890
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 8016b56:	f890 7891 	ldrb.w	r7, [r0, #2193]	; 0x891
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 8016b5a:	f890 3892 	ldrb.w	r3, [r0, #2194]	; 0x892
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 8016b5e:	f361 529c 	bfi	r2, r1, #22, #7
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 8016b62:	f890 1893 	ldrb.w	r1, [r0, #2195]	; 0x893
 8016b66:	f1b1 0c02 	subs.w	ip, r1, #2
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 8016b6a:	f367 22ce 	bfi	r2, r7, #11, #4
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 8016b6e:	f1dc 0700 	rsbs	r7, ip, #0
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 8016b72:	f363 32cf 	bfi	r2, r3, #15, #1
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 8016b76:	eb57 030c 	adcs.w	r3, r7, ip
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 8016b7a:	f890 7895 	ldrb.w	r7, [r0, #2197]	; 0x895
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 8016b7e:	f8b0 0896 	ldrh.w	r0, [r0, #2198]	; 0x896
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 8016b82:	f363 4251 	bfi	r2, r3, #17, #1
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 8016b86:	f367 4293 	bfi	r2, r7, #18, #2
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 8016b8a:	f360 020a 	bfi	r2, r0, #0, #11
  if (pdev->host.hc[hc_num].ep_type == HCCHAR_INTR)
 8016b8e:	2f03      	cmp	r7, #3
  {
    hcchar.b.oddfrm  = 1;
 8016b90:	bf08      	it	eq
 8016b92:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8016b96:	6022      	str	r2, [r4, #0]
  return status;
}
 8016b98:	2000      	movs	r0, #0
 8016b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b9c <USB_OTG_HC_StartXfer>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8016b9c:	b570      	push	{r4, r5, r6, lr}
 8016b9e:	460d      	mov	r5, r1
  hctsiz.d32 = 0;
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 8016ba0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8016ba4:	b086      	sub	sp, #24
  hctsiz.d32 = 0;
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 8016ba6:	f8d1 38a0 	ldr.w	r3, [r1, #2208]	; 0x8a0
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8016baa:	4604      	mov	r4, r0
  
  uint16_t num_packets;
  uint16_t max_hc_pkt_count;
  
  max_hc_pkt_count = 256;
  hctsiz.d32 = 0;
 8016bac:	2200      	movs	r2, #0
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 8016bae:	b17b      	cbz	r3, 8016bd0 <USB_OTG_HC_StartXfer+0x34>
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 8016bb0:	f8b1 0896 	ldrh.w	r0, [r1, #2198]	; 0x896
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 8016bb4:	1e5e      	subs	r6, r3, #1
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 8016bb6:	1833      	adds	r3, r6, r0
 8016bb8:	fbb3 f6f0 	udiv	r6, r3, r0
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 8016bbc:	b2b3      	uxth	r3, r6
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
 8016bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016bc2:	d906      	bls.n	8016bd2 <USB_OTG_HC_StartXfer+0x36>
    {
      num_packets = max_hc_pkt_count;
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 8016bc4:	0200      	lsls	r0, r0, #8
 8016bc6:	f8c1 08a0 	str.w	r0, [r1, #2208]	; 0x8a0
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
    {
      num_packets = max_hc_pkt_count;
 8016bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016bce:	e000      	b.n	8016bd2 <USB_OTG_HC_StartXfer+0x36>
        pdev->host.hc[hc_num].max_packet;
    }
  }
  else
  {
    num_packets = 1;
 8016bd0:	2301      	movs	r3, #1
  }
  if (pdev->host.hc[hc_num].ep_is_in)
 8016bd2:	0168      	lsls	r0, r5, #5
 8016bd4:	1821      	adds	r1, r4, r0
 8016bd6:	f891 6892 	ldrb.w	r6, [r1, #2194]	; 0x892
 8016bda:	b126      	cbz	r6, 8016be6 <USB_OTG_HC_StartXfer+0x4a>
  {
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8016bdc:	f8b1 6896 	ldrh.w	r6, [r1, #2198]	; 0x896
 8016be0:	435e      	muls	r6, r3
 8016be2:	f8c1 68a0 	str.w	r6, [r1, #2208]	; 0x8a0
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
 8016be6:	1820      	adds	r0, r4, r0
 8016be8:	f8d0 18a0 	ldr.w	r1, [r0, #2208]	; 0x8a0
 8016bec:	f361 0212 	bfi	r2, r1, #0, #19
  hctsiz.b.pktcnt = num_packets;
 8016bf0:	f363 42dc 	bfi	r2, r3, #19, #10
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8016bf4:	f105 0315 	add.w	r3, r5, #21
 8016bf8:	eb04 1643 	add.w	r6, r4, r3, lsl #5
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8016bfc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
  hctsiz.b.pktcnt = num_packets;
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8016c00:	f896 05f8 	ldrb.w	r0, [r6, #1528]	; 0x5f8
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8016c04:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
  hctsiz.b.pktcnt = num_packets;
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8016c08:	f360 725e 	bfi	r2, r0, #29, #2
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8016c0c:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8016c0e:	78e2      	ldrb	r2, [r4, #3]
 8016c10:	2a01      	cmp	r2, #1
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 8016c12:	bf08      	it	eq
 8016c14:	f8d6 25fc 	ldreq.w	r2, [r6, #1532]	; 0x5fc
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 8016c18:	4620      	mov	r0, r4
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
  
  if (pdev->cfg.dma_enable == 1)
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 8016c1a:	bf08      	it	eq
 8016c1c:	615a      	streq	r2, [r3, #20]
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8016c1e:	681e      	ldr	r6, [r3, #0]
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 8016c20:	f7ff fe8c 	bl	801693c <USB_OTG_IsEvenFrame>
 8016c24:	f360 765d 	bfi	r6, r0, #29, #1
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8016c28:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
 8016c2c:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8016c30:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
  hcchar.b.chdis = 0;
 8016c34:	f36f 769e 	bfc	r6, #30, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8016c38:	600e      	str	r6, [r1, #0]
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
 8016c3a:	78e3      	ldrb	r3, [r4, #3]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d134      	bne.n	8016caa <USB_OTG_HC_StartXfer+0x10e>
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8016c40:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8016c44:	f892 0892 	ldrb.w	r0, [r2, #2194]	; 0x892
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	d12e      	bne.n	8016caa <USB_OTG_HC_StartXfer+0x10e>
       (pdev->host.hc[hc_num].xfer_len > 0))
 8016c4c:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	; 0x8a0
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 8016c50:	b35b      	cbz	r3, 8016caa <USB_OTG_HC_StartXfer+0x10e>
       (pdev->host.hc[hc_num].xfer_len > 0))
    {
      switch(pdev->host.hc[hc_num].ep_type) 
 8016c52:	f892 2895 	ldrb.w	r2, [r2, #2197]	; 0x895
 8016c56:	2a03      	cmp	r2, #3
 8016c58:	d81e      	bhi.n	8016c98 <USB_OTG_HC_StartXfer+0xfc>
 8016c5a:	e8df f002 	tbb	[pc, r2]
 8016c5e:	0f02      	.short	0x0f02
 8016c60:	0f02      	.short	0x0f02
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8016c62:	68e2      	ldr	r2, [r4, #12]
 8016c64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8016c66:	1cd8      	adds	r0, r3, #3
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8016c68:	9103      	str	r1, [sp, #12]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
        
        /* check if there is enough space in FIFO space */
        if(len_words > hnptxsts.b.nptxfspcavail)
 8016c6a:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8016c6e:	b289      	uxth	r1, r1
 8016c70:	4281      	cmp	r1, r0
 8016c72:	d211      	bcs.n	8016c98 <USB_OTG_HC_StartXfer+0xfc>
        {
          /* need to process data in nptxfempty interrupt */
          intmsk.b.nptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 8016c74:	6991      	ldr	r1, [r2, #24]
 8016c76:	f041 0020 	orr.w	r0, r1, #32
 8016c7a:	e00c      	b.n	8016c96 <USB_OTG_HC_StartXfer+0xfa>
        
        break;
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8016c7c:	6961      	ldr	r1, [r4, #20]
 8016c7e:	6908      	ldr	r0, [r1, #16]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8016c80:	1cd9      	adds	r1, r3, #3
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 8016c82:	b282      	uxth	r2, r0
        
        break;
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8016c84:	9001      	str	r0, [sp, #4]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 8016c86:	f3c1 008f 	ubfx	r0, r1, #2, #16
 8016c8a:	4282      	cmp	r2, r0
 8016c8c:	d204      	bcs.n	8016c98 <USB_OTG_HC_StartXfer+0xfc>
        {
          /* need to process data in ptxfempty interrupt */
          intmsk.b.ptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 8016c8e:	68e2      	ldr	r2, [r4, #12]
 8016c90:	6991      	ldr	r1, [r2, #24]
 8016c92:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 8016c96:	6190      	str	r0, [r2, #24]
      default:
        break;
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 8016c98:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8016c9c:	4620      	mov	r0, r4
 8016c9e:	f8d2 189c 	ldr.w	r1, [r2, #2204]	; 0x89c
 8016ca2:	b29b      	uxth	r3, r3
 8016ca4:	462a      	mov	r2, r5
 8016ca6:	f7ff fd0b 	bl	80166c0 <USB_OTG_WritePacket>
                          pdev->host.hc[hc_num].xfer_buff , 
                          hc_num, pdev->host.hc[hc_num].xfer_len);
    }
  }
  return status;
}
 8016caa:	2000      	movs	r0, #0
 8016cac:	b006      	add	sp, #24
 8016cae:	bd70      	pop	{r4, r5, r6, pc}

08016cb0 <USB_OTG_HC_Halt>:
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
  hptxsts.d32 = 0;
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8016cb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Halt(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8016cb4:	b086      	sub	sp, #24
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
  hptxsts.d32 = 0;
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8016cb6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8016cba:	6813      	ldr	r3, [r2, #0]
  hcchar.b.chen = 1;
  hcchar.b.chdis = 1;
 8016cbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  
  /* Check for space in the request queue to issue the halt. */
  if (hcchar.b.eptype == HCCHAR_CTRL || hcchar.b.eptype == HCCHAR_BULK)
 8016cc0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8016cc4:	f011 010c 	ands.w	r1, r1, #12
 8016cc8:	d001      	beq.n	8016cce <USB_OTG_HC_Halt+0x1e>
 8016cca:	2908      	cmp	r1, #8
 8016ccc:	d102      	bne.n	8016cd4 <USB_OTG_HC_Halt+0x24>
  {
    nptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8016cce:	68c0      	ldr	r0, [r0, #12]
 8016cd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8016cd2:	e001      	b.n	8016cd8 <USB_OTG_HC_Halt+0x28>
      hcchar.b.chen = 0;
    }
  }
  else
  {
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8016cd4:	6940      	ldr	r0, [r0, #20]
 8016cd6:	6901      	ldr	r1, [r0, #16]
    if (hptxsts.b.ptxqspcavail == 0)
 8016cd8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8016cdc:	b909      	cbnz	r1, 8016ce2 <USB_OTG_HC_Halt+0x32>
    {
      hcchar.b.chen = 0;
 8016cde:	f361 73df 	bfi	r3, r1, #31, #1
    }
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8016ce2:	6013      	str	r3, [r2, #0]
  return status;
}
 8016ce4:	2000      	movs	r0, #0
 8016ce6:	b006      	add	sp, #24
 8016ce8:	4770      	bx	lr

08016cea <USB_OTG_HC_DoPing>:
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8016cea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
* @brief  Issue a ping token
* @param  None
* @retval : None
*/
USB_OTG_STS USB_OTG_HC_DoPing(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 8016cee:	b510      	push	{r4, lr}
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8016cf0:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
 8016cf4:	2301      	movs	r3, #1
  USB_OTG_STS               status = USB_OTG_OK;
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
 8016cf6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  hctsiz.b.pktcnt = 1;
 8016cfa:	f363 44dc 	bfi	r4, r3, #19, #10
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8016cfe:	6104      	str	r4, [r0, #16]
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 8016d00:	6803      	ldr	r3, [r0, #0]
{
  USB_OTG_STS               status = USB_OTG_OK;
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
 8016d02:	2200      	movs	r2, #0
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.chen = 1;
 8016d04:	f043 4100 	orr.w	r1, r3, #2147483648	; 0x80000000
  hcchar.b.chdis = 0;
 8016d08:	f362 719e 	bfi	r1, r2, #30, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8016d0c:	6001      	str	r1, [r0, #0]
  return status;  
}
 8016d0e:	4610      	mov	r0, r2
 8016d10:	bd10      	pop	{r4, pc}

08016d12 <USB_OTG_InitDevSpeed>:
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8016d12:	6903      	ldr	r3, [r0, #16]
 8016d14:	681a      	ldr	r2, [r3, #0]
  dcfg.b.devspd = speed;
 8016d16:	f361 0201 	bfi	r2, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8016d1a:	601a      	str	r2, [r3, #0]
 8016d1c:	4770      	bx	lr

08016d1e <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8016d1e:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8016d20:	68c3      	ldr	r3, [r0, #12]
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8016d22:	4604      	mov	r4, r0
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8016d24:	2500      	movs	r5, #0
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8016d26:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8016d2a:	619d      	str	r5, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8016d2c:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8016d2e:	f7ff fc97 	bl	8016660 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8016d32:	78e0      	ldrb	r0, [r4, #3]
  {
    intmsk.b.rxstsqlvl = 1;
 8016d34:	42a8      	cmp	r0, r5
 8016d36:	bf0c      	ite	eq
 8016d38:	2110      	moveq	r1, #16
 8016d3a:	4629      	movne	r1, r5
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
  intmsk.b.usbreset   = 1;
  intmsk.b.enumdone   = 1;
  intmsk.b.inepintr   = 1;
 8016d3c:	f441 2387 	orr.w	r3, r1, #276480	; 0x43800
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 
 8016d40:	f043 1208 	orr.w	r2, r3, #524296	; 0x80008
  intmsk.b.incomplisoout    = 1;   
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8016d44:	68e3      	ldr	r3, [r4, #12]
 8016d46:	6999      	ldr	r1, [r3, #24]
  intmsk.b.inepintr   = 1;
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 
  
  intmsk.b.incomplisoin    = 1; 
  intmsk.b.incomplisoout    = 1;   
 8016d48:	f442 1040 	orr.w	r0, r2, #3145728	; 0x300000
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8016d4c:	ea21 0100 	bic.w	r1, r1, r0
 8016d50:	ea41 0200 	orr.w	r2, r1, r0
 8016d54:	619a      	str	r2, [r3, #24]
  return status;
}
 8016d56:	4628      	mov	r0, r5
 8016d58:	bd38      	pop	{r3, r4, r5, pc}
	...

08016d5c <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8016d5c:	b538      	push	{r3, r4, r5, lr}
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8016d5e:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8016d62:	6901      	ldr	r1, [r0, #16]
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
 8016d64:	2200      	movs	r2, #0
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8016d66:	601a      	str	r2, [r3, #0]
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
 8016d68:	4615      	mov	r5, r2
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8016d6a:	680a      	ldr	r2, [r1, #0]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8016d6c:	f365 22cc 	bfi	r2, r5, #11, #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 8016d70:	600a      	str	r2, [r1, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8016d72:	7ac3      	ldrb	r3, [r0, #11]
 8016d74:	2b01      	cmp	r3, #1
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8016d76:	4604      	mov	r4, r0
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8016d78:	d11b      	bne.n	8016db2 <USB_OTG_CoreInitDev+0x56>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 8016d7a:	2103      	movs	r1, #3
 8016d7c:	f7ff ffc9 	bl	8016d12 <USB_OTG_InitDevSpeed>
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8016d80:	68e0      	ldr	r0, [r4, #12]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8016d82:	23c0      	movs	r3, #192	; 0xc0
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8016d84:	2180      	movs	r1, #128	; 0x80
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 8016d86:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8016d8a:	f363 050f 	bfi	r5, r3, #0, #16
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8016d8e:	6241      	str	r1, [r0, #36]	; 0x24
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 8016d90:	f361 451f 	bfi	r5, r1, #16, #16
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 8016d94:	f361 020f 	bfi	r2, r1, #0, #16
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8016d98:	f44f 71a0 	mov.w	r1, #320	; 0x140
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8016d9c:	6282      	str	r2, [r0, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8016d9e:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8016da2:	f361 050f 	bfi	r5, r1, #0, #16
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8016da6:	f36f 451f 	bfc	r5, #16, #16
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8016daa:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8016dae:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 8016db2:	2110      	movs	r1, #16
 8016db4:	4620      	mov	r0, r4
 8016db6:	f7ff fd63 	bl	8016880 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8016dba:	4620      	mov	r0, r4
 8016dbc:	f7ff fd7e 	bl	80168bc <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8016dc0:	6920      	ldr	r0, [r4, #16]
 8016dc2:	2300      	movs	r3, #0
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8016dc4:	f04f 32ff 	mov.w	r2, #4294967295
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8016dc8:	6103      	str	r3, [r0, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8016dca:	6143      	str	r3, [r0, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8016dcc:	6182      	str	r2, [r0, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8016dce:	61c3      	str	r3, [r0, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8016dd0:	7861      	ldrb	r1, [r4, #1]
 8016dd2:	428b      	cmp	r3, r1
 8016dd4:	d214      	bcs.n	8016e00 <USB_OTG_CoreInitDev+0xa4>
* @brief  USB_OTG_CoreInitDev : Initializes the USB_OTG controller registers 
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
 8016dd6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8016dda:	3301      	adds	r3, #1
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8016ddc:	6990      	ldr	r0, [r2, #24]
 8016dde:	6801      	ldr	r1, [r0, #0]
    if (depctl.b.epena)
 8016de0:	f3c1 6207 	ubfx	r2, r1, #24, #8
 8016de4:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8016de8:	b2ca      	uxtb	r2, r1
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8016dea:	2a00      	cmp	r2, #0
 8016dec:	bf14      	ite	ne
 8016dee:	f04f 4190 	movne.w	r1, #1207959552	; 0x48000000
 8016df2:	2100      	moveq	r1, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8016df4:	6001      	str	r1, [r0, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8016df6:	2200      	movs	r2, #0
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8016df8:	21ff      	movs	r1, #255	; 0xff
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8016dfa:	6102      	str	r2, [r0, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8016dfc:	6081      	str	r1, [r0, #8]
 8016dfe:	e7e7      	b.n	8016dd0 <USB_OTG_CoreInitDev+0x74>
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8016e00:	2300      	movs	r3, #0
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8016e02:	7860      	ldrb	r0, [r4, #1]
 8016e04:	4283      	cmp	r3, r0
 8016e06:	d214      	bcs.n	8016e32 <USB_OTG_CoreInitDev+0xd6>
* @brief  USB_OTG_CoreInitDev : Initializes the USB_OTG controller registers 
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
 8016e08:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8016e0c:	3301      	adds	r3, #1
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8016e0e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8016e10:	6811      	ldr	r1, [r2, #0]
    if (depctl.b.epena)
 8016e12:	f3c1 6007 	ubfx	r0, r1, #24, #8
 8016e16:	f000 0180 	and.w	r1, r0, #128	; 0x80
 8016e1a:	b2c8      	uxtb	r0, r1
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	bf14      	ite	ne
 8016e20:	f04f 4190 	movne.w	r1, #1207959552	; 0x48000000
 8016e24:	2100      	moveq	r1, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8016e26:	6011      	str	r1, [r2, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8016e28:	2000      	movs	r0, #0
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8016e2a:	21ff      	movs	r1, #255	; 0xff
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8016e2c:	6110      	str	r0, [r2, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8016e2e:	6091      	str	r1, [r2, #8]
 8016e30:	e7e7      	b.n	8016e02 <USB_OTG_CoreInitDev+0xa6>
  }
  msk.d32 = 0;
  msk.b.txfifoundrn = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8016e32:	6923      	ldr	r3, [r4, #16]
 8016e34:	691a      	ldr	r2, [r3, #16]
 8016e36:	f442 7180 	orr.w	r1, r2, #256	; 0x100
 8016e3a:	6119      	str	r1, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8016e3c:	78e0      	ldrb	r0, [r4, #3]
 8016e3e:	2801      	cmp	r0, #1
 8016e40:	d104      	bne.n	8016e4c <USB_OTG_CoreInitDev+0xf0>
  {
    dthrctl.d32 = 0;
    dthrctl.b.non_iso_thr_en = 1;
    dthrctl.b.iso_thr_en = 1;
    dthrctl.b.tx_thr_len = 64;
    dthrctl.b.rx_thr_en = 1;
 8016e42:	4a05      	ldr	r2, [pc, #20]	; (8016e58 <USB_OTG_CoreInitDev+0xfc>)
    dthrctl.b.rx_thr_len = 64;
 8016e44:	2140      	movs	r1, #64	; 0x40
 8016e46:	f361 4259 	bfi	r2, r1, #17, #9
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8016e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	f7ff ff66 	bl	8016d1e <USB_OTG_EnableDevInt>
  return status;
}
 8016e52:	2000      	movs	r0, #0
 8016e54:	bd38      	pop	{r3, r4, r5, pc}
 8016e56:	bf00      	nop
 8016e58:	00010103 	.word	0x00010103

08016e5c <USB_OTG_GetDeviceSpeed>:
{
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8016e5c:	6903      	ldr	r3, [r0, #16]
 8016e5e:	6898      	ldr	r0, [r3, #8]
  
  switch (dsts.b.enumspd)
 8016e60:	f3c0 0141 	ubfx	r1, r0, #1, #2
 8016e64:	1e4b      	subs	r3, r1, #1
 8016e66:	2b02      	cmp	r3, #2
 8016e68:	d802      	bhi.n	8016e70 <USB_OTG_GetDeviceSpeed+0x14>
 8016e6a:	4a02      	ldr	r2, [pc, #8]	; (8016e74 <USB_OTG_GetDeviceSpeed+0x18>)
 8016e6c:	5cd0      	ldrb	r0, [r2, r3]
 8016e6e:	4770      	bx	lr
 8016e70:	2003      	movs	r0, #3
    speed = USB_SPEED_LOW;
    break;
  }
  
  return speed;
}
 8016e72:	4770      	bx	lr
 8016e74:	0801c4cf 	.word	0x0801c4cf

08016e78 <USB_OTG_EP0Activate>:
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8016e78:	6903      	ldr	r3, [r0, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8016e7a:	6981      	ldr	r1, [r0, #24]
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8016e7c:	b510      	push	{r4, lr}
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8016e7e:	689c      	ldr	r4, [r3, #8]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8016e80:	680a      	ldr	r2, [r1, #0]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8016e82:	f3c4 0041 	ubfx	r0, r4, #1, #2
 8016e86:	2802      	cmp	r0, #2
 8016e88:	d002      	beq.n	8016e90 <USB_OTG_EP0Activate+0x18>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8016e8a:	f36f 020a 	bfc	r2, #0, #11
    break;
 8016e8e:	e002      	b.n	8016e96 <USB_OTG_EP0Activate+0x1e>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8016e90:	2003      	movs	r0, #3
 8016e92:	f360 020a 	bfi	r2, r0, #0, #11
    break;
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8016e96:	600a      	str	r2, [r1, #0]
  dctl.b.cgnpinnak = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8016e98:	6859      	ldr	r1, [r3, #4]
 8016e9a:	f441 7280 	orr.w	r2, r1, #256	; 0x100
 8016e9e:	605a      	str	r2, [r3, #4]
  return status;
}
 8016ea0:	2000      	movs	r0, #0
 8016ea2:	bd10      	pop	{r4, pc}

08016ea4 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8016ea4:	b530      	push	{r4, r5, lr}
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016ea6:	784d      	ldrb	r5, [r1, #1]
 8016ea8:	780b      	ldrb	r3, [r1, #0]
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
 8016eaa:	2200      	movs	r2, #0
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016eac:	2d01      	cmp	r5, #1
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8016eae:	eb00 0483 	add.w	r4, r0, r3, lsl #2
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016eb2:	d105      	bne.n	8016ec0 <USB_OTG_EPActivate+0x1c>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
 8016eb4:	fa05 f503 	lsl.w	r5, r5, r3
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8016eb8:	69a4      	ldr	r4, [r4, #24]
    daintmsk.ep.in = 1 << ep->num;
 8016eba:	f365 020f 	bfi	r2, r5, #0, #16
 8016ebe:	e005      	b.n	8016ecc <USB_OTG_EPActivate+0x28>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
 8016ec0:	2501      	movs	r5, #1
 8016ec2:	fa05 f303 	lsl.w	r3, r5, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8016ec6:	6d64      	ldr	r4, [r4, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8016ec8:	f363 421f 	bfi	r2, r3, #16, #16
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8016ecc:	6823      	ldr	r3, [r4, #0]
  if (!depctl.b.usbactep)
 8016ece:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8016ed2:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8016ed6:	b2ed      	uxtb	r5, r5
 8016ed8:	b96d      	cbnz	r5, 8016ef6 <USB_OTG_EPActivate+0x52>
  {
    depctl.b.mps    = ep->maxpacket;
 8016eda:	688d      	ldr	r5, [r1, #8]
 8016edc:	f365 030a 	bfi	r3, r5, #0, #11
    depctl.b.eptype = ep->type;
 8016ee0:	78cd      	ldrb	r5, [r1, #3]
    depctl.b.txfnum = ep->tx_fifo_num;
 8016ee2:	88c9      	ldrh	r1, [r1, #6]
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
  if (!depctl.b.usbactep)
  {
    depctl.b.mps    = ep->maxpacket;
    depctl.b.eptype = ep->type;
 8016ee4:	f365 4393 	bfi	r3, r5, #18, #2
    depctl.b.txfnum = ep->tx_fifo_num;
 8016ee8:	f361 5399 	bfi	r3, r1, #22, #4
    depctl.b.setd0pid = 1;
 8016eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    depctl.b.usbactep = 1;
 8016ef0:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8016ef4:	6021      	str	r1, [r4, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8016ef6:	6900      	ldr	r0, [r0, #16]
 8016ef8:	69c3      	ldr	r3, [r0, #28]
 8016efa:	431a      	orrs	r2, r3
 8016efc:	61c2      	str	r2, [r0, #28]
  return status;
}
 8016efe:	2000      	movs	r0, #0
 8016f00:	bd30      	pop	{r4, r5, pc}

08016f02 <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8016f02:	b530      	push	{r4, r5, lr}
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016f04:	784d      	ldrb	r5, [r1, #1]
 8016f06:	780b      	ldrb	r3, [r1, #0]
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8016f08:	2400      	movs	r4, #0
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016f0a:	2d01      	cmp	r5, #1
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
 8016f0c:	4622      	mov	r2, r4
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8016f0e:	eb00 0183 	add.w	r1, r0, r3, lsl #2
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8016f12:	d105      	bne.n	8016f20 <USB_OTG_EPDeactivate+0x1e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
 8016f14:	fa05 f303 	lsl.w	r3, r5, r3
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8016f18:	6989      	ldr	r1, [r1, #24]
    daintmsk.ep.in = 1 << ep->num;
 8016f1a:	f363 020f 	bfi	r2, r3, #0, #16
 8016f1e:	e005      	b.n	8016f2c <USB_OTG_EPDeactivate+0x2a>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
 8016f20:	2501      	movs	r5, #1
 8016f22:	fa05 f303 	lsl.w	r3, r5, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8016f26:	6d49      	ldr	r1, [r1, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8016f28:	f363 421f 	bfi	r2, r3, #16, #16
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8016f2c:	6900      	ldr	r0, [r0, #16]
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
  }
  depctl.b.usbactep = 0;
 8016f2e:	f36f 34cf 	bfc	r4, #15, #1
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 8016f32:	600c      	str	r4, [r1, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8016f34:	69c1      	ldr	r1, [r0, #28]
 8016f36:	ea21 0202 	bic.w	r2, r1, r2
 8016f3a:	61c2      	str	r2, [r0, #28]
  return status;
}
 8016f3c:	2000      	movs	r0, #0
 8016f3e:	bd30      	pop	{r4, r5, pc}

08016f40 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8016f40:	b570      	push	{r4, r5, r6, lr}
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8016f42:	784e      	ldrb	r6, [r1, #1]
 8016f44:	780a      	ldrb	r2, [r1, #0]
 8016f46:	2e01      	cmp	r6, #1
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8016f48:	460b      	mov	r3, r1
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8016f4a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8016f4e:	d148      	bne.n	8016fe2 <USB_OTG_EPStartXfer+0xa2>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8016f50:	698d      	ldr	r5, [r1, #24]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8016f52:	695c      	ldr	r4, [r3, #20]
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8016f54:	6829      	ldr	r1, [r5, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8016f56:	692a      	ldr	r2, [r5, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 8016f58:	f364 0212 	bfi	r2, r4, #0, #19
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8016f5c:	b914      	cbnz	r4, 8016f64 <USB_OTG_EPStartXfer+0x24>
    {
      deptsiz.b.xfersize = 0;
      deptsiz.b.pktcnt = 1;
 8016f5e:	f366 42dc 	bfi	r2, r6, #19, #10
 8016f62:	e00b      	b.n	8016f7c <USB_OTG_EPStartXfer+0x3c>
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8016f64:	689e      	ldr	r6, [r3, #8]
 8016f66:	19a4      	adds	r4, r4, r6
 8016f68:	3c01      	subs	r4, #1
 8016f6a:	fbb4 f6f6 	udiv	r6, r4, r6
      
      if (ep->type == EP_TYPE_ISOC)
 8016f6e:	78dc      	ldrb	r4, [r3, #3]
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8016f70:	f366 42dc 	bfi	r2, r6, #19, #10
      
      if (ep->type == EP_TYPE_ISOC)
 8016f74:	2c01      	cmp	r4, #1
      {
        deptsiz.b.mc = 1;
 8016f76:	bf08      	it	eq
 8016f78:	f364 725e 	bfieq	r2, r4, #29, #2
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8016f7c:	612a      	str	r2, [r5, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8016f7e:	78c2      	ldrb	r2, [r0, #3]
 8016f80:	2a01      	cmp	r2, #1
 8016f82:	d106      	bne.n	8016f92 <USB_OTG_EPStartXfer+0x52>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 8016f84:	781a      	ldrb	r2, [r3, #0]
 8016f86:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8016f8a:	691a      	ldr	r2, [r3, #16]
 8016f8c:	69a4      	ldr	r4, [r4, #24]
 8016f8e:	6162      	str	r2, [r4, #20]
 8016f90:	e00c      	b.n	8016fac <USB_OTG_EPStartXfer+0x6c>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8016f92:	78da      	ldrb	r2, [r3, #3]
 8016f94:	2a01      	cmp	r2, #1
 8016f96:	d009      	beq.n	8016fac <USB_OTG_EPStartXfer+0x6c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8016f98:	695a      	ldr	r2, [r3, #20]
 8016f9a:	b13a      	cbz	r2, 8016fac <USB_OTG_EPStartXfer+0x6c>
        {
          fifoemptymsk = 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8016f9c:	6902      	ldr	r2, [r0, #16]
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 8016f9e:	781c      	ldrb	r4, [r3, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8016fa0:	6b55      	ldr	r5, [r2, #52]	; 0x34
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 8016fa2:	2601      	movs	r6, #1
 8016fa4:	fa06 f404 	lsl.w	r4, r6, r4
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8016fa8:	432c      	orrs	r4, r5
 8016faa:	6354      	str	r4, [r2, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 8016fac:	78da      	ldrb	r2, [r3, #3]
 8016fae:	2a01      	cmp	r2, #1
 8016fb0:	d107      	bne.n	8016fc2 <USB_OTG_EPStartXfer+0x82>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8016fb2:	6902      	ldr	r2, [r0, #16]
 8016fb4:	6892      	ldr	r2, [r2, #8]
      
      if (((dsts.b.soffn)&0x1) == 0)
 8016fb6:	05d2      	lsls	r2, r2, #23
      {
        depctl.b.setd1pid = 1;
 8016fb8:	bf54      	ite	pl
 8016fba:	f041 5100 	orrpl.w	r1, r1, #536870912	; 0x20000000
      }
      else
      {
        depctl.b.setd0pid = 1;
 8016fbe:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8016fc2:	781a      	ldrb	r2, [r3, #0]
 8016fc4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8016fc8:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8016fcc:	6992      	ldr	r2, [r2, #24]
 8016fce:	6011      	str	r1, [r2, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8016fd0:	78d9      	ldrb	r1, [r3, #3]
 8016fd2:	2901      	cmp	r1, #1
 8016fd4:	d137      	bne.n	8017046 <USB_OTG_EPStartXfer+0x106>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8016fd6:	68d9      	ldr	r1, [r3, #12]
 8016fd8:	781a      	ldrb	r2, [r3, #0]
 8016fda:	8a9b      	ldrh	r3, [r3, #20]
 8016fdc:	f7ff fb70 	bl	80166c0 <USB_OTG_WritePacket>
 8016fe0:	e031      	b.n	8017046 <USB_OTG_EPStartXfer+0x106>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8016fe2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8016fe4:	695e      	ldr	r6, [r3, #20]
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8016fe6:	682a      	ldr	r2, [r5, #0]
 8016fe8:	689c      	ldr	r4, [r3, #8]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8016fea:	6929      	ldr	r1, [r5, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8016fec:	b92e      	cbnz	r6, 8016ffa <USB_OTG_EPStartXfer+0xba>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8016fee:	f364 0112 	bfi	r1, r4, #0, #19
      deptsiz.b.pktcnt = 1;
 8016ff2:	2401      	movs	r4, #1
 8016ff4:	f364 41dc 	bfi	r1, r4, #19, #10
 8016ff8:	e00a      	b.n	8017010 <USB_OTG_EPStartXfer+0xd0>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8016ffa:	1936      	adds	r6, r6, r4
 8016ffc:	3e01      	subs	r6, #1
 8016ffe:	fbb6 f6f4 	udiv	r6, r6, r4
 8017002:	f366 41dc 	bfi	r1, r6, #19, #10
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 8017006:	05b6      	lsls	r6, r6, #22
 8017008:	0db6      	lsrs	r6, r6, #22
 801700a:	4374      	muls	r4, r6
 801700c:	f364 0112 	bfi	r1, r4, #0, #19
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8017010:	6129      	str	r1, [r5, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8017012:	78c1      	ldrb	r1, [r0, #3]
 8017014:	2901      	cmp	r1, #1
 8017016:	d105      	bne.n	8017024 <USB_OTG_EPStartXfer+0xe4>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8017018:	781c      	ldrb	r4, [r3, #0]
 801701a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 801701e:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8017020:	6919      	ldr	r1, [r3, #16]
 8017022:	6161      	str	r1, [r4, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8017024:	78d9      	ldrb	r1, [r3, #3]
 8017026:	2901      	cmp	r1, #1
 8017028:	d106      	bne.n	8017038 <USB_OTG_EPStartXfer+0xf8>
    {
      if (ep->even_odd_frame)
 801702a:	7959      	ldrb	r1, [r3, #5]
 801702c:	b111      	cbz	r1, 8017034 <USB_OTG_EPStartXfer+0xf4>
      {
        depctl.b.setd1pid = 1;
 801702e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8017032:	e001      	b.n	8017038 <USB_OTG_EPStartXfer+0xf8>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8017034:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        depctl.b.setd0pid = 1;
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 801703e:	f042 4104 	orr.w	r1, r2, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8017042:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8017044:	6011      	str	r1, [r2, #0]
  }
  return status;
}
 8017046:	2000      	movs	r0, #0
 8017048:	bd70      	pop	{r4, r5, r6, pc}

0801704a <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 801704a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t fifoemptymsk = 0;
  
  depctl.d32   = 0;
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 801704c:	784d      	ldrb	r5, [r1, #1]
 801704e:	2d01      	cmp	r5, #1
 8017050:	d13d      	bne.n	80170ce <USB_OTG_EP0StartXfer+0x84>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 8017052:	6983      	ldr	r3, [r0, #24]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8017054:	694a      	ldr	r2, [r1, #20]
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    in_regs = pdev->regs.INEP_REGS[0];
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 8017056:	681e      	ldr	r6, [r3, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 8017058:	691c      	ldr	r4, [r3, #16]
 801705a:	9400      	str	r4, [sp, #0]
 801705c:	b2e4      	uxtb	r4, r4
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 801705e:	b942      	cbnz	r2, 8017072 <USB_OTG_EP0StartXfer+0x28>
    {
      deptsiz.b.xfersize = 0;
 8017060:	f362 0406 	bfi	r4, r2, #0, #7
      deptsiz.b.pktcnt = 1;
 8017064:	f89d 2002 	ldrb.w	r2, [sp, #2]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 8017068:	f88d 4000 	strb.w	r4, [sp]
      deptsiz.b.pktcnt = 1;
 801706c:	f365 02c4 	bfi	r2, r5, #3, #2
 8017070:	e00e      	b.n	8017090 <USB_OTG_EP0StartXfer+0x46>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 8017072:	688d      	ldr	r5, [r1, #8]
 8017074:	42aa      	cmp	r2, r5
      {
        ep->xfer_len = ep->maxpacket;
 8017076:	bf8a      	itet	hi
 8017078:	614d      	strhi	r5, [r1, #20]
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 801707a:	f362 0406 	bfils	r4, r2, #0, #7
    else
    {
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
 801707e:	f365 0406 	bfihi	r4, r5, #0, #7
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
      }
      deptsiz.b.pktcnt = 1;
 8017082:	f89d 2002 	ldrb.w	r2, [sp, #2]
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8017086:	f88d 4000 	strb.w	r4, [sp]
      }
      deptsiz.b.pktcnt = 1;
 801708a:	2401      	movs	r4, #1
 801708c:	f364 02c4 	bfi	r2, r4, #3, #2
 8017090:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8017094:	9a00      	ldr	r2, [sp, #0]
 8017096:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8017098:	78c2      	ldrb	r2, [r0, #3]
 801709a:	2a01      	cmp	r2, #1
 801709c:	d105      	bne.n	80170aa <USB_OTG_EP0StartXfer+0x60>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 801709e:	780c      	ldrb	r4, [r1, #0]
 80170a0:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80170a4:	6994      	ldr	r4, [r2, #24]
 80170a6:	690a      	ldr	r2, [r1, #16]
 80170a8:	6162      	str	r2, [r4, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 80170aa:	f046 4604 	orr.w	r6, r6, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 80170ae:	601e      	str	r6, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 80170b0:	78c3      	ldrb	r3, [r0, #3]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d134      	bne.n	8017120 <USB_OTG_EP0StartXfer+0xd6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 80170b6:	694a      	ldr	r2, [r1, #20]
 80170b8:	2a00      	cmp	r2, #0
 80170ba:	d031      	beq.n	8017120 <USB_OTG_EP0StartXfer+0xd6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 80170bc:	6903      	ldr	r3, [r0, #16]
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 80170be:	780a      	ldrb	r2, [r1, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 80170c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 80170c2:	2101      	movs	r1, #1
 80170c4:	fa01 f202 	lsl.w	r2, r1, r2
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 80170c8:	4302      	orrs	r2, r0
 80170ca:	635a      	str	r2, [r3, #52]	; 0x34
 80170cc:	e028      	b.n	8017120 <USB_OTG_EP0StartXfer+0xd6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80170ce:	780b      	ldrb	r3, [r1, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 80170d0:	694e      	ldr	r6, [r1, #20]
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80170d2:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80170d6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80170d8:	688a      	ldr	r2, [r1, #8]
 80170da:	681d      	ldr	r5, [r3, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 80170dc:	691c      	ldr	r4, [r3, #16]
 80170de:	9400      	str	r4, [sp, #0]
 80170e0:	b2e4      	uxtb	r4, r4
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 80170e2:	b106      	cbz	r6, 80170e6 <USB_OTG_EP0StartXfer+0x9c>
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 80170e4:	614a      	str	r2, [r1, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 80170e6:	f362 0406 	bfi	r4, r2, #0, #7
      deptsiz.b.pktcnt = 1;
 80170ea:	f89d 2002 	ldrb.w	r2, [sp, #2]
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
      deptsiz.b.xfersize = ep->maxpacket;
 80170ee:	f88d 4000 	strb.w	r4, [sp]
      deptsiz.b.pktcnt = 1;
 80170f2:	2401      	movs	r4, #1
 80170f4:	f364 02c4 	bfi	r2, r4, #3, #2
 80170f8:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 80170fc:	9a00      	ldr	r2, [sp, #0]
 80170fe:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 8017100:	78c3      	ldrb	r3, [r0, #3]
 8017102:	2b01      	cmp	r3, #1
 8017104:	d105      	bne.n	8017112 <USB_OTG_EP0StartXfer+0xc8>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8017106:	780a      	ldrb	r2, [r1, #0]
 8017108:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 801710c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801710e:	690b      	ldr	r3, [r1, #16]
 8017110:	6153      	str	r3, [r2, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8017112:	7809      	ldrb	r1, [r1, #0]
 8017114:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8017118:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 801711c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801711e:	6015      	str	r5, [r2, #0]
    
  }
  return status;
}
 8017120:	2000      	movs	r0, #0
 8017122:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08017124 <USB_OTG_EPSetStall>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 8017124:	784b      	ldrb	r3, [r1, #1]
 8017126:	7809      	ldrb	r1, [r1, #0]
 8017128:	2b01      	cmp	r3, #1
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 801712a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 801712e:	d10d      	bne.n	801714c <USB_OTG_EPSetStall+0x28>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8017130:	6980      	ldr	r0, [r0, #24]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8017132:	6803      	ldr	r3, [r0, #0]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 8017134:	f3c3 6207 	ubfx	r2, r3, #24, #8
 8017138:	f002 0180 	and.w	r1, r2, #128	; 0x80
 801713c:	b2ca      	uxtb	r2, r1
 801713e:	b10a      	cbz	r2, 8017144 <USB_OTG_EPSetStall+0x20>
    {
      depctl.b.epdis = 1;
 8017140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    }
    depctl.b.stall = 1;
 8017144:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8017148:	6001      	str	r1, [r0, #0]
 801714a:	e004      	b.n	8017156 <USB_OTG_EPSetStall+0x32>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 801714c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 801714e:	681a      	ldr	r2, [r3, #0]
    /* set the stall bit */
    depctl.b.stall = 1;
 8017150:	f442 1100 	orr.w	r1, r2, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8017154:	6019      	str	r1, [r3, #0]
  }
  return status;
}
 8017156:	2000      	movs	r0, #0
 8017158:	4770      	bx	lr

0801715a <USB_OTG_EPClearStall>:
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
 801715a:	784b      	ldrb	r3, [r1, #1]
 801715c:	2b01      	cmp	r3, #1
 801715e:	780b      	ldrb	r3, [r1, #0]
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8017160:	78c9      	ldrb	r1, [r1, #3]
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8017162:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8017166:	bf0c      	ite	eq
 8017168:	6982      	ldreq	r2, [r0, #24]
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 801716a:	6d42      	ldrne	r2, [r0, #84]	; 0x54
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 801716c:	6813      	ldr	r3, [r2, #0]
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 801716e:	1e88      	subs	r0, r1, #2
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
 8017170:	f36f 5355 	bfc	r3, #21, #1
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8017174:	2801      	cmp	r0, #1
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 8017176:	bf98      	it	ls
 8017178:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 801717c:	6013      	str	r3, [r2, #0]
  return status;
}
 801717e:	2000      	movs	r0, #0
 8017180:	4770      	bx	lr

08017182 <USB_OTG_ReadDevAllOutEp_itr>:
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8017182:	6903      	ldr	r3, [r0, #16]
 8017184:	699a      	ldr	r2, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8017186:	69d8      	ldr	r0, [r3, #28]
 8017188:	4010      	ands	r0, r2
  return ((v & 0xffff0000) >> 16);
}
 801718a:	0c00      	lsrs	r0, r0, #16
 801718c:	4770      	bx	lr

0801718e <USB_OTG_ReadDevOutEP_itr>:
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 801718e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8017192:	6902      	ldr	r2, [r0, #16]
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8017194:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8017196:	6899      	ldr	r1, [r3, #8]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8017198:	6950      	ldr	r0, [r2, #20]
  return v;
}
 801719a:	4008      	ands	r0, r1
 801719c:	4770      	bx	lr

0801719e <USB_OTG_ReadDevAllInEPItr>:
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 801719e:	6903      	ldr	r3, [r0, #16]
 80171a0:	6998      	ldr	r0, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 80171a2:	69d9      	ldr	r1, [r3, #28]
 80171a4:	4008      	ands	r0, r1
  return (v & 0xffff);
}
 80171a6:	b280      	uxth	r0, r0
 80171a8:	4770      	bx	lr

080171aa <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 80171aa:	b082      	sub	sp, #8
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 80171ac:	2300      	movs	r3, #0
 80171ae:	9300      	str	r3, [sp, #0]
  doeptsize0.b.supcnt = 3;
 80171b0:	21c0      	movs	r1, #192	; 0xc0
  doeptsize0.b.pktcnt = 1;
 80171b2:	2201      	movs	r2, #1
 80171b4:	2300      	movs	r3, #0
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
 80171b6:	f88d 1003 	strb.w	r1, [sp, #3]
  doeptsize0.b.pktcnt = 1;
 80171ba:	f362 03c4 	bfi	r3, r2, #3, #2
  doeptsize0.b.xfersize = 8 * 3;
 80171be:	2118      	movs	r1, #24
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
 80171c0:	f88d 3002 	strb.w	r3, [sp, #2]
  doeptsize0.b.xfersize = 8 * 3;
 80171c4:	f88d 1000 	strb.w	r1, [sp]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 80171c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80171ca:	9a00      	ldr	r2, [sp, #0]
 80171cc:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 80171ce:	78c1      	ldrb	r1, [r0, #3]
 80171d0:	2901      	cmp	r1, #1
 80171d2:	d106      	bne.n	80171e2 <USB_OTG_EP0_OutStart+0x38>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 80171d4:	f200 50cc 	addw	r0, r0, #1484	; 0x5cc
 80171d8:	6158      	str	r0, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 80171da:	681a      	ldr	r2, [r3, #0]
    doepctl.b.epena = 1;
    doepctl.d32 = 0x80008000;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 80171dc:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 80171e0:	601a      	str	r2, [r3, #0]
  }
}
 80171e2:	b002      	add	sp, #8
 80171e4:	4770      	bx	lr

080171e6 <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 80171e6:	b510      	push	{r4, lr}
 80171e8:	4604      	mov	r4, r0
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 80171ea:	f7ff fa8d 	bl	8016708 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 80171ee:	2301      	movs	r3, #1
 80171f0:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  pdev->dev.device_address = 0;
 80171f4:	2300      	movs	r3, #0
 80171f6:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80171fa:	7862      	ldrb	r2, [r4, #1]
 80171fc:	4293      	cmp	r3, r2
 80171fe:	d213      	bcs.n	8017228 <DCD_Init+0x42>
  {
    ep = &pdev->dev.in_ep[i];
 8017200:	2228      	movs	r2, #40	; 0x28
 8017202:	fb02 4103 	mla	r1, r2, r3, r4
 8017206:	f501 728e 	add.w	r2, r1, #284	; 0x11c
    /* Init ep structure */
    ep->is_in = 1;
 801720a:	2001      	movs	r0, #1
 801720c:	f881 011d 	strb.w	r0, [r1, #285]	; 0x11d
    ep->num = i;
 8017210:	f881 311c 	strb.w	r3, [r1, #284]	; 0x11c
    ep->tx_fifo_num = i;
 8017214:	f8a1 3122 	strh.w	r3, [r1, #290]	; 0x122
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8017218:	2040      	movs	r0, #64	; 0x40
    /* Init ep structure */
    ep->is_in = 1;
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 801721a:	2100      	movs	r1, #0
 801721c:	70d1      	strb	r1, [r2, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 801721e:	6090      	str	r0, [r2, #8]
    ep->xfer_buff = 0;
 8017220:	60d1      	str	r1, [r2, #12]
    ep->xfer_len = 0;
 8017222:	6151      	str	r1, [r2, #20]
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8017224:	3301      	adds	r3, #1
 8017226:	e7e8      	b.n	80171fa <DCD_Init+0x14>
 8017228:	2300      	movs	r3, #0
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 801722a:	7860      	ldrb	r0, [r4, #1]
 801722c:	4283      	cmp	r3, r0
 801722e:	d213      	bcs.n	8017258 <DCD_Init+0x72>
  {
    ep = &pdev->dev.out_ep[i];
 8017230:	2128      	movs	r1, #40	; 0x28
 8017232:	fb01 4003 	mla	r0, r1, r3, r4
 8017236:	f500 725d 	add.w	r2, r0, #884	; 0x374
    /* Init ep structure */
    ep->is_in = 0;
 801723a:	2100      	movs	r1, #0
    ep->num = i;
 801723c:	f880 3374 	strb.w	r3, [r0, #884]	; 0x374
    ep->tx_fifo_num = i;
 8017240:	f8a0 337a 	strh.w	r3, [r0, #890]	; 0x37a
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    ep = &pdev->dev.out_ep[i];
    /* Init ep structure */
    ep->is_in = 0;
 8017244:	f880 1375 	strb.w	r1, [r0, #885]	; 0x375
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8017248:	f880 1377 	strb.w	r1, [r0, #887]	; 0x377
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 801724c:	2040      	movs	r0, #64	; 0x40
 801724e:	6090      	str	r0, [r2, #8]
    ep->xfer_buff = 0;
 8017250:	60d1      	str	r1, [r2, #12]
    ep->xfer_len = 0;
 8017252:	6151      	str	r1, [r2, #20]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8017254:	3301      	adds	r3, #1
 8017256:	e7e8      	b.n	801722a <DCD_Init+0x44>
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 8017258:	4620      	mov	r0, r4
 801725a:	f7ff fb09 	bl	8016870 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 801725e:	4620      	mov	r0, r4
 8017260:	f7ff fab2 	bl	80167c8 <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 8017264:	2100      	movs	r1, #0
 8017266:	4620      	mov	r0, r4
 8017268:	f7ff fb42 	bl	80168f0 <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 801726c:	4620      	mov	r0, r4
 801726e:	f7ff fd75 	bl	8016d5c <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8017272:	4620      	mov	r0, r4
}
 8017274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8017278:	f7ff baf3 	b.w	8016862 <USB_OTG_EnableGlobalInt>

0801727c <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 801727c:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 801727e:	b2cd      	uxtb	r5, r1
 8017280:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8017284:	f04f 0628 	mov.w	r6, #40	; 0x28
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8017288:	fb06 0404 	mla	r4, r6, r4, r0
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 801728c:	f015 0f80 	tst.w	r5, #128	; 0x80
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8017290:	bf14      	ite	ne
 8017292:	f504 748e 	addne.w	r4, r4, #284	; 0x11c
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8017296:	f504 745d 	addeq.w	r4, r4, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
 801729a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  ep->is_in = (0x80 & ep_addr) != 0;
 801729e:	09ed      	lsrs	r5, r5, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80172a0:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80172a2:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 80172a4:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 80172a6:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in)
 80172a8:	b105      	cbz	r5, 80172ac <DCD_EP_Open+0x30>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80172aa:	80e1      	strh	r1, [r4, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 80172ac:	2b02      	cmp	r3, #2
 80172ae:	d101      	bne.n	80172b4 <DCD_EP_Open+0x38>
  {
    ep->data_pid_start = 0;
 80172b0:	2300      	movs	r3, #0
 80172b2:	7123      	strb	r3, [r4, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 80172b4:	4621      	mov	r1, r4
 80172b6:	f7ff fdf5 	bl	8016ea4 <USB_OTG_EPActivate>
  return 0;
}
 80172ba:	2000      	movs	r0, #0
 80172bc:	bd70      	pop	{r4, r5, r6, pc}

080172be <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 80172be:	b510      	push	{r4, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 80172c0:	b2ca      	uxtb	r2, r1
 80172c2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80172c6:	f04f 0428 	mov.w	r4, #40	; 0x28
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80172ca:	fb04 0303 	mla	r3, r4, r3, r0
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 80172ce:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80172d2:	bf14      	ite	ne
 80172d4:	f503 738e 	addne.w	r3, r3, #284	; 0x11c
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80172d8:	f503 735d 	addeq.w	r3, r3, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
 80172dc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->is_in = (0x80 & ep_addr) != 0;
 80172e0:	09d2      	lsrs	r2, r2, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80172e2:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80172e4:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 80172e6:	4619      	mov	r1, r3
 80172e8:	f7ff fe0b 	bl	8016f02 <USB_OTG_EPDeactivate>
  return 0;
}
 80172ec:	2000      	movs	r0, #0
 80172ee:	bd10      	pop	{r4, pc}

080172f0 <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 80172f0:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80172f2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80172f6:	2528      	movs	r5, #40	; 0x28
 80172f8:	fb05 0504 	mla	r5, r5, r4, r0
 80172fc:	f505 715d 	add.w	r1, r5, #884	; 0x374
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 8017300:	f885 4374 	strb.w	r4, [r5, #884]	; 0x374
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
 8017304:	614b      	str	r3, [r1, #20]
  ep->xfer_count = 0;
 8017306:	2300      	movs	r3, #0
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8017308:	60ca      	str	r2, [r1, #12]
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
 801730a:	618b      	str	r3, [r1, #24]
  ep->is_in = 0;
 801730c:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & 0x7F;
  
  if (pdev->cfg.dma_enable == 1)
 801730e:	78c3      	ldrb	r3, [r0, #3]
 8017310:	2b01      	cmp	r3, #1
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8017312:	f505 755c 	add.w	r5, r5, #880	; 0x370
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  if (pdev->cfg.dma_enable == 1)
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8017316:	bf08      	it	eq
 8017318:	610a      	streq	r2, [r1, #16]
  }
  
  if ( ep->num == 0 )
 801731a:	b914      	cbnz	r4, 8017322 <DCD_EP_PrepareRx+0x32>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 801731c:	f7ff fe95 	bl	801704a <USB_OTG_EP0StartXfer>
 8017320:	e001      	b.n	8017326 <DCD_EP_PrepareRx+0x36>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8017322:	f7ff fe0d 	bl	8016f40 <USB_OTG_EPStartXfer>
  }
  return 0;
}
 8017326:	2000      	movs	r0, #0
 8017328:	bd38      	pop	{r3, r4, r5, pc}

0801732a <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 801732a:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 801732c:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8017330:	2528      	movs	r5, #40	; 0x28
 8017332:	fb05 0504 	mla	r5, r5, r4, r0
 8017336:	f505 718e 	add.w	r1, r5, #284	; 0x11c
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 801733a:	2601      	movs	r6, #1
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
 801733c:	60ca      	str	r2, [r1, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 801733e:	610a      	str	r2, [r1, #16]
  ep->xfer_count = 0;
 8017340:	2200      	movs	r2, #0
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
 8017342:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8017346:	704e      	strb	r6, [r1, #1]
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8017348:	f505 758c 	add.w	r5, r5, #280	; 0x118
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
  ep->dma_addr = (uint32_t)pbuf;  
  ep->xfer_count = 0;
 801734c:	618a      	str	r2, [r1, #24]
  ep->xfer_len  = buf_len;
 801734e:	614b      	str	r3, [r1, #20]
  
  if ( ep->num == 0 )
 8017350:	b914      	cbnz	r4, 8017358 <DCD_EP_Tx+0x2e>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8017352:	f7ff fe7a 	bl	801704a <USB_OTG_EP0StartXfer>
 8017356:	e001      	b.n	801735c <DCD_EP_Tx+0x32>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8017358:	f7ff fdf2 	bl	8016f40 <USB_OTG_EPStartXfer>
  }
  return 0;
}
 801735c:	2000      	movs	r0, #0
 801735e:	bd70      	pop	{r4, r5, r6, pc}

08017360 <DCD_EP_Stall>:
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8017360:	b2ca      	uxtb	r2, r1
 8017362:	f012 0f80 	tst.w	r2, #128	; 0x80
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8017366:	b510      	push	{r4, lr}
 8017368:	f04f 0328 	mov.w	r3, #40	; 0x28
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 801736c:	d006      	beq.n	801737c <DCD_EP_Stall+0x1c>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 801736e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8017372:	fb03 0304 	mla	r3, r3, r4, r0
 8017376:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801737a:	e003      	b.n	8017384 <DCD_EP_Stall+0x24>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 801737c:	fb03 0401 	mla	r4, r3, r1, r0
 8017380:	f504 735d 	add.w	r3, r4, #884	; 0x374
  }

  ep->is_stall = 1;
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8017384:	09d2      	lsrs	r2, r2, #7
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 8017386:	2401      	movs	r4, #1
  ep->num   = epnum & 0x7F;
 8017388:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801738c:	7019      	strb	r1, [r3, #0]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 801738e:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8017390:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8017392:	4619      	mov	r1, r3
 8017394:	f7ff fec6 	bl	8017124 <USB_OTG_EPSetStall>
  return (0);
}
 8017398:	2000      	movs	r0, #0
 801739a:	bd10      	pop	{r4, pc}

0801739c <DCD_EP_ClrStall>:
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 801739c:	b2ca      	uxtb	r2, r1
 801739e:	f012 0f80 	tst.w	r2, #128	; 0x80
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 80173a2:	b510      	push	{r4, lr}
 80173a4:	f04f 0328 	mov.w	r3, #40	; 0x28
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 80173a8:	d006      	beq.n	80173b8 <DCD_EP_ClrStall+0x1c>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 80173aa:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80173ae:	fb03 0304 	mla	r3, r3, r4, r0
 80173b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80173b6:	e003      	b.n	80173c0 <DCD_EP_ClrStall+0x24>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 80173b8:	fb03 0401 	mla	r4, r3, r1, r0
 80173bc:	f504 735d 	add.w	r3, r4, #884	; 0x374
  }
  
  ep->is_stall = 0;  
 80173c0:	2400      	movs	r4, #0
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 80173c2:	09d2      	lsrs	r2, r2, #7
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
  ep->num   = epnum & 0x7F;
 80173c4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80173c8:	7019      	strb	r1, [r3, #0]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
 80173ca:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 80173cc:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 80173ce:	4619      	mov	r1, r3
 80173d0:	f7ff fec3 	bl	801715a <USB_OTG_EPClearStall>
  return (0);
}
 80173d4:	4620      	mov	r0, r4
 80173d6:	bd10      	pop	{r4, pc}

080173d8 <DCD_EP_SetAddress>:
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
  dcfg.b.devaddr = address;
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 80173d8:	6902      	ldr	r2, [r0, #16]
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 80173da:	2300      	movs	r3, #0
  dcfg.b.devaddr = address;
 80173dc:	f361 130a 	bfi	r3, r1, #4, #7
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 80173e0:	6811      	ldr	r1, [r2, #0]
 80173e2:	430b      	orrs	r3, r1
 80173e4:	6013      	str	r3, [r2, #0]
 80173e6:	4770      	bx	lr

080173e8 <DCD_DevConnect>:
* @brief  Connect device (enable internal pull-up)
* @param pdev: device instance
* @retval : None
*/
void  DCD_DevConnect (USB_OTG_CORE_HANDLE *pdev)
{
 80173e8:	4770      	bx	lr

080173ea <DCD_DevDisconnect>:
* @brief  Disconnect device (disable internal pull-up)
* @param pdev: device instance
* @retval : None
*/
void  DCD_DevDisconnect (USB_OTG_CORE_HANDLE *pdev)
{
 80173ea:	4770      	bx	lr

080173ec <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 80173ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173f0:	b085      	sub	sp, #20
 80173f2:	4604      	mov	r4, r0
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 80173f4:	f7ff fa91 	bl	801691a <USB_OTG_IsDeviceMode>
 80173f8:	b908      	cbnz	r0, 80173fe <USBD_OTG_ISR_Handler+0x12>
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 80173fa:	2000      	movs	r0, #0
 80173fc:	e23a      	b.n	8017874 <USBD_OTG_ISR_Handler+0x488>
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 80173fe:	4620      	mov	r0, r4
 8017400:	f7ff fa97 	bl	8016932 <USB_OTG_ReadCoreItr>
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8017404:	4607      	mov	r7, r0
 8017406:	2800      	cmp	r0, #0
 8017408:	d0f7      	beq.n	80173fa <USBD_OTG_ISR_Handler+0xe>
    {
      return 0;
    }
    
    if (gintr_status.b.outepintr)
 801740a:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 801740e:	f00a 0008 	and.w	r0, sl, #8
 8017412:	b2c0      	uxtb	r0, r0
 8017414:	2800      	cmp	r0, #0
 8017416:	d056      	beq.n	80174c6 <USBD_OTG_ISR_Handler+0xda>
  uint32_t epnum = 0;
  
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 8017418:	4620      	mov	r0, r4
 801741a:	f7ff feb2 	bl	8017182 <USB_OTG_ReadDevAllOutEp_itr>
 801741e:	46a3      	mov	fp, r4
 8017420:	4680      	mov	r8, r0
 8017422:	4626      	mov	r6, r4
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8017424:	f04f 0900 	mov.w	r9, #0
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 8017428:	f1b8 0f00 	cmp.w	r8, #0
 801742c:	d04a      	beq.n	80174c4 <USBD_OTG_ISR_Handler+0xd8>
  {
    if (ep_intr&0x1)
 801742e:	f018 0f01 	tst.w	r8, #1
 8017432:	d03f      	beq.n	80174b4 <USBD_OTG_ISR_Handler+0xc8>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8017434:	fa5f f389 	uxtb.w	r3, r9
 8017438:	4619      	mov	r1, r3
 801743a:	4620      	mov	r0, r4
 801743c:	9300      	str	r3, [sp, #0]
 801743e:	f7ff fea6 	bl	801718e <USB_OTG_ReadDevOutEP_itr>
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8017442:	f010 0f01 	tst.w	r0, #1
  while ( ep_intr )
  {
    if (ep_intr&0x1)
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8017446:	4605      	mov	r5, r0
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8017448:	9b00      	ldr	r3, [sp, #0]
 801744a:	d020      	beq.n	801748e <USBD_OTG_ISR_Handler+0xa2>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 801744c:	6d70      	ldr	r0, [r6, #84]	; 0x54
 801744e:	2501      	movs	r5, #1
 8017450:	6085      	str	r5, [r0, #8]
        if (pdev->cfg.dma_enable == 1)
 8017452:	78e1      	ldrb	r1, [r4, #3]
 8017454:	42a9      	cmp	r1, r5
 8017456:	d107      	bne.n	8017468 <USBD_OTG_ISR_Handler+0x7c>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8017458:	6902      	ldr	r2, [r0, #16]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 801745a:	f8db 137c 	ldr.w	r1, [fp, #892]	; 0x37c
            deptsiz.b.xfersize;
 801745e:	f3c2 0012 	ubfx	r0, r2, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8017462:	1a0a      	subs	r2, r1, r0
 8017464:	f8cb 238c 	str.w	r2, [fp, #908]	; 0x38c
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 8017468:	4871      	ldr	r0, [pc, #452]	; (8017630 <USBD_OTG_ISR_Handler+0x244>)
 801746a:	6801      	ldr	r1, [r0, #0]
 801746c:	4620      	mov	r0, r4
 801746e:	680a      	ldr	r2, [r1, #0]
 8017470:	4619      	mov	r1, r3
 8017472:	4790      	blx	r2
        
        if (pdev->cfg.dma_enable == 1)
 8017474:	78e3      	ldrb	r3, [r4, #3]
 8017476:	2b01      	cmp	r3, #1
 8017478:	d109      	bne.n	801748e <USBD_OTG_ISR_Handler+0xa2>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 801747a:	f1b9 0f00 	cmp.w	r9, #0
 801747e:	d106      	bne.n	801748e <USBD_OTG_ISR_Handler+0xa2>
 8017480:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
 8017484:	2805      	cmp	r0, #5
 8017486:	d102      	bne.n	801748e <USBD_OTG_ISR_Handler+0xa2>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8017488:	4620      	mov	r0, r4
 801748a:	f7ff fe8e 	bl	80171aa <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 801748e:	f005 0102 	and.w	r1, r5, #2
 8017492:	b2ca      	uxtb	r2, r1
 8017494:	b112      	cbz	r2, 801749c <USBD_OTG_ISR_Handler+0xb0>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 8017496:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8017498:	2502      	movs	r5, #2
 801749a:	609d      	str	r5, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 801749c:	f005 0008 	and.w	r0, r5, #8
 80174a0:	b2c1      	uxtb	r1, r0
 80174a2:	b139      	cbz	r1, 80174b4 <USBD_OTG_ISR_Handler+0xc8>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 80174a4:	4a62      	ldr	r2, [pc, #392]	; (8017630 <USBD_OTG_ISR_Handler+0x244>)
 80174a6:	6815      	ldr	r5, [r2, #0]
 80174a8:	4620      	mov	r0, r4
 80174aa:	68ab      	ldr	r3, [r5, #8]
 80174ac:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 80174ae:	6d70      	ldr	r0, [r6, #84]	; 0x54
 80174b0:	2108      	movs	r1, #8
 80174b2:	6081      	str	r1, [r0, #8]
      }
    }
    epnum++;
 80174b4:	f109 0901 	add.w	r9, r9, #1
    ep_intr >>= 1;
 80174b8:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80174bc:	3604      	adds	r6, #4
 80174be:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
 80174c2:	e7b1      	b.n	8017428 <USBD_OTG_ISR_Handler+0x3c>
      return 0;
    }
    
    if (gintr_status.b.outepintr)
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 80174c4:	2001      	movs	r0, #1
    }    
    
    if (gintr_status.b.inepint)
 80174c6:	f00a 0a04 	and.w	sl, sl, #4
 80174ca:	fa5f f38a 	uxtb.w	r3, sl
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	f000 80b1 	beq.w	8017636 <USBD_OTG_ISR_Handler+0x24a>
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 80174d4:	4620      	mov	r0, r4
 80174d6:	f7ff fe62 	bl	801719e <USB_OTG_ReadDevAllInEPItr>
 80174da:	4626      	mov	r6, r4
 80174dc:	4681      	mov	r9, r0
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 80174de:	f04f 0800 	mov.w	r8, #0
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 80174e2:	f1b9 0f00 	cmp.w	r9, #0
 80174e6:	f000 80a5 	beq.w	8017634 <USBD_OTG_ISR_Handler+0x248>
  {
    if (ep_intr&0x1) /* In ITR */
 80174ea:	f019 0f01 	tst.w	r9, #1
 80174ee:	f000 8099 	beq.w	8017624 <USBD_OTG_ISR_Handler+0x238>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 80174f2:	fa5f fa88 	uxtb.w	sl, r8
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 80174f6:	6923      	ldr	r3, [r4, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 80174f8:	eb04 008a 	add.w	r0, r4, sl, lsl #2
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 80174fc:	6919      	ldr	r1, [r3, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 80174fe:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8017500:	6982      	ldr	r2, [r0, #24]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 8017502:	fa25 f50a 	lsr.w	r5, r5, sl
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8017506:	6890      	ldr	r0, [r2, #8]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 8017508:	01ea      	lsls	r2, r5, #7
 801750a:	b2d5      	uxtb	r5, r2
 801750c:	430d      	orrs	r5, r1
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 801750e:	4005      	ands	r5, r0
  while ( ep_intr )
  {
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
 8017510:	07ea      	lsls	r2, r5, #31
 8017512:	d51b      	bpl.n	801754c <USBD_OTG_ISR_Handler+0x160>
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8017514:	6b58      	ldr	r0, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8017516:	4a46      	ldr	r2, [pc, #280]	; (8017630 <USBD_OTG_ISR_Handler+0x244>)
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
 8017518:	2501      	movs	r5, #1
 801751a:	fa05 f108 	lsl.w	r1, r5, r8
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 801751e:	ea20 0001 	bic.w	r0, r0, r1
 8017522:	6358      	str	r0, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8017524:	69b3      	ldr	r3, [r6, #24]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8017526:	6810      	ldr	r0, [r2, #0]
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8017528:	609d      	str	r5, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 801752a:	4651      	mov	r1, sl
 801752c:	6843      	ldr	r3, [r0, #4]
 801752e:	4620      	mov	r0, r4
 8017530:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 8017532:	78e1      	ldrb	r1, [r4, #3]
 8017534:	42a9      	cmp	r1, r5
 8017536:	d109      	bne.n	801754c <USBD_OTG_ISR_Handler+0x160>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8017538:	f1b8 0f00 	cmp.w	r8, #0
 801753c:	d106      	bne.n	801754c <USBD_OTG_ISR_Handler+0x160>
 801753e:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
 8017542:	2a04      	cmp	r2, #4
 8017544:	d102      	bne.n	801754c <USBD_OTG_ISR_Handler+0x160>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8017546:	4620      	mov	r0, r4
 8017548:	f7ff fe2f 	bl	80171aa <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.timeout )
 801754c:	f005 0008 	and.w	r0, r5, #8
 8017550:	b2c3      	uxtb	r3, r0
 8017552:	b113      	cbz	r3, 801755a <USBD_OTG_ISR_Handler+0x16e>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 8017554:	69b1      	ldr	r1, [r6, #24]
 8017556:	2508      	movs	r5, #8
 8017558:	608d      	str	r5, [r1, #8]
      }
      if (diepint.b.intktxfemp)
 801755a:	f005 0210 	and.w	r2, r5, #16
 801755e:	b2d0      	uxtb	r0, r2
 8017560:	b110      	cbz	r0, 8017568 <USBD_OTG_ISR_Handler+0x17c>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 8017562:	69b3      	ldr	r3, [r6, #24]
 8017564:	2510      	movs	r5, #16
 8017566:	609d      	str	r5, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 8017568:	f005 0140 	and.w	r1, r5, #64	; 0x40
 801756c:	b2ca      	uxtb	r2, r1
 801756e:	b112      	cbz	r2, 8017576 <USBD_OTG_ISR_Handler+0x18a>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 8017570:	69b0      	ldr	r0, [r6, #24]
 8017572:	2540      	movs	r5, #64	; 0x40
 8017574:	6085      	str	r5, [r0, #8]
      }
      if ( diepint.b.epdisabled )
 8017576:	f005 0302 	and.w	r3, r5, #2
 801757a:	b2d9      	uxtb	r1, r3
 801757c:	b111      	cbz	r1, 8017584 <USBD_OTG_ISR_Handler+0x198>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 801757e:	69b2      	ldr	r2, [r6, #24]
 8017580:	2502      	movs	r5, #2
 8017582:	6095      	str	r5, [r2, #8]
      }       
      if (diepint.b.emptyintr)
 8017584:	f025 007f 	bic.w	r0, r5, #127	; 0x7f
 8017588:	f010 0fff 	tst.w	r0, #255	; 0xff
 801758c:	d04a      	beq.n	8017624 <USBD_OTG_ISR_Handler+0x238>
  USB_OTG_EP *ep;
  uint32_t len = 0;
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
 801758e:	2328      	movs	r3, #40	; 0x28
 8017590:	fb03 4108 	mla	r1, r3, r8, r4
 8017594:	f501 758c 	add.w	r5, r1, #280	; 0x118
 8017598:	9501      	str	r5, [sp, #4]
 801759a:	3504      	adds	r5, #4
  
  len = ep->xfer_len - ep->xfer_count;
 801759c:	6968      	ldr	r0, [r5, #20]
 801759e:	69ab      	ldr	r3, [r5, #24]
  
  if (len > ep->maxpacket)
 80175a0:	68aa      	ldr	r2, [r5, #8]
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
  
  len = ep->xfer_len - ep->xfer_count;
 80175a2:	1ac1      	subs	r1, r0, r3
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80175a4:	69b0      	ldr	r0, [r6, #24]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 80175a6:	4291      	cmp	r1, r2
 80175a8:	bf38      	it	cc
 80175aa:	460a      	movcc	r2, r1
 80175ac:	f102 0c03 	add.w	ip, r2, #3
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80175b0:	6982      	ldr	r2, [r0, #24]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 80175b2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80175b6:	b293      	uxth	r3, r2
 80175b8:	4563      	cmp	r3, ip
 80175ba:	d930      	bls.n	801761e <USBD_OTG_ISR_Handler+0x232>
          ep->xfer_count < ep->xfer_len &&
 80175bc:	69a9      	ldr	r1, [r5, #24]
 80175be:	696a      	ldr	r2, [r5, #20]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80175c0:	4291      	cmp	r1, r2
 80175c2:	d22c      	bcs.n	801761e <USBD_OTG_ISR_Handler+0x232>
          ep->xfer_count < ep->xfer_len &&
 80175c4:	b35a      	cbz	r2, 801761e <USBD_OTG_ISR_Handler+0x232>
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
    
    if (len > ep->maxpacket)
 80175c6:	68a8      	ldr	r0, [r5, #8]
  while  (txstatus.b.txfspcavail > len32b &&
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80175c8:	ebc1 0b02 	rsb	fp, r1, r2
 80175cc:	4583      	cmp	fp, r0
 80175ce:	bf28      	it	cs
 80175d0:	4683      	movcs	fp, r0
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
 80175d2:	f10b 0e03 	add.w	lr, fp, #3
 80175d6:	ea4f 0c9e 	mov.w	ip, lr, lsr #2
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 80175da:	68e9      	ldr	r1, [r5, #12]
 80175dc:	f8cd c000 	str.w	ip, [sp]
 80175e0:	4652      	mov	r2, sl
 80175e2:	fa1f f38b 	uxth.w	r3, fp
 80175e6:	4620      	mov	r0, r4
 80175e8:	f7ff f86a 	bl	80166c0 <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 80175ec:	68eb      	ldr	r3, [r5, #12]
    ep->xfer_count += len;
 80175ee:	69aa      	ldr	r2, [r5, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 80175f0:	f8dd c000 	ldr.w	ip, [sp]
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 80175f4:	eb03 010b 	add.w	r1, r3, fp
    ep->xfer_count += len;
 80175f8:	eb0b 0002 	add.w	r0, fp, r2
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 80175fc:	60e9      	str	r1, [r5, #12]
    ep->xfer_count += len;
 80175fe:	61a8      	str	r0, [r5, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8017600:	6969      	ldr	r1, [r5, #20]
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8017602:	69b3      	ldr	r3, [r6, #24]

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8017604:	4288      	cmp	r0, r1
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8017606:	699a      	ldr	r2, [r3, #24]

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8017608:	d3d5      	bcc.n	80175b6 <USBD_OTG_ISR_Handler+0x1ca>
      uint32_t fifoemptymsk = 1 << ep->num;
 801760a:	9801      	ldr	r0, [sp, #4]
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 801760c:	6925      	ldr	r5, [r4, #16]
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
      uint32_t fifoemptymsk = 1 << ep->num;
 801760e:	7902      	ldrb	r2, [r0, #4]
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8017610:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
      uint32_t fifoemptymsk = 1 << ep->num;
 8017612:	2101      	movs	r1, #1
 8017614:	fa01 f002 	lsl.w	r0, r1, r2
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8017618:	ea23 0300 	bic.w	r3, r3, r0
 801761c:	636b      	str	r3, [r5, #52]	; 0x34
      if (diepint.b.emptyintr)
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 801761e:	69b5      	ldr	r5, [r6, #24]
 8017620:	2280      	movs	r2, #128	; 0x80
 8017622:	60aa      	str	r2, [r5, #8]
      }
    }
    epnum++;
 8017624:	f108 0801 	add.w	r8, r8, #1
    ep_intr >>= 1;
 8017628:	ea4f 0959 	mov.w	r9, r9, lsr #1
 801762c:	3604      	adds	r6, #4
 801762e:	e758      	b.n	80174e2 <USBD_OTG_ISR_Handler+0xf6>
 8017630:	20000020 	.word	0x20000020
      retval |= DCD_HandleOutEP_ISR(pdev);
    }    
    
    if (gintr_status.b.inepint)
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 8017634:	2001      	movs	r0, #1
    }
    
    if (gintr_status.b.modemismatch)
 8017636:	b2fd      	uxtb	r5, r7
 8017638:	f005 0102 	and.w	r1, r5, #2
 801763c:	b2ca      	uxtb	r2, r1
 801763e:	b112      	cbz	r2, 8017646 <USBD_OTG_ISR_Handler+0x25a>
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
      gintsts.b.modemismatch = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8017640:	68e3      	ldr	r3, [r4, #12]
 8017642:	2102      	movs	r1, #2
 8017644:	6159      	str	r1, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 8017646:	f3c7 6207 	ubfx	r2, r7, #24, #8
 801764a:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801764e:	b2d9      	uxtb	r1, r3
 8017650:	b1c9      	cbz	r1, 8017686 <USBD_OTG_ISR_Handler+0x29a>
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 8017652:	7aa0      	ldrb	r0, [r4, #10]
 8017654:	b140      	cbz	r0, 8017668 <USBD_OTG_ISR_Handler+0x27c>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8017656:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    power.b.gatehclk = 0;
    power.b.stoppclk = 0;
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 801765a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
  
  if(pdev->cfg.low_power)
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
    power.b.gatehclk = 0;
 801765e:	f36f 0341 	bfc	r3, #1, #1
    power.b.stoppclk = 0;
 8017662:	f36f 0300 	bfc	r3, #0, #1
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8017666:	6013      	str	r3, [r2, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8017668:	6921      	ldr	r1, [r4, #16]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 801766a:	4a84      	ldr	r2, [pc, #528]	; (801787c <USBD_OTG_ISR_Handler+0x490>)
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 801766c:	6848      	ldr	r0, [r1, #4]
 801766e:	f020 0301 	bic.w	r3, r0, #1
 8017672:	604b      	str	r3, [r1, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8017674:	6811      	ldr	r1, [r2, #0]
 8017676:	4620      	mov	r0, r4
 8017678:	698b      	ldr	r3, [r1, #24]
 801767a:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.wkupintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801767c:	68e0      	ldr	r0, [r4, #12]
 801767e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017682:	6142      	str	r2, [r0, #20]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
    }
    
    if (gintr_status.b.wkupintr)
    {
      retval |= DCD_HandleResume_ISR(pdev);
 8017684:	2001      	movs	r0, #1
    }
    
    if (gintr_status.b.usbsuspend)
 8017686:	f3c7 2807 	ubfx	r8, r7, #8, #8
 801768a:	f008 0108 	and.w	r1, r8, #8
 801768e:	b2cb      	uxtb	r3, r1
 8017690:	b36b      	cbz	r3, 80176ee <USBD_OTG_ISR_Handler+0x302>
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
  USBD_DCD_INT_fops->Suspend (pdev);      
 8017692:	497a      	ldr	r1, [pc, #488]	; (801787c <USBD_OTG_ISR_Handler+0x490>)
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
 8017694:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
  USBD_DCD_INT_fops->Suspend (pdev);      
 8017698:	680b      	ldr	r3, [r1, #0]
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
 801769a:	2000      	movs	r0, #0
 801769c:	f88d 000f 	strb.w	r0, [sp, #15]
  
  prev_status = pdev->dev.device_status;
 80176a0:	f88d 200f 	strb.w	r2, [sp, #15]
  USBD_DCD_INT_fops->Suspend (pdev);      
 80176a4:	4620      	mov	r0, r4
 80176a6:	695a      	ldr	r2, [r3, #20]
 80176a8:	4790      	blx	r2
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80176aa:	6920      	ldr	r0, [r4, #16]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80176ac:	68e3      	ldr	r3, [r4, #12]
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
  USBD_DCD_INT_fops->Suspend (pdev);      
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80176ae:	6882      	ldr	r2, [r0, #8]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80176b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80176b4:	6159      	str	r1, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 80176b6:	7aa0      	ldrb	r0, [r4, #10]
 80176b8:	b1c0      	cbz	r0, 80176ec <USBD_OTG_ISR_Handler+0x300>
 80176ba:	07d3      	lsls	r3, r2, #31
 80176bc:	d516      	bpl.n	80176ec <USBD_OTG_ISR_Handler+0x300>
 80176be:	f894 2115 	ldrb.w	r2, [r4, #277]	; 0x115
 80176c2:	2a01      	cmp	r2, #1
 80176c4:	d112      	bne.n	80176ec <USBD_OTG_ISR_Handler+0x300>
    (pdev->dev.connection_status == 1) && 
    (prev_status  == USB_OTG_CONFIGURED))
 80176c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
    (pdev->dev.connection_status == 1) && 
 80176ca:	2b03      	cmp	r3, #3
 80176cc:	d10e      	bne.n	80176ec <USBD_OTG_ISR_Handler+0x300>
    (prev_status  == USB_OTG_CONFIGURED))
  {
	/*  switch-off the clocks */
    power.d32 = 0;
    power.b.stoppclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 80176ce:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 80176d2:	6808      	ldr	r0, [r1, #0]
 80176d4:	f040 0201 	orr.w	r2, r0, #1
 80176d8:	600a      	str	r2, [r1, #0]
    
    power.b.gatehclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 80176da:	680b      	ldr	r3, [r1, #0]
 80176dc:	f043 0003 	orr.w	r0, r3, #3
 80176e0:	6008      	str	r0, [r1, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 80176e2:	4967      	ldr	r1, [pc, #412]	; (8017880 <USBD_OTG_ISR_Handler+0x494>)
 80176e4:	690a      	ldr	r2, [r1, #16]
 80176e6:	f042 0306 	orr.w	r3, r2, #6
 80176ea:	610b      	str	r3, [r1, #16]
      retval |= DCD_HandleResume_ISR(pdev);
    }
    
    if (gintr_status.b.usbsuspend)
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 80176ec:	2001      	movs	r0, #1
    }
    if (gintr_status.b.sofintr)
 80176ee:	f005 0108 	and.w	r1, r5, #8
 80176f2:	b2ca      	uxtb	r2, r1
 80176f4:	b142      	cbz	r2, 8017708 <USBD_OTG_ISR_Handler+0x31c>
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 80176f6:	4861      	ldr	r0, [pc, #388]	; (801787c <USBD_OTG_ISR_Handler+0x490>)
 80176f8:	6803      	ldr	r3, [r0, #0]
 80176fa:	4620      	mov	r0, r4
 80176fc:	68d9      	ldr	r1, [r3, #12]
 80176fe:	4788      	blx	r1
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
  GINTSTS.b.sofintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 8017700:	68e0      	ldr	r0, [r4, #12]
 8017702:	2208      	movs	r2, #8
 8017704:	6142      	str	r2, [r0, #20]
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
    }
    if (gintr_status.b.sofintr)
    {
      retval |= DCD_HandleSof_ISR(pdev);
 8017706:	2001      	movs	r0, #1
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8017708:	f005 0510 	and.w	r5, r5, #16
 801770c:	b2ed      	uxtb	r5, r5
 801770e:	2d00      	cmp	r5, #0
 8017710:	d035      	beq.n	801777e <USBD_OTG_ISR_Handler+0x392>
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
  int_mask.b.rxstsqlvl = 1;
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 8017712:	68e6      	ldr	r6, [r4, #12]
 8017714:	69b3      	ldr	r3, [r6, #24]
 8017716:	f023 0110 	bic.w	r1, r3, #16
 801771a:	61b1      	str	r1, [r6, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 801771c:	6a36      	ldr	r6, [r6, #32]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 801771e:	2228      	movs	r2, #40	; 0x28
 8017720:	f006 000f 	and.w	r0, r6, #15
  
  switch (status.b.pktsts)
 8017724:	f3c6 4343 	ubfx	r3, r6, #17, #4
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 8017728:	fb02 4500 	mla	r5, r2, r0, r4
  
  switch (status.b.pktsts)
 801772c:	2b02      	cmp	r3, #2
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 801772e:	f505 755d 	add.w	r5, r5, #884	; 0x374
  
  switch (status.b.pktsts)
 8017732:	d00d      	beq.n	8017750 <USBD_OTG_ISR_Handler+0x364>
 8017734:	2b06      	cmp	r3, #6
 8017736:	d11c      	bne.n	8017772 <USBD_OTG_ISR_Handler+0x386>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8017738:	f204 51cc 	addw	r1, r4, #1484	; 0x5cc
 801773c:	4620      	mov	r0, r4
 801773e:	2208      	movs	r2, #8
 8017740:	f7fe ffd1 	bl	80166e6 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 8017744:	69a9      	ldr	r1, [r5, #24]
 8017746:	f3c6 160a 	ubfx	r6, r6, #4, #11
 801774a:	1988      	adds	r0, r1, r6
 801774c:	61a8      	str	r0, [r5, #24]
 801774e:	e010      	b.n	8017772 <USBD_OTG_ISR_Handler+0x386>
  switch (status.b.pktsts)
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 8017750:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8017754:	4032      	ands	r2, r6
 8017756:	b162      	cbz	r2, 8017772 <USBD_OTG_ISR_Handler+0x386>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 8017758:	f3c6 160a 	ubfx	r6, r6, #4, #11
 801775c:	68e9      	ldr	r1, [r5, #12]
 801775e:	4632      	mov	r2, r6
 8017760:	4620      	mov	r0, r4
 8017762:	f7fe ffc0 	bl	80166e6 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 8017766:	68eb      	ldr	r3, [r5, #12]
      ep->xfer_count += status.b.bcnt;
 8017768:	69a8      	ldr	r0, [r5, #24]
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 801776a:	1999      	adds	r1, r3, r6
      ep->xfer_count += status.b.bcnt;
 801776c:	1986      	adds	r6, r0, r6
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 801776e:	60e9      	str	r1, [r5, #12]
      ep->xfer_count += status.b.bcnt;
 8017770:	61ae      	str	r6, [r5, #24]
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 8017772:	68e3      	ldr	r3, [r4, #12]
 8017774:	699a      	ldr	r2, [r3, #24]
 8017776:	f042 0110 	orr.w	r1, r2, #16
 801777a:	6199      	str	r1, [r3, #24]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 801777c:	2001      	movs	r0, #1
      
    }
    
    if (gintr_status.b.usbreset)
 801777e:	f008 0310 	and.w	r3, r8, #16
 8017782:	b2da      	uxtb	r2, r3
 8017784:	2a00      	cmp	r2, #0
 8017786:	d034      	beq.n	80177f2 <USBD_OTG_ISR_Handler+0x406>
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8017788:	6926      	ldr	r6, [r4, #16]
 801778a:	6870      	ldr	r0, [r6, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 801778c:	2500      	movs	r5, #0
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 801778e:	f020 0101 	bic.w	r1, r0, #1
 8017792:	6071      	str	r1, [r6, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 8017794:	4620      	mov	r0, r4
 8017796:	4629      	mov	r1, r5
 8017798:	f7ff f872 	bl	8016880 <USB_OTG_FlushTxFifo>
 801779c:	4623      	mov	r3, r4
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 801779e:	462a      	mov	r2, r5
 80177a0:	7866      	ldrb	r6, [r4, #1]
 80177a2:	3304      	adds	r3, #4
 80177a4:	42b2      	cmp	r2, r6
 80177a6:	d206      	bcs.n	80177b6 <USBD_OTG_ISR_Handler+0x3ca>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 80177a8:	695e      	ldr	r6, [r3, #20]
 80177aa:	21ff      	movs	r1, #255	; 0xff
 80177ac:	60b1      	str	r1, [r6, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80177ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80177b0:	3201      	adds	r2, #1
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80177b2:	6081      	str	r1, [r0, #8]
 80177b4:	e7f4      	b.n	80177a0 <USBD_OTG_ISR_Handler+0x3b4>
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  
  daintmsk.ep.in = 1;
 80177b6:	2601      	movs	r6, #1
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80177b8:	6920      	ldr	r0, [r4, #16]
  
  daintmsk.ep.in = 1;
 80177ba:	f366 050f 	bfi	r5, r6, #0, #16
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
 80177be:	210b      	movs	r1, #11
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80177c0:	f04f 32ff 	mov.w	r2, #4294967295
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
 80177c4:	f366 451f 	bfi	r5, r6, #16, #16
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80177c8:	6182      	str	r2, [r0, #24]
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 80177ca:	61c5      	str	r5, [r0, #28]
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 80177cc:	6141      	str	r1, [r0, #20]
#endif
  diepmsk.b.xfercompl = 1;
  diepmsk.b.timeout = 1;
  diepmsk.b.epdisabled = 1;

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 80177ce:	6101      	str	r1, [r0, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 80177d0:	6803      	ldr	r3, [r0, #0]
  dcfg.b.devaddr = 0;
 80177d2:	f36f 130a 	bfc	r3, #4, #7
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 80177d6:	6003      	str	r3, [r0, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 80177d8:	4620      	mov	r0, r4
 80177da:	f7ff fce6 	bl	80171aa <USB_OTG_EP0_OutStart>
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 80177de:	4927      	ldr	r1, [pc, #156]	; (801787c <USBD_OTG_ISR_Handler+0x490>)
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80177e0:	68e0      	ldr	r0, [r4, #12]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 80177e2:	680b      	ldr	r3, [r1, #0]
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80177e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80177e8:	6142      	str	r2, [r0, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 80177ea:	691a      	ldr	r2, [r3, #16]
 80177ec:	4620      	mov	r0, r4
 80177ee:	4790      	blx	r2
      
    }
    
    if (gintr_status.b.usbreset)
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 80177f0:	4630      	mov	r0, r6
      
    }
    if (gintr_status.b.enumdone)
 80177f2:	f008 0820 	and.w	r8, r8, #32
 80177f6:	fa5f f188 	uxtb.w	r1, r8
 80177fa:	b1e9      	cbz	r1, 8017838 <USBD_OTG_ISR_Handler+0x44c>
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 80177fc:	4620      	mov	r0, r4
 80177fe:	f7ff fb3b 	bl	8016e78 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8017802:	68e5      	ldr	r5, [r4, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8017804:	4620      	mov	r0, r4
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8017806:	68ed      	ldr	r5, [r5, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8017808:	f7ff fb28 	bl	8016e5c <USB_OTG_GetDeviceSpeed>
 801780c:	2803      	cmp	r0, #3
 801780e:	d106      	bne.n	801781e <USBD_OTG_ISR_Handler+0x432>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8017810:	2100      	movs	r1, #0
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8017812:	f44f 7000 	mov.w	r0, #512	; 0x200
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8017816:	70a1      	strb	r1, [r4, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8017818:	80a0      	strh	r0, [r4, #4]
    gusbcfg.b.usbtrdtim = 9;
 801781a:	2209      	movs	r2, #9
 801781c:	e004      	b.n	8017828 <USBD_OTG_ISR_Handler+0x43c>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 801781e:	2001      	movs	r0, #1
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8017820:	2340      	movs	r3, #64	; 0x40
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
    gusbcfg.b.usbtrdtim = 9;
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8017822:	70a0      	strb	r0, [r4, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8017824:	80a3      	strh	r3, [r4, #4]
    gusbcfg.b.usbtrdtim = 5;
 8017826:	2205      	movs	r2, #5
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 8017828:	68e3      	ldr	r3, [r4, #12]
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
 801782a:	f362 258d 	bfi	r5, r2, #10, #4
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
 801782e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 8017832:	60dd      	str	r5, [r3, #12]
      retval |= DCD_HandleUsbReset_ISR(pdev);
      
    }
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8017834:	2001      	movs	r0, #1
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 8017836:	615a      	str	r2, [r3, #20]
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
 8017838:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801783c:	f007 0110 	and.w	r1, r7, #16
 8017840:	b2cb      	uxtb	r3, r1
 8017842:	b14b      	cbz	r3, 8017858 <USBD_OTG_ISR_Handler+0x46c>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 8017844:	480d      	ldr	r0, [pc, #52]	; (801787c <USBD_OTG_ISR_Handler+0x490>)
 8017846:	6802      	ldr	r2, [r0, #0]
 8017848:	4620      	mov	r0, r4
 801784a:	69d1      	ldr	r1, [r2, #28]
 801784c:	4788      	blx	r1
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801784e:	68e3      	ldr	r3, [r4, #12]
 8017850:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8017854:	6158      	str	r0, [r3, #20]
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 8017856:	2001      	movs	r0, #1
    }

    if (gintr_status.b.incomplisoout)
 8017858:	f007 0720 	and.w	r7, r7, #32
 801785c:	b2ff      	uxtb	r7, r7
 801785e:	b14f      	cbz	r7, 8017874 <USBD_OTG_ISR_Handler+0x488>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 8017860:	4a06      	ldr	r2, [pc, #24]	; (801787c <USBD_OTG_ISR_Handler+0x490>)
 8017862:	6811      	ldr	r1, [r2, #0]
 8017864:	4620      	mov	r0, r4
 8017866:	6a0b      	ldr	r3, [r1, #32]
 8017868:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801786a:	68e0      	ldr	r0, [r4, #12]
 801786c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8017870:	6142      	str	r2, [r0, #20]
      retval |= DCD_IsoINIncomplete_ISR(pdev);
    }

    if (gintr_status.b.incomplisoout)
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 8017872:	2001      	movs	r0, #1
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
}
 8017874:	b005      	add	sp, #20
 8017876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801787a:	bf00      	nop
 801787c:	20000020 	.word	0x20000020
 8017880:	e000ed00 	.word	0xe000ed00

08017884 <HCD_Init>:
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 8017884:	b538      	push	{r3, r4, r5, lr}
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
 8017886:	2300      	movs	r3, #0
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 8017888:	4604      	mov	r4, r0
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
 801788a:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
  {
  pdev->host.ErrCnt[i]  = 0;
 801788e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8017892:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8017896:	2500      	movs	r5, #0
  pdev->host.XferCnt[i]   = 0;
 8017898:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
  {
  pdev->host.ErrCnt[i]  = 0;
 801789c:	6085      	str	r5, [r0, #8]
  pdev->host.XferCnt[i]   = 0;
 801789e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
  pdev->host.HC_Status[i]   = HC_IDLE;
 80178a2:	18e2      	adds	r2, r4, r3
 80178a4:	3301      	adds	r3, #1
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 80178a6:	2b0f      	cmp	r3, #15
  {
  pdev->host.ErrCnt[i]  = 0;
  pdev->host.XferCnt[i]   = 0;
 80178a8:	6045      	str	r5, [r0, #4]
  pdev->host.HC_Status[i]   = HC_IDLE;
 80178aa:	f882 5870 	strb.w	r5, [r2, #2160]	; 0x870
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 80178ae:	d1ee      	bne.n	801788e <HCD_Init+0xa>
  {
  pdev->host.ErrCnt[i]  = 0;
  pdev->host.XferCnt[i]   = 0;
  pdev->host.HC_Status[i]   = HC_IDLE;
  }
  pdev->host.hc[0].max_packet  = 8; 
 80178b0:	2008      	movs	r0, #8
 80178b2:	f8a4 0896 	strh.w	r0, [r4, #2198]	; 0x896

  USB_OTG_SelectCore(pdev, coreID);
 80178b6:	4620      	mov	r0, r4
 80178b8:	f7fe ff26 	bl	8016708 <USB_OTG_SelectCore>
#ifndef DUAL_ROLE_MODE_ENABLED
  USB_OTG_DisableGlobalInt(pdev);
 80178bc:	4620      	mov	r0, r4
 80178be:	f7fe ffd7 	bl	8016870 <USB_OTG_DisableGlobalInt>
  USB_OTG_CoreInit(pdev);
 80178c2:	4620      	mov	r0, r4
 80178c4:	f7fe ff80 	bl	80167c8 <USB_OTG_CoreInit>

  /* Force Host Mode*/
  USB_OTG_SetCurrentMode(pdev , HOST_MODE);
 80178c8:	2101      	movs	r1, #1
 80178ca:	4620      	mov	r0, r4
 80178cc:	f7ff f810 	bl	80168f0 <USB_OTG_SetCurrentMode>
  USB_OTG_CoreInitHost(pdev);
 80178d0:	4620      	mov	r0, r4
 80178d2:	f7ff f8a3 	bl	8016a1c <USB_OTG_CoreInitHost>
  USB_OTG_EnableGlobalInt(pdev);
 80178d6:	4620      	mov	r0, r4
 80178d8:	f7fe ffc3 	bl	8016862 <USB_OTG_EnableGlobalInt>
#endif
   
  return 0;
}
 80178dc:	4628      	mov	r0, r5
 80178de:	bd38      	pop	{r3, r4, r5, pc}

080178e0 <HCD_GetCurrentSpeed>:
  */

uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
{    
    USB_OTG_HPRT0_TypeDef  HPRT0;
    HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 80178e0:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 80178e4:	6818      	ldr	r0, [r3, #0]
    
    return HPRT0.b.prtspd;
}
 80178e6:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80178ea:	4770      	bx	lr

080178ec <HCD_ResetPort>:
  *         Issues the reset command to device
  * @param  pdev : Selected device
  * @retval Status
  */
uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 80178ec:	b508      	push	{r3, lr}
  interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
  which indicates that the bus is stable again after the electrical debounce 
  caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
  */
  
  USB_OTG_ResetPort(pdev); 
 80178ee:	f7ff f87f 	bl	80169f0 <USB_OTG_ResetPort>
  return 0;
}
 80178f2:	2000      	movs	r0, #0
 80178f4:	bd08      	pop	{r3, pc}

080178f6 <HCD_IsDeviceConnected>:
  * @retval Device connection status. 1 -> connected and 0 -> disconnected
  * 
  */
uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
{
  return (pdev->host.ConnSts);
 80178f6:	f8d0 07f4 	ldr.w	r0, [r0, #2036]	; 0x7f4
}
 80178fa:	4770      	bx	lr

080178fc <HCD_GetCurrentFrame>:
  * @retval Frame number
  * 
  */
uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
 80178fc:	6943      	ldr	r3, [r0, #20]
 80178fe:	6898      	ldr	r0, [r3, #8]
}
 8017900:	b280      	uxth	r0, r0
 8017902:	4770      	bx	lr

08017904 <HCD_GetURB_State>:
  * @retval URB_STATE
  * 
  */
URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
{
  return pdev->host.URB_State[ch_num] ;
 8017904:	1841      	adds	r1, r0, r1
 8017906:	f891 087f 	ldrb.w	r0, [r1, #2175]	; 0x87f
}
 801790a:	4770      	bx	lr

0801790c <HCD_SubmitRequest>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 801790c:	b538      	push	{r3, r4, r5, lr}
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
  pdev->host.hc[hc_num].xfer_count = 0 ;
 801790e:	eb00 1241 	add.w	r2, r0, r1, lsl #5
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
 8017912:	1845      	adds	r5, r0, r1
 8017914:	2300      	movs	r3, #0
 8017916:	f885 387f 	strb.w	r3, [r5, #2175]	; 0x87f
  pdev->host.hc[hc_num].xfer_count = 0 ;
 801791a:	f8c2 38a4 	str.w	r3, [r2, #2212]	; 0x8a4
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 801791e:	460c      	mov	r4, r1
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
  pdev->host.hc[hc_num].xfer_count = 0 ;
  return USB_OTG_HC_StartXfer(pdev, hc_num);
 8017920:	f7ff f93c 	bl	8016b9c <USB_OTG_HC_StartXfer>
}
 8017924:	bd38      	pop	{r3, r4, r5, pc}
	...

08017928 <USB_OTG_USBH_handle_sof_ISR>:
*         Handles the start-of-frame interrupt in host mode.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b084      	sub	sp, #16
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  gintsts.d32 = 0;
 8017930:	f04f 0300 	mov.w	r3, #0
 8017934:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->SOF(pdev);
 8017936:	f240 0350 	movw	r3, #80	; 0x50
 801793a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	6878      	ldr	r0, [r7, #4]
 8017944:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.sofintr = 1;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	f043 0308 	orr.w	r3, r3, #8
 801794c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	68db      	ldr	r3, [r3, #12]
 8017952:	68fa      	ldr	r2, [r7, #12]
 8017954:	615a      	str	r2, [r3, #20]
  
  return 1;
 8017956:	f04f 0301 	mov.w	r3, #1
}
 801795a:	4618      	mov	r0, r3
 801795c:	f107 0710 	add.w	r7, r7, #16
 8017960:	46bd      	mov	sp, r7
 8017962:	bd80      	pop	{r7, pc}

08017964 <USB_OTG_USBH_handle_Disconnect_ISR>:
*         Handles disconnect event.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b084      	sub	sp, #16
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  
  gintsts.d32 = 0;
 801796c:	f04f 0300 	mov.w	r3, #0
 8017970:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->DevDisconnected(pdev);
 8017972:	f240 0350 	movw	r3, #80	; 0x50
 8017976:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	689b      	ldr	r3, [r3, #8]
 801797e:	6878      	ldr	r0, [r7, #4]
 8017980:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.disconnect = 1;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017988:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	68db      	ldr	r3, [r3, #12]
 801798e:	68fa      	ldr	r2, [r7, #12]
 8017990:	615a      	str	r2, [r3, #20]
  
  return 1;
 8017992:	f04f 0301 	mov.w	r3, #1
}
 8017996:	4618      	mov	r0, r3
 8017998:	f107 0710 	add.w	r7, r7, #16
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}

080179a0 <USB_OTG_USBH_handle_nptxfempty_ISR>:
*         Handles non periodic tx fifo empty.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b088      	sub	sp, #32
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
  uint16_t                     len_words , len; 
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	68db      	ldr	r3, [r3, #12]
 80179ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ae:	60fb      	str	r3, [r7, #12]
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 80179b0:	7c3b      	ldrb	r3, [r7, #16]
 80179b2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80179b6:	b2db      	uxtb	r3, r3
 80179b8:	687a      	ldr	r2, [r7, #4]
 80179ba:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80179be:	18d3      	adds	r3, r2, r3
 80179c0:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f103 0303 	add.w	r3, r3, #3
 80179ca:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80179ce:	83fb      	strh	r3, [r7, #30]
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 80179d0:	e0a4      	b.n	8017b1c <USB_OTG_USBH_handle_nptxfempty_ISR+0x17c>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
  {
    
    len = hnptxsts.b.nptxfspcavail * 4;
 80179d2:	89bb      	ldrh	r3, [r7, #12]
 80179d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80179d8:	83bb      	strh	r3, [r7, #28]
    
    if (len > pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len)
 80179da:	8bba      	ldrh	r2, [r7, #28]
 80179dc:	7c3b      	ldrb	r3, [r7, #16]
 80179de:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80179e2:	b2db      	uxtb	r3, r3
 80179e4:	6879      	ldr	r1, [r7, #4]
 80179e6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80179ea:	18cb      	adds	r3, r1, r3
 80179ec:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	429a      	cmp	r2, r3
 80179f4:	d91c      	bls.n	8017a30 <USB_OTG_USBH_handle_nptxfempty_ISR+0x90>
    {
      /* Last packet */
      len = pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len;
 80179f6:	7c3b      	ldrb	r3, [r7, #16]
 80179f8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80179fc:	b2db      	uxtb	r3, r3
 80179fe:	687a      	ldr	r2, [r7, #4]
 8017a00:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017a04:	18d3      	adds	r3, r2, r3
 8017a06:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	83bb      	strh	r3, [r7, #28]
      
      intmsk.d32 = 0;
 8017a0e:	f04f 0300 	mov.w	r3, #0
 8017a12:	61bb      	str	r3, [r7, #24]
      intmsk.b.nptxfempty = 1;
 8017a14:	69bb      	ldr	r3, [r7, #24]
 8017a16:	f043 0320 	orr.w	r3, r3, #32
 8017a1a:	61bb      	str	r3, [r7, #24]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	68db      	ldr	r3, [r3, #12]
 8017a20:	687a      	ldr	r2, [r7, #4]
 8017a22:	68d2      	ldr	r2, [r2, #12]
 8017a24:	6991      	ldr	r1, [r2, #24]
 8017a26:	69ba      	ldr	r2, [r7, #24]
 8017a28:	ea6f 0202 	mvn.w	r2, r2
 8017a2c:	400a      	ands	r2, r1
 8017a2e:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 8017a30:	7c3b      	ldrb	r3, [r7, #16]
 8017a32:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017a36:	b2db      	uxtb	r3, r3
 8017a38:	687a      	ldr	r2, [r7, #4]
 8017a3a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017a3e:	18d3      	adds	r3, r2, r3
 8017a40:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	f103 0303 	add.w	r3, r3, #3
 8017a4a:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8017a4e:	83fb      	strh	r3, [r7, #30]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff, hnptxsts.b.nptxqtop.chnum, len);
 8017a50:	7c3b      	ldrb	r3, [r7, #16]
 8017a52:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017a56:	b2db      	uxtb	r3, r3
 8017a58:	687a      	ldr	r2, [r7, #4]
 8017a5a:	f103 0315 	add.w	r3, r3, #21
 8017a5e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017a62:	18d3      	adds	r3, r2, r3
 8017a64:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8017a68:	6819      	ldr	r1, [r3, #0]
 8017a6a:	7c3b      	ldrb	r3, [r7, #16]
 8017a6c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017a70:	b2db      	uxtb	r3, r3
 8017a72:	461a      	mov	r2, r3
 8017a74:	8bbb      	ldrh	r3, [r7, #28]
 8017a76:	6878      	ldr	r0, [r7, #4]
 8017a78:	f7fe fe22 	bl	80166c0 <USB_OTG_WritePacket>
    
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff  += len;
 8017a7c:	7c3b      	ldrb	r3, [r7, #16]
 8017a7e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017a82:	b2db      	uxtb	r3, r3
 8017a84:	7c3a      	ldrb	r2, [r7, #16]
 8017a86:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8017a8a:	b2d2      	uxtb	r2, r2
 8017a8c:	6879      	ldr	r1, [r7, #4]
 8017a8e:	f102 0215 	add.w	r2, r2, #21
 8017a92:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8017a96:	188a      	adds	r2, r1, r2
 8017a98:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 8017a9c:	6811      	ldr	r1, [r2, #0]
 8017a9e:	8bba      	ldrh	r2, [r7, #28]
 8017aa0:	188a      	adds	r2, r1, r2
 8017aa2:	6879      	ldr	r1, [r7, #4]
 8017aa4:	f103 0315 	add.w	r3, r3, #21
 8017aa8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017aac:	18cb      	adds	r3, r1, r3
 8017aae:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8017ab2:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len   -= len;
 8017ab4:	7c3b      	ldrb	r3, [r7, #16]
 8017ab6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017aba:	b2db      	uxtb	r3, r3
 8017abc:	7c3a      	ldrb	r2, [r7, #16]
 8017abe:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8017ac2:	b2d2      	uxtb	r2, r2
 8017ac4:	6879      	ldr	r1, [r7, #4]
 8017ac6:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8017aca:	188a      	adds	r2, r1, r2
 8017acc:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 8017ad0:	6811      	ldr	r1, [r2, #0]
 8017ad2:	8bba      	ldrh	r2, [r7, #28]
 8017ad4:	1a8a      	subs	r2, r1, r2
 8017ad6:	6879      	ldr	r1, [r7, #4]
 8017ad8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017adc:	18cb      	adds	r3, r1, r3
 8017ade:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017ae2:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
 8017ae4:	7c3b      	ldrb	r3, [r7, #16]
 8017ae6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017aea:	b2db      	uxtb	r3, r3
 8017aec:	7c3a      	ldrb	r2, [r7, #16]
 8017aee:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8017af2:	b2d2      	uxtb	r2, r2
 8017af4:	6879      	ldr	r1, [r7, #4]
 8017af6:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8017afa:	188a      	adds	r2, r1, r2
 8017afc:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 8017b00:	6811      	ldr	r1, [r2, #0]
 8017b02:	8bba      	ldrh	r2, [r7, #28]
 8017b04:	188a      	adds	r2, r1, r2
 8017b06:	6879      	ldr	r1, [r7, #4]
 8017b08:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017b0c:	18cb      	adds	r3, r1, r3
 8017b0e:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8017b12:	601a      	str	r2, [r3, #0]
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	68db      	ldr	r3, [r3, #12]
 8017b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b1a:	60fb      	str	r3, [r7, #12]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8017b1c:	89bb      	ldrh	r3, [r7, #12]
 8017b1e:	8bfa      	ldrh	r2, [r7, #30]
 8017b20:	429a      	cmp	r2, r3
 8017b22:	d20d      	bcs.n	8017b40 <USB_OTG_USBH_handle_nptxfempty_ISR+0x1a0>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
 8017b24:	7c3b      	ldrb	r3, [r7, #16]
 8017b26:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017b2a:	b2db      	uxtb	r3, r3
 8017b2c:	687a      	ldr	r2, [r7, #4]
 8017b2e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017b32:	18d3      	adds	r3, r2, r3
 8017b34:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017b38:	681b      	ldr	r3, [r3, #0]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	f47f af49 	bne.w	80179d2 <USB_OTG_USBH_handle_nptxfempty_ISR+0x32>
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  }  
  
  return 1;
 8017b40:	f04f 0301 	mov.w	r3, #1
}
 8017b44:	4618      	mov	r0, r3
 8017b46:	f107 0720 	add.w	r7, r7, #32
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	bd80      	pop	{r7, pc}
 8017b4e:	bf00      	nop

08017b50 <USB_OTG_USBH_handle_ptxfempty_ISR>:
*         Handles periodic tx fifo empty
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b086      	sub	sp, #24
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HPTXSTS_TypeDef      hptxsts; 
  uint16_t                     len_words , len; 
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	695b      	ldr	r3, [r3, #20]
 8017b5c:	691b      	ldr	r3, [r3, #16]
 8017b5e:	60bb      	str	r3, [r7, #8]
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 8017b60:	7b3b      	ldrb	r3, [r7, #12]
 8017b62:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017b66:	b2db      	uxtb	r3, r3
 8017b68:	687a      	ldr	r2, [r7, #4]
 8017b6a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017b6e:	18d3      	adds	r3, r2, r3
 8017b70:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	f103 0303 	add.w	r3, r3, #3
 8017b7a:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8017b7e:	82fb      	strh	r3, [r7, #22]
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8017b80:	e0a4      	b.n	8017ccc <USB_OTG_USBH_handle_ptxfempty_ISR+0x17c>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
  {
    
    len = hptxsts.b.ptxfspcavail * 4;
 8017b82:	893b      	ldrh	r3, [r7, #8]
 8017b84:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017b88:	82bb      	strh	r3, [r7, #20]
    
    if (len > pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len)
 8017b8a:	8aba      	ldrh	r2, [r7, #20]
 8017b8c:	7b3b      	ldrb	r3, [r7, #12]
 8017b8e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017b92:	b2db      	uxtb	r3, r3
 8017b94:	6879      	ldr	r1, [r7, #4]
 8017b96:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017b9a:	18cb      	adds	r3, r1, r3
 8017b9c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	429a      	cmp	r2, r3
 8017ba4:	d91c      	bls.n	8017be0 <USB_OTG_USBH_handle_ptxfempty_ISR+0x90>
    {
      len = pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len;
 8017ba6:	7b3b      	ldrb	r3, [r7, #12]
 8017ba8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017bac:	b2db      	uxtb	r3, r3
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017bb4:	18d3      	adds	r3, r2, r3
 8017bb6:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	82bb      	strh	r3, [r7, #20]
      /* Last packet */
      intmsk.d32 = 0;
 8017bbe:	f04f 0300 	mov.w	r3, #0
 8017bc2:	613b      	str	r3, [r7, #16]
      intmsk.b.ptxfempty = 1;
 8017bc4:	693b      	ldr	r3, [r7, #16]
 8017bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017bca:	613b      	str	r3, [r7, #16]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	68db      	ldr	r3, [r3, #12]
 8017bd0:	687a      	ldr	r2, [r7, #4]
 8017bd2:	68d2      	ldr	r2, [r2, #12]
 8017bd4:	6991      	ldr	r1, [r2, #24]
 8017bd6:	693a      	ldr	r2, [r7, #16]
 8017bd8:	ea6f 0202 	mvn.w	r2, r2
 8017bdc:	400a      	ands	r2, r1
 8017bde:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 8017be0:	7b3b      	ldrb	r3, [r7, #12]
 8017be2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017be6:	b2db      	uxtb	r3, r3
 8017be8:	687a      	ldr	r2, [r7, #4]
 8017bea:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017bee:	18d3      	adds	r3, r2, r3
 8017bf0:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	f103 0303 	add.w	r3, r3, #3
 8017bfa:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8017bfe:	82fb      	strh	r3, [r7, #22]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff, hptxsts.b.ptxqtop.chnum, len);
 8017c00:	7b3b      	ldrb	r3, [r7, #12]
 8017c02:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017c06:	b2db      	uxtb	r3, r3
 8017c08:	687a      	ldr	r2, [r7, #4]
 8017c0a:	f103 0315 	add.w	r3, r3, #21
 8017c0e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017c12:	18d3      	adds	r3, r2, r3
 8017c14:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8017c18:	6819      	ldr	r1, [r3, #0]
 8017c1a:	7b3b      	ldrb	r3, [r7, #12]
 8017c1c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017c20:	b2db      	uxtb	r3, r3
 8017c22:	461a      	mov	r2, r3
 8017c24:	8abb      	ldrh	r3, [r7, #20]
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	f7fe fd4a 	bl	80166c0 <USB_OTG_WritePacket>
    
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff  += len;
 8017c2c:	7b3b      	ldrb	r3, [r7, #12]
 8017c2e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017c32:	b2db      	uxtb	r3, r3
 8017c34:	7b3a      	ldrb	r2, [r7, #12]
 8017c36:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8017c3a:	b2d2      	uxtb	r2, r2
 8017c3c:	6879      	ldr	r1, [r7, #4]
 8017c3e:	f102 0215 	add.w	r2, r2, #21
 8017c42:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8017c46:	188a      	adds	r2, r1, r2
 8017c48:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 8017c4c:	6811      	ldr	r1, [r2, #0]
 8017c4e:	8aba      	ldrh	r2, [r7, #20]
 8017c50:	188a      	adds	r2, r1, r2
 8017c52:	6879      	ldr	r1, [r7, #4]
 8017c54:	f103 0315 	add.w	r3, r3, #21
 8017c58:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017c5c:	18cb      	adds	r3, r1, r3
 8017c5e:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8017c62:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len   -= len;
 8017c64:	7b3b      	ldrb	r3, [r7, #12]
 8017c66:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017c6a:	b2db      	uxtb	r3, r3
 8017c6c:	7b3a      	ldrb	r2, [r7, #12]
 8017c6e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8017c72:	b2d2      	uxtb	r2, r2
 8017c74:	6879      	ldr	r1, [r7, #4]
 8017c76:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8017c7a:	188a      	adds	r2, r1, r2
 8017c7c:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 8017c80:	6811      	ldr	r1, [r2, #0]
 8017c82:	8aba      	ldrh	r2, [r7, #20]
 8017c84:	1a8a      	subs	r2, r1, r2
 8017c86:	6879      	ldr	r1, [r7, #4]
 8017c88:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017c8c:	18cb      	adds	r3, r1, r3
 8017c8e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017c92:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
 8017c94:	7b3b      	ldrb	r3, [r7, #12]
 8017c96:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017c9a:	b2db      	uxtb	r3, r3
 8017c9c:	7b3a      	ldrb	r2, [r7, #12]
 8017c9e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8017ca2:	b2d2      	uxtb	r2, r2
 8017ca4:	6879      	ldr	r1, [r7, #4]
 8017ca6:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8017caa:	188a      	adds	r2, r1, r2
 8017cac:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 8017cb0:	6811      	ldr	r1, [r2, #0]
 8017cb2:	8aba      	ldrh	r2, [r7, #20]
 8017cb4:	188a      	adds	r2, r1, r2
 8017cb6:	6879      	ldr	r1, [r7, #4]
 8017cb8:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017cbc:	18cb      	adds	r3, r1, r3
 8017cbe:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8017cc2:	601a      	str	r2, [r3, #0]
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	695b      	ldr	r3, [r3, #20]
 8017cc8:	691b      	ldr	r3, [r3, #16]
 8017cca:	60bb      	str	r3, [r7, #8]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8017ccc:	893b      	ldrh	r3, [r7, #8]
 8017cce:	8afa      	ldrh	r2, [r7, #22]
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d20d      	bcs.n	8017cf0 <USB_OTG_USBH_handle_ptxfempty_ISR+0x1a0>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
 8017cd4:	7b3b      	ldrb	r3, [r7, #12]
 8017cd6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8017cda:	b2db      	uxtb	r3, r3
 8017cdc:	687a      	ldr	r2, [r7, #4]
 8017cde:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017ce2:	18d3      	adds	r3, r2, r3
 8017ce4:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8017ce8:	681b      	ldr	r3, [r3, #0]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	f47f af49 	bne.w	8017b82 <USB_OTG_USBH_handle_ptxfempty_ISR+0x32>
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  }  
  
  return 1;
 8017cf0:	f04f 0301 	mov.w	r3, #1
}
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f107 0718 	add.w	r7, r7, #24
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	bd80      	pop	{r7, pc}
 8017cfe:	bf00      	nop

08017d00 <USB_OTG_USBH_handle_port_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b088      	sub	sp, #32
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  USB_OTG_HPRT0_TypeDef  hprt0_dup;
  USB_OTG_HCFG_TypeDef   hcfg;    
  uint32_t do_reset = 0;
 8017d08:	f04f 0300 	mov.w	r3, #0
 8017d0c:	61fb      	str	r3, [r7, #28]
  uint32_t retval = 0;
 8017d0e:	f04f 0300 	mov.w	r3, #0
 8017d12:	61bb      	str	r3, [r7, #24]
  
  hcfg.d32 = 0;
 8017d14:	f04f 0300 	mov.w	r3, #0
 8017d18:	60fb      	str	r3, [r7, #12]
  hprt0.d32 = 0;
 8017d1a:	f04f 0300 	mov.w	r3, #0
 8017d1e:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = 0;
 8017d20:	f04f 0300 	mov.w	r3, #0
 8017d24:	613b      	str	r3, [r7, #16]
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	613b      	str	r3, [r7, #16]
  
  /* Clear the interrupt bits in GINTSTS */
  
  hprt0_dup.b.prtena = 0;
 8017d3a:	693b      	ldr	r3, [r7, #16]
 8017d3c:	f36f 0382 	bfc	r3, #2, #1
 8017d40:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtconndet = 0;
 8017d42:	693b      	ldr	r3, [r7, #16]
 8017d44:	f36f 0341 	bfc	r3, #1, #1
 8017d48:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtenchng = 0;
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	f36f 03c3 	bfc	r3, #3, #1
 8017d50:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtovrcurrchng = 0;
 8017d52:	693b      	ldr	r3, [r7, #16]
 8017d54:	f36f 1345 	bfc	r3, #5, #1
 8017d58:	613b      	str	r3, [r7, #16]
  
  /* Port Connect Detected */
  if (hprt0.b.prtconndet)
 8017d5a:	7d3b      	ldrb	r3, [r7, #20]
 8017d5c:	f003 0302 	and.w	r3, r3, #2
 8017d60:	b2db      	uxtb	r3, r3
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d00f      	beq.n	8017d86 <USB_OTG_USBH_handle_port_ISR+0x86>
  {

    hprt0_dup.b.prtconndet = 1;
 8017d66:	693b      	ldr	r3, [r7, #16]
 8017d68:	f043 0302 	orr.w	r3, r3, #2
 8017d6c:	613b      	str	r3, [r7, #16]
    USBH_HCD_INT_fops->DevConnected(pdev);
 8017d6e:	f240 0350 	movw	r3, #80	; 0x50
 8017d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	6878      	ldr	r0, [r7, #4]
 8017d7c:	4798      	blx	r3
    retval |= 1;
 8017d7e:	69bb      	ldr	r3, [r7, #24]
 8017d80:	f043 0301 	orr.w	r3, r3, #1
 8017d84:	61bb      	str	r3, [r7, #24]
  }
  
  /* Port Enable Changed */
  if (hprt0.b.prtenchng)
 8017d86:	7d3b      	ldrb	r3, [r7, #20]
 8017d88:	f003 0308 	and.w	r3, r3, #8
 8017d8c:	b2db      	uxtb	r3, r3
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d058      	beq.n	8017e44 <USB_OTG_USBH_handle_port_ISR+0x144>
  {
    hprt0_dup.b.prtenchng = 1;
 8017d92:	693b      	ldr	r3, [r7, #16]
 8017d94:	f043 0308 	orr.w	r3, r3, #8
 8017d98:	613b      	str	r3, [r7, #16]
    
    if (hprt0.b.prtena == 1)
 8017d9a:	7d3b      	ldrb	r3, [r7, #20]
 8017d9c:	f003 0304 	and.w	r3, r3, #4
 8017da0:	b2db      	uxtb	r3, r3
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d04e      	beq.n	8017e44 <USB_OTG_USBH_handle_port_ISR+0x144>
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
 8017da6:	f240 0350 	movw	r3, #80	; 0x50
 8017daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	685b      	ldr	r3, [r3, #4]
 8017db2:	6878      	ldr	r0, [r7, #4]
 8017db4:	4798      	blx	r3
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 8017db6:	7dbb      	ldrb	r3, [r7, #22]
 8017db8:	f003 0306 	and.w	r3, r3, #6
 8017dbc:	b2db      	uxtb	r3, r3
 8017dbe:	2b04      	cmp	r3, #4
 8017dc0:	d005      	beq.n	8017dce <USB_OTG_USBH_handle_port_ISR+0xce>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
 8017dc2:	7dbb      	ldrb	r3, [r7, #22]
 8017dc4:	f003 0306 	and.w	r3, r3, #6
 8017dc8:	b2db      	uxtb	r3, r3
    if (hprt0.b.prtena == 1)
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 8017dca:	2b02      	cmp	r3, #2
 8017dcc:	d135      	bne.n	8017e3a <USB_OTG_USBH_handle_port_ISR+0x13a>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	695b      	ldr	r3, [r3, #20]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	60fb      	str	r3, [r7, #12]
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8017dd6:	7dbb      	ldrb	r3, [r7, #22]
 8017dd8:	f003 0306 	and.w	r3, r3, #6
 8017ddc:	b2db      	uxtb	r3, r3
 8017dde:	2b04      	cmp	r3, #4
 8017de0:	d117      	bne.n	8017e12 <USB_OTG_USBH_handle_port_ISR+0x112>
        {
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	695b      	ldr	r3, [r3, #20]
 8017de6:	f241 7270 	movw	r2, #6000	; 0x1770
 8017dea:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_6_MHZ)
 8017dec:	7b3b      	ldrb	r3, [r7, #12]
 8017dee:	f003 0303 	and.w	r3, r3, #3
 8017df2:	b2db      	uxtb	r3, r3
 8017df4:	2b02      	cmp	r3, #2
 8017df6:	d024      	beq.n	8017e42 <USB_OTG_USBH_handle_port_ISR+0x142>
          {
            if(pdev->cfg.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	7a1b      	ldrb	r3, [r3, #8]
 8017dfc:	2b02      	cmp	r3, #2
 8017dfe:	d104      	bne.n	8017e0a <USB_OTG_USBH_handle_port_ISR+0x10a>
            {
              USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
 8017e00:	6878      	ldr	r0, [r7, #4]
 8017e02:	f04f 0102 	mov.w	r1, #2
 8017e06:	f7fe fdbe 	bl	8016986 <USB_OTG_InitFSLSPClkSel>
            }
            do_reset = 1;
 8017e0a:	f04f 0301 	mov.w	r3, #1
 8017e0e:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8017e10:	e017      	b.n	8017e42 <USB_OTG_USBH_handle_port_ISR+0x142>
          }
        }
        else
        {
          
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	695b      	ldr	r3, [r3, #20]
 8017e16:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8017e1a:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_48_MHZ)
 8017e1c:	7b3b      	ldrb	r3, [r7, #12]
 8017e1e:	f003 0303 	and.w	r3, r3, #3
 8017e22:	b2db      	uxtb	r3, r3
 8017e24:	2b01      	cmp	r3, #1
 8017e26:	d00c      	beq.n	8017e42 <USB_OTG_USBH_handle_port_ISR+0x142>
          {
            USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f04f 0101 	mov.w	r1, #1
 8017e2e:	f7fe fdaa 	bl	8016986 <USB_OTG_InitFSLSPClkSel>
            do_reset = 1;
 8017e32:	f04f 0301 	mov.w	r3, #1
 8017e36:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8017e38:	e003      	b.n	8017e42 <USB_OTG_USBH_handle_port_ISR+0x142>
          }
        }
      }
      else
      {
        do_reset = 1;
 8017e3a:	f04f 0301 	mov.w	r3, #1
 8017e3e:	61fb      	str	r3, [r7, #28]
 8017e40:	e000      	b.n	8017e44 <USB_OTG_USBH_handle_port_ISR+0x144>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8017e42:	bf00      	nop
        do_reset = 1;
      }
    }
  }
  /* Overcurrent Change Interrupt */
  if (hprt0.b.prtovrcurrchng)
 8017e44:	7d3b      	ldrb	r3, [r7, #20]
 8017e46:	f003 0320 	and.w	r3, r3, #32
 8017e4a:	b2db      	uxtb	r3, r3
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d007      	beq.n	8017e60 <USB_OTG_USBH_handle_port_ISR+0x160>
  {
    hprt0_dup.b.prtovrcurrchng = 1;
 8017e50:	693b      	ldr	r3, [r7, #16]
 8017e52:	f043 0320 	orr.w	r3, r3, #32
 8017e56:	613b      	str	r3, [r7, #16]
    retval |= 1;
 8017e58:	69bb      	ldr	r3, [r7, #24]
 8017e5a:	f043 0301 	orr.w	r3, r3, #1
 8017e5e:	61bb      	str	r3, [r7, #24]
  }
  if (do_reset)
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d002      	beq.n	8017e6c <USB_OTG_USBH_handle_port_ISR+0x16c>
  {
    USB_OTG_ResetPort(pdev);
 8017e66:	6878      	ldr	r0, [r7, #4]
 8017e68:	f7fe fdc2 	bl	80169f0 <USB_OTG_ResetPort>
  }
  /* Clear Port Interrupts */
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017e72:	693a      	ldr	r2, [r7, #16]
 8017e74:	601a      	str	r2, [r3, #0]
  
  return retval;
 8017e76:	69bb      	ldr	r3, [r7, #24]
}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f107 0720 	add.w	r7, r7, #32
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}
 8017e82:	bf00      	nop

08017e84 <USB_OTG_USBH_handle_hc_n_Out_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b09a      	sub	sp, #104	; 0x68
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_HCINTn_TypeDef     hcint;
  USB_OTG_HCINTMSK_TypeDef  hcintmsk;
  USB_OTG_HC_REGS *hcreg;
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  
  hcreg = pdev->regs.HC_REGS[num];
 8017e8e:	687a      	ldr	r2, [r7, #4]
 8017e90:	683b      	ldr	r3, [r7, #0]
 8017e92:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017e96:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017e9a:	18d3      	adds	r3, r2, r3
 8017e9c:	689b      	ldr	r3, [r3, #8]
 8017e9e:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8017ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017ea2:	689b      	ldr	r3, [r3, #8]
 8017ea4:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8017ea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017ea8:	68db      	ldr	r3, [r3, #12]
 8017eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8017eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017eb0:	4013      	ands	r3, r2
 8017eb2:	663b      	str	r3, [r7, #96]	; 0x60
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8017eb4:	687a      	ldr	r2, [r7, #4]
 8017eb6:	683b      	ldr	r3, [r7, #0]
 8017eb8:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017ebc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017ec0:	18d3      	adds	r3, r2, r3
 8017ec2:	689b      	ldr	r3, [r3, #8]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	65bb      	str	r3, [r7, #88]	; 0x58
  
  if (hcint.b.ahberr)
 8017ec8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017ecc:	f003 0304 	and.w	r3, r3, #4
 8017ed0:	b2db      	uxtb	r3, r3
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d022      	beq.n	8017f1c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x98>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 8017ed6:	f04f 0300 	mov.w	r3, #0
 8017eda:	657b      	str	r3, [r7, #84]	; 0x54
 8017edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ede:	f043 0304 	orr.w	r3, r3, #4
 8017ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8017ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017ee8:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8017eea:	687a      	ldr	r2, [r7, #4]
 8017eec:	683b      	ldr	r3, [r7, #0]
 8017eee:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017ef2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017ef6:	18d3      	adds	r3, r2, r3
 8017ef8:	689b      	ldr	r3, [r3, #8]
 8017efa:	68db      	ldr	r3, [r3, #12]
 8017efc:	653b      	str	r3, [r7, #80]	; 0x50
 8017efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f00:	f043 0302 	orr.w	r3, r3, #2
 8017f04:	653b      	str	r3, [r7, #80]	; 0x50
 8017f06:	687a      	ldr	r2, [r7, #4]
 8017f08:	683b      	ldr	r3, [r7, #0]
 8017f0a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017f0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017f12:	18d3      	adds	r3, r2, r3
 8017f14:	689b      	ldr	r3, [r3, #8]
 8017f16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017f18:	60da      	str	r2, [r3, #12]
 8017f1a:	e28c      	b.n	8018436 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  } 
  else if (hcint.b.ack)
 8017f1c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017f20:	f003 0320 	and.w	r3, r3, #32
 8017f24:	b2db      	uxtb	r3, r3
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d00a      	beq.n	8017f40 <USB_OTG_USBH_handle_hc_n_Out_ISR+0xbc>
  {
    CLEAR_HC_INT(hcreg , ack);
 8017f2a:	f04f 0300 	mov.w	r3, #0
 8017f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f32:	f043 0320 	orr.w	r3, r3, #32
 8017f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f3c:	609a      	str	r2, [r3, #8]
 8017f3e:	e27a      	b.n	8018436 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.frmovrun)
 8017f40:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017f44:	f003 0302 	and.w	r3, r3, #2
 8017f48:	b2db      	uxtb	r3, r3
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d028      	beq.n	8017fa0 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x11c>
  {
    UNMASK_HOST_INT_CHH (num);
 8017f4e:	687a      	ldr	r2, [r7, #4]
 8017f50:	683b      	ldr	r3, [r7, #0]
 8017f52:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017f56:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017f5a:	18d3      	adds	r3, r2, r3
 8017f5c:	689b      	ldr	r3, [r3, #8]
 8017f5e:	68db      	ldr	r3, [r3, #12]
 8017f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8017f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f64:	f043 0302 	orr.w	r3, r3, #2
 8017f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8017f6a:	687a      	ldr	r2, [r7, #4]
 8017f6c:	683b      	ldr	r3, [r7, #0]
 8017f6e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017f72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017f76:	18d3      	adds	r3, r2, r3
 8017f78:	689b      	ldr	r3, [r3, #8]
 8017f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017f7c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8017f7e:	683b      	ldr	r3, [r7, #0]
 8017f80:	b2db      	uxtb	r3, r3
 8017f82:	6878      	ldr	r0, [r7, #4]
 8017f84:	4619      	mov	r1, r3
 8017f86:	f7fe fe93 	bl	8016cb0 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 8017f8a:	f04f 0300 	mov.w	r3, #0
 8017f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8017f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017f96:	647b      	str	r3, [r7, #68]	; 0x44
 8017f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f9c:	609a      	str	r2, [r3, #8]
 8017f9e:	e24a      	b.n	8018436 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.xfercompl)
 8017fa0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017fa4:	f003 0301 	and.w	r3, r3, #1
 8017fa8:	b2db      	uxtb	r3, r3
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d03a      	beq.n	8018024 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x1a0>
  {
    pdev->host.ErrCnt[num] = 0;
 8017fae:	687a      	ldr	r2, [r7, #4]
 8017fb0:	683b      	ldr	r3, [r7, #0]
 8017fb2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017fb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017fba:	18d3      	adds	r3, r2, r3
 8017fbc:	f04f 0200 	mov.w	r2, #0
 8017fc0:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8017fc2:	687a      	ldr	r2, [r7, #4]
 8017fc4:	683b      	ldr	r3, [r7, #0]
 8017fc6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017fca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017fce:	18d3      	adds	r3, r2, r3
 8017fd0:	689b      	ldr	r3, [r3, #8]
 8017fd2:	68db      	ldr	r3, [r3, #12]
 8017fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8017fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fd8:	f043 0302 	orr.w	r3, r3, #2
 8017fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8017fde:	687a      	ldr	r2, [r7, #4]
 8017fe0:	683b      	ldr	r3, [r7, #0]
 8017fe2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017fe6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017fea:	18d3      	adds	r3, r2, r3
 8017fec:	689b      	ldr	r3, [r3, #8]
 8017fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017ff0:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	b2db      	uxtb	r3, r3
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	4619      	mov	r1, r3
 8017ffa:	f7fe fe59 	bl	8016cb0 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xfercompl);
 8017ffe:	f04f 0300 	mov.w	r3, #0
 8018002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018006:	f043 0301 	orr.w	r3, r3, #1
 801800a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801800c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801800e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018010:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XFRC;            
 8018012:	687a      	ldr	r2, [r7, #4]
 8018014:	683b      	ldr	r3, [r7, #0]
 8018016:	18d3      	adds	r3, r2, r3
 8018018:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801801c:	f04f 0201 	mov.w	r2, #1
 8018020:	721a      	strb	r2, [r3, #8]
 8018022:	e208      	b.n	8018436 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.stall)
 8018024:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8018028:	f003 0308 	and.w	r3, r3, #8
 801802c:	b2db      	uxtb	r3, r3
 801802e:	2b00      	cmp	r3, #0
 8018030:	d030      	beq.n	8018094 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x210>
  {
    CLEAR_HC_INT(hcreg , stall);
 8018032:	f04f 0300 	mov.w	r3, #0
 8018036:	63bb      	str	r3, [r7, #56]	; 0x38
 8018038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801803a:	f043 0308 	orr.w	r3, r3, #8
 801803e:	63bb      	str	r3, [r7, #56]	; 0x38
 8018040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018044:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8018046:	687a      	ldr	r2, [r7, #4]
 8018048:	683b      	ldr	r3, [r7, #0]
 801804a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801804e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018052:	18d3      	adds	r3, r2, r3
 8018054:	689b      	ldr	r3, [r3, #8]
 8018056:	68db      	ldr	r3, [r3, #12]
 8018058:	637b      	str	r3, [r7, #52]	; 0x34
 801805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801805c:	f043 0302 	orr.w	r3, r3, #2
 8018060:	637b      	str	r3, [r7, #52]	; 0x34
 8018062:	687a      	ldr	r2, [r7, #4]
 8018064:	683b      	ldr	r3, [r7, #0]
 8018066:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801806a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801806e:	18d3      	adds	r3, r2, r3
 8018070:	689b      	ldr	r3, [r3, #8]
 8018072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018074:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8018076:	683b      	ldr	r3, [r7, #0]
 8018078:	b2db      	uxtb	r3, r3
 801807a:	6878      	ldr	r0, [r7, #4]
 801807c:	4619      	mov	r1, r3
 801807e:	f7fe fe17 	bl	8016cb0 <USB_OTG_HC_Halt>
    pdev->host.HC_Status[num] = HC_STALL;      
 8018082:	687a      	ldr	r2, [r7, #4]
 8018084:	683b      	ldr	r3, [r7, #0]
 8018086:	18d3      	adds	r3, r2, r3
 8018088:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801808c:	f04f 0205 	mov.w	r2, #5
 8018090:	721a      	strb	r2, [r3, #8]
 8018092:	e1d0      	b.n	8018436 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.nak)
 8018094:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8018098:	f003 0310 	and.w	r3, r3, #16
 801809c:	b2db      	uxtb	r3, r3
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d03a      	beq.n	8018118 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x294>
  {
    pdev->host.ErrCnt[num] = 0;
 80180a2:	687a      	ldr	r2, [r7, #4]
 80180a4:	683b      	ldr	r3, [r7, #0]
 80180a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80180aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80180ae:	18d3      	adds	r3, r2, r3
 80180b0:	f04f 0200 	mov.w	r2, #0
 80180b4:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 80180b6:	687a      	ldr	r2, [r7, #4]
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80180be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80180c2:	18d3      	adds	r3, r2, r3
 80180c4:	689b      	ldr	r3, [r3, #8]
 80180c6:	68db      	ldr	r3, [r3, #12]
 80180c8:	633b      	str	r3, [r7, #48]	; 0x30
 80180ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180cc:	f043 0302 	orr.w	r3, r3, #2
 80180d0:	633b      	str	r3, [r7, #48]	; 0x30
 80180d2:	687a      	ldr	r2, [r7, #4]
 80180d4:	683b      	ldr	r3, [r7, #0]
 80180d6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80180da:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80180de:	18d3      	adds	r3, r2, r3
 80180e0:	689b      	ldr	r3, [r3, #8]
 80180e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180e4:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80180e6:	683b      	ldr	r3, [r7, #0]
 80180e8:	b2db      	uxtb	r3, r3
 80180ea:	6878      	ldr	r0, [r7, #4]
 80180ec:	4619      	mov	r1, r3
 80180ee:	f7fe fddf 	bl	8016cb0 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);
 80180f2:	f04f 0300 	mov.w	r3, #0
 80180f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80180f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180fa:	f043 0310 	orr.w	r3, r3, #16
 80180fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018104:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NAK;      
 8018106:	687a      	ldr	r2, [r7, #4]
 8018108:	683b      	ldr	r3, [r7, #0]
 801810a:	18d3      	adds	r3, r2, r3
 801810c:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018110:	f04f 0203 	mov.w	r2, #3
 8018114:	721a      	strb	r2, [r3, #8]
 8018116:	e18e      	b.n	8018436 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.xacterr)
 8018118:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801811c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018120:	b2db      	uxtb	r3, r3
 8018122:	2b00      	cmp	r3, #0
 8018124:	d042      	beq.n	80181ac <USB_OTG_USBH_handle_hc_n_Out_ISR+0x328>
  {
    UNMASK_HOST_INT_CHH (num);
 8018126:	687a      	ldr	r2, [r7, #4]
 8018128:	683b      	ldr	r3, [r7, #0]
 801812a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801812e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018132:	18d3      	adds	r3, r2, r3
 8018134:	689b      	ldr	r3, [r3, #8]
 8018136:	68db      	ldr	r3, [r3, #12]
 8018138:	62bb      	str	r3, [r7, #40]	; 0x28
 801813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801813c:	f043 0302 	orr.w	r3, r3, #2
 8018140:	62bb      	str	r3, [r7, #40]	; 0x28
 8018142:	687a      	ldr	r2, [r7, #4]
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801814a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801814e:	18d3      	adds	r3, r2, r3
 8018150:	689b      	ldr	r3, [r3, #8]
 8018152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018154:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8018156:	683b      	ldr	r3, [r7, #0]
 8018158:	b2db      	uxtb	r3, r3
 801815a:	6878      	ldr	r0, [r7, #4]
 801815c:	4619      	mov	r1, r3
 801815e:	f7fe fda7 	bl	8016cb0 <USB_OTG_HC_Halt>
    pdev->host.ErrCnt[num] ++;
 8018162:	687a      	ldr	r2, [r7, #4]
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801816a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801816e:	18d3      	adds	r3, r2, r3
 8018170:	689b      	ldr	r3, [r3, #8]
 8018172:	f103 0201 	add.w	r2, r3, #1
 8018176:	6879      	ldr	r1, [r7, #4]
 8018178:	683b      	ldr	r3, [r7, #0]
 801817a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801817e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018182:	18cb      	adds	r3, r1, r3
 8018184:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XACTERR;
 8018186:	687a      	ldr	r2, [r7, #4]
 8018188:	683b      	ldr	r3, [r7, #0]
 801818a:	18d3      	adds	r3, r2, r3
 801818c:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018190:	f04f 0206 	mov.w	r2, #6
 8018194:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , xacterr);
 8018196:	f04f 0300 	mov.w	r3, #0
 801819a:	627b      	str	r3, [r7, #36]	; 0x24
 801819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801819e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80181a2:	627b      	str	r3, [r7, #36]	; 0x24
 80181a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80181a8:	609a      	str	r2, [r3, #8]
 80181aa:	e144      	b.n	8018436 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.nyet)
 80181ac:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80181b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181b4:	b2db      	uxtb	r3, r3
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d03a      	beq.n	8018230 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x3ac>
  {
    pdev->host.ErrCnt[num] = 0;
 80181ba:	687a      	ldr	r2, [r7, #4]
 80181bc:	683b      	ldr	r3, [r7, #0]
 80181be:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80181c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80181c6:	18d3      	adds	r3, r2, r3
 80181c8:	f04f 0200 	mov.w	r2, #0
 80181cc:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 80181ce:	687a      	ldr	r2, [r7, #4]
 80181d0:	683b      	ldr	r3, [r7, #0]
 80181d2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80181d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80181da:	18d3      	adds	r3, r2, r3
 80181dc:	689b      	ldr	r3, [r3, #8]
 80181de:	68db      	ldr	r3, [r3, #12]
 80181e0:	623b      	str	r3, [r7, #32]
 80181e2:	6a3b      	ldr	r3, [r7, #32]
 80181e4:	f043 0302 	orr.w	r3, r3, #2
 80181e8:	623b      	str	r3, [r7, #32]
 80181ea:	687a      	ldr	r2, [r7, #4]
 80181ec:	683b      	ldr	r3, [r7, #0]
 80181ee:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80181f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80181f6:	18d3      	adds	r3, r2, r3
 80181f8:	689b      	ldr	r3, [r3, #8]
 80181fa:	6a3a      	ldr	r2, [r7, #32]
 80181fc:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	b2db      	uxtb	r3, r3
 8018202:	6878      	ldr	r0, [r7, #4]
 8018204:	4619      	mov	r1, r3
 8018206:	f7fe fd53 	bl	8016cb0 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nyet);
 801820a:	f04f 0300 	mov.w	r3, #0
 801820e:	61fb      	str	r3, [r7, #28]
 8018210:	69fb      	ldr	r3, [r7, #28]
 8018212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018216:	61fb      	str	r3, [r7, #28]
 8018218:	69fa      	ldr	r2, [r7, #28]
 801821a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801821c:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NYET;    
 801821e:	687a      	ldr	r2, [r7, #4]
 8018220:	683b      	ldr	r3, [r7, #0]
 8018222:	18d3      	adds	r3, r2, r3
 8018224:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018228:	f04f 0204 	mov.w	r2, #4
 801822c:	721a      	strb	r2, [r3, #8]
 801822e:	e102      	b.n	8018436 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.datatglerr)
 8018230:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8018234:	f003 0304 	and.w	r3, r3, #4
 8018238:	b2db      	uxtb	r3, r3
 801823a:	2b00      	cmp	r3, #0
 801823c:	d03a      	beq.n	80182b4 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x430>
  {
    
    UNMASK_HOST_INT_CHH (num);
 801823e:	687a      	ldr	r2, [r7, #4]
 8018240:	683b      	ldr	r3, [r7, #0]
 8018242:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018246:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801824a:	18d3      	adds	r3, r2, r3
 801824c:	689b      	ldr	r3, [r3, #8]
 801824e:	68db      	ldr	r3, [r3, #12]
 8018250:	61bb      	str	r3, [r7, #24]
 8018252:	69bb      	ldr	r3, [r7, #24]
 8018254:	f043 0302 	orr.w	r3, r3, #2
 8018258:	61bb      	str	r3, [r7, #24]
 801825a:	687a      	ldr	r2, [r7, #4]
 801825c:	683b      	ldr	r3, [r7, #0]
 801825e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018262:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018266:	18d3      	adds	r3, r2, r3
 8018268:	689b      	ldr	r3, [r3, #8]
 801826a:	69ba      	ldr	r2, [r7, #24]
 801826c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801826e:	683b      	ldr	r3, [r7, #0]
 8018270:	b2db      	uxtb	r3, r3
 8018272:	6878      	ldr	r0, [r7, #4]
 8018274:	4619      	mov	r1, r3
 8018276:	f7fe fd1b 	bl	8016cb0 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 801827a:	f04f 0300 	mov.w	r3, #0
 801827e:	617b      	str	r3, [r7, #20]
 8018280:	697b      	ldr	r3, [r7, #20]
 8018282:	f043 0310 	orr.w	r3, r3, #16
 8018286:	617b      	str	r3, [r7, #20]
 8018288:	697a      	ldr	r2, [r7, #20]
 801828a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801828c:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR;
 801828e:	687a      	ldr	r2, [r7, #4]
 8018290:	683b      	ldr	r3, [r7, #0]
 8018292:	18d3      	adds	r3, r2, r3
 8018294:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018298:	f04f 0208 	mov.w	r2, #8
 801829c:	721a      	strb	r2, [r3, #8]
    
    CLEAR_HC_INT(hcreg , datatglerr);
 801829e:	f04f 0300 	mov.w	r3, #0
 80182a2:	613b      	str	r3, [r7, #16]
 80182a4:	693b      	ldr	r3, [r7, #16]
 80182a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80182aa:	613b      	str	r3, [r7, #16]
 80182ac:	693a      	ldr	r2, [r7, #16]
 80182ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80182b0:	609a      	str	r2, [r3, #8]
 80182b2:	e0c0      	b.n	8018436 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }  
  else if (hcint.b.chhltd)
 80182b4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80182b8:	f003 0302 	and.w	r3, r3, #2
 80182bc:	b2db      	uxtb	r3, r3
 80182be:	2b00      	cmp	r3, #0
 80182c0:	f000 80b9 	beq.w	8018436 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  {
    MASK_HOST_INT_CHH (num);
 80182c4:	687a      	ldr	r2, [r7, #4]
 80182c6:	683b      	ldr	r3, [r7, #0]
 80182c8:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80182cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80182d0:	18d3      	adds	r3, r2, r3
 80182d2:	689b      	ldr	r3, [r3, #8]
 80182d4:	68db      	ldr	r3, [r3, #12]
 80182d6:	60fb      	str	r3, [r7, #12]
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	f36f 0341 	bfc	r3, #1, #1
 80182de:	60fb      	str	r3, [r7, #12]
 80182e0:	687a      	ldr	r2, [r7, #4]
 80182e2:	683b      	ldr	r3, [r7, #0]
 80182e4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80182e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80182ec:	18d3      	adds	r3, r2, r3
 80182ee:	689b      	ldr	r3, [r3, #8]
 80182f0:	68fa      	ldr	r2, [r7, #12]
 80182f2:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 80182f4:	687a      	ldr	r2, [r7, #4]
 80182f6:	683b      	ldr	r3, [r7, #0]
 80182f8:	18d3      	adds	r3, r2, r3
 80182fa:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80182fe:	7a1b      	ldrb	r3, [r3, #8]
 8018300:	b2db      	uxtb	r3, r3
 8018302:	2b01      	cmp	r3, #1
 8018304:	d122      	bne.n	801834c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4c8>
    {
      pdev->host.URB_State[num] = URB_DONE;  
 8018306:	687a      	ldr	r2, [r7, #4]
 8018308:	683b      	ldr	r3, [r7, #0]
 801830a:	18d3      	adds	r3, r2, r3
 801830c:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018310:	f04f 0201 	mov.w	r2, #1
 8018314:	71da      	strb	r2, [r3, #7]
      
      if (hcchar.b.eptype == EP_TYPE_BULK)
 8018316:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801831a:	f003 030c 	and.w	r3, r3, #12
 801831e:	b2db      	uxtb	r3, r3
 8018320:	2b08      	cmp	r3, #8
 8018322:	d17e      	bne.n	8018422 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      {
        pdev->host.hc[num].toggle_out ^= 1; 
 8018324:	687a      	ldr	r2, [r7, #4]
 8018326:	683b      	ldr	r3, [r7, #0]
 8018328:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801832c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018330:	18d3      	adds	r3, r2, r3
 8018332:	7a5b      	ldrb	r3, [r3, #9]
 8018334:	f083 0301 	eor.w	r3, r3, #1
 8018338:	b2da      	uxtb	r2, r3
 801833a:	6879      	ldr	r1, [r7, #4]
 801833c:	683b      	ldr	r3, [r7, #0]
 801833e:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8018342:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018346:	18cb      	adds	r3, r1, r3
 8018348:	725a      	strb	r2, [r3, #9]
 801834a:	e06a      	b.n	8018422 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      }
    }
    else if(pdev->host.HC_Status[num] == HC_NAK)
 801834c:	687a      	ldr	r2, [r7, #4]
 801834e:	683b      	ldr	r3, [r7, #0]
 8018350:	18d3      	adds	r3, r2, r3
 8018352:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018356:	7a1b      	ldrb	r3, [r3, #8]
 8018358:	b2db      	uxtb	r3, r3
 801835a:	2b03      	cmp	r3, #3
 801835c:	d108      	bne.n	8018370 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4ec>
    {
      pdev->host.URB_State[num] = URB_NOTREADY;      
 801835e:	687a      	ldr	r2, [r7, #4]
 8018360:	683b      	ldr	r3, [r7, #0]
 8018362:	18d3      	adds	r3, r2, r3
 8018364:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018368:	f04f 0202 	mov.w	r2, #2
 801836c:	71da      	strb	r2, [r3, #7]
 801836e:	e058      	b.n	8018422 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }    
    else if(pdev->host.HC_Status[num] == HC_NYET)
 8018370:	687a      	ldr	r2, [r7, #4]
 8018372:	683b      	ldr	r3, [r7, #0]
 8018374:	18d3      	adds	r3, r2, r3
 8018376:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801837a:	7a1b      	ldrb	r3, [r3, #8]
 801837c:	b2db      	uxtb	r3, r3
 801837e:	2b04      	cmp	r3, #4
 8018380:	d118      	bne.n	80183b4 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x530>
    {
      if(pdev->host.hc[num].do_ping == 1)
 8018382:	687a      	ldr	r2, [r7, #4]
 8018384:	683b      	ldr	r3, [r7, #0]
 8018386:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801838a:	18d3      	adds	r3, r2, r3
 801838c:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8018390:	7b1b      	ldrb	r3, [r3, #12]
 8018392:	2b01      	cmp	r3, #1
 8018394:	d105      	bne.n	80183a2 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x51e>
      {
        USB_OTG_HC_DoPing(pdev, num);
 8018396:	683b      	ldr	r3, [r7, #0]
 8018398:	b2db      	uxtb	r3, r3
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	4619      	mov	r1, r3
 801839e:	f7fe fca4 	bl	8016cea <USB_OTG_HC_DoPing>
      }
      pdev->host.URB_State[num] = URB_NOTREADY;      
 80183a2:	687a      	ldr	r2, [r7, #4]
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	18d3      	adds	r3, r2, r3
 80183a8:	f603 0378 	addw	r3, r3, #2168	; 0x878
 80183ac:	f04f 0202 	mov.w	r2, #2
 80183b0:	71da      	strb	r2, [r3, #7]
 80183b2:	e036      	b.n	8018422 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }      
    else if(pdev->host.HC_Status[num] == HC_STALL)
 80183b4:	687a      	ldr	r2, [r7, #4]
 80183b6:	683b      	ldr	r3, [r7, #0]
 80183b8:	18d3      	adds	r3, r2, r3
 80183ba:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80183be:	7a1b      	ldrb	r3, [r3, #8]
 80183c0:	b2db      	uxtb	r3, r3
 80183c2:	2b05      	cmp	r3, #5
 80183c4:	d108      	bne.n	80183d8 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x554>
    {
      pdev->host.URB_State[num] = URB_STALL;      
 80183c6:	687a      	ldr	r2, [r7, #4]
 80183c8:	683b      	ldr	r3, [r7, #0]
 80183ca:	18d3      	adds	r3, r2, r3
 80183cc:	f603 0378 	addw	r3, r3, #2168	; 0x878
 80183d0:	f04f 0204 	mov.w	r2, #4
 80183d4:	71da      	strb	r2, [r3, #7]
 80183d6:	e024      	b.n	8018422 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }  
    else if(pdev->host.HC_Status[num] == HC_XACTERR)
 80183d8:	687a      	ldr	r2, [r7, #4]
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	18d3      	adds	r3, r2, r3
 80183de:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80183e2:	7a1b      	ldrb	r3, [r3, #8]
 80183e4:	b2db      	uxtb	r3, r3
 80183e6:	2b06      	cmp	r3, #6
 80183e8:	d11b      	bne.n	8018422 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    {
      if (pdev->host.ErrCnt[num] == 3)
 80183ea:	687a      	ldr	r2, [r7, #4]
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80183f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80183f6:	18d3      	adds	r3, r2, r3
 80183f8:	689b      	ldr	r3, [r3, #8]
 80183fa:	2b03      	cmp	r3, #3
 80183fc:	d111      	bne.n	8018422 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      {
        pdev->host.URB_State[num] = URB_ERROR;  
 80183fe:	687a      	ldr	r2, [r7, #4]
 8018400:	683b      	ldr	r3, [r7, #0]
 8018402:	18d3      	adds	r3, r2, r3
 8018404:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018408:	f04f 0203 	mov.w	r2, #3
 801840c:	71da      	strb	r2, [r3, #7]
        pdev->host.ErrCnt[num] = 0;
 801840e:	687a      	ldr	r2, [r7, #4]
 8018410:	683b      	ldr	r3, [r7, #0]
 8018412:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018416:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801841a:	18d3      	adds	r3, r2, r3
 801841c:	f04f 0200 	mov.w	r2, #0
 8018420:	609a      	str	r2, [r3, #8]
      }
    }
    CLEAR_HC_INT(hcreg , chhltd);    
 8018422:	f04f 0300 	mov.w	r3, #0
 8018426:	60bb      	str	r3, [r7, #8]
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	f043 0302 	orr.w	r3, r3, #2
 801842e:	60bb      	str	r3, [r7, #8]
 8018430:	68ba      	ldr	r2, [r7, #8]
 8018432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018434:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 8018436:	f04f 0301 	mov.w	r3, #1
}
 801843a:	4618      	mov	r0, r3
 801843c:	f107 0768 	add.w	r7, r7, #104	; 0x68
 8018440:	46bd      	mov	sp, r7
 8018442:	bd80      	pop	{r7, pc}

08018444 <USB_OTG_USBH_handle_hc_n_In_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8018444:	b580      	push	{r7, lr}
 8018446:	b09c      	sub	sp, #112	; 0x70
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
 801844c:	6039      	str	r1, [r7, #0]
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HC_REGS *hcreg;
  
  
  hcreg = pdev->regs.HC_REGS[num];
 801844e:	687a      	ldr	r2, [r7, #4]
 8018450:	683b      	ldr	r3, [r7, #0]
 8018452:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018456:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801845a:	18d3      	adds	r3, r2, r3
 801845c:	689b      	ldr	r3, [r3, #8]
 801845e:	66fb      	str	r3, [r7, #108]	; 0x6c
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8018460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018462:	689b      	ldr	r3, [r3, #8]
 8018464:	66bb      	str	r3, [r7, #104]	; 0x68
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8018466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018468:	68db      	ldr	r3, [r3, #12]
 801846a:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 801846c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801846e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018470:	4013      	ands	r3, r2
 8018472:	66bb      	str	r3, [r7, #104]	; 0x68
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8018474:	687a      	ldr	r2, [r7, #4]
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801847c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018480:	18d3      	adds	r3, r2, r3
 8018482:	689b      	ldr	r3, [r3, #8]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = 0;
 8018488:	f04f 0300 	mov.w	r3, #0
 801848c:	667b      	str	r3, [r7, #100]	; 0x64
  
  
  if (hcint.b.ahberr)
 801848e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8018492:	f003 0304 	and.w	r3, r3, #4
 8018496:	b2db      	uxtb	r3, r3
 8018498:	2b00      	cmp	r3, #0
 801849a:	d022      	beq.n	80184e2 <USB_OTG_USBH_handle_hc_n_In_ISR+0x9e>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 801849c:	f04f 0300 	mov.w	r3, #0
 80184a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80184a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80184a4:	f043 0304 	orr.w	r3, r3, #4
 80184a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80184aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80184ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80184ae:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 80184b0:	687a      	ldr	r2, [r7, #4]
 80184b2:	683b      	ldr	r3, [r7, #0]
 80184b4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80184b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80184bc:	18d3      	adds	r3, r2, r3
 80184be:	689b      	ldr	r3, [r3, #8]
 80184c0:	68db      	ldr	r3, [r3, #12]
 80184c2:	657b      	str	r3, [r7, #84]	; 0x54
 80184c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80184c6:	f043 0302 	orr.w	r3, r3, #2
 80184ca:	657b      	str	r3, [r7, #84]	; 0x54
 80184cc:	687a      	ldr	r2, [r7, #4]
 80184ce:	683b      	ldr	r3, [r7, #0]
 80184d0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80184d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80184d8:	18d3      	adds	r3, r2, r3
 80184da:	689b      	ldr	r3, [r3, #8]
 80184dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80184de:	60da      	str	r2, [r3, #12]
 80184e0:	e098      	b.n	8018614 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }  
  else if (hcint.b.ack)
 80184e2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80184e6:	f003 0320 	and.w	r3, r3, #32
 80184ea:	b2db      	uxtb	r3, r3
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d00a      	beq.n	8018506 <USB_OTG_USBH_handle_hc_n_In_ISR+0xc2>
  {
    CLEAR_HC_INT(hcreg ,ack);
 80184f0:	f04f 0300 	mov.w	r3, #0
 80184f4:	653b      	str	r3, [r7, #80]	; 0x50
 80184f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80184f8:	f043 0320 	orr.w	r3, r3, #32
 80184fc:	653b      	str	r3, [r7, #80]	; 0x50
 80184fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018502:	609a      	str	r2, [r3, #8]
 8018504:	e086      	b.n	8018614 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  
  else if (hcint.b.stall)  
 8018506:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801850a:	f003 0308 	and.w	r3, r3, #8
 801850e:	b2db      	uxtb	r3, r3
 8018510:	2b00      	cmp	r3, #0
 8018512:	d03e      	beq.n	8018592 <USB_OTG_USBH_handle_hc_n_In_ISR+0x14e>
  {
    UNMASK_HOST_INT_CHH (num);
 8018514:	687a      	ldr	r2, [r7, #4]
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801851c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018520:	18d3      	adds	r3, r2, r3
 8018522:	689b      	ldr	r3, [r3, #8]
 8018524:	68db      	ldr	r3, [r3, #12]
 8018526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801852a:	f043 0302 	orr.w	r3, r3, #2
 801852e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018530:	687a      	ldr	r2, [r7, #4]
 8018532:	683b      	ldr	r3, [r7, #0]
 8018534:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018538:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801853c:	18d3      	adds	r3, r2, r3
 801853e:	689b      	ldr	r3, [r3, #8]
 8018540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018542:	60da      	str	r2, [r3, #12]
    pdev->host.HC_Status[num] = HC_STALL; 
 8018544:	687a      	ldr	r2, [r7, #4]
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	18d3      	adds	r3, r2, r3
 801854a:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801854e:	f04f 0205 	mov.w	r2, #5
 8018552:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
 8018554:	f04f 0300 	mov.w	r3, #0
 8018558:	64bb      	str	r3, [r7, #72]	; 0x48
 801855a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801855c:	f043 0310 	orr.w	r3, r3, #16
 8018560:	64bb      	str	r3, [r7, #72]	; 0x48
 8018562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018566:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
 8018568:	f04f 0300 	mov.w	r3, #0
 801856c:	647b      	str	r3, [r7, #68]	; 0x44
 801856e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018570:	f043 0308 	orr.w	r3, r3, #8
 8018574:	647b      	str	r3, [r7, #68]	; 0x44
 8018576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801857a:	609a      	str	r2, [r3, #8]
    hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
 801857c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801857e:	f36f 1304 	bfc	r3, #4, #1
 8018582:	66bb      	str	r3, [r7, #104]	; 0x68
                                  else, the pdev->host.HC_Status = HC_STALL
    will be overwritten by 'nak' in code below */
    USB_OTG_HC_Halt(pdev, num);    
 8018584:	683b      	ldr	r3, [r7, #0]
 8018586:	b2db      	uxtb	r3, r3
 8018588:	6878      	ldr	r0, [r7, #4]
 801858a:	4619      	mov	r1, r3
 801858c:	f7fe fb90 	bl	8016cb0 <USB_OTG_HC_Halt>
 8018590:	e040      	b.n	8018614 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  else if (hcint.b.datatglerr)
 8018592:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8018596:	f003 0304 	and.w	r3, r3, #4
 801859a:	b2db      	uxtb	r3, r3
 801859c:	2b00      	cmp	r3, #0
 801859e:	d039      	beq.n	8018614 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  {
    
    UNMASK_HOST_INT_CHH (num);
 80185a0:	687a      	ldr	r2, [r7, #4]
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80185a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80185ac:	18d3      	adds	r3, r2, r3
 80185ae:	689b      	ldr	r3, [r3, #8]
 80185b0:	68db      	ldr	r3, [r3, #12]
 80185b2:	643b      	str	r3, [r7, #64]	; 0x40
 80185b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185b6:	f043 0302 	orr.w	r3, r3, #2
 80185ba:	643b      	str	r3, [r7, #64]	; 0x40
 80185bc:	687a      	ldr	r2, [r7, #4]
 80185be:	683b      	ldr	r3, [r7, #0]
 80185c0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80185c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80185c8:	18d3      	adds	r3, r2, r3
 80185ca:	689b      	ldr	r3, [r3, #8]
 80185cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80185ce:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80185d0:	683b      	ldr	r3, [r7, #0]
 80185d2:	b2db      	uxtb	r3, r3
 80185d4:	6878      	ldr	r0, [r7, #4]
 80185d6:	4619      	mov	r1, r3
 80185d8:	f7fe fb6a 	bl	8016cb0 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 80185dc:	f04f 0300 	mov.w	r3, #0
 80185e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80185e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185e4:	f043 0310 	orr.w	r3, r3, #16
 80185e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80185ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80185ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185ee:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR; 
 80185f0:	687a      	ldr	r2, [r7, #4]
 80185f2:	683b      	ldr	r3, [r7, #0]
 80185f4:	18d3      	adds	r3, r2, r3
 80185f6:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80185fa:	f04f 0208 	mov.w	r2, #8
 80185fe:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , datatglerr);
 8018600:	f04f 0300 	mov.w	r3, #0
 8018604:	63bb      	str	r3, [r7, #56]	; 0x38
 8018606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018608:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801860c:	63bb      	str	r3, [r7, #56]	; 0x38
 801860e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018612:	609a      	str	r2, [r3, #8]
  }    
  
  if (hcint.b.frmovrun)
 8018614:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8018618:	f003 0302 	and.w	r3, r3, #2
 801861c:	b2db      	uxtb	r3, r3
 801861e:	2b00      	cmp	r3, #0
 8018620:	d028      	beq.n	8018674 <USB_OTG_USBH_handle_hc_n_In_ISR+0x230>
  {
    UNMASK_HOST_INT_CHH (num);
 8018622:	687a      	ldr	r2, [r7, #4]
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801862a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801862e:	18d3      	adds	r3, r2, r3
 8018630:	689b      	ldr	r3, [r3, #8]
 8018632:	68db      	ldr	r3, [r3, #12]
 8018634:	637b      	str	r3, [r7, #52]	; 0x34
 8018636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018638:	f043 0302 	orr.w	r3, r3, #2
 801863c:	637b      	str	r3, [r7, #52]	; 0x34
 801863e:	687a      	ldr	r2, [r7, #4]
 8018640:	683b      	ldr	r3, [r7, #0]
 8018642:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018646:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801864a:	18d3      	adds	r3, r2, r3
 801864c:	689b      	ldr	r3, [r3, #8]
 801864e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018650:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8018652:	683b      	ldr	r3, [r7, #0]
 8018654:	b2db      	uxtb	r3, r3
 8018656:	6878      	ldr	r0, [r7, #4]
 8018658:	4619      	mov	r1, r3
 801865a:	f7fe fb29 	bl	8016cb0 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 801865e:	f04f 0300 	mov.w	r3, #0
 8018662:	633b      	str	r3, [r7, #48]	; 0x30
 8018664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801866a:	633b      	str	r3, [r7, #48]	; 0x30
 801866c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801866e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018670:	609a      	str	r2, [r3, #8]
 8018672:	e1e7      	b.n	8018a44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
  }
  
  else if (hcint.b.xfercompl)
 8018674:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8018678:	f003 0301 	and.w	r3, r3, #1
 801867c:	b2db      	uxtb	r3, r3
 801867e:	2b00      	cmp	r3, #0
 8018680:	f000 80a7 	beq.w	80187d2 <USB_OTG_USBH_handle_hc_n_In_ISR+0x38e>
  {
    
    if (pdev->cfg.dma_enable == 1)
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	78db      	ldrb	r3, [r3, #3]
 8018688:	2b01      	cmp	r3, #1
 801868a:	d11d      	bne.n	80186c8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x284>
    {
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
 801868c:	687a      	ldr	r2, [r7, #4]
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018694:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018698:	18d3      	adds	r3, r2, r3
 801869a:	689b      	ldr	r3, [r3, #8]
 801869c:	691b      	ldr	r3, [r3, #16]
 801869e:	65fb      	str	r3, [r7, #92]	; 0x5c
      pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
 80186a0:	687a      	ldr	r2, [r7, #4]
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80186a8:	18d3      	adds	r3, r2, r3
 80186aa:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80186ae:	681a      	ldr	r2, [r3, #0]
 80186b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80186b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80186b6:	1ad2      	subs	r2, r2, r3
 80186b8:	6879      	ldr	r1, [r7, #4]
 80186ba:	683b      	ldr	r3, [r7, #0]
 80186bc:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80186c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80186c4:	18cb      	adds	r3, r1, r3
 80186c6:	605a      	str	r2, [r3, #4]
    }
    
    pdev->host.HC_Status[num] = HC_XFRC;     
 80186c8:	687a      	ldr	r2, [r7, #4]
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	18d3      	adds	r3, r2, r3
 80186ce:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80186d2:	f04f 0201 	mov.w	r2, #1
 80186d6:	721a      	strb	r2, [r3, #8]
    pdev->host.ErrCnt [num]= 0;
 80186d8:	687a      	ldr	r2, [r7, #4]
 80186da:	683b      	ldr	r3, [r7, #0]
 80186dc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80186e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80186e4:	18d3      	adds	r3, r2, r3
 80186e6:	f04f 0200 	mov.w	r2, #0
 80186ea:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , xfercompl);
 80186ec:	f04f 0300 	mov.w	r3, #0
 80186f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80186f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186f4:	f043 0301 	orr.w	r3, r3, #1
 80186f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80186fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80186fe:	609a      	str	r2, [r3, #8]
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8018700:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8018704:	f003 030c 	and.w	r3, r3, #12
 8018708:	b2db      	uxtb	r3, r3
 801870a:	2b00      	cmp	r3, #0
 801870c:	d006      	beq.n	801871c <USB_OTG_USBH_handle_hc_n_In_ISR+0x2d8>
        (hcchar.b.eptype == EP_TYPE_BULK))
 801870e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8018712:	f003 030c 	and.w	r3, r3, #12
 8018716:	b2db      	uxtb	r3, r3
    
    pdev->host.HC_Status[num] = HC_XFRC;     
    pdev->host.ErrCnt [num]= 0;
    CLEAR_HC_INT(hcreg , xfercompl);
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8018718:	2b08      	cmp	r3, #8
 801871a:	d13b      	bne.n	8018794 <USB_OTG_USBH_handle_hc_n_In_ISR+0x350>
        (hcchar.b.eptype == EP_TYPE_BULK))
    {
      UNMASK_HOST_INT_CHH (num);
 801871c:	687a      	ldr	r2, [r7, #4]
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018724:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018728:	18d3      	adds	r3, r2, r3
 801872a:	689b      	ldr	r3, [r3, #8]
 801872c:	68db      	ldr	r3, [r3, #12]
 801872e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018732:	f043 0302 	orr.w	r3, r3, #2
 8018736:	62bb      	str	r3, [r7, #40]	; 0x28
 8018738:	687a      	ldr	r2, [r7, #4]
 801873a:	683b      	ldr	r3, [r7, #0]
 801873c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018740:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018744:	18d3      	adds	r3, r2, r3
 8018746:	689b      	ldr	r3, [r3, #8]
 8018748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801874a:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 801874c:	683b      	ldr	r3, [r7, #0]
 801874e:	b2db      	uxtb	r3, r3
 8018750:	6878      	ldr	r0, [r7, #4]
 8018752:	4619      	mov	r1, r3
 8018754:	f7fe faac 	bl	8016cb0 <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak); 
 8018758:	f04f 0300 	mov.w	r3, #0
 801875c:	627b      	str	r3, [r7, #36]	; 0x24
 801875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018760:	f043 0310 	orr.w	r3, r3, #16
 8018764:	627b      	str	r3, [r7, #36]	; 0x24
 8018766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801876a:	609a      	str	r2, [r3, #8]
      pdev->host.hc[num].toggle_in ^= 1;
 801876c:	687a      	ldr	r2, [r7, #4]
 801876e:	683b      	ldr	r3, [r7, #0]
 8018770:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8018774:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018778:	18d3      	adds	r3, r2, r3
 801877a:	7a1b      	ldrb	r3, [r3, #8]
 801877c:	f083 0301 	eor.w	r3, r3, #1
 8018780:	b2da      	uxtb	r2, r3
 8018782:	6879      	ldr	r1, [r7, #4]
 8018784:	683b      	ldr	r3, [r7, #0]
 8018786:	f103 0345 	add.w	r3, r3, #69	; 0x45
 801878a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801878e:	18cb      	adds	r3, r1, r3
 8018790:	721a      	strb	r2, [r3, #8]
 8018792:	e157      	b.n	8018a44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 8018794:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8018798:	f003 030c 	and.w	r3, r3, #12
 801879c:	b2db      	uxtb	r3, r3
 801879e:	2b0c      	cmp	r3, #12
 80187a0:	f040 814f 	bne.w	8018a42 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fe>
    {
      hcchar.b.oddfrm  = 1;
 80187a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80187a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80187aa:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 80187ac:	687a      	ldr	r2, [r7, #4]
 80187ae:	683b      	ldr	r3, [r7, #0]
 80187b0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80187b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80187b8:	18d3      	adds	r3, r2, r3
 80187ba:	689b      	ldr	r3, [r3, #8]
 80187bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80187be:	601a      	str	r2, [r3, #0]
      pdev->host.URB_State[num] = URB_DONE;  
 80187c0:	687a      	ldr	r2, [r7, #4]
 80187c2:	683b      	ldr	r3, [r7, #0]
 80187c4:	18d3      	adds	r3, r2, r3
 80187c6:	f603 0378 	addw	r3, r3, #2168	; 0x878
 80187ca:	f04f 0201 	mov.w	r2, #1
 80187ce:	71da      	strb	r2, [r3, #7]
 80187d0:	e137      	b.n	8018a42 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fe>
    }
    
  }
  else if (hcint.b.chhltd)
 80187d2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80187d6:	f003 0302 	and.w	r3, r3, #2
 80187da:	b2db      	uxtb	r3, r3
 80187dc:	2b00      	cmp	r3, #0
 80187de:	f000 8086 	beq.w	80188ee <USB_OTG_USBH_handle_hc_n_In_ISR+0x4aa>
  {
    MASK_HOST_INT_CHH (num);
 80187e2:	687a      	ldr	r2, [r7, #4]
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80187ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80187ee:	18d3      	adds	r3, r2, r3
 80187f0:	689b      	ldr	r3, [r3, #8]
 80187f2:	68db      	ldr	r3, [r3, #12]
 80187f4:	623b      	str	r3, [r7, #32]
 80187f6:	6a3b      	ldr	r3, [r7, #32]
 80187f8:	f36f 0341 	bfc	r3, #1, #1
 80187fc:	623b      	str	r3, [r7, #32]
 80187fe:	687a      	ldr	r2, [r7, #4]
 8018800:	683b      	ldr	r3, [r7, #0]
 8018802:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018806:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801880a:	18d3      	adds	r3, r2, r3
 801880c:	689b      	ldr	r3, [r3, #8]
 801880e:	6a3a      	ldr	r2, [r7, #32]
 8018810:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8018812:	687a      	ldr	r2, [r7, #4]
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	18d3      	adds	r3, r2, r3
 8018818:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801881c:	7a1b      	ldrb	r3, [r3, #8]
 801881e:	b2db      	uxtb	r3, r3
 8018820:	2b01      	cmp	r3, #1
 8018822:	d108      	bne.n	8018836 <USB_OTG_USBH_handle_hc_n_In_ISR+0x3f2>
    {
      pdev->host.URB_State[num] = URB_DONE;      
 8018824:	687a      	ldr	r2, [r7, #4]
 8018826:	683b      	ldr	r3, [r7, #0]
 8018828:	18d3      	adds	r3, r2, r3
 801882a:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801882e:	f04f 0201 	mov.w	r2, #1
 8018832:	71da      	strb	r2, [r3, #7]
 8018834:	e050      	b.n	80188d8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    }
    
    else if (pdev->host.HC_Status[num] == HC_STALL) 
 8018836:	687a      	ldr	r2, [r7, #4]
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	18d3      	adds	r3, r2, r3
 801883c:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018840:	7a1b      	ldrb	r3, [r3, #8]
 8018842:	b2db      	uxtb	r3, r3
 8018844:	2b05      	cmp	r3, #5
 8018846:	d108      	bne.n	801885a <USB_OTG_USBH_handle_hc_n_In_ISR+0x416>
    {
      pdev->host.URB_State[num] = URB_STALL;
 8018848:	687a      	ldr	r2, [r7, #4]
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	18d3      	adds	r3, r2, r3
 801884e:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8018852:	f04f 0204 	mov.w	r2, #4
 8018856:	71da      	strb	r2, [r3, #7]
 8018858:	e03e      	b.n	80188d8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 801885a:	687a      	ldr	r2, [r7, #4]
 801885c:	683b      	ldr	r3, [r7, #0]
 801885e:	18d3      	adds	r3, r2, r3
 8018860:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018864:	7a1b      	ldrb	r3, [r3, #8]
 8018866:	b2db      	uxtb	r3, r3
 8018868:	2b06      	cmp	r3, #6
 801886a:	d008      	beq.n	801887e <USB_OTG_USBH_handle_hc_n_In_ISR+0x43a>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
 801886c:	687a      	ldr	r2, [r7, #4]
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	18d3      	adds	r3, r2, r3
 8018872:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018876:	7a1b      	ldrb	r3, [r3, #8]
 8018878:	b2db      	uxtb	r3, r3
    else if (pdev->host.HC_Status[num] == HC_STALL) 
    {
      pdev->host.URB_State[num] = URB_STALL;
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 801887a:	2b08      	cmp	r3, #8
 801887c:	d112      	bne.n	80188a4 <USB_OTG_USBH_handle_hc_n_In_ISR+0x460>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
    {
      pdev->host.ErrCnt[num] = 0;
 801887e:	687a      	ldr	r2, [r7, #4]
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018886:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801888a:	18d3      	adds	r3, r2, r3
 801888c:	f04f 0200 	mov.w	r2, #0
 8018890:	609a      	str	r2, [r3, #8]
      pdev->host.URB_State[num] = URB_ERROR;  
 8018892:	687a      	ldr	r2, [r7, #4]
 8018894:	683b      	ldr	r3, [r7, #0]
 8018896:	18d3      	adds	r3, r2, r3
 8018898:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801889c:	f04f 0203 	mov.w	r2, #3
 80188a0:	71da      	strb	r2, [r3, #7]
 80188a2:	e019      	b.n	80188d8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 80188a4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80188a8:	f003 030c 	and.w	r3, r3, #12
 80188ac:	b2db      	uxtb	r3, r3
 80188ae:	2b0c      	cmp	r3, #12
 80188b0:	d112      	bne.n	80188d8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    {
      pdev->host.hc[num].toggle_in ^= 1;
 80188b2:	687a      	ldr	r2, [r7, #4]
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80188ba:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80188be:	18d3      	adds	r3, r2, r3
 80188c0:	7a1b      	ldrb	r3, [r3, #8]
 80188c2:	f083 0301 	eor.w	r3, r3, #1
 80188c6:	b2da      	uxtb	r2, r3
 80188c8:	6879      	ldr	r1, [r7, #4]
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80188d0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80188d4:	18cb      	adds	r3, r1, r3
 80188d6:	721a      	strb	r2, [r3, #8]
    }
    
    CLEAR_HC_INT(hcreg , chhltd);    
 80188d8:	f04f 0300 	mov.w	r3, #0
 80188dc:	61fb      	str	r3, [r7, #28]
 80188de:	69fb      	ldr	r3, [r7, #28]
 80188e0:	f043 0302 	orr.w	r3, r3, #2
 80188e4:	61fb      	str	r3, [r7, #28]
 80188e6:	69fa      	ldr	r2, [r7, #28]
 80188e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80188ea:	609a      	str	r2, [r3, #8]
 80188ec:	e0aa      	b.n	8018a44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    
  }    
  else if (hcint.b.xacterr)
 80188ee:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80188f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80188f6:	b2db      	uxtb	r3, r3
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d042      	beq.n	8018982 <USB_OTG_USBH_handle_hc_n_In_ISR+0x53e>
  {
    UNMASK_HOST_INT_CHH (num);
 80188fc:	687a      	ldr	r2, [r7, #4]
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018904:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018908:	18d3      	adds	r3, r2, r3
 801890a:	689b      	ldr	r3, [r3, #8]
 801890c:	68db      	ldr	r3, [r3, #12]
 801890e:	61bb      	str	r3, [r7, #24]
 8018910:	69bb      	ldr	r3, [r7, #24]
 8018912:	f043 0302 	orr.w	r3, r3, #2
 8018916:	61bb      	str	r3, [r7, #24]
 8018918:	687a      	ldr	r2, [r7, #4]
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018920:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018924:	18d3      	adds	r3, r2, r3
 8018926:	689b      	ldr	r3, [r3, #8]
 8018928:	69ba      	ldr	r2, [r7, #24]
 801892a:	60da      	str	r2, [r3, #12]
    pdev->host.ErrCnt[num] ++;
 801892c:	687a      	ldr	r2, [r7, #4]
 801892e:	683b      	ldr	r3, [r7, #0]
 8018930:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018934:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018938:	18d3      	adds	r3, r2, r3
 801893a:	689b      	ldr	r3, [r3, #8]
 801893c:	f103 0201 	add.w	r2, r3, #1
 8018940:	6879      	ldr	r1, [r7, #4]
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8018948:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801894c:	18cb      	adds	r3, r1, r3
 801894e:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XACTERR;
 8018950:	687a      	ldr	r2, [r7, #4]
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	18d3      	adds	r3, r2, r3
 8018956:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801895a:	f04f 0206 	mov.w	r2, #6
 801895e:	721a      	strb	r2, [r3, #8]
    USB_OTG_HC_Halt(pdev, num);
 8018960:	683b      	ldr	r3, [r7, #0]
 8018962:	b2db      	uxtb	r3, r3
 8018964:	6878      	ldr	r0, [r7, #4]
 8018966:	4619      	mov	r1, r3
 8018968:	f7fe f9a2 	bl	8016cb0 <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xacterr);    
 801896c:	f04f 0300 	mov.w	r3, #0
 8018970:	617b      	str	r3, [r7, #20]
 8018972:	697b      	ldr	r3, [r7, #20]
 8018974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018978:	617b      	str	r3, [r7, #20]
 801897a:	697a      	ldr	r2, [r7, #20]
 801897c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801897e:	609a      	str	r2, [r3, #8]
 8018980:	e060      	b.n	8018a44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    
  }
  else if (hcint.b.nak)  
 8018982:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8018986:	f003 0310 	and.w	r3, r3, #16
 801898a:	b2db      	uxtb	r3, r3
 801898c:	2b00      	cmp	r3, #0
 801898e:	d059      	beq.n	8018a44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
  {  
    if(hcchar.b.eptype == EP_TYPE_INTR)
 8018990:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8018994:	f003 030c 	and.w	r3, r3, #12
 8018998:	b2db      	uxtb	r3, r3
 801899a:	2b0c      	cmp	r3, #12
 801899c:	d11e      	bne.n	80189dc <USB_OTG_USBH_handle_hc_n_In_ISR+0x598>
    {
      UNMASK_HOST_INT_CHH (num);
 801899e:	687a      	ldr	r2, [r7, #4]
 80189a0:	683b      	ldr	r3, [r7, #0]
 80189a2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80189a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80189aa:	18d3      	adds	r3, r2, r3
 80189ac:	689b      	ldr	r3, [r3, #8]
 80189ae:	68db      	ldr	r3, [r3, #12]
 80189b0:	613b      	str	r3, [r7, #16]
 80189b2:	693b      	ldr	r3, [r7, #16]
 80189b4:	f043 0302 	orr.w	r3, r3, #2
 80189b8:	613b      	str	r3, [r7, #16]
 80189ba:	687a      	ldr	r2, [r7, #4]
 80189bc:	683b      	ldr	r3, [r7, #0]
 80189be:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80189c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80189c6:	18d3      	adds	r3, r2, r3
 80189c8:	689b      	ldr	r3, [r3, #8]
 80189ca:	693a      	ldr	r2, [r7, #16]
 80189cc:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 80189ce:	683b      	ldr	r3, [r7, #0]
 80189d0:	b2db      	uxtb	r3, r3
 80189d2:	6878      	ldr	r0, [r7, #4]
 80189d4:	4619      	mov	r1, r3
 80189d6:	f7fe f96b 	bl	8016cb0 <USB_OTG_HC_Halt>
 80189da:	e01f      	b.n	8018a1c <USB_OTG_USBH_handle_hc_n_In_ISR+0x5d8>
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 80189dc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80189e0:	f003 030c 	and.w	r3, r3, #12
 80189e4:	b2db      	uxtb	r3, r3
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d006      	beq.n	80189f8 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5b4>
              (hcchar.b.eptype == EP_TYPE_BULK))
 80189ea:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80189ee:	f003 030c 	and.w	r3, r3, #12
 80189f2:	b2db      	uxtb	r3, r3
    if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      UNMASK_HOST_INT_CHH (num);
      USB_OTG_HC_Halt(pdev, num);
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 80189f4:	2b08      	cmp	r3, #8
 80189f6:	d111      	bne.n	8018a1c <USB_OTG_USBH_handle_hc_n_In_ISR+0x5d8>
              (hcchar.b.eptype == EP_TYPE_BULK))
    {
      /* re-activate the channel  */
      hcchar.b.chen = 1;
 80189f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80189fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80189fe:	663b      	str	r3, [r7, #96]	; 0x60
      hcchar.b.chdis = 0;
 8018a00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018a02:	f36f 739e 	bfc	r3, #30, #1
 8018a06:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 8018a08:	687a      	ldr	r2, [r7, #4]
 8018a0a:	683b      	ldr	r3, [r7, #0]
 8018a0c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018a10:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018a14:	18d3      	adds	r3, r2, r3
 8018a16:	689b      	ldr	r3, [r3, #8]
 8018a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018a1a:	601a      	str	r2, [r3, #0]
    }
    pdev->host.HC_Status[num] = HC_NAK;
 8018a1c:	687a      	ldr	r2, [r7, #4]
 8018a1e:	683b      	ldr	r3, [r7, #0]
 8018a20:	18d3      	adds	r3, r2, r3
 8018a22:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8018a26:	f04f 0203 	mov.w	r2, #3
 8018a2a:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , nak);   
 8018a2c:	f04f 0300 	mov.w	r3, #0
 8018a30:	60fb      	str	r3, [r7, #12]
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	f043 0310 	orr.w	r3, r3, #16
 8018a38:	60fb      	str	r3, [r7, #12]
 8018a3a:	68fa      	ldr	r2, [r7, #12]
 8018a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a3e:	609a      	str	r2, [r3, #8]
 8018a40:	e000      	b.n	8018a44 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      hcchar.b.oddfrm  = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
      pdev->host.URB_State[num] = URB_DONE;  
 8018a42:	bf00      	nop
    pdev->host.HC_Status[num] = HC_NAK;
    CLEAR_HC_INT(hcreg , nak);   
  }
  
  
  return 1;
 8018a44:	f04f 0301 	mov.w	r3, #1
  
}
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f107 0770 	add.w	r7, r7, #112	; 0x70
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bd80      	pop	{r7, pc}
 8018a52:	bf00      	nop

08018a54 <USB_OTG_USBH_handle_hc_ISR>:
*         This function indicates that one or more host channels has a pending
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b086      	sub	sp, #24
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_HAINT_TypeDef        haint;
  USB_OTG_HCCHAR_TypeDef       hcchar;
  uint32_t i = 0;
 8018a5c:	f04f 0300 	mov.w	r3, #0
 8018a60:	617b      	str	r3, [r7, #20]
  uint32_t retval = 0;
 8018a62:	f04f 0300 	mov.w	r3, #0
 8018a66:	613b      	str	r3, [r7, #16]
  
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
 8018a68:	6878      	ldr	r0, [r7, #4]
 8018a6a:	f7fd ffbe 	bl	80169ea <USB_OTG_ReadHostAllChannels_intr>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	60fb      	str	r3, [r7, #12]
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 8018a72:	f04f 0300 	mov.w	r3, #0
 8018a76:	617b      	str	r3, [r7, #20]
 8018a78:	e02d      	b.n	8018ad6 <USB_OTG_USBH_handle_hc_ISR+0x82>
  {
    if (haint.b.chint & (1 << i))
 8018a7a:	89bb      	ldrh	r3, [r7, #12]
 8018a7c:	461a      	mov	r2, r3
 8018a7e:	697b      	ldr	r3, [r7, #20]
 8018a80:	fa42 f303 	asr.w	r3, r2, r3
 8018a84:	f003 0301 	and.w	r3, r3, #1
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d020      	beq.n	8018ace <USB_OTG_USBH_handle_hc_ISR+0x7a>
    {
      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 8018a8c:	687a      	ldr	r2, [r7, #4]
 8018a8e:	697b      	ldr	r3, [r7, #20]
 8018a90:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018a94:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018a98:	18d3      	adds	r3, r2, r3
 8018a9a:	689b      	ldr	r3, [r3, #8]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	60bb      	str	r3, [r7, #8]
      
      if (hcchar.b.epdir)
 8018aa0:	7a7b      	ldrb	r3, [r7, #9]
 8018aa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018aa6:	b2db      	uxtb	r3, r3
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d008      	beq.n	8018abe <USB_OTG_USBH_handle_hc_ISR+0x6a>
      {
        retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
 8018aac:	6878      	ldr	r0, [r7, #4]
 8018aae:	6979      	ldr	r1, [r7, #20]
 8018ab0:	f7ff fcc8 	bl	8018444 <USB_OTG_USBH_handle_hc_n_In_ISR>
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	693a      	ldr	r2, [r7, #16]
 8018ab8:	4313      	orrs	r3, r2
 8018aba:	613b      	str	r3, [r7, #16]
 8018abc:	e007      	b.n	8018ace <USB_OTG_USBH_handle_hc_ISR+0x7a>
      }
      else
      {
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
 8018abe:	6878      	ldr	r0, [r7, #4]
 8018ac0:	6979      	ldr	r1, [r7, #20]
 8018ac2:	f7ff f9df 	bl	8017e84 <USB_OTG_USBH_handle_hc_n_Out_ISR>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	693a      	ldr	r2, [r7, #16]
 8018aca:	4313      	orrs	r3, r2
 8018acc:	613b      	str	r3, [r7, #16]
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 8018ace:	697b      	ldr	r3, [r7, #20]
 8018ad0:	f103 0301 	add.w	r3, r3, #1
 8018ad4:	617b      	str	r3, [r7, #20]
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	461a      	mov	r2, r3
 8018adc:	697b      	ldr	r3, [r7, #20]
 8018ade:	429a      	cmp	r2, r3
 8018ae0:	d8cb      	bhi.n	8018a7a <USB_OTG_USBH_handle_hc_ISR+0x26>
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
      }
    }
  }
  
  return retval;
 8018ae2:	693b      	ldr	r3, [r7, #16]
}
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	f107 0718 	add.w	r7, r7, #24
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}
 8018aee:	bf00      	nop

08018af0 <USB_OTG_USBH_handle_rx_qlvl_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b088      	sub	sp, #32
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GRXFSTS_TypeDef       grxsts;
  USB_OTG_GINTMSK_TypeDef       intmsk;
  USB_OTG_HCTSIZn_TypeDef       hctsiz; 
  USB_OTG_HCCHAR_TypeDef        hcchar;
  __IO uint8_t                  channelnum =0;  
 8018af8:	f04f 0300 	mov.w	r3, #0
 8018afc:	72fb      	strb	r3, [r7, #11]
  uint32_t                      count;    
  
  /* Disable the Rx Status Queue Level interrupt */
  intmsk.d32 = 0;
 8018afe:	f04f 0300 	mov.w	r3, #0
 8018b02:	617b      	str	r3, [r7, #20]
  intmsk.b.rxstsqlvl = 1;
 8018b04:	697b      	ldr	r3, [r7, #20]
 8018b06:	f043 0310 	orr.w	r3, r3, #16
 8018b0a:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	68db      	ldr	r3, [r3, #12]
 8018b10:	687a      	ldr	r2, [r7, #4]
 8018b12:	68d2      	ldr	r2, [r2, #12]
 8018b14:	6991      	ldr	r1, [r2, #24]
 8018b16:	697a      	ldr	r2, [r7, #20]
 8018b18:	ea6f 0202 	mvn.w	r2, r2
 8018b1c:	400a      	ands	r2, r1
 8018b1e:	619a      	str	r2, [r3, #24]
  
  grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	68db      	ldr	r3, [r3, #12]
 8018b24:	6a1b      	ldr	r3, [r3, #32]
 8018b26:	61bb      	str	r3, [r7, #24]
  channelnum = grxsts.b.chnum;  
 8018b28:	69bb      	ldr	r3, [r7, #24]
 8018b2a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018b2e:	b2db      	uxtb	r3, r3
 8018b30:	72fb      	strb	r3, [r7, #11]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
 8018b32:	7afb      	ldrb	r3, [r7, #11]
 8018b34:	b2db      	uxtb	r3, r3
 8018b36:	687a      	ldr	r2, [r7, #4]
 8018b38:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018b3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018b40:	18d3      	adds	r3, r2, r3
 8018b42:	689b      	ldr	r3, [r3, #8]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	60fb      	str	r3, [r7, #12]
  
  switch (grxsts.b.pktsts)
 8018b48:	69bb      	ldr	r3, [r7, #24]
 8018b4a:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8018b4e:	b2db      	uxtb	r3, r3
 8018b50:	2b02      	cmp	r3, #2
 8018b52:	f040 809c 	bne.w	8018c8e <USB_OTG_USBH_handle_rx_qlvl_ISR+0x19e>
  {
  case GRXSTS_PKTSTS_IN:
    /* Read the data into the host buffer. */
    if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
 8018b56:	69bb      	ldr	r3, [r7, #24]
 8018b58:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8018b5c:	b29b      	uxth	r3, r3
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	f340 8096 	ble.w	8018c90 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
 8018b64:	7afb      	ldrb	r3, [r7, #11]
 8018b66:	b2db      	uxtb	r3, r3
 8018b68:	687a      	ldr	r2, [r7, #4]
 8018b6a:	f103 0315 	add.w	r3, r3, #21
 8018b6e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018b72:	18d3      	adds	r3, r2, r3
 8018b74:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	f000 8088 	beq.w	8018c90 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
    {  
      
      USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
 8018b80:	7afb      	ldrb	r3, [r7, #11]
 8018b82:	b2db      	uxtb	r3, r3
 8018b84:	687a      	ldr	r2, [r7, #4]
 8018b86:	f103 0315 	add.w	r3, r3, #21
 8018b8a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018b8e:	18d3      	adds	r3, r2, r3
 8018b90:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8018b94:	681a      	ldr	r2, [r3, #0]
 8018b96:	69bb      	ldr	r3, [r7, #24]
 8018b98:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8018b9c:	b29b      	uxth	r3, r3
 8018b9e:	6878      	ldr	r0, [r7, #4]
 8018ba0:	4611      	mov	r1, r2
 8018ba2:	461a      	mov	r2, r3
 8018ba4:	f7fd fd9f 	bl	80166e6 <USB_OTG_ReadPacket>
      /*manage multiple Xfer */
      pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
 8018ba8:	69bb      	ldr	r3, [r7, #24]
 8018baa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018bae:	b2db      	uxtb	r3, r3
 8018bb0:	69ba      	ldr	r2, [r7, #24]
 8018bb2:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8018bb6:	b2d2      	uxtb	r2, r2
 8018bb8:	6879      	ldr	r1, [r7, #4]
 8018bba:	f102 0215 	add.w	r2, r2, #21
 8018bbe:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8018bc2:	188a      	adds	r2, r1, r2
 8018bc4:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 8018bc8:	6811      	ldr	r1, [r2, #0]
 8018bca:	69ba      	ldr	r2, [r7, #24]
 8018bcc:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8018bd0:	b292      	uxth	r2, r2
 8018bd2:	188a      	adds	r2, r1, r2
 8018bd4:	6879      	ldr	r1, [r7, #4]
 8018bd6:	f103 0315 	add.w	r3, r3, #21
 8018bda:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018bde:	18cb      	adds	r3, r1, r3
 8018be0:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8018be4:	601a      	str	r2, [r3, #0]
      pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
 8018be6:	69bb      	ldr	r3, [r7, #24]
 8018be8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018bec:	b2db      	uxtb	r3, r3
 8018bee:	69ba      	ldr	r2, [r7, #24]
 8018bf0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8018bf4:	b2d2      	uxtb	r2, r2
 8018bf6:	6879      	ldr	r1, [r7, #4]
 8018bf8:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8018bfc:	188a      	adds	r2, r1, r2
 8018bfe:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 8018c02:	6811      	ldr	r1, [r2, #0]
 8018c04:	69ba      	ldr	r2, [r7, #24]
 8018c06:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8018c0a:	b292      	uxth	r2, r2
 8018c0c:	188a      	adds	r2, r1, r2
 8018c0e:	6879      	ldr	r1, [r7, #4]
 8018c10:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018c14:	18cb      	adds	r3, r1, r3
 8018c16:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8018c1a:	601a      	str	r2, [r3, #0]
      
      
      count = pdev->host.hc[channelnum].xfer_count;
 8018c1c:	7afb      	ldrb	r3, [r7, #11]
 8018c1e:	b2db      	uxtb	r3, r3
 8018c20:	687a      	ldr	r2, [r7, #4]
 8018c22:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8018c26:	18d3      	adds	r3, r2, r3
 8018c28:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	61fb      	str	r3, [r7, #28]
      pdev->host.XferCnt[channelnum]  = count;
 8018c30:	7afb      	ldrb	r3, [r7, #11]
 8018c32:	b2db      	uxtb	r3, r3
 8018c34:	687a      	ldr	r2, [r7, #4]
 8018c36:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8018c3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018c3e:	18d3      	adds	r3, r2, r3
 8018c40:	69fa      	ldr	r2, [r7, #28]
 8018c42:	605a      	str	r2, [r3, #4]
      
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
 8018c44:	7afb      	ldrb	r3, [r7, #11]
 8018c46:	b2db      	uxtb	r3, r3
 8018c48:	687a      	ldr	r2, [r7, #4]
 8018c4a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018c4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018c52:	18d3      	adds	r3, r2, r3
 8018c54:	689b      	ldr	r3, [r3, #8]
 8018c56:	691b      	ldr	r3, [r3, #16]
 8018c58:	613b      	str	r3, [r7, #16]
      if(hctsiz.b.pktcnt > 0)
 8018c5a:	693b      	ldr	r3, [r7, #16]
 8018c5c:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 8018c60:	b29b      	uxth	r3, r3
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	dd14      	ble.n	8018c90 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
      {
        /* re-activate the channel when more packets are expected */
        hcchar.b.chen = 1;
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018c6c:	60fb      	str	r3, [r7, #12]
        hcchar.b.chdis = 0;
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	f36f 739e 	bfc	r3, #30, #1
 8018c74:	60fb      	str	r3, [r7, #12]
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
 8018c76:	7afb      	ldrb	r3, [r7, #11]
 8018c78:	b2db      	uxtb	r3, r3
 8018c7a:	687a      	ldr	r2, [r7, #4]
 8018c7c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8018c80:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8018c84:	18d3      	adds	r3, r2, r3
 8018c86:	689b      	ldr	r3, [r3, #8]
 8018c88:	68fa      	ldr	r2, [r7, #12]
 8018c8a:	601a      	str	r2, [r3, #0]
      }
    }
    break;
 8018c8c:	e000      	b.n	8018c90 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
  case GRXSTS_PKTSTS_IN_XFER_COMP:
    
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8018c8e:	e000      	b.n	8018c92 <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a2>
        hcchar.b.chen = 1;
        hcchar.b.chdis = 0;
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
      }
    }
    break;
 8018c90:	bf00      	nop
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  intmsk.b.rxstsqlvl = 1;
 8018c92:	697b      	ldr	r3, [r7, #20]
 8018c94:	f043 0310 	orr.w	r3, r3, #16
 8018c98:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	68db      	ldr	r3, [r3, #12]
 8018c9e:	687a      	ldr	r2, [r7, #4]
 8018ca0:	68d2      	ldr	r2, [r2, #12]
 8018ca2:	6991      	ldr	r1, [r2, #24]
 8018ca4:	697a      	ldr	r2, [r7, #20]
 8018ca6:	430a      	orrs	r2, r1
 8018ca8:	619a      	str	r2, [r3, #24]
  return 1;
 8018caa:	f04f 0301 	mov.w	r3, #1
}
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f107 0720 	add.w	r7, r7, #32
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}

08018cb8 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8018cb8:	b480      	push	{r7}
 8018cba:	b085      	sub	sp, #20
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef        hcchar; 
  
  
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	60bb      	str	r3, [r7, #8]
  hcchar.b.chen = 1;
 8018cca:	68bb      	ldr	r3, [r7, #8]
 8018ccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018cd0:	60bb      	str	r3, [r7, #8]
  hcchar.b.chdis = 1;
 8018cd2:	68bb      	ldr	r3, [r7, #8]
 8018cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8018cd8:	60bb      	str	r3, [r7, #8]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018ce0:	68ba      	ldr	r2, [r7, #8]
 8018ce2:	601a      	str	r2, [r3, #0]
  
  gintsts.d32 = 0;
 8018ce4:	f04f 0300 	mov.w	r3, #0
 8018ce8:	60fb      	str	r3, [r7, #12]
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8018cf0:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	68db      	ldr	r3, [r3, #12]
 8018cf6:	68fa      	ldr	r2, [r7, #12]
 8018cf8:	615a      	str	r2, [r3, #20]
  
  return 1;
 8018cfa:	f04f 0301 	mov.w	r3, #1
}
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f107 0714 	add.w	r7, r7, #20
 8018d04:	46bd      	mov	sp, r7
 8018d06:	bc80      	pop	{r7}
 8018d08:	4770      	bx	lr
 8018d0a:	bf00      	nop

08018d0c <USBH_OTG_ISR_Handler>:
* @param  pdev: Selected device
* @retval status 
*/

uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b084      	sub	sp, #16
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t retval = 0;
 8018d14:	f04f 0300 	mov.w	r3, #0
 8018d18:	60fb      	str	r3, [r7, #12]
  
  gintsts.d32 = 0;
 8018d1a:	f04f 0300 	mov.w	r3, #0
 8018d1e:	60bb      	str	r3, [r7, #8]
  
  /* Check if HOST Mode */
  if (USB_OTG_IsHostMode(pdev))
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	f7fd fe01 	bl	8016928 <USB_OTG_IsHostMode>
 8018d26:	4603      	mov	r3, r0
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d072      	beq.n	8018e12 <USBH_OTG_ISR_Handler+0x106>
  {
    gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
 8018d2c:	6878      	ldr	r0, [r7, #4]
 8018d2e:	f7fd fe00 	bl	8016932 <USB_OTG_ReadCoreItr>
 8018d32:	4603      	mov	r3, r0
 8018d34:	60bb      	str	r3, [r7, #8]
    if (!gintsts.d32)
 8018d36:	68bb      	ldr	r3, [r7, #8]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d102      	bne.n	8018d42 <USBH_OTG_ISR_Handler+0x36>
    {
      return 0;
 8018d3c:	f04f 0300 	mov.w	r3, #0
 8018d40:	e068      	b.n	8018e14 <USBH_OTG_ISR_Handler+0x108>
    }
    
    if (gintsts.b.sofintr)
 8018d42:	7a3b      	ldrb	r3, [r7, #8]
 8018d44:	f003 0308 	and.w	r3, r3, #8
 8018d48:	b2db      	uxtb	r3, r3
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d006      	beq.n	8018d5c <USBH_OTG_ISR_Handler+0x50>
    {
      retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
 8018d4e:	6878      	ldr	r0, [r7, #4]
 8018d50:	f7fe fdea 	bl	8017928 <USB_OTG_USBH_handle_sof_ISR>
 8018d54:	4603      	mov	r3, r0
 8018d56:	68fa      	ldr	r2, [r7, #12]
 8018d58:	4313      	orrs	r3, r2
 8018d5a:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.rxstsqlvl)
 8018d5c:	7a3b      	ldrb	r3, [r7, #8]
 8018d5e:	f003 0310 	and.w	r3, r3, #16
 8018d62:	b2db      	uxtb	r3, r3
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d006      	beq.n	8018d76 <USBH_OTG_ISR_Handler+0x6a>
    {
      retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
 8018d68:	6878      	ldr	r0, [r7, #4]
 8018d6a:	f7ff fec1 	bl	8018af0 <USB_OTG_USBH_handle_rx_qlvl_ISR>
 8018d6e:	4603      	mov	r3, r0
 8018d70:	68fa      	ldr	r2, [r7, #12]
 8018d72:	4313      	orrs	r3, r2
 8018d74:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.nptxfempty)
 8018d76:	7a3b      	ldrb	r3, [r7, #8]
 8018d78:	f003 0320 	and.w	r3, r3, #32
 8018d7c:	b2db      	uxtb	r3, r3
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d006      	beq.n	8018d90 <USBH_OTG_ISR_Handler+0x84>
    {
      retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
 8018d82:	6878      	ldr	r0, [r7, #4]
 8018d84:	f7fe fe0c 	bl	80179a0 <USB_OTG_USBH_handle_nptxfempty_ISR>
 8018d88:	4603      	mov	r3, r0
 8018d8a:	68fa      	ldr	r2, [r7, #12]
 8018d8c:	4313      	orrs	r3, r2
 8018d8e:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.ptxfempty)
 8018d90:	7afb      	ldrb	r3, [r7, #11]
 8018d92:	f003 0304 	and.w	r3, r3, #4
 8018d96:	b2db      	uxtb	r3, r3
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d006      	beq.n	8018daa <USBH_OTG_ISR_Handler+0x9e>
    {
      retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
 8018d9c:	6878      	ldr	r0, [r7, #4]
 8018d9e:	f7fe fed7 	bl	8017b50 <USB_OTG_USBH_handle_ptxfempty_ISR>
 8018da2:	4603      	mov	r3, r0
 8018da4:	68fa      	ldr	r2, [r7, #12]
 8018da6:	4313      	orrs	r3, r2
 8018da8:	60fb      	str	r3, [r7, #12]
    }    
    
    if (gintsts.b.hcintr)
 8018daa:	7afb      	ldrb	r3, [r7, #11]
 8018dac:	f003 0302 	and.w	r3, r3, #2
 8018db0:	b2db      	uxtb	r3, r3
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d006      	beq.n	8018dc4 <USBH_OTG_ISR_Handler+0xb8>
    {
      retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
 8018db6:	6878      	ldr	r0, [r7, #4]
 8018db8:	f7ff fe4c 	bl	8018a54 <USB_OTG_USBH_handle_hc_ISR>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	68fa      	ldr	r2, [r7, #12]
 8018dc0:	4313      	orrs	r3, r2
 8018dc2:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.portintr)
 8018dc4:	7afb      	ldrb	r3, [r7, #11]
 8018dc6:	f003 0301 	and.w	r3, r3, #1
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d006      	beq.n	8018dde <USBH_OTG_ISR_Handler+0xd2>
    {
      retval |= USB_OTG_USBH_handle_port_ISR (pdev);
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	f7fe ff95 	bl	8017d00 <USB_OTG_USBH_handle_port_ISR>
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	68fa      	ldr	r2, [r7, #12]
 8018dda:	4313      	orrs	r3, r2
 8018ddc:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.disconnect)
 8018dde:	7afb      	ldrb	r3, [r7, #11]
 8018de0:	f003 0320 	and.w	r3, r3, #32
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d006      	beq.n	8018df8 <USBH_OTG_ISR_Handler+0xec>
    {
      retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
 8018dea:	6878      	ldr	r0, [r7, #4]
 8018dec:	f7fe fdba 	bl	8017964 <USB_OTG_USBH_handle_Disconnect_ISR>
 8018df0:	4603      	mov	r3, r0
 8018df2:	68fa      	ldr	r2, [r7, #12]
 8018df4:	4313      	orrs	r3, r2
 8018df6:	60fb      	str	r3, [r7, #12]
      
    }
    
    if (gintsts.b.incomplisoout)
 8018df8:	7abb      	ldrb	r3, [r7, #10]
 8018dfa:	f003 0320 	and.w	r3, r3, #32
 8018dfe:	b2db      	uxtb	r3, r3
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d006      	beq.n	8018e12 <USBH_OTG_ISR_Handler+0x106>
    {
      retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
 8018e04:	6878      	ldr	r0, [r7, #4]
 8018e06:	f7ff ff57 	bl	8018cb8 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	68fa      	ldr	r2, [r7, #12]
 8018e0e:	4313      	orrs	r3, r2
 8018e10:	60fb      	str	r3, [r7, #12]
    }
    
    
  }
  return retval;
 8018e12:	68fb      	ldr	r3, [r7, #12]
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	f107 0710 	add.w	r7, r7, #16
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bd80      	pop	{r7, pc}
 8018e1e:	bf00      	nop

08018e20 <STM32_USBO_OTG_ISR_Handler>:
  *         
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
 8018e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* OTG interrupts */
  gintmsk_common.b.sessreqintr = 1;
  gintmsk_common.b.conidstschng = 1;
  gintmsk_common.b.otgintr = 1;
  
  gintsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8018e22:	68c3      	ldr	r3, [r0, #12]
  gintmsk.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
  return ((gintsts.d32 & gintmsk.d32 ) & gintmsk_common.d32);
 8018e24:	4d45      	ldr	r5, [pc, #276]	; (8018f3c <STM32_USBO_OTG_ISR_Handler+0x11c>)
  /* OTG interrupts */
  gintmsk_common.b.sessreqintr = 1;
  gintmsk_common.b.conidstschng = 1;
  gintmsk_common.b.otgintr = 1;
  
  gintsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8018e26:	695a      	ldr	r2, [r3, #20]
  gintmsk.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8018e28:	6999      	ldr	r1, [r3, #24]
  return ((gintsts.d32 & gintmsk.d32 ) & gintmsk_common.d32);
 8018e2a:	400a      	ands	r2, r1
 8018e2c:	4015      	ands	r5, r2
  *         
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
 8018e2e:	4604      	mov	r4, r0
  uint32_t retval = 0;
  USB_OTG_GINTSTS_TypeDef  gintsts ;
  gintsts.d32 = 0;

  gintsts.d32 = USB_OTG_Read_itr(pdev);
  if (gintsts.d32 == 0)
 8018e30:	2d00      	cmp	r5, #0
 8018e32:	f000 8081 	beq.w	8018f38 <STM32_USBO_OTG_ISR_Handler+0x118>
  {
    return 0;
  }
  if (gintsts.b.otgintr)
 8018e36:	f002 0204 	and.w	r2, r2, #4
 8018e3a:	b2d1      	uxtb	r1, r2
 8018e3c:	2900      	cmp	r1, #0
 8018e3e:	d040      	beq.n	8018ec2 <STM32_USBO_OTG_ISR_Handler+0xa2>
  
  
  gotgint.d32 = 0;
  gotgctl.d32 = 0;
  
  gotgint.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGINT);
 8018e40:	685e      	ldr	r6, [r3, #4]
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8018e42:	681a      	ldr	r2, [r3, #0]
  
  if (gotgint.b.sesenddet)
 8018e44:	f006 0704 	and.w	r7, r6, #4
 8018e48:	b2fa      	uxtb	r2, r7
 8018e4a:	b132      	cbz	r2, 8018e5a <STM32_USBO_OTG_ISR_Handler+0x3a>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8018e4c:	681b      	ldr	r3, [r3, #0]
    
    
    if (USB_OTG_IsDeviceMode(pdev))
 8018e4e:	f7fd fd64 	bl	801691a <USB_OTG_IsDeviceMode>
 8018e52:	b910      	cbnz	r0, 8018e5a <STM32_USBO_OTG_ISR_Handler+0x3a>
    {

    }
    else if (USB_OTG_IsHostMode(pdev))
 8018e54:	4620      	mov	r0, r4
 8018e56:	f7fd fd67 	bl	8016928 <USB_OTG_IsHostMode>

    }
  }

  /* ----> SRP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.sesreqsucstschng)
 8018e5a:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8018e5e:	07f8      	lsls	r0, r7, #31
 8018e60:	d50e      	bpl.n	8018e80 <STM32_USBO_OTG_ISR_Handler+0x60>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8018e62:	68e0      	ldr	r0, [r4, #12]
 8018e64:	6803      	ldr	r3, [r0, #0]
    if (gotgctl.b.sesreqscs) /* Session request success                                          */
 8018e66:	07d9      	lsls	r1, r3, #31
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8018e68:	4620      	mov	r0, r4

  /* ----> SRP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.sesreqsucstschng)
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
    if (gotgctl.b.sesreqscs) /* Session request success                                          */
 8018e6a:	d507      	bpl.n	8018e7c <STM32_USBO_OTG_ISR_Handler+0x5c>
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8018e6c:	f7fd fd55 	bl	801691a <USB_OTG_IsDeviceMode>

      }
      /* Clear Session Request */
      gotgctl.d32 = 0;
      gotgctl.b.sesreq = 1;
      USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
 8018e70:	68e1      	ldr	r1, [r4, #12]
 8018e72:	680a      	ldr	r2, [r1, #0]
 8018e74:	f022 0002 	bic.w	r0, r2, #2
 8018e78:	6008      	str	r0, [r1, #0]
 8018e7a:	e001      	b.n	8018e80 <STM32_USBO_OTG_ISR_Handler+0x60>
    }
    else /* Session request failure                                          */
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8018e7c:	f7fd fd4d 	bl	801691a <USB_OTG_IsDeviceMode>

      }
    }
  }
  /* ----> HNP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.hstnegsucstschng)
 8018e80:	f007 0702 	and.w	r7, r7, #2
 8018e84:	b2fb      	uxtb	r3, r7
 8018e86:	b143      	cbz	r3, 8018e9a <STM32_USBO_OTG_ISR_Handler+0x7a>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8018e88:	68e1      	ldr	r1, [r4, #12]
 8018e8a:	680a      	ldr	r2, [r1, #0]

    if (gotgctl.b.hstnegscs)                                    /* Host negotiation success                                         */
 8018e8c:	05d2      	lsls	r2, r2, #23
 8018e8e:	d502      	bpl.n	8018e96 <STM32_USBO_OTG_ISR_Handler+0x76>
    {
      if (USB_OTG_IsHostMode(pdev))                              /* The core AUTOMATICALLY sets the Host mode                        */
 8018e90:	4620      	mov	r0, r4
 8018e92:	f7fd fd49 	bl	8016928 <USB_OTG_IsHostMode>
    }
    else                                                        /* Host negotiation failure */
    {

    }
    gotgint.b.hstnegsucstschng = 1;                             /* Ack "Host Negotiation Success Status Change" interrupt.          */
 8018e96:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  }
  /* ----> HOST NEGOTIATION DETECTED INTERRUPT <---- */
  if (gotgint.b.hstnegdet)
 8018e9a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8018e9e:	f007 0002 	and.w	r0, r7, #2
 8018ea2:	b2c3      	uxtb	r3, r0
 8018ea4:	b113      	cbz	r3, 8018eac <STM32_USBO_OTG_ISR_Handler+0x8c>
  {
    if (USB_OTG_IsDeviceMode(pdev))                              /* The core AUTOMATICALLY sets the Host mode                        */
 8018ea6:	4620      	mov	r0, r4
 8018ea8:	f7fd fd37 	bl	801691a <USB_OTG_IsDeviceMode>

    }
  }
  if (gotgint.b.adevtoutchng)
  {}
  if (gotgint.b.debdone)
 8018eac:	f007 0108 	and.w	r1, r7, #8
 8018eb0:	b2cf      	uxtb	r7, r1
 8018eb2:	b117      	cbz	r7, 8018eba <STM32_USBO_OTG_ISR_Handler+0x9a>
  {
    USB_OTG_ResetPort(pdev);
 8018eb4:	4620      	mov	r0, r4
 8018eb6:	f7fd fd9b 	bl	80169f0 <USB_OTG_ResetPort>
  }
  /* Clear OTG INT */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 8018eba:	68e2      	ldr	r2, [r4, #12]
  {
    return 0;
  }
  if (gintsts.b.otgintr)
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
 8018ebc:	2001      	movs	r0, #1
  if (gotgint.b.debdone)
  {
    USB_OTG_ResetPort(pdev);
  }
  /* Clear OTG INT */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 8018ebe:	6056      	str	r6, [r2, #4]
 8018ec0:	e000      	b.n	8018ec4 <STM32_USBO_OTG_ISR_Handler+0xa4>
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t retval = 0;
 8018ec2:	4608      	mov	r0, r1
  }
  if (gintsts.b.otgintr)
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
  }
  if (gintsts.b.conidstschng)
 8018ec4:	f3c5 6307 	ubfx	r3, r5, #24, #8
 8018ec8:	f003 0110 	and.w	r1, r3, #16
 8018ecc:	b2ca      	uxtb	r2, r1
 8018ece:	b312      	cbz	r2, 8018f16 <STM32_USBO_OTG_ISR_Handler+0xf6>
  gintsts.d32 = 0 ;
  gintmsk.d32 = 0 ;
  gotgctl.d32 = 0 ;
  gintmsk.b.sofintr = 1;
  
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, gintmsk.d32, 0);
 8018ed0:	68e0      	ldr	r0, [r4, #12]
 8018ed2:	6983      	ldr	r3, [r0, #24]
 8018ed4:	f023 0108 	bic.w	r1, r3, #8
 8018ed8:	6181      	str	r1, [r0, #24]
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8018eda:	6802      	ldr	r2, [r0, #0]
  
  /* B-Device connector (Device Mode) */
  if (gotgctl.b.conidsts)
 8018edc:	03d3      	lsls	r3, r2, #15
  {
    USB_OTG_DisableGlobalInt(pdev);
 8018ede:	4620      	mov	r0, r4
  
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, gintmsk.d32, 0);
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
  
  /* B-Device connector (Device Mode) */
  if (gotgctl.b.conidsts)
 8018ee0:	d509      	bpl.n	8018ef6 <STM32_USBO_OTG_ISR_Handler+0xd6>
  {
    USB_OTG_DisableGlobalInt(pdev);
 8018ee2:	f7fd fcc5 	bl	8016870 <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInitDev(pdev);
 8018ee6:	4620      	mov	r0, r4
 8018ee8:	f7fd ff38 	bl	8016d5c <USB_OTG_CoreInitDev>
    USB_OTG_EnableGlobalInt(pdev);
 8018eec:	4620      	mov	r0, r4
 8018eee:	f7fd fcb8 	bl	8016862 <USB_OTG_EnableGlobalInt>
    pdev->otg.OTG_State = B_PERIPHERAL;
 8018ef2:	2004      	movs	r0, #4
 8018ef4:	e008      	b.n	8018f08 <STM32_USBO_OTG_ISR_Handler+0xe8>
  }
  else
  {
    USB_OTG_DisableGlobalInt(pdev);
 8018ef6:	f7fd fcbb 	bl	8016870 <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInitHost(pdev);
 8018efa:	4620      	mov	r0, r4
 8018efc:	f7fd fd8e 	bl	8016a1c <USB_OTG_CoreInitHost>
    USB_OTG_EnableGlobalInt(pdev);
 8018f00:	4620      	mov	r0, r4
 8018f02:	f7fd fcae 	bl	8016862 <USB_OTG_EnableGlobalInt>
    pdev->otg.OTG_State = A_HOST;
 8018f06:	2001      	movs	r0, #1
  }
  /* Set flag and clear interrupt */
  gintsts.b.conidstschng = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018f08:	68e3      	ldr	r3, [r4, #12]
  else
  {
    USB_OTG_DisableGlobalInt(pdev);
    USB_OTG_CoreInitHost(pdev);
    USB_OTG_EnableGlobalInt(pdev);
    pdev->otg.OTG_State = A_HOST;
 8018f0a:	f884 0a90 	strb.w	r0, [r4, #2704]	; 0xa90
  }
  /* Set flag and clear interrupt */
  gintsts.b.conidstschng = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018f0e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8018f12:	6159      	str	r1, [r3, #20]
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
  }
  if (gintsts.b.conidstschng)
  {
    retval |= USB_OTG_HandleConnectorIDStatusChange_ISR(pdev);
 8018f14:	2001      	movs	r0, #1
  }
  if (gintsts.b.sessreqintr)
 8018f16:	f3c5 6507 	ubfx	r5, r5, #24, #8
 8018f1a:	f005 0240 	and.w	r2, r5, #64	; 0x40
 8018f1e:	b2d5      	uxtb	r5, r2
 8018f20:	b15d      	cbz	r5, 8018f3a <STM32_USBO_OTG_ISR_Handler+0x11a>


  gotgctl.d32 = 0;
  gintsts.d32 = 0;

  gotgctl.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GOTGCTL );
 8018f22:	68e0      	ldr	r0, [r4, #12]
 8018f24:	6803      	ldr	r3, [r0, #0]
  if (USB_OTG_IsDeviceMode(pdev) && (gotgctl.b.bsesvld))
 8018f26:	4620      	mov	r0, r4
 8018f28:	f7fd fcf7 	bl	801691a <USB_OTG_IsDeviceMode>
    
  }
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.sessreqintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8018f2c:	68e3      	ldr	r3, [r4, #12]
 8018f2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8018f32:	6159      	str	r1, [r3, #20]
  {
    retval |= USB_OTG_HandleConnectorIDStatusChange_ISR(pdev);
  }
  if (gintsts.b.sessreqintr)
  {
    retval |= USB_OTG_HandleSessionRequest_ISR(pdev);
 8018f34:	2001      	movs	r0, #1
 8018f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  gintsts.d32 = 0;

  gintsts.d32 = USB_OTG_Read_itr(pdev);
  if (gintsts.d32 == 0)
  {
    return 0;
 8018f38:	4628      	mov	r0, r5
  if (gintsts.b.sessreqintr)
  {
    retval |= USB_OTG_HandleSessionRequest_ISR(pdev);
  }
  return retval;
}
 8018f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f3c:	50000004 	.word	0x50000004

08018f40 <APP_LCD_ExtPort_PinSet>:
// set pin directly
inline static s32 APP_LCD_ExtPort_PinSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 8, value);
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 8, value);
 8018f40:	3008      	adds	r0, #8
 8018f42:	b2c0      	uxtb	r0, r0
 8018f44:	f7fa bb72 	b.w	801362c <MIOS32_BOARD_J10_PinSet>

08018f48 <APP_LCD_ExtPort_UpdateSRs>:
  return -1;
#endif
}

// pulse the RC line after a serial data shift
inline static s32 APP_LCD_ExtPort_UpdateSRs(void) {
 8018f48:	b508      	push	{r3, lr}
#if defined(MIOS32_FAMILY_STM32F10x)
  APP_LCD_ExtPort_PinSet(2, 0); // J5C.A10
  APP_LCD_ExtPort_PinSet(2, 1); // J5C.A10
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  APP_LCD_ExtPort_PinSet(2, 0); // J10B.D10
 8018f4a:	2100      	movs	r1, #0
 8018f4c:	2002      	movs	r0, #2
 8018f4e:	f7ff fff7 	bl	8018f40 <APP_LCD_ExtPort_PinSet>
  APP_LCD_ExtPort_PinSet(2, 1); // J10B.D10
 8018f52:	2002      	movs	r0, #2
 8018f54:	2101      	movs	r1, #1
 8018f56:	f7ff fff3 	bl	8018f40 <APP_LCD_ExtPort_PinSet>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_UpdateSRs not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8018f5a:	2000      	movs	r0, #0
 8018f5c:	bd08      	pop	{r3, pc}
	...

08018f60 <APP_LCD_GLCD_CS_Set>:
/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of GLCDs with parallel port depending on X cursor position
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_GLCD_CS_Set(u8 all)
{
 8018f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // determine polarity of CS pins
  u8 level_active = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_KS0108) ? 1 : 0;
 8018f62:	4b14      	ldr	r3, [pc, #80]	; (8018fb4 <APP_LCD_GLCD_CS_Set+0x54>)
 8018f64:	7819      	ldrb	r1, [r3, #0]
 8018f66:	f1b1 0281 	subs.w	r2, r1, #129	; 0x81
 8018f6a:	4255      	negs	r5, r2
 8018f6c:	4155      	adcs	r5, r2
  u8 level_nonactive = level_active ? 0 : 1;
#if SED1520_POLLIN_WINTEK_WD_G1203T
  u8 segment_width = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520) ? 61 : 64;
 8018f6e:	2986      	cmp	r1, #134	; 0x86
 8018f70:	bf14      	ite	ne
 8018f72:	2440      	movne	r4, #64	; 0x40
 8018f74:	243d      	moveq	r4, #61	; 0x3d
#else
  u8 segment_width = 64; // should be valid for KS0108 and SED1320 (although sometimes the controllers provide more columns)
#endif

  int cs;
  if( all ) {
 8018f76:	b140      	cbz	r0, 8018f8a <APP_LCD_GLCD_CS_Set+0x2a>
 8018f78:	2400      	movs	r4, #0
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
      APP_LCD_ExtPort_PinSet(cs, level_active);
 8018f7a:	b2e0      	uxtb	r0, r4
 8018f7c:	4629      	mov	r1, r5
#endif

  int cs;
  if( all ) {
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8018f7e:	3401      	adds	r4, #1
      APP_LCD_ExtPort_PinSet(cs, level_active);
 8018f80:	f7ff ffde 	bl	8018f40 <APP_LCD_ExtPort_PinSet>
#endif

  int cs;
  if( all ) {
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8018f84:	2c08      	cmp	r4, #8
 8018f86:	d1f8      	bne.n	8018f7a <APP_LCD_GLCD_CS_Set+0x1a>
 8018f88:	e011      	b.n	8018fae <APP_LCD_GLCD_CS_Set+0x4e>
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;
 8018f8a:	4f0b      	ldr	r7, [pc, #44]	; (8018fb8 <APP_LCD_GLCD_CS_Set+0x58>)
 8018f8c:	883b      	ldrh	r3, [r7, #0]
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_GLCD_CS_Set(u8 all)
{
  // determine polarity of CS pins
  u8 level_active = (mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_KS0108) ? 1 : 0;
  u8 level_nonactive = level_active ? 0 : 1;
 8018f8e:	f085 0601 	eor.w	r6, r5, #1
    // set all chip select lines
    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;
 8018f92:	fb93 f7f4 	sdiv	r7, r3, r4

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8018f96:	4604      	mov	r4, r0
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
 8018f98:	b2f9      	uxtb	r1, r7
 8018f9a:	428c      	cmp	r4, r1
 8018f9c:	bf14      	ite	ne
 8018f9e:	4631      	movne	r1, r6
 8018fa0:	4629      	moveq	r1, r5
 8018fa2:	b2e0      	uxtb	r0, r4
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8018fa4:	3401      	adds	r4, #1
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
 8018fa6:	f7ff ffcb 	bl	8018f40 <APP_LCD_ExtPort_PinSet>
      APP_LCD_ExtPort_PinSet(cs, level_active);
  } else {
    // set only one chip select line depending on X pos   
    u8 sel_cs = mios32_lcd_x / segment_width;

    for(cs=0; cs<APP_LCD_NUM_EXT_PINS; ++cs)
 8018faa:	2c08      	cmp	r4, #8
 8018fac:	d1f4      	bne.n	8018f98 <APP_LCD_GLCD_CS_Set+0x38>
      APP_LCD_ExtPort_PinSet(cs, (cs == sel_cs) ? level_active : level_nonactive);
  }

  return 0; // no error
}
 8018fae:	2000      	movs	r0, #0
 8018fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fb2:	bf00      	nop
 8018fb4:	20010dd2 	.word	0x20010dd2
 8018fb8:	20010de4 	.word	0x20010de4

08018fbc <APP_LCD_ExtPort_Init>:
# warning "APP_LCD_NUM_EXT_PINS not adapted for this MIOS32_FAMILY"
# define APP_LCD_NUM_EXT_PINS 0
#endif

// pin initialisation
inline static s32 APP_LCD_ExtPort_Init(void) {
 8018fbc:	b510      	push	{r4, lr}
 8018fbe:	2408      	movs	r4, #8
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<APP_LCD_NUM_EXT_PINS; ++pin) {
    MIOS32_BOARD_J10_PinInit(pin + 8, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 8018fc0:	4620      	mov	r0, r4
 8018fc2:	3401      	adds	r4, #1
 8018fc4:	2105      	movs	r1, #5
 8018fc6:	b2e4      	uxtb	r4, r4
 8018fc8:	f7fa fb0c 	bl	80135e4 <MIOS32_BOARD_J10_PinInit>
    MIOS32_BOARD_J5_PinInit(pin + 8, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<APP_LCD_NUM_EXT_PINS; ++pin) {
 8018fcc:	2c10      	cmp	r4, #16
 8018fce:	d1f7      	bne.n	8018fc0 <APP_LCD_ExtPort_Init+0x4>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_Init not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8018fd0:	2000      	movs	r0, #0
 8018fd2:	bd10      	pop	{r4, pc}

08018fd4 <APP_LCD_SERGLCD_CS_Init>:
// - 8 CS lines are available at J15
// - additional lines are available at the extension IO port
//   (either directly, or via DOUT shift register)
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Init(void)
{
 8018fd4:	b510      	push	{r4, lr}
  int num_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y;
 8018fd6:	4b0b      	ldr	r3, [pc, #44]	; (8019004 <APP_LCD_SERGLCD_CS_Init+0x30>)
 8018fd8:	785c      	ldrb	r4, [r3, #1]
 8018fda:	7898      	ldrb	r0, [r3, #2]
 8018fdc:	fb14 f400 	smulbb	r4, r4, r0

  if( num_lcds > 8 ) {
 8018fe0:	2c08      	cmp	r4, #8
 8018fe2:	dd01      	ble.n	8018fe8 <APP_LCD_SERGLCD_CS_Init+0x14>
    APP_LCD_ExtPort_Init();
 8018fe4:	f7ff ffea 	bl	8018fbc <APP_LCD_ExtPort_Init>
  }

  display_available |= (1 << num_lcds)-1;
 8018fe8:	4907      	ldr	r1, [pc, #28]	; (8019008 <APP_LCD_SERGLCD_CS_Init+0x34>)
 8018fea:	2201      	movs	r2, #1
 8018fec:	fa02 f304 	lsl.w	r3, r2, r4
 8018ff0:	1e5c      	subs	r4, r3, #1
 8018ff2:	e9d1 2300 	ldrd	r2, r3, [r1]
 8018ff6:	4322      	orrs	r2, r4
 8018ff8:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
 8018ffc:	e9c1 2300 	strd	r2, r3, [r1]

  return 0; // no error
}
 8019000:	2000      	movs	r0, #0
 8019002:	bd10      	pop	{r4, pc}
 8019004:	20010dd2 	.word	0x20010dd2
 8019008:	200005d8 	.word	0x200005d8

0801900c <APP_LCD_ExtPort_SerDataShift.part.0>:
  return -1;
#endif
}

// serial data shift
inline static s32 APP_LCD_ExtPort_SerDataShift(u8 data, u8 lsb_first) {
 801900c:	2108      	movs	r1, #8
 801900e:	4b0b      	ldr	r3, [pc, #44]	; (801903c <APP_LCD_ExtPort_SerDataShift.part.0+0x30>)
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 1); // J10B.D8 = ser
 8019010:	f010 0f01 	tst.w	r0, #1
 8019014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019018:	bf14      	ite	ne
 801901a:	831a      	strhne	r2, [r3, #24]
 801901c:	835a      	strheq	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 801901e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
 8019022:	0840      	lsrs	r0, r0, #1
 8019024:	3901      	subs	r1, #1
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 1); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 8019026:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8019028:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801902a:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801902c:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801902e:	835a      	strh	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
 8019030:	831a      	strh	r2, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8019032:	831a      	strh	r2, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8019034:	831a      	strh	r2, [r3, #24]
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
    for(i=0; i<8; ++i, data >>= 1) {
 8019036:	d1ea      	bne.n	801900e <APP_LCD_ExtPort_SerDataShift.part.0+0x2>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_SerDataShift not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 8019038:	4770      	bx	lr
 801903a:	bf00      	nop
 801903c:	40020800 	.word	0x40020800

08019040 <APP_LCD_ExtPort_SerDataShift>:
  return -1;
#endif
}

// serial data shift
inline static s32 APP_LCD_ExtPort_SerDataShift(u8 data, u8 lsb_first) {
 8019040:	b510      	push	{r4, lr}
 8019042:	4604      	mov	r4, r0
    }
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int i;
  if( lsb_first ) {
 8019044:	b111      	cbz	r1, 801904c <APP_LCD_ExtPort_SerDataShift+0xc>
 8019046:	f7ff ffe1 	bl	801900c <APP_LCD_ExtPort_SerDataShift.part.0>
 801904a:	e016      	b.n	801907a <APP_LCD_ExtPort_SerDataShift+0x3a>
 801904c:	2108      	movs	r1, #8
 801904e:	4b0c      	ldr	r3, [pc, #48]	; (8019080 <APP_LCD_ExtPort_SerDataShift+0x40>)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
 8019050:	f014 0f80 	tst.w	r4, #128	; 0x80
 8019054:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019058:	bf14      	ite	ne
 801905a:	831a      	strhne	r2, [r3, #24]
 801905c:	835a      	strheq	r2, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 801905e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 8019062:	0064      	lsls	r4, r4, #1
 8019064:	3901      	subs	r1, #1
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
 8019066:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 8019068:	b2e4      	uxtb	r4, r4
      MIOS32_SYS_STM_PINSET(GPIOC, GPIO_Pin_13, data & 0x80); // J10B.D8 = ser
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // J10B.D9 = 0 (Clk)
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801906a:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801906c:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 801906e:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_0(GPIOC, GPIO_Pin_14); // stretch
 8019070:	8358      	strh	r0, [r3, #26]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
 8019072:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8019074:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
 8019076:	8318      	strh	r0, [r3, #24]
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // J10B.D9 = 1 (Clk)
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
      MIOS32_SYS_STM_PINSET_1(GPIOC, GPIO_Pin_14); // stretch
    }
  } else {
    for(i=0; i<8; ++i, data <<= 1) {
 8019078:	d1e9      	bne.n	801904e <APP_LCD_ExtPort_SerDataShift+0xe>
  return 0; // no error
#else
# warning "APP_LCD_ExtPort_SerDataShift not adapted for this MIOS32_FAMILY"
  return -1;
#endif
}
 801907a:	2000      	movs	r0, #0
 801907c:	bd10      	pop	{r4, pc}
 801907e:	bf00      	nop
 8019080:	40020800 	.word	0x40020800

08019084 <APP_LCD_E_Set>:

/////////////////////////////////////////////////////////////////////////////
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
 8019084:	b570      	push	{r4, r5, r6, lr}
  if( mios32_lcd_device < 2 ) {
 8019086:	4b1d      	ldr	r3, [pc, #116]	; (80190fc <APP_LCD_E_Set+0x78>)

/////////////////////////////////////////////////////////////////////////////
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
 8019088:	4601      	mov	r1, r0
  if( mios32_lcd_device < 2 ) {
 801908a:	7818      	ldrb	r0, [r3, #0]
 801908c:	2801      	cmp	r0, #1
 801908e:	d803      	bhi.n	8019098 <APP_LCD_E_Set+0x14>
    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
  }

  return 0; // no error
}
 8019090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// Sets the E (enable) line depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_E_Set(u8 value)
{
  if( mios32_lcd_device < 2 ) {
    return MIOS32_BOARD_J15_E_Set(mios32_lcd_device, value);
 8019094:	f7fa bbba 	b.w	801380c <MIOS32_BOARD_J15_E_Set>
  }

  int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 2;
 8019098:	4a19      	ldr	r2, [pc, #100]	; (8019100 <APP_LCD_E_Set+0x7c>)
 801909a:	7893      	ldrb	r3, [r2, #2]
 801909c:	7854      	ldrb	r4, [r2, #1]
 801909e:	fb14 f203 	smulbb	r2, r4, r3
  if( num_additional_lcds < 0 )
 80190a2:	1e93      	subs	r3, r2, #2
 80190a4:	d426      	bmi.n	80190f4 <APP_LCD_E_Set+0x70>
    return -2; // E line not configured

  if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 80190a6:	2b08      	cmp	r3, #8
 80190a8:	f1a0 0002 	sub.w	r0, r0, #2
 80190ac:	dc03      	bgt.n	80190b6 <APP_LCD_E_Set+0x32>
    // the extension pin lines are used as dedicated E pins
    APP_LCD_ExtPort_PinSet(mios32_lcd_device - 2, value);
 80190ae:	b2c0      	uxtb	r0, r0
 80190b0:	f7ff ff46 	bl	8018f40 <APP_LCD_ExtPort_PinSet>
 80190b4:	e01c      	b.n	80190f0 <APP_LCD_E_Set+0x6c>
  } else {
    if( num_additional_lcds >= (MAX_LCDS-2) )
      num_additional_lcds = MAX_LCDS-2; // saturate
 80190b6:	2b3e      	cmp	r3, #62	; 0x3e
 80190b8:	bfa8      	it	ge
 80190ba:	233e      	movge	r3, #62	; 0x3e
    int num_shifts = num_additional_lcds / 8;
 80190bc:	10dc      	asrs	r4, r3, #3
    if( num_additional_lcds % 8 )
 80190be:	075d      	lsls	r5, r3, #29
      ++num_shifts;
 80190c0:	bf18      	it	ne
 80190c2:	3401      	addne	r4, #1

    int selected_lcd = mios32_lcd_device - 2;
    int selected_lcd_sr = selected_lcd / 8;
 80190c4:	10c6      	asrs	r6, r0, #3
    u8 selected_lcd_mask = value ? (1 << (selected_lcd % 8)) : 0;
 80190c6:	b131      	cbz	r1, 80190d6 <APP_LCD_E_Set+0x52>
 80190c8:	f000 0007 	and.w	r0, r0, #7
 80190cc:	2501      	movs	r5, #1
 80190ce:	fa05 f500 	lsl.w	r5, r5, r0
 80190d2:	b2ed      	uxtb	r5, r5
 80190d4:	e000      	b.n	80190d8 <APP_LCD_E_Set+0x54>
 80190d6:	460d      	mov	r5, r1

    // shift data
    int i;
    for(i=num_shifts-1; i>=0; --i) {
 80190d8:	3c01      	subs	r4, #1
 80190da:	42b4      	cmp	r4, r6
 80190dc:	bf0c      	ite	eq
 80190de:	4628      	moveq	r0, r5
 80190e0:	2000      	movne	r0, #0
 80190e2:	f7ff ff93 	bl	801900c <APP_LCD_ExtPort_SerDataShift.part.0>
 80190e6:	f114 34ff 	adds.w	r4, r4, #4294967295
 80190ea:	d2f6      	bcs.n	80190da <APP_LCD_E_Set+0x56>
      u8 data = (i == selected_lcd_sr) ? selected_lcd_mask : 0;
      APP_LCD_ExtPort_SerDataShift(data, 1);
    }

    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
 80190ec:	f7ff ff2c 	bl	8018f48 <APP_LCD_ExtPort_UpdateSRs>
  }

  return 0; // no error
 80190f0:	2000      	movs	r0, #0
 80190f2:	bd70      	pop	{r4, r5, r6, pc}
    return MIOS32_BOARD_J15_E_Set(mios32_lcd_device, value);
  }

  int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 2;
  if( num_additional_lcds < 0 )
    return -2; // E line not configured
 80190f4:	f06f 0001 	mvn.w	r0, #1
    // update serial shift registers
    APP_LCD_ExtPort_UpdateSRs();
  }

  return 0; // no error
}
 80190f8:	bd70      	pop	{r4, r5, r6, pc}
 80190fa:	bf00      	nop
 80190fc:	20000180 	.word	0x20000180
 8019100:	20010dd2 	.word	0x20010dd2

08019104 <APP_LCD_PollUnbusy>:

/////////////////////////////////////////////////////////////////////////////
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
 8019104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( mios32_lcd_device < 2 ) {
 8019106:	4b1f      	ldr	r3, [pc, #124]	; (8019184 <APP_LCD_PollUnbusy+0x80>)

/////////////////////////////////////////////////////////////////////////////
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
 8019108:	4604      	mov	r4, r0
  if( mios32_lcd_device < 2 ) {
 801910a:	7818      	ldrb	r0, [r3, #0]
 801910c:	2801      	cmp	r0, #1
 801910e:	d804      	bhi.n	801911a <APP_LCD_PollUnbusy+0x16>
    return MIOS32_BOARD_J15_PollUnbusy(mios32_lcd_device, time_out);
 8019110:	4621      	mov	r1, r4
  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error

  return 0; // no error
}
 8019112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
// Polls for unbusy depending on mios32_lcd_device
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_PollUnbusy(u32 time_out)
{
  if( mios32_lcd_device < 2 ) {
    return MIOS32_BOARD_J15_PollUnbusy(mios32_lcd_device, time_out);
 8019116:	f7fa bb9b 	b.w	8013850 <MIOS32_BOARD_J15_PollUnbusy>
  }

  if( mios32_lcd_device >= MAX_LCDS )
 801911a:	283f      	cmp	r0, #63	; 0x3f
 801911c:	d902      	bls.n	8019124 <APP_LCD_PollUnbusy+0x20>
    return -1; // LCD not supported
 801911e:	f04f 30ff 	mov.w	r0, #4294967295
 8019122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  u32 poll_ctr;
  u32 delay_ctr;

  // select command register (RS=0)
  MIOS32_BOARD_J15_RS_Set(0);
 8019124:	2000      	movs	r0, #0
 8019126:	f7fa fb59 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>

  // enable pull-up
  MIOS32_BOARD_J15_D7InPullUpEnable(1);
 801912a:	2001      	movs	r0, #1
 801912c:	f7fa fb8e 	bl	801384c <MIOS32_BOARD_J15_D7InPullUpEnable>

  // select read (will also disable output buffer of 74HC595)
  MIOS32_BOARD_J15_RW_Set(1);
 8019130:	2001      	movs	r0, #1
 8019132:	f7fa fb5f 	bl	80137f4 <MIOS32_BOARD_J15_RW_Set>

  // check if E pin is available
  if( APP_LCD_E_Set(1) < 0 )
 8019136:	2001      	movs	r0, #1
 8019138:	f7ff ffa4 	bl	8019084 <APP_LCD_E_Set>
 801913c:	2800      	cmp	r0, #0
 801913e:	dbee      	blt.n	801911e <APP_LCD_PollUnbusy+0x1a>
 8019140:	2600      	movs	r6, #0
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 8019142:	b19c      	cbz	r4, 801916c <APP_LCD_PollUnbusy+0x68>
    APP_LCD_E_Set(1);
 8019144:	2001      	movs	r0, #1
 8019146:	f7ff ff9d 	bl	8019084 <APP_LCD_E_Set>
 801914a:	250a      	movs	r5, #10

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
      MIOS32_BOARD_J15_RW_Set(1);
 801914c:	2001      	movs	r0, #1
 801914e:	f7fa fb51 	bl	80137f4 <MIOS32_BOARD_J15_RW_Set>
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
    APP_LCD_E_Set(1);

    // due to slow slope we should wait at least for 1 uS
    for(delay_ctr=0; delay_ctr<10; ++delay_ctr)
 8019152:	3d01      	subs	r5, #1
 8019154:	d1fa      	bne.n	801914c <APP_LCD_PollUnbusy+0x48>
      MIOS32_BOARD_J15_RW_Set(1);

    u32 busy = MIOS32_BOARD_J15_GetD7In();
 8019156:	f7fa fb71 	bl	801383c <MIOS32_BOARD_J15_GetD7In>
 801915a:	4607      	mov	r7, r0
    APP_LCD_E_Set(0);
 801915c:	4628      	mov	r0, r5
 801915e:	f7ff ff91 	bl	8019084 <APP_LCD_E_Set>
    if( !busy && ++repeat_ctr >= 2)
 8019162:	b90f      	cbnz	r7, 8019168 <APP_LCD_PollUnbusy+0x64>
 8019164:	b916      	cbnz	r6, 801916c <APP_LCD_PollUnbusy+0x68>
 8019166:	2601      	movs	r6, #1
    return -1; // LCD port not available

  // poll busy flag, timeout after 10 mS
  // each loop takes ca. 4 uS @ 72MHz, this has to be considered when defining the time_out value
  u32 repeat_ctr = 0;
  for(poll_ctr=time_out; poll_ctr>0; --poll_ctr) {
 8019168:	3c01      	subs	r4, #1
 801916a:	e7ea      	b.n	8019142 <APP_LCD_PollUnbusy+0x3e>
    // TODO: not understood yet: I've a particular LCD which sporadically flags unbusy on a STM32F4
    //       during the first poll, but busy on following polls until it's really unbusy
  }

  // disable pull-up
  MIOS32_BOARD_J15_D7InPullUpEnable(0);
 801916c:	2000      	movs	r0, #0
 801916e:	f7fa fb6d 	bl	801384c <MIOS32_BOARD_J15_D7InPullUpEnable>

  // deselect read (output buffers of 74HC595 enabled again)
  MIOS32_BOARD_J15_RW_Set(0);
 8019172:	2000      	movs	r0, #0
 8019174:	f7fa fb3e 	bl	80137f4 <MIOS32_BOARD_J15_RW_Set>

  // timeout?
  if( poll_ctr == 0 )
    return -2; // timeout error
 8019178:	2c00      	cmp	r4, #0
 801917a:	bf14      	ite	ne
 801917c:	2000      	movne	r0, #0
 801917e:	f06f 0001 	mvneq.w	r0, #1

  return 0; // no error
}
 8019182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019184:	20000180 	.word	0x20000180

08019188 <APP_LCD_SERGLCD_CS_Set.constprop.2>:

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 8019188:	b570      	push	{r4, r5, r6, lr}
{
  // alternative pinning option for applications which want to access CLCD and SER LCDs
  if( lcd_alt_pinning ) {
 801918a:	4b48      	ldr	r3, [pc, #288]	; (80192ac <APP_LCD_SERGLCD_CS_Set.constprop.2+0x124>)
 801918c:	781e      	ldrb	r6, [r3, #0]

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 801918e:	4605      	mov	r5, r0
{
  // alternative pinning option for applications which want to access CLCD and SER LCDs
  if( lcd_alt_pinning ) {
 8019190:	b1fe      	cbz	r6, 80191d2 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x4a>
    u8 level_active = 0;
    u8 level_nonactive = 1;

    int cs;
    if( all ) {
 8019192:	b180      	cbz	r0, 80191b6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x2e>
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 8019194:	2100      	movs	r1, #0
 8019196:	200c      	movs	r0, #12
 8019198:	f7fa fa48 	bl	801362c <MIOS32_BOARD_J10_PinSet>
 801919c:	2100      	movs	r1, #0
 801919e:	200d      	movs	r0, #13
 80191a0:	f7fa fa44 	bl	801362c <MIOS32_BOARD_J10_PinSet>
 80191a4:	2100      	movs	r1, #0
 80191a6:	200e      	movs	r0, #14
 80191a8:	f7fa fa40 	bl	801362c <MIOS32_BOARD_J10_PinSet>
 80191ac:	200f      	movs	r0, #15
 80191ae:	2100      	movs	r1, #0
 80191b0:	f7fa fa3c 	bl	801362c <MIOS32_BOARD_J10_PinSet>
 80191b4:	e077      	b.n	80192a6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, (cs == mios32_lcd_device) ? level_active : level_nonactive);
 80191b6:	493e      	ldr	r1, [pc, #248]	; (80192b0 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
 80191b8:	780a      	ldrb	r2, [r1, #0]

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 80191ba:	f105 000c 	add.w	r0, r5, #12
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 80191be:	1aa9      	subs	r1, r5, r2
 80191c0:	bf18      	it	ne
 80191c2:	2101      	movne	r1, #1
 80191c4:	b2c0      	uxtb	r0, r0
      // set all chip select lines
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
 80191c6:	3501      	adds	r5, #1
// set alternative pin directly
inline static s32 APP_LCD_ExtPort_AltPinCsSet(u8 pin, u8 value) {
#if defined(MIOS32_FAMILY_STM32F10x)
  return MIOS32_BOARD_J5_PinSet(pin + 0, value); // J5A.A0..A3
#elif defined(MIOS32_FAMILY_STM32F4xx)
  return MIOS32_BOARD_J10_PinSet(pin + 12, value); // J10B.D12..D15
 80191c8:	f7fa fa30 	bl	801362c <MIOS32_BOARD_J10_PinSet>
      // set all chip select lines
      for(cs=0; cs<4; ++cs)
	APP_LCD_ExtPort_AltPinCsSet(cs, level_active);
    } else {
      // set only CS of GLCD which is selected with mios32_lcd_device
      for(cs=0; cs<4; ++cs)
 80191cc:	2d04      	cmp	r5, #4
 80191ce:	d1f2      	bne.n	80191b6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x2e>
 80191d0:	e069      	b.n	80192a6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	APP_LCD_ExtPort_AltPinCsSet(cs, (cs == mios32_lcd_device) ? level_active : level_nonactive);
    }
  } else {

    int num_additional_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y - 8;
 80191d2:	4838      	ldr	r0, [pc, #224]	; (80192b4 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x12c>)
 80191d4:	4b38      	ldr	r3, [pc, #224]	; (80192b8 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x130>)
 80191d6:	7844      	ldrb	r4, [r0, #1]
 80191d8:	7881      	ldrb	r1, [r0, #2]
 80191da:	fb14 f401 	smulbb	r4, r4, r1
 80191de:	3c08      	subs	r4, #8
    if( num_additional_lcds >= (MAX_LCDS-8) )
      num_additional_lcds = (MAX_LCDS-8);
 80191e0:	2c38      	cmp	r4, #56	; 0x38
 80191e2:	bfa8      	it	ge
 80191e4:	2438      	movge	r4, #56	; 0x38

    // Note: assume that CS lines are low-active!
    if( all ) {
 80191e6:	b305      	cbz	r5, 801922a <APP_LCD_SERGLCD_CS_Set.constprop.2+0xa2>
      if( prev_glcd_selection != 0xff ) {
 80191e8:	7818      	ldrb	r0, [r3, #0]
 80191ea:	28ff      	cmp	r0, #255	; 0xff
 80191ec:	d05b      	beq.n	80192a6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	prev_glcd_selection = 0xff;
 80191ee:	22ff      	movs	r2, #255	; 0xff
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);
 80191f0:	4630      	mov	r0, r6
      num_additional_lcds = (MAX_LCDS-8);

    // Note: assume that CS lines are low-active!
    if( all ) {
      if( prev_glcd_selection != 0xff ) {
	prev_glcd_selection = 0xff;
 80191f2:	701a      	strb	r2, [r3, #0]
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);
 80191f4:	f7fa fa9c 	bl	8013730 <MIOS32_BOARD_J15_DataSet>

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 80191f8:	2c08      	cmp	r4, #8
 80191fa:	dc08      	bgt.n	801920e <APP_LCD_SERGLCD_CS_Set.constprop.2+0x86>
 80191fc:	4635      	mov	r5, r6
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 80191fe:	42a5      	cmp	r5, r4
 8019200:	da51      	bge.n	80192a6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	    APP_LCD_ExtPort_PinSet(i, value ? 0 : 1);
 8019202:	b2e8      	uxtb	r0, r5
 8019204:	2100      	movs	r1, #0
 8019206:	f7ff fe9b 	bl	8018f40 <APP_LCD_ExtPort_PinSet>
	prev_glcd_selection = 0xff;
	MIOS32_BOARD_J15_DataSet(value ? 0x00 : 0xff);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 801920a:	3501      	adds	r5, #1
 801920c:	e7f7      	b.n	80191fe <APP_LCD_SERGLCD_CS_Set.constprop.2+0x76>
	    APP_LCD_ExtPort_PinSet(i, value ? 0 : 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
 801920e:	10e3      	asrs	r3, r4, #3
	  if( num_additional_lcds % 8 )
 8019210:	0762      	lsls	r2, r4, #29
	    ++num_shifts;
 8019212:	bf18      	it	ne
 8019214:	3301      	addne	r3, #1

	  // shift data
	  int i;
	  for(i=num_shifts-1; i>=0; --i) {
 8019216:	1e5c      	subs	r4, r3, #1
 8019218:	2000      	movs	r0, #0
 801921a:	f7ff fef7 	bl	801900c <APP_LCD_ExtPort_SerDataShift.part.0>
 801921e:	f114 34ff 	adds.w	r4, r4, #4294967295
 8019222:	d2f9      	bcs.n	8019218 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x90>
	    APP_LCD_ExtPort_SerDataShift(value ? 0x00 : 0xff, 1);
	  }

	  // update serial shift registers
	  APP_LCD_ExtPort_UpdateSRs();
 8019224:	f7ff fe90 	bl	8018f48 <APP_LCD_ExtPort_UpdateSRs>
 8019228:	e03d      	b.n	80192a6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	}
      }
    } else {
      if( prev_glcd_selection != mios32_lcd_device ) {
 801922a:	4a21      	ldr	r2, [pc, #132]	; (80192b0 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
 801922c:	7819      	ldrb	r1, [r3, #0]
 801922e:	7810      	ldrb	r0, [r2, #0]
 8019230:	4281      	cmp	r1, r0
 8019232:	d038      	beq.n	80192a6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>
	prev_glcd_selection = mios32_lcd_device;
	u32 mask = value ? ~(1 << mios32_lcd_device) : 0xffffffff;
 8019234:	2601      	movs	r6, #1
	  APP_LCD_ExtPort_UpdateSRs();
	}
      }
    } else {
      if( prev_glcd_selection != mios32_lcd_device ) {
	prev_glcd_selection = mios32_lcd_device;
 8019236:	7018      	strb	r0, [r3, #0]
	u32 mask = value ? ~(1 << mios32_lcd_device) : 0xffffffff;
 8019238:	fa06 f300 	lsl.w	r3, r6, r0
 801923c:	43de      	mvns	r6, r3

	MIOS32_BOARD_J15_DataSet(mask);
 801923e:	b2f0      	uxtb	r0, r6
 8019240:	f7fa fa76 	bl	8013730 <MIOS32_BOARD_J15_DataSet>

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
 8019244:	2c08      	cmp	r4, #8
 8019246:	dc0c      	bgt.n	8019262 <APP_LCD_SERGLCD_CS_Set.constprop.2+0xda>
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 8019248:	42a5      	cmp	r5, r4
 801924a:	da2c      	bge.n	80192a6 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x11e>

/////////////////////////////////////////////////////////////////////////////
// Sets the CS line of a serial GLCDs depending on mios32_lcd_device
// if "all" flag is set, commands are sent to all segments
/////////////////////////////////////////////////////////////////////////////
static s32 APP_LCD_SERGLCD_CS_Set(u8 value, u8 all)
 801924c:	f105 0208 	add.w	r2, r5, #8
	MIOS32_BOARD_J15_DataSet(mask);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
 8019250:	fa26 f102 	lsr.w	r1, r6, r2
 8019254:	b2e8      	uxtb	r0, r5
 8019256:	f001 0101 	and.w	r1, r1, #1
 801925a:	f7ff fe71 	bl	8018f40 <APP_LCD_ExtPort_PinSet>

	MIOS32_BOARD_J15_DataSet(mask);

	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
 801925e:	3501      	adds	r5, #1
 8019260:	e7f2      	b.n	8019248 <APP_LCD_SERGLCD_CS_Set.constprop.2+0xc0>
	} else {
	  int num_shifts = num_additional_lcds / 8;
	  if( num_additional_lcds % 8 )
	    ++num_shifts;

	  int selected_lcd = mios32_lcd_device - 8;
 8019262:	4d13      	ldr	r5, [pc, #76]	; (80192b0 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x128>)
	if( num_additional_lcds <= APP_LCD_NUM_EXT_PINS ) {
	  int i;
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
 8019264:	10e2      	asrs	r2, r4, #3
	  if( num_additional_lcds % 8 )
 8019266:	0766      	lsls	r6, r4, #29
	    ++num_shifts;

	  int selected_lcd = mios32_lcd_device - 8;
 8019268:	782c      	ldrb	r4, [r5, #0]
	  for(i=0; i<num_additional_lcds; ++i)
	    APP_LCD_ExtPort_PinSet(i, (mask >> (8+i)) & 1);
	} else {
	  int num_shifts = num_additional_lcds / 8;
	  if( num_additional_lcds % 8 )
	    ++num_shifts;
 801926a:	bf18      	it	ne
 801926c:	3201      	addne	r2, #1

	  int selected_lcd = mios32_lcd_device - 8;
 801926e:	3c08      	subs	r4, #8
	  int selected_lcd_sr = selected_lcd / 8;
 8019270:	2008      	movs	r0, #8
 8019272:	fb94 f6f0 	sdiv	r6, r4, r0
	  u8 selected_lcd_mask = value ? ~(1 << (selected_lcd % 8)) : 0xff;
 8019276:	4811      	ldr	r0, [pc, #68]	; (80192bc <APP_LCD_SERGLCD_CS_Set.constprop.2+0x134>)
 8019278:	4020      	ands	r0, r4
 801927a:	2800      	cmp	r0, #0
 801927c:	da03      	bge.n	8019286 <APP_LCD_SERGLCD_CS_Set.constprop.2+0xfe>
 801927e:	1e41      	subs	r1, r0, #1
 8019280:	f061 0307 	orn	r3, r1, #7
 8019284:	1c58      	adds	r0, r3, #1
 8019286:	2501      	movs	r5, #1
 8019288:	fa05 f500 	lsl.w	r5, r5, r0
 801928c:	43ec      	mvns	r4, r5
 801928e:	b2e5      	uxtb	r5, r4

	  // shift data
	  int i;
	  for(i=num_shifts-1; i>=0; --i) {
 8019290:	1e54      	subs	r4, r2, #1
 8019292:	42b4      	cmp	r4, r6
 8019294:	bf0c      	ite	eq
 8019296:	4628      	moveq	r0, r5
 8019298:	20ff      	movne	r0, #255	; 0xff
 801929a:	f7ff feb7 	bl	801900c <APP_LCD_ExtPort_SerDataShift.part.0>
 801929e:	f114 34ff 	adds.w	r4, r4, #4294967295
 80192a2:	d2f6      	bcs.n	8019292 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x10a>
 80192a4:	e7be      	b.n	8019224 <APP_LCD_SERGLCD_CS_Set.constprop.2+0x9c>
      }
    }
  }

  return 0; // no error
}
 80192a6:	2000      	movs	r0, #0
 80192a8:	bd70      	pop	{r4, r5, r6, pc}
 80192aa:	bf00      	nop
 80192ac:	200005e0 	.word	0x200005e0
 80192b0:	20000180 	.word	0x20000180
 80192b4:	20010dd2 	.word	0x20010dd2
 80192b8:	20000060 	.word	0x20000060
 80192bc:	80000007 	.word	0x80000007

080192c0 <APP_LCD_Cmd>:
// Sends command byte to LCD
// IN: command byte in <cmd>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
 80192c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if( lcd_testmode )
 80192c4:	4b46      	ldr	r3, [pc, #280]	; (80193e0 <APP_LCD_Cmd+0x120>)
 80192c6:	781f      	ldrb	r7, [r3, #0]
// Sends command byte to LCD
// IN: command byte in <cmd>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
 80192c8:	4606      	mov	r6, r0
  if( lcd_testmode )
 80192ca:	2f00      	cmp	r7, #0
 80192cc:	f040 8084 	bne.w	80193d8 <APP_LCD_Cmd+0x118>
    return -1; // direct access disabled in testmode

  // check if if display already has been disabled
  if( !(display_available & (1ULL << mios32_lcd_device)) )
 80192d0:	4844      	ldr	r0, [pc, #272]	; (80193e4 <APP_LCD_Cmd+0x124>)
 80192d2:	4945      	ldr	r1, [pc, #276]	; (80193e8 <APP_LCD_Cmd+0x128>)
 80192d4:	f890 8000 	ldrb.w	r8, [r0]
 80192d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80192dc:	4642      	mov	r2, r8
 80192de:	f002 fcf7 	bl	801bcd0 <__aeabi_llsr>
 80192e2:	2401      	movs	r4, #1
 80192e4:	2500      	movs	r5, #0
 80192e6:	4020      	ands	r0, r4
 80192e8:	4029      	ands	r1, r5
 80192ea:	ea50 0301 	orrs.w	r3, r0, r1
 80192ee:	d073      	beq.n	80193d8 <APP_LCD_Cmd+0x118>
    return -1;

  switch( mios32_lcd_parameters.lcd_type ) {
 80192f0:	4a3e      	ldr	r2, [pc, #248]	; (80193ec <APP_LCD_Cmd+0x12c>)
 80192f2:	7813      	ldrb	r3, [r2, #0]
 80192f4:	337f      	adds	r3, #127	; 0x7f
 80192f6:	b2d8      	uxtb	r0, r3
 80192f8:	2805      	cmp	r0, #5
 80192fa:	d845      	bhi.n	8019388 <APP_LCD_Cmd+0xc8>
 80192fc:	b25d      	sxtb	r5, r3
 80192fe:	2401      	movs	r4, #1
 8019300:	fa04 f105 	lsl.w	r1, r4, r5
 8019304:	f011 0523 	ands.w	r5, r1, #35	; 0x23
 8019308:	d10e      	bne.n	8019328 <APP_LCD_Cmd+0x68>
 801930a:	f011 0718 	ands.w	r7, r1, #24
 801930e:	d123      	bne.n	8019358 <APP_LCD_Cmd+0x98>
 8019310:	0749      	lsls	r1, r1, #29
 8019312:	d539      	bpl.n	8019388 <APP_LCD_Cmd+0xc8>
    return 0; // no error
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // select all LCDs
    APP_LCD_SERGLCD_CS_Set(1, 1);
 8019314:	4620      	mov	r0, r4
 8019316:	f7ff ff37 	bl	8019188 <APP_LCD_SERGLCD_CS_Set.constprop.2>
    MIOS32_BOARD_J15_RS_Set(0); // RS pin used to control A0
 801931a:	4638      	mov	r0, r7
 801931c:	f7fa fa5e 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>

    // send command
    MIOS32_BOARD_J15_SerDataShift(cmd);
 8019320:	4630      	mov	r0, r6
 8019322:	f7fa fa27 	bl	8013774 <MIOS32_BOARD_J15_SerDataShift>
 8019326:	e054      	b.n	80193d2 <APP_LCD_Cmd+0x112>
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {

    // due to historical reasons currently only two devices provided, they are spreaded over multiple CS lines
    if( mios32_lcd_device >= 2 )
 8019328:	f1b8 0f01 	cmp.w	r8, #1
 801932c:	d854      	bhi.n	80193d8 <APP_LCD_Cmd+0x118>
      return -1;

    // determine chip select line(s)
    APP_LCD_GLCD_CS_Set(0); // select display depending on current X position
 801932e:	4638      	mov	r0, r7
 8019330:	f7ff fe16 	bl	8018f60 <APP_LCD_GLCD_CS_Set>

    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(10000) < 0 ) {
 8019334:	f242 7010 	movw	r0, #10000	; 0x2710
 8019338:	f7ff fee4 	bl	8019104 <APP_LCD_PollUnbusy>
#endif
      //return -2; // timeout
    }

    // select all displays
    APP_LCD_GLCD_CS_Set(1);
 801933c:	4620      	mov	r0, r4
 801933e:	f7ff fe0f 	bl	8018f60 <APP_LCD_GLCD_CS_Set>

    // write command
    MIOS32_BOARD_J15_DataSet(cmd);
 8019342:	4630      	mov	r0, r6
 8019344:	f7fa f9f4 	bl	8013730 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 8019348:	4638      	mov	r0, r7
 801934a:	f7fa fa47 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 801934e:	4620      	mov	r0, r4
 8019350:	f7ff fe98 	bl	8019084 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 8019354:	4638      	mov	r0, r7
 8019356:	e03a      	b.n	80193ce <APP_LCD_Cmd+0x10e>
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    // select all LCDs
    APP_LCD_SERGLCD_CS_Set(1, 1);
 8019358:	4620      	mov	r0, r4
 801935a:	f7ff ff15 	bl	8019188 <APP_LCD_SERGLCD_CS_Set.constprop.2>

    // alternative pinning option for applications which want to access CLCD and SER LCDs
    if( lcd_alt_pinning ) {
 801935e:	4a24      	ldr	r2, [pc, #144]	; (80193f0 <APP_LCD_Cmd+0x130>)
 8019360:	7810      	ldrb	r0, [r2, #0]
 8019362:	b140      	cbz	r0, 8019376 <APP_LCD_Cmd+0xb6>
      APP_LCD_ExtPort_PinSet(2, 0); // DC
 8019364:	4629      	mov	r1, r5
 8019366:	2002      	movs	r0, #2
 8019368:	f7ff fdea 	bl	8018f40 <APP_LCD_ExtPort_PinSet>

      // send data
      APP_LCD_ExtPort_SerDataShift(cmd, 0);
 801936c:	4630      	mov	r0, r6
 801936e:	4629      	mov	r1, r5
 8019370:	f7ff fe66 	bl	8019040 <APP_LCD_ExtPort_SerDataShift>
 8019374:	e004      	b.n	8019380 <APP_LCD_Cmd+0xc0>
    } else {
      MIOS32_BOARD_J15_RS_Set(0); // RS pin used to control DC
 8019376:	f7fa fa31 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>

      MIOS32_BOARD_J15_SerDataShift(cmd);
 801937a:	4630      	mov	r0, r6
 801937c:	f7fa f9fa 	bl	8013774 <MIOS32_BOARD_J15_SerDataShift>

    return 0; // no error
  }
  }

  return -3; // not supported
 8019380:	f06f 0002 	mvn.w	r0, #2
 8019384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default: {
    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(10000) < 0 ) {
 8019388:	f242 7010 	movw	r0, #10000	; 0x2710
 801938c:	f7ff feba 	bl	8019104 <APP_LCD_PollUnbusy>
 8019390:	2800      	cmp	r0, #0
 8019392:	da12      	bge.n	80193ba <APP_LCD_Cmd+0xfa>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 8019394:	4b13      	ldr	r3, [pc, #76]	; (80193e4 <APP_LCD_Cmd+0x124>)
 8019396:	4c14      	ldr	r4, [pc, #80]	; (80193e8 <APP_LCD_Cmd+0x128>)
 8019398:	781a      	ldrb	r2, [r3, #0]
 801939a:	2001      	movs	r0, #1
 801939c:	2100      	movs	r1, #0
 801939e:	f002 fca3 	bl	801bce8 <__aeabi_llsl>
 80193a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80193a6:	ea22 0000 	bic.w	r0, r2, r0
 80193aa:	ea23 0101 	bic.w	r1, r3, r1
 80193ae:	e9c4 0100 	strd	r0, r1, [r4]
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[APP_LCD_Cmd] lost connection to LCD at E%d\n", mios32_lcd_device+1);
#endif
      return -2; // timeout
 80193b2:	f06f 0001 	mvn.w	r0, #1
 80193b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // write command
    MIOS32_BOARD_J15_DataSet(cmd);
 80193ba:	4630      	mov	r0, r6
 80193bc:	f7fa f9b8 	bl	8013730 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 80193c0:	2000      	movs	r0, #0
 80193c2:	f7fa fa0b 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 80193c6:	2001      	movs	r0, #1
 80193c8:	f7ff fe5c 	bl	8019084 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 80193cc:	2000      	movs	r0, #0
 80193ce:	f7ff fe59 	bl	8019084 <APP_LCD_E_Set>

    return 0; // no error
 80193d2:	2000      	movs	r0, #0
 80193d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Cmd(u8 cmd)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 80193d8:	f04f 30ff 	mov.w	r0, #4294967295
    return 0; // no error
  }
  }

  return -3; // not supported
}
 80193dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193e0:	200005d1 	.word	0x200005d1
 80193e4:	20000180 	.word	0x20000180
 80193e8:	200005d8 	.word	0x200005d8
 80193ec:	20010dd2 	.word	0x20010dd2
 80193f0:	200005e0 	.word	0x200005e0

080193f4 <APP_LCD_Data>:
// Sends data byte to LCD
// IN: data byte in <data>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
 80193f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if( lcd_testmode )
 80193f8:	4b74      	ldr	r3, [pc, #464]	; (80195cc <APP_LCD_Data+0x1d8>)
 80193fa:	781d      	ldrb	r5, [r3, #0]
// Sends data byte to LCD
// IN: data byte in <data>
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
 80193fc:	4680      	mov	r8, r0
  if( lcd_testmode )
 80193fe:	2d00      	cmp	r5, #0
 8019400:	f040 80df 	bne.w	80195c2 <APP_LCD_Data+0x1ce>
    return -1; // direct access disabled in testmode

  // check if if display already has been disabled
  if( !(display_available & (1ULL << mios32_lcd_device)) )
 8019404:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80195e0 <APP_LCD_Data+0x1ec>
 8019408:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80195e4 <APP_LCD_Data+0x1f0>
 801940c:	f899 b000 	ldrb.w	fp, [r9]
 8019410:	e9da 0100 	ldrd	r0, r1, [sl]
 8019414:	465a      	mov	r2, fp
 8019416:	f002 fc5b 	bl	801bcd0 <__aeabi_llsr>
 801941a:	2201      	movs	r2, #1
 801941c:	2300      	movs	r3, #0
 801941e:	4010      	ands	r0, r2
 8019420:	4019      	ands	r1, r3
 8019422:	ea50 0301 	orrs.w	r3, r0, r1
 8019426:	f000 80cc 	beq.w	80195c2 <APP_LCD_Data+0x1ce>
    return -1;

  switch( mios32_lcd_parameters.lcd_type ) {
 801942a:	4c69      	ldr	r4, [pc, #420]	; (80195d0 <APP_LCD_Data+0x1dc>)
 801942c:	7820      	ldrb	r0, [r4, #0]
 801942e:	307f      	adds	r0, #127	; 0x7f
 8019430:	b2c1      	uxtb	r1, r0
 8019432:	2905      	cmp	r1, #5
 8019434:	f200 809d 	bhi.w	8019572 <APP_LCD_Data+0x17e>
 8019438:	b247      	sxtb	r7, r0
 801943a:	2601      	movs	r6, #1
 801943c:	fa06 f207 	lsl.w	r2, r6, r7
 8019440:	f012 0723 	ands.w	r7, r2, #35	; 0x23
 8019444:	d105      	bne.n	8019452 <APP_LCD_Data+0x5e>
 8019446:	f012 0018 	ands.w	r0, r2, #24
 801944a:	d169      	bne.n	8019520 <APP_LCD_Data+0x12c>
 801944c:	0753      	lsls	r3, r2, #29
 801944e:	d44a      	bmi.n	80194e6 <APP_LCD_Data+0xf2>
 8019450:	e08f      	b.n	8019572 <APP_LCD_Data+0x17e>
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {

    // due to historical reasons currently only two devices provided, they are spreaded over multiple CS lines
    if( mios32_lcd_device >= 2 )
 8019452:	f1bb 0f01 	cmp.w	fp, #1
 8019456:	f200 80b4 	bhi.w	80195c2 <APP_LCD_Data+0x1ce>
      return -1;

    // abort if max. width or height reached
    if( mios32_lcd_x >= mios32_lcd_parameters.width || mios32_lcd_y >= mios32_lcd_parameters.height )
 801945a:	4f5e      	ldr	r7, [pc, #376]	; (80195d4 <APP_LCD_Data+0x1e0>)
 801945c:	88a2      	ldrh	r2, [r4, #4]
 801945e:	8839      	ldrh	r1, [r7, #0]
 8019460:	4291      	cmp	r1, r2
 8019462:	f080 80ae 	bcs.w	80195c2 <APP_LCD_Data+0x1ce>
 8019466:	4b5c      	ldr	r3, [pc, #368]	; (80195d8 <APP_LCD_Data+0x1e4>)
 8019468:	88e1      	ldrh	r1, [r4, #6]
 801946a:	8818      	ldrh	r0, [r3, #0]
 801946c:	4288      	cmp	r0, r1
 801946e:	f080 80a8 	bcs.w	80195c2 <APP_LCD_Data+0x1ce>
      return -1;

    // determine chip select line(s)
    APP_LCD_GLCD_CS_Set(0); // select display depending on current X position
 8019472:	4628      	mov	r0, r5
 8019474:	f7ff fd74 	bl	8018f60 <APP_LCD_GLCD_CS_Set>

    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(2500) < 0 ) {
 8019478:	f640 10c4 	movw	r0, #2500	; 0x9c4
 801947c:	f7ff fe42 	bl	8019104 <APP_LCD_PollUnbusy>
 8019480:	2800      	cmp	r0, #0
 8019482:	da0e      	bge.n	80194a2 <APP_LCD_Data+0xae>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 8019484:	f899 2000 	ldrb.w	r2, [r9]
 8019488:	2001      	movs	r0, #1
 801948a:	2100      	movs	r1, #0
 801948c:	f002 fc2c 	bl	801bce8 <__aeabi_llsl>
 8019490:	e9da 2300 	ldrd	r2, r3, [sl]
 8019494:	ea22 0000 	bic.w	r0, r2, r0
 8019498:	ea23 0101 	bic.w	r1, r3, r1
 801949c:	e9ca 0100 	strd	r0, r1, [sl]
 80194a0:	e07c      	b.n	801959c <APP_LCD_Data+0x1a8>
#endif
      return -2; // timeout
    }

    // write data
    MIOS32_BOARD_J15_DataSet(data);
 80194a2:	4640      	mov	r0, r8
 80194a4:	f7fa f944 	bl	8013730 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(1);
 80194a8:	4630      	mov	r0, r6
 80194aa:	f7fa f997 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 80194ae:	4630      	mov	r0, r6
 80194b0:	f7ff fde8 	bl	8019084 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 80194b4:	4628      	mov	r0, r5
 80194b6:	f7ff fde5 	bl	8019084 <APP_LCD_E_Set>

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 80194ba:	883b      	ldrh	r3, [r7, #0]
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 80194bc:	7822      	ldrb	r2, [r4, #0]
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 80194be:	f103 0301 	add.w	r3, r3, #1
 80194c2:	b298      	uxth	r0, r3
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 80194c4:	2a86      	cmp	r2, #134	; 0x86
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 80194c6:	8038      	strh	r0, [r7, #0]
    APP_LCD_E_Set(1);
    APP_LCD_E_Set(0);

    // increment graphical cursor
    // if end of display segment reached: set X position of all segments to 0
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SED1520 ) {
 80194c8:	d109      	bne.n	80194de <APP_LCD_Data+0xea>
#if SED1520_POLLIN_WINTEK_WD_G1203T
      if( (++mios32_lcd_x % 61) == 0 )
 80194ca:	223d      	movs	r2, #61	; 0x3d
 80194cc:	fbb0 f1f2 	udiv	r1, r0, r2
 80194d0:	fb02 0311 	mls	r3, r2, r1, r0
 80194d4:	b298      	uxth	r0, r3
 80194d6:	2800      	cmp	r0, #0
 80194d8:	d170      	bne.n	80195bc <APP_LCD_Data+0x1c8>
	return APP_LCD_Cmd(0x00 + 0);
 80194da:	2000      	movs	r0, #0
 80194dc:	e01c      	b.n	8019518 <APP_LCD_Data+0x124>
#else
      if( (++mios32_lcd_x % 64) == 0 )
	return APP_LCD_Cmd(0x00 + 0);
#endif
    } else {
      if( (++mios32_lcd_x % 64) == 0 )
 80194de:	0680      	lsls	r0, r0, #26
 80194e0:	d16c      	bne.n	80195bc <APP_LCD_Data+0x1c8>
	return APP_LCD_Cmd(0x40 + 0);
 80194e2:	2040      	movs	r0, #64	; 0x40
 80194e4:	e018      	b.n	8019518 <APP_LCD_Data+0x124>
    return 0; // no error
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // chip select and DC
    APP_LCD_SERGLCD_CS_Set(1, 0);
 80194e6:	f7ff fe4f 	bl	8019188 <APP_LCD_SERGLCD_CS_Set.constprop.2>
    MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control A0
 80194ea:	4630      	mov	r0, r6
 80194ec:	f7fa f976 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>

    // send data
    MIOS32_BOARD_J15_SerDataShift(data);
 80194f0:	4640      	mov	r0, r8
 80194f2:	f7fa f93f 	bl	8013774 <MIOS32_BOARD_J15_SerDataShift>

    // increment graphical cursor
    ++mios32_lcd_x;
 80194f6:	4b37      	ldr	r3, [pc, #220]	; (80195d4 <APP_LCD_Data+0x1e0>)
 80194f8:	8818      	ldrh	r0, [r3, #0]
 80194fa:	1c41      	adds	r1, r0, #1
 80194fc:	b28a      	uxth	r2, r1
 80194fe:	801a      	strh	r2, [r3, #0]

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 8019500:	88a3      	ldrh	r3, [r4, #4]
 8019502:	fbb2 f4f3 	udiv	r4, r2, r3
 8019506:	fb03 2014 	mls	r0, r3, r4, r2
 801950a:	b284      	uxth	r4, r0
 801950c:	2c00      	cmp	r4, #0
 801950e:	d155      	bne.n	80195bc <APP_LCD_Data+0x1c8>
      APP_LCD_Cmd(0x10); // Set upper nibble to 0
 8019510:	2010      	movs	r0, #16
 8019512:	f7ff fed5 	bl	80192c0 <APP_LCD_Cmd>
      return APP_LCD_Cmd(0x00); // Set lower nibble to 0
 8019516:	4620      	mov	r0, r4
    return 0; // no error
  }
  }

  return -3; // not supported
}
 8019518:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ++mios32_lcd_x;

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
      APP_LCD_Cmd(0x10); // Set upper nibble to 0
      return APP_LCD_Cmd(0x00); // Set lower nibble to 0
 801951c:	f7ff bed0 	b.w	80192c0 <APP_LCD_Cmd>
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    // chip select and DC
    APP_LCD_SERGLCD_CS_Set(1, 0);
 8019520:	4638      	mov	r0, r7
 8019522:	f7ff fe31 	bl	8019188 <APP_LCD_SERGLCD_CS_Set.constprop.2>

    // alternative pinning option for applications which want to access CLCD and SER LCDs
    if( lcd_alt_pinning ) {
 8019526:	492d      	ldr	r1, [pc, #180]	; (80195dc <APP_LCD_Data+0x1e8>)
 8019528:	780a      	ldrb	r2, [r1, #0]
 801952a:	b142      	cbz	r2, 801953e <APP_LCD_Data+0x14a>
      APP_LCD_ExtPort_PinSet(2, 1); // DC
 801952c:	4631      	mov	r1, r6
 801952e:	2002      	movs	r0, #2
 8019530:	f7ff fd06 	bl	8018f40 <APP_LCD_ExtPort_PinSet>

      // send data
      APP_LCD_ExtPort_SerDataShift(data, 0);
 8019534:	4640      	mov	r0, r8
 8019536:	4639      	mov	r1, r7
 8019538:	f7ff fd82 	bl	8019040 <APP_LCD_ExtPort_SerDataShift>
 801953c:	e005      	b.n	801954a <APP_LCD_Data+0x156>
    } else {
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 801953e:	4630      	mov	r0, r6
 8019540:	f7fa f94c 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>

      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
 8019544:	4640      	mov	r0, r8
 8019546:	f7fa f915 	bl	8013774 <MIOS32_BOARD_J15_SerDataShift>
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 801954a:	4c22      	ldr	r4, [pc, #136]	; (80195d4 <APP_LCD_Data+0x1e0>)

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 801954c:	4a20      	ldr	r2, [pc, #128]	; (80195d0 <APP_LCD_Data+0x1dc>)
      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 801954e:	8823      	ldrh	r3, [r4, #0]
 8019550:	1c58      	adds	r0, r3, #1

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 8019552:	8893      	ldrh	r3, [r2, #4]
      // send data
      MIOS32_BOARD_J15_SerDataShift(data);
    }

    // increment graphical cursor
    ++mios32_lcd_x;
 8019554:	b281      	uxth	r1, r0
 8019556:	8021      	strh	r1, [r4, #0]

    // if end of display segment reached: set X position of all segments to 0
    if( (mios32_lcd_x % mios32_lcd_parameters.width) == 0 ) {
 8019558:	fbb1 f4f3 	udiv	r4, r1, r3
 801955c:	fb03 1014 	mls	r0, r3, r4, r1
 8019560:	b284      	uxth	r4, r0
 8019562:	bb5c      	cbnz	r4, 80195bc <APP_LCD_Data+0x1c8>
      APP_LCD_Cmd(0x00); // set X=0
 8019564:	4620      	mov	r0, r4
 8019566:	f7ff feab 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x10);
 801956a:	2010      	movs	r0, #16
 801956c:	f7ff fea8 	bl	80192c0 <APP_LCD_Cmd>
 8019570:	e024      	b.n	80195bc <APP_LCD_Data+0x1c8>
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default: {
    // wait until LCD unbusy, exit on error (timeout)
    if( APP_LCD_PollUnbusy(2500) < 0 ) {
 8019572:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8019576:	f7ff fdc5 	bl	8019104 <APP_LCD_PollUnbusy>
 801957a:	2800      	cmp	r0, #0
 801957c:	da12      	bge.n	80195a4 <APP_LCD_Data+0x1b0>
      // disable display
      display_available &= ~(1ULL << mios32_lcd_device);
 801957e:	4a18      	ldr	r2, [pc, #96]	; (80195e0 <APP_LCD_Data+0x1ec>)
 8019580:	4c18      	ldr	r4, [pc, #96]	; (80195e4 <APP_LCD_Data+0x1f0>)
 8019582:	7812      	ldrb	r2, [r2, #0]
 8019584:	2001      	movs	r0, #1
 8019586:	2100      	movs	r1, #0
 8019588:	f002 fbae 	bl	801bce8 <__aeabi_llsl>
 801958c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019590:	ea22 0000 	bic.w	r0, r2, r0
 8019594:	ea23 0101 	bic.w	r1, r3, r1
 8019598:	e9c4 0100 	strd	r0, r1, [r4]
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[APP_LCD_Data] lost connection to LCD at E%d\n", mios32_lcd_device+1);
#endif
      return -2; // timeout
 801959c:	f06f 0001 	mvn.w	r0, #1
 80195a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    // write data
    MIOS32_BOARD_J15_DataSet(data);
 80195a4:	4640      	mov	r0, r8
 80195a6:	f7fa f8c3 	bl	8013730 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(1);
 80195aa:	2001      	movs	r0, #1
 80195ac:	f7fa f916 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>
    APP_LCD_E_Set(1);
 80195b0:	2001      	movs	r0, #1
 80195b2:	f7ff fd67 	bl	8019084 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 80195b6:	2000      	movs	r0, #0
 80195b8:	f7ff fd64 	bl	8019084 <APP_LCD_E_Set>

    return 0; // no error
 80195bc:	2000      	movs	r0, #0
 80195be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
// OUT: returns < 0 if display not available or timed out
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Data(u8 data)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 80195c2:	f04f 30ff 	mov.w	r0, #4294967295
    return 0; // no error
  }
  }

  return -3; // not supported
}
 80195c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195ca:	bf00      	nop
 80195cc:	200005d1 	.word	0x200005d1
 80195d0:	20010dd2 	.word	0x20010dd2
 80195d4:	20010de4 	.word	0x20010de4
 80195d8:	20010dd0 	.word	0x20010dd0
 80195dc:	200005e0 	.word	0x200005e0
 80195e0:	20000180 	.word	0x20000180
 80195e4:	200005d8 	.word	0x200005d8

080195e8 <APP_LCD_Init>:
// Initializes application specific LCD driver
// IN: <mode>: optional configuration
// OUT: returns < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Init(u32 mode)
{
 80195e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if( lcd_testmode )
 80195ec:	4b89      	ldr	r3, [pc, #548]	; (8019814 <APP_LCD_Init+0x22c>)
 80195ee:	7819      	ldrb	r1, [r3, #0]
 80195f0:	b111      	cbz	r1, 80195f8 <APP_LCD_Init+0x10>
    return -1; // direct access disabled in testmode
 80195f2:	f04f 30ff 	mov.w	r0, #4294967295
 80195f6:	e198      	b.n	801992a <APP_LCD_Init+0x342>

  // currently only mode 0 supported
  if( mode != 0 )
 80195f8:	2800      	cmp	r0, #0
 80195fa:	d1fa      	bne.n	80195f2 <APP_LCD_Init+0xa>
    return -1; // unsupported mode

  if( mios32_lcd_device >= MAX_LCDS )
 80195fc:	4886      	ldr	r0, [pc, #536]	; (8019818 <APP_LCD_Init+0x230>)
 80195fe:	f890 8000 	ldrb.w	r8, [r0]
 8019602:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8019606:	d902      	bls.n	801960e <APP_LCD_Init+0x26>
    return -2; // unsupported LCD device number
 8019608:	f06f 0001 	mvn.w	r0, #1
 801960c:	e18d      	b.n	801992a <APP_LCD_Init+0x342>

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801960e:	4e83      	ldr	r6, [pc, #524]	; (801981c <APP_LCD_Init+0x234>)
 8019610:	4642      	mov	r2, r8
 8019612:	2001      	movs	r0, #1
 8019614:	2100      	movs	r1, #0
 8019616:	f002 fb67 	bl	801bce8 <__aeabi_llsl>
 801961a:	e9d6 4500 	ldrd	r4, r5, [r6]

  switch( mios32_lcd_parameters.lcd_type ) {
 801961e:	4a80      	ldr	r2, [pc, #512]	; (8019820 <APP_LCD_Init+0x238>)

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 8019620:	4320      	orrs	r0, r4

  switch( mios32_lcd_parameters.lcd_type ) {
 8019622:	7814      	ldrb	r4, [r2, #0]

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 8019624:	4329      	orrs	r1, r5

  switch( mios32_lcd_parameters.lcd_type ) {
 8019626:	f1a4 0381 	sub.w	r3, r4, #129	; 0x81

  if( mios32_lcd_device >= MAX_LCDS )
    return -2; // unsupported LCD device number

  // enable display by default
  display_available |= (1ULL << mios32_lcd_device);
 801962a:	e9c6 0100 	strd	r0, r1, [r6]
 801962e:	46b1      	mov	r9, r6

  switch( mios32_lcd_parameters.lcd_type ) {
 8019630:	2b05      	cmp	r3, #5
 8019632:	f200 80ea 	bhi.w	801980a <APP_LCD_Init+0x222>
 8019636:	e8df f003 	tbb	[pc, r3]
 801963a:	0303      	.short	0x0303
 801963c:	105f5f23 	.word	0x105f5f23
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device < 2 ) { // only two E lines available
 8019640:	f1b8 0f01 	cmp.w	r8, #1
 8019644:	f200 8160 	bhi.w	8019908 <APP_LCD_Init+0x320>
      // pins always in push-pull mode
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
	return -2; // failed to initialize J15
#else
      // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 8019648:	2001      	movs	r0, #1
 801964a:	f7fa f811 	bl	8013670 <MIOS32_BOARD_J15_PortInit>
 801964e:	2800      	cmp	r0, #0
 8019650:	dbda      	blt.n	8019608 <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
#endif

      // initialize CS pins
      APP_LCD_ExtPort_Init();
 8019652:	f7ff fcb3 	bl	8018fbc <APP_LCD_ExtPort_Init>

      // "Display On" command
      APP_LCD_Cmd(0x3e + 1);
 8019656:	203f      	movs	r0, #63	; 0x3f
 8019658:	e00e      	b.n	8019678 <APP_LCD_Init+0x90>
    }
  } break;

  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device < 2 ) { // only two E lines available
 801965a:	f1b8 0f01 	cmp.w	r8, #1
 801965e:	f200 8153 	bhi.w	8019908 <APP_LCD_Init+0x320>
      // pins always in push-pull mode
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
	return -2; // failed to initialize J15
#else
      // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 8019662:	2001      	movs	r0, #1
 8019664:	f7fa f804 	bl	8013670 <MIOS32_BOARD_J15_PortInit>
 8019668:	2800      	cmp	r0, #0
 801966a:	dbcd      	blt.n	8019608 <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
#endif

      // initialize CS pins
      APP_LCD_ExtPort_Init();
 801966c:	f7ff fca6 	bl	8018fbc <APP_LCD_ExtPort_Init>

      // Reset command
      APP_LCD_Cmd(0xe2);
 8019670:	20e2      	movs	r0, #226	; 0xe2
 8019672:	f7ff fe25 	bl	80192c0 <APP_LCD_Cmd>

      // "Display On" command
      APP_LCD_Cmd(0xae + 1);
 8019676:	20af      	movs	r0, #175	; 0xaf
 8019678:	f7ff fe22 	bl	80192c0 <APP_LCD_Cmd>

      // Display start line
      APP_LCD_Cmd(0xc0 + 0);
 801967c:	20c0      	movs	r0, #192	; 0xc0
 801967e:	e141      	b.n	8019904 <APP_LCD_Init+0x31c>
    }
  } break;

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    // all GLCDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device == 0 ) {
 8019680:	f1b8 0f00 	cmp.w	r8, #0
 8019684:	f040 8140 	bne.w	8019908 <APP_LCD_Init+0x320>
      // DOGM128 works at 3.3V, level shifting (and open drain mode) not required
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 8019688:	4640      	mov	r0, r8
 801968a:	f7f9 fff1 	bl	8013670 <MIOS32_BOARD_J15_PortInit>
 801968e:	2800      	cmp	r0, #0
 8019690:	dbba      	blt.n	8019608 <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15

      display_available |= 0xff;
 8019692:	e9d6 4500 	ldrd	r4, r5, [r6]
 8019696:	2700      	movs	r7, #0
 8019698:	26ff      	movs	r6, #255	; 0xff
 801969a:	4334      	orrs	r4, r6
 801969c:	433d      	orrs	r5, r7
 801969e:	e9c9 4500 	strd	r4, r5, [r9]

      APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs
 80196a2:	f7ff fc97 	bl	8018fd4 <APP_LCD_SERGLCD_CS_Init>

      // initialisation sequence based on EA-DOGL/M datasheet
  
      APP_LCD_Cmd(0x40); //2 - Display start line = 0
 80196a6:	2040      	movs	r0, #64	; 0x40
 80196a8:	f7ff fe0a 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA1); //8 - ADC Normal mode = 0 
 80196ac:	20a1      	movs	r0, #161	; 0xa1
 80196ae:	f7ff fe07 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xC0); //15 - COMS normal = 1/65  duty
 80196b2:	20c0      	movs	r0, #192	; 0xc0
 80196b4:	f7ff fe04 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA6); //9 - Display  = normal  
 80196b8:	20a6      	movs	r0, #166	; 0xa6
 80196ba:	f7ff fe01 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xA2); //11 - 1/65 duty 1/9 bias for 65x132 display
 80196be:	20a2      	movs	r0, #162	; 0xa2
 80196c0:	f7ff fdfe 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x2F); //16  - Power control set = B.,R,F all ON
 80196c4:	202f      	movs	r0, #47	; 0x2f
 80196c6:	f7ff fdfb 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xF8); //20-1 - select Booster ratio set
 80196ca:	20f8      	movs	r0, #248	; 0xf8
 80196cc:	f7ff fdf8 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00); //20-2 - Booster ratio register (must be preceeded by 20-1)
 80196d0:	4640      	mov	r0, r8
 80196d2:	f7ff fdf5 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x27); //17 - VO volt reg set 
 80196d6:	2027      	movs	r0, #39	; 0x27
 80196d8:	f7ff fdf2 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x81); //18-1 - Elect vol control - contrast
 80196dc:	2081      	movs	r0, #129	; 0x81
 80196de:	f7ff fdef 	bl	80192c0 <APP_LCD_Cmd>
#if 0
      APP_LCD_Cmd(0x16); //18-2 - Contrast level dec 22	
#else
      APP_LCD_Cmd(0x10); //18-2 - Contrast level dec 16
 80196e2:	2010      	movs	r0, #16
 80196e4:	f7ff fdec 	bl	80192c0 <APP_LCD_Cmd>
#endif
      APP_LCD_Cmd(0xAC); //19-1 - Static Indicator - set off
 80196e8:	20ac      	movs	r0, #172	; 0xac
 80196ea:	f7ff fde9 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00); //19-2 - No Indicator
 80196ee:	4640      	mov	r0, r8
 80196f0:	f7ff fde6 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0xAF); //20 - Display ON
 80196f4:	20af      	movs	r0, #175	; 0xaf
 80196f6:	e105      	b.n	8019904 <APP_LCD_Init+0x31c>
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    u8 rotated = mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED;

    // all OLEDs will be initialized at once by activating all CS lines!
    if( mios32_lcd_device == 0 ) {
 80196f8:	f1b8 0f00 	cmp.w	r8, #0
 80196fc:	f040 8104 	bne.w	8019908 <APP_LCD_Init+0x320>
      // ExtPort.3: RST#
      // J5A.A0/J10B.D12: CS of first display
      // J5A.A1/J10B.D13: CS of second display
      // J5A.A2/J10B.D14: CS of third display
      // J5A.A3/J10B.D15: CS of fourth display
      if( lcd_alt_pinning ) {
 8019700:	4948      	ldr	r1, [pc, #288]	; (8019824 <APP_LCD_Init+0x23c>)
 8019702:	7808      	ldrb	r0, [r1, #0]
 8019704:	b330      	cbz	r0, 8019754 <APP_LCD_Init+0x16c>
	APP_LCD_ExtPort_Init();
 8019706:	f7ff fc59 	bl	8018fbc <APP_LCD_ExtPort_Init>
  }
  return 0; // no error
#elif defined(MIOS32_FAMILY_STM32F4xx)
  int pin;
  for(pin=0; pin<4; ++pin) {
    MIOS32_BOARD_J10_PinInit(pin + 12, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 801970a:	2105      	movs	r1, #5
 801970c:	200c      	movs	r0, #12
 801970e:	f7f9 ff69 	bl	80135e4 <MIOS32_BOARD_J10_PinInit>
 8019712:	2105      	movs	r1, #5
 8019714:	200d      	movs	r0, #13
 8019716:	f7f9 ff65 	bl	80135e4 <MIOS32_BOARD_J10_PinInit>
 801971a:	2105      	movs	r1, #5
 801971c:	200e      	movs	r0, #14
 801971e:	f7f9 ff61 	bl	80135e4 <MIOS32_BOARD_J10_PinInit>
 8019722:	2105      	movs	r1, #5
 8019724:	200f      	movs	r0, #15
 8019726:	f7f9 ff5d 	bl	80135e4 <MIOS32_BOARD_J10_PinInit>
      // J5A.A3/J10B.D15: CS of fourth display
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_Init();
	APP_LCD_ExtPort_AltInit();

	APP_LCD_ExtPort_PinSet(3, 0); // reset
 801972a:	4641      	mov	r1, r8
 801972c:	2003      	movs	r0, #3
 801972e:	f7ff fc07 	bl	8018f40 <APP_LCD_ExtPort_PinSet>
	MIOS32_DELAY_Wait_uS(100);
	APP_LCD_ExtPort_PinSet(3, 1);

	display_available |= 0x0f;
 8019732:	4d3a      	ldr	r5, [pc, #232]	; (801981c <APP_LCD_Init+0x234>)
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_Init();
	APP_LCD_ExtPort_AltInit();

	APP_LCD_ExtPort_PinSet(3, 0); // reset
	MIOS32_DELAY_Wait_uS(100);
 8019734:	2064      	movs	r0, #100	; 0x64
 8019736:	f7fa f8ed 	bl	8013914 <MIOS32_DELAY_Wait_uS>
	APP_LCD_ExtPort_PinSet(3, 1);
 801973a:	2101      	movs	r1, #1
 801973c:	2003      	movs	r0, #3
 801973e:	f7ff fbff 	bl	8018f40 <APP_LCD_ExtPort_PinSet>

	display_available |= 0x0f;
 8019742:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019746:	200f      	movs	r0, #15
 8019748:	2100      	movs	r1, #0
 801974a:	4302      	orrs	r2, r0
 801974c:	430b      	orrs	r3, r1
 801974e:	e9c5 2300 	strd	r2, r3, [r5]
 8019752:	e018      	b.n	8019786 <APP_LCD_Init+0x19e>
      } else {
	// the OLED works at 3.3V, level shifting (and open drain mode) not required
	if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 8019754:	4640      	mov	r0, r8
 8019756:	f7f9 ff8b 	bl	8013670 <MIOS32_BOARD_J15_PortInit>
 801975a:	2800      	cmp	r0, #0
 801975c:	f6ff af54 	blt.w	8019608 <APP_LCD_Init+0x20>
	  return -2; // failed to initialize J15

	display_available |= 0xff;
 8019760:	4d2e      	ldr	r5, [pc, #184]	; (801981c <APP_LCD_Init+0x234>)
 8019762:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019766:	20ff      	movs	r0, #255	; 0xff
 8019768:	2100      	movs	r1, #0
 801976a:	4302      	orrs	r2, r0
 801976c:	430b      	orrs	r3, r1
 801976e:	e9c5 2300 	strd	r2, r3, [r5]

	APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs
 8019772:	f7ff fc2f 	bl	8018fd4 <APP_LCD_SERGLCD_CS_Init>
 8019776:	f44f 75fa 	mov.w	r5, #500	; 0x1f4

	// wait 500 mS to ensure that the reset is released
	{
	  int i;
	  for(i=0; i<500; ++i)
	    MIOS32_DELAY_Wait_uS(1000);
 801977a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801977e:	f7fa f8c9 	bl	8013914 <MIOS32_DELAY_Wait_uS>
	APP_LCD_SERGLCD_CS_Init(); // will also enhance display_available depending on total number of LCDs

	// wait 500 mS to ensure that the reset is released
	{
	  int i;
	  for(i=0; i<500; ++i)
 8019782:	3d01      	subs	r5, #1
 8019784:	d1f9      	bne.n	801977a <APP_LCD_Init+0x192>
	}
      }


      // initialize LCDs
      APP_LCD_Cmd(0xa8); // Set MUX Ratio
 8019786:	20a8      	movs	r0, #168	; 0xa8
 8019788:	f7ff fd9a 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x3f);
 801978c:	203f      	movs	r0, #63	; 0x3f
 801978e:	f7ff fd97 	bl	80192c0 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xd3); // Set Display Offset
 8019792:	20d3      	movs	r0, #211	; 0xd3
 8019794:	f7ff fd94 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x00);
 8019798:	2000      	movs	r0, #0
 801979a:	f7ff fd91 	bl	80192c0 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x40); // Set Display Start Line
 801979e:	2040      	movs	r0, #64	; 0x40
 80197a0:	f7ff fd8e 	bl	80192c0 <APP_LCD_Cmd>

      if( !rotated ) {
 80197a4:	2c85      	cmp	r4, #133	; 0x85
 80197a6:	d004      	beq.n	80197b2 <APP_LCD_Init+0x1ca>
	APP_LCD_Cmd(0xa0); // Set Segment re-map
 80197a8:	20a0      	movs	r0, #160	; 0xa0
 80197aa:	f7ff fd89 	bl	80192c0 <APP_LCD_Cmd>
	APP_LCD_Cmd(0xc0); // Set COM Output Scan Direction
 80197ae:	20c0      	movs	r0, #192	; 0xc0
 80197b0:	e003      	b.n	80197ba <APP_LCD_Init+0x1d2>
      } else {
	APP_LCD_Cmd(0xa1); // Set Segment re-map: rotated
 80197b2:	20a1      	movs	r0, #161	; 0xa1
 80197b4:	f7ff fd84 	bl	80192c0 <APP_LCD_Cmd>
	APP_LCD_Cmd(0xc8); // Set COM Output Scan Direction: rotated
 80197b8:	20c8      	movs	r0, #200	; 0xc8
 80197ba:	f7ff fd81 	bl	80192c0 <APP_LCD_Cmd>
      }

      APP_LCD_Cmd(0xda); // Set COM Pins hardware configuration
 80197be:	20da      	movs	r0, #218	; 0xda
 80197c0:	f7ff fd7e 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x12);
 80197c4:	2012      	movs	r0, #18
 80197c6:	f7ff fd7b 	bl	80192c0 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x81); // Set Contrast Control
 80197ca:	2081      	movs	r0, #129	; 0x81
 80197cc:	f7ff fd78 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x7f); // middle
 80197d0:	207f      	movs	r0, #127	; 0x7f
 80197d2:	f7ff fd75 	bl	80192c0 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xa4); // Disable Entiere Display On
 80197d6:	20a4      	movs	r0, #164	; 0xa4
 80197d8:	f7ff fd72 	bl	80192c0 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xa6); // Set Normal Display
 80197dc:	20a6      	movs	r0, #166	; 0xa6
 80197de:	f7ff fd6f 	bl	80192c0 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xd5); // Set OSC Frequency
 80197e2:	20d5      	movs	r0, #213	; 0xd5
 80197e4:	f7ff fd6c 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x80);
 80197e8:	2080      	movs	r0, #128	; 0x80
 80197ea:	f7ff fd69 	bl	80192c0 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x8d); // Enable charge pump regulator
 80197ee:	208d      	movs	r0, #141	; 0x8d
 80197f0:	f7ff fd66 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x14);
 80197f4:	2014      	movs	r0, #20
 80197f6:	f7ff fd63 	bl	80192c0 <APP_LCD_Cmd>

      APP_LCD_Cmd(0xaf); // Display On
 80197fa:	20af      	movs	r0, #175	; 0xaf
 80197fc:	f7ff fd60 	bl	80192c0 <APP_LCD_Cmd>

      APP_LCD_Cmd(0x20); // Enable Page mode
 8019800:	2020      	movs	r0, #32
 8019802:	f7ff fd5d 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x02);
 8019806:	2002      	movs	r0, #2
 8019808:	e07c      	b.n	8019904 <APP_LCD_Init+0x31c>
    if( MIOS32_BOARD_J15_PortInit(0) < 0 )
      return -2; // failed to initialize J15
#else
    // 0: J15 pins are configured in Push Pull Mode (3.3V)
    // 1: J15 pins are configured in Open Drain mode (perfect for 3.3V->5V levelshifting)
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_DOG ||
 801980a:	3c01      	subs	r4, #1
 801980c:	2c01      	cmp	r4, #1
 801980e:	d80b      	bhi.n	8019828 <APP_LCD_Init+0x240>
	mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_PP ) {
      // DOG CLCD works at 3.3V, level shifting (and open drain mode) not required
      if( MIOS32_BOARD_J15_PortInit(0) < 0 )
 8019810:	2000      	movs	r0, #0
 8019812:	e00a      	b.n	801982a <APP_LCD_Init+0x242>
 8019814:	200005d1 	.word	0x200005d1
 8019818:	20000180 	.word	0x20000180
 801981c:	200005d8 	.word	0x200005d8
 8019820:	20010dd2 	.word	0x20010dd2
 8019824:	200005e0 	.word	0x200005e0
	return -2; // failed to initialize J15
    } else {
      if( MIOS32_BOARD_J15_PortInit(1) < 0 )
 8019828:	2001      	movs	r0, #1
 801982a:	f7f9 ff21 	bl	8013670 <MIOS32_BOARD_J15_PortInit>
 801982e:	2800      	cmp	r0, #0
 8019830:	f6ff aeea 	blt.w	8019608 <APP_LCD_Init+0x20>
	return -2; // failed to initialize J15
    }
#endif

    // init extension port?
    int num_lcds = mios32_lcd_parameters.num_x * mios32_lcd_parameters.num_y;
 8019834:	4b3e      	ldr	r3, [pc, #248]	; (8019930 <APP_LCD_Init+0x348>)
 8019836:	785a      	ldrb	r2, [r3, #1]
 8019838:	7898      	ldrb	r0, [r3, #2]
 801983a:	fb12 f100 	smulbb	r1, r2, r0
    if( num_lcds >= 2 ) {
 801983e:	2901      	cmp	r1, #1
 8019840:	dd01      	ble.n	8019846 <APP_LCD_Init+0x25e>
      APP_LCD_ExtPort_Init();
 8019842:	f7ff fbbb 	bl	8018fbc <APP_LCD_ExtPort_Init>
    }

    // initialize LCD
    MIOS32_BOARD_J15_DataSet(0x38);
 8019846:	2038      	movs	r0, #56	; 0x38
 8019848:	f7f9 ff72 	bl	8013730 <MIOS32_BOARD_J15_DataSet>
    MIOS32_BOARD_J15_RS_Set(0);
 801984c:	2000      	movs	r0, #0
 801984e:	f7f9 ffc5 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>
    MIOS32_BOARD_J15_RW_Set(0);
 8019852:	2000      	movs	r0, #0
 8019854:	f7f9 ffce 	bl	80137f4 <MIOS32_BOARD_J15_RW_Set>
    APP_LCD_E_Set(1);
 8019858:	2001      	movs	r0, #1
 801985a:	f7ff fc13 	bl	8019084 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 801985e:	2000      	movs	r0, #0
 8019860:	f7ff fc10 	bl	8019084 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(5000); // according to the hitachi datasheet, this command takes 37 uS - take 1 mS to be at the secure side
 8019864:	f241 3088 	movw	r0, #5000	; 0x1388
 8019868:	f7fa f854 	bl	8013914 <MIOS32_DELAY_Wait_uS>

    APP_LCD_E_Set(1);
 801986c:	2001      	movs	r0, #1
 801986e:	f7ff fc09 	bl	8019084 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 8019872:	2000      	movs	r0, #0
 8019874:	f7ff fc06 	bl	8019084 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(500); // and now only 500 uS anymore
 8019878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801987c:	f7fa f84a 	bl	8013914 <MIOS32_DELAY_Wait_uS>

    APP_LCD_E_Set(1);
 8019880:	2001      	movs	r0, #1
 8019882:	f7ff fbff 	bl	8019084 <APP_LCD_E_Set>
    APP_LCD_E_Set(0);
 8019886:	2000      	movs	r0, #0
 8019888:	f7ff fbfc 	bl	8019084 <APP_LCD_E_Set>
    MIOS32_DELAY_Wait_uS(500);
 801988c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8019890:	f7fa f840 	bl	8013914 <MIOS32_DELAY_Wait_uS>

    APP_LCD_Cmd(0x08); // Display Off
 8019894:	2008      	movs	r0, #8
 8019896:	f7ff fd13 	bl	80192c0 <APP_LCD_Cmd>

    // display still available?
    // if not, we can already break here!
    if( !(display_available & (1ULL << mios32_lcd_device)) )
 801989a:	4b26      	ldr	r3, [pc, #152]	; (8019934 <APP_LCD_Init+0x34c>)
 801989c:	4a26      	ldr	r2, [pc, #152]	; (8019938 <APP_LCD_Init+0x350>)
 801989e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80198a2:	7812      	ldrb	r2, [r2, #0]
 80198a4:	f002 fa14 	bl	801bcd0 <__aeabi_llsr>
 80198a8:	2201      	movs	r2, #1
 80198aa:	2300      	movs	r3, #0
 80198ac:	4010      	ands	r0, r2
 80198ae:	4019      	ands	r1, r3
 80198b0:	ea50 0301 	orrs.w	r3, r0, r1
 80198b4:	f43f ae9d 	beq.w	80195f2 <APP_LCD_Init+0xa>
      return -1; // display not available

    APP_LCD_Cmd(0x0c); // Display On
 80198b8:	200c      	movs	r0, #12
 80198ba:	f7ff fd01 	bl	80192c0 <APP_LCD_Cmd>
    APP_LCD_Cmd(0x06); // Entry Mode
 80198be:	2006      	movs	r0, #6
 80198c0:	f7ff fcfe 	bl	80192c0 <APP_LCD_Cmd>
    APP_LCD_Cmd(0x01); // Clear Display
 80198c4:	2001      	movs	r0, #1
 80198c6:	f7ff fcfb 	bl	80192c0 <APP_LCD_Cmd>

    // for DOG displays: perform additional display initialisation
    if( mios32_lcd_parameters.lcd_type == MIOS32_LCD_TYPE_CLCD_DOG ) {
 80198ca:	4819      	ldr	r0, [pc, #100]	; (8019930 <APP_LCD_Init+0x348>)
 80198cc:	7801      	ldrb	r1, [r0, #0]
 80198ce:	2901      	cmp	r1, #1
 80198d0:	d114      	bne.n	80198fc <APP_LCD_Init+0x314>
      APP_LCD_Cmd(0x39); // 8bit interface, switch to instruction table 1
 80198d2:	2039      	movs	r0, #57	; 0x39
 80198d4:	f7ff fcf4 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x1d); // BS: 1/4, 3 line LCD
 80198d8:	201d      	movs	r0, #29
 80198da:	f7ff fcf1 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x50); // Booster off, set contrast C5/C4
 80198de:	2050      	movs	r0, #80	; 0x50
 80198e0:	f7ff fcee 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x6c); // set Voltage follower and amplifier
 80198e4:	206c      	movs	r0, #108	; 0x6c
 80198e6:	f7ff fceb 	bl	80192c0 <APP_LCD_Cmd>
      APP_LCD_Cmd(0x7c); // set contrast C3/C2/C1
 80198ea:	207c      	movs	r0, #124	; 0x7c
 80198ec:	f7ff fce8 	bl	80192c0 <APP_LCD_Cmd>
      //  APP_LCD_Cmd(0x38); // back to instruction table 0
      // (will be done below)

      // modify cursor mapping, so that it complies with 3-line dog displays
      u8 cursor_map[] = {0x00, 0x10, 0x20, 0x30}; // offset line 0/1/2/3
 80198f0:	4a12      	ldr	r2, [pc, #72]	; (801993c <APP_LCD_Init+0x354>)
 80198f2:	6813      	ldr	r3, [r2, #0]
      MIOS32_LCD_CursorMapSet(cursor_map);
 80198f4:	a801      	add	r0, sp, #4
      APP_LCD_Cmd(0x7c); // set contrast C3/C2/C1
      //  APP_LCD_Cmd(0x38); // back to instruction table 0
      // (will be done below)

      // modify cursor mapping, so that it complies with 3-line dog displays
      u8 cursor_map[] = {0x00, 0x10, 0x20, 0x30}; // offset line 0/1/2/3
 80198f6:	9301      	str	r3, [sp, #4]
      MIOS32_LCD_CursorMapSet(cursor_map);
 80198f8:	f7f7 fdb0 	bl	801145c <MIOS32_LCD_CursorMapSet>
    }

    APP_LCD_Cmd(0x38); // experience from PIC based MIOS: without these lines
 80198fc:	2038      	movs	r0, #56	; 0x38
 80198fe:	f7ff fcdf 	bl	80192c0 <APP_LCD_Cmd>
    APP_LCD_Cmd(0x0c); // the LCD won't work correctly after a second APP_LCD_Init
 8019902:	200c      	movs	r0, #12
 8019904:	f7ff fcdc 	bl	80192c0 <APP_LCD_Cmd>
  }
  }

  return (display_available & (1ULL << mios32_lcd_device)) ? 0 : -1; // return -1 if display not available
 8019908:	480a      	ldr	r0, [pc, #40]	; (8019934 <APP_LCD_Init+0x34c>)
 801990a:	4a0b      	ldr	r2, [pc, #44]	; (8019938 <APP_LCD_Init+0x350>)
 801990c:	e9d0 0100 	ldrd	r0, r1, [r0]
 8019910:	7812      	ldrb	r2, [r2, #0]
 8019912:	f002 f9dd 	bl	801bcd0 <__aeabi_llsr>
 8019916:	2201      	movs	r2, #1
 8019918:	2300      	movs	r3, #0
 801991a:	4010      	ands	r0, r2
 801991c:	4019      	ands	r1, r3
 801991e:	ea50 0201 	orrs.w	r2, r0, r1
 8019922:	bf0c      	ite	eq
 8019924:	f04f 30ff 	moveq.w	r0, #4294967295
 8019928:	2000      	movne	r0, #0
}
 801992a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 801992e:	bf00      	nop
 8019930:	20010dd2 	.word	0x20010dd2
 8019934:	200005d8 	.word	0x200005d8
 8019938:	20000180 	.word	0x20000180
 801993c:	0801c4d2 	.word	0x0801c4d2

08019940 <APP_LCD_Clear>:
// Clear Screen
// IN: -
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Clear(void)
{
 8019940:	b570      	push	{r4, r5, r6, lr}
  if( lcd_testmode )
 8019942:	4b4d      	ldr	r3, [pc, #308]	; (8019a78 <APP_LCD_Clear+0x138>)
 8019944:	781d      	ldrb	r5, [r3, #0]
 8019946:	2d00      	cmp	r5, #0
 8019948:	f040 8093 	bne.w	8019a72 <APP_LCD_Clear+0x132>
    return -1; // direct access disabled in testmode

  switch( mios32_lcd_parameters.lcd_type ) {
 801994c:	484b      	ldr	r0, [pc, #300]	; (8019a7c <APP_LCD_Clear+0x13c>)
 801994e:	7801      	ldrb	r1, [r0, #0]
 8019950:	317f      	adds	r1, #127	; 0x7f
 8019952:	b2ca      	uxtb	r2, r1
 8019954:	2a05      	cmp	r2, #5
 8019956:	f200 8087 	bhi.w	8019a68 <APP_LCD_Clear+0x128>
 801995a:	b24c      	sxtb	r4, r1
 801995c:	2301      	movs	r3, #1
 801995e:	fa03 f004 	lsl.w	r0, r3, r4
 8019962:	f010 0423 	ands.w	r4, r0, #35	; 0x23
 8019966:	d109      	bne.n	801997c <APP_LCD_Clear+0x3c>
 8019968:	f010 0518 	ands.w	r5, r0, #24
 801996c:	d143      	bne.n	80199f6 <APP_LCD_Clear+0xb6>
 801996e:	0742      	lsls	r2, r0, #29
 8019970:	d57a      	bpl.n	8019a68 <APP_LCD_Clear+0x128>
  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
    u8 x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 8019972:	4843      	ldr	r0, [pc, #268]	; (8019a80 <APP_LCD_Clear+0x140>)
 8019974:	f7f7 fd7e 	bl	8011474 <MIOS32_LCD_FontInit>

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 8019978:	462c      	mov	r4, r5
 801997a:	e021      	b.n	80199c0 <APP_LCD_Clear+0x80>
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 801997c:	4840      	ldr	r0, [pc, #256]	; (8019a80 <APP_LCD_Clear+0x140>)
 801997e:	f7f7 fd79 	bl	8011474 <MIOS32_LCD_FontInit>

  switch( mios32_lcd_parameters.lcd_type ) {
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS:
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;
 8019982:	462c      	mov	r4, r5
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 8019984:	493d      	ldr	r1, [pc, #244]	; (8019a7c <APP_LCD_Clear+0x13c>)
 8019986:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 8019988:	2000      	movs	r0, #0
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 801998a:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
 801998e:	da10      	bge.n	80199b2 <APP_LCD_Clear+0x72>
      error |= MIOS32_LCD_CursorSet(0, y);
 8019990:	b2a9      	uxth	r1, r5
 8019992:	f7f7 fd37 	bl	8011404 <MIOS32_LCD_CursorSet>
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 8019996:	2600      	movs	r6, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
      error |= MIOS32_LCD_CursorSet(0, y);
 8019998:	4304      	orrs	r4, r0
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 801999a:	4b38      	ldr	r3, [pc, #224]	; (8019a7c <APP_LCD_Clear+0x13c>)
 801999c:	8898      	ldrh	r0, [r3, #4]
 801999e:	4286      	cmp	r6, r0
 80199a0:	da05      	bge.n	80199ae <APP_LCD_Clear+0x6e>
	error |= APP_LCD_Data(0x00);
 80199a2:	2000      	movs	r0, #0
 80199a4:	f7ff fd26 	bl	80193f4 <APP_LCD_Data>
    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
      error |= MIOS32_LCD_CursorSet(0, y);
      for(x=0; x<mios32_lcd_parameters.width; ++x)
 80199a8:	3601      	adds	r6, #1
	error |= APP_LCD_Data(0x00);
 80199aa:	4304      	orrs	r4, r0
 80199ac:	e7f5      	b.n	801999a <APP_LCD_Clear+0x5a>
    int x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 80199ae:	3501      	adds	r5, #1
 80199b0:	e7e8      	b.n	8019984 <APP_LCD_Clear+0x44>
      for(x=0; x<mios32_lcd_parameters.width; ++x)
	error |= APP_LCD_Data(0x00);
    }

    // set X=0, Y=0
    error |= MIOS32_LCD_CursorSet(0, 0);
 80199b2:	4601      	mov	r1, r0
 80199b4:	f7f7 fd26 	bl	8011404 <MIOS32_LCD_CursorSet>
 80199b8:	4320      	orrs	r0, r4

    return error;
 80199ba:	bd70      	pop	{r4, r5, r6, pc}

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 80199bc:	3401      	adds	r4, #1
 80199be:	b2e4      	uxtb	r4, r4
 80199c0:	492e      	ldr	r1, [pc, #184]	; (8019a7c <APP_LCD_Clear+0x13c>)
 80199c2:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 80199c4:	2000      	movs	r0, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<(mios32_lcd_parameters.height/8); ++y) {
 80199c6:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 80199ca:	d248      	bcs.n	8019a5e <APP_LCD_Clear+0x11e>
      error |= MIOS32_LCD_CursorSet(0, y);
 80199cc:	4621      	mov	r1, r4
 80199ce:	f7f7 fd19 	bl	8011404 <MIOS32_LCD_CursorSet>
 80199d2:	4305      	orrs	r5, r0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
 80199d4:	2001      	movs	r0, #1
 80199d6:	f7ff fbd7 	bl	8019188 <APP_LCD_SERGLCD_CS_Set.constprop.2>
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 80199da:	2001      	movs	r0, #1
 80199dc:	f7f9 fefe 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 80199e0:	2600      	movs	r6, #0
 80199e2:	4b26      	ldr	r3, [pc, #152]	; (8019a7c <APP_LCD_Clear+0x13c>)
 80199e4:	8898      	ldrh	r0, [r3, #4]
 80199e6:	42b0      	cmp	r0, r6
 80199e8:	d9e8      	bls.n	80199bc <APP_LCD_Clear+0x7c>
	MIOS32_BOARD_J15_SerDataShift(0x00);
 80199ea:	2000      	movs	r0, #0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 80199ec:	3601      	adds	r6, #1
	MIOS32_BOARD_J15_SerDataShift(0x00);
 80199ee:	f7f9 fec1 	bl	8013774 <MIOS32_BOARD_J15_SerDataShift>

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
      MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

      for(x=0; x<mios32_lcd_parameters.width; ++x)
 80199f2:	b2f6      	uxtb	r6, r6
 80199f4:	e7f5      	b.n	80199e2 <APP_LCD_Clear+0xa2>
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;
    u8 x, y;

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);
 80199f6:	4822      	ldr	r0, [pc, #136]	; (8019a80 <APP_LCD_Clear+0x140>)
 80199f8:	f7f7 fd3c 	bl	8011474 <MIOS32_LCD_FontInit>
    return error;
  } break;

  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;
 80199fc:	4625      	mov	r5, r4

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 80199fe:	491f      	ldr	r1, [pc, #124]	; (8019a7c <APP_LCD_Clear+0x13c>)
 8019a00:	88ca      	ldrh	r2, [r1, #6]
      error |= MIOS32_LCD_CursorSet(0, y);
 8019a02:	2000      	movs	r0, #0

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 8019a04:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 8019a08:	d229      	bcs.n	8019a5e <APP_LCD_Clear+0x11e>
      error |= MIOS32_LCD_CursorSet(0, y);
 8019a0a:	4621      	mov	r1, r4
 8019a0c:	f7f7 fcfa 	bl	8011404 <MIOS32_LCD_CursorSet>
 8019a10:	4305      	orrs	r5, r0

      // select all LCDs
      APP_LCD_SERGLCD_CS_Set(1, 1);
 8019a12:	2001      	movs	r0, #1
 8019a14:	f7ff fbb8 	bl	8019188 <APP_LCD_SERGLCD_CS_Set.constprop.2>

      // alternative pinning option for applications which want to access CLCD and SER LCDs
      if( lcd_alt_pinning ) {
 8019a18:	4b1a      	ldr	r3, [pc, #104]	; (8019a84 <APP_LCD_Clear+0x144>)
 8019a1a:	781e      	ldrb	r6, [r3, #0]
 8019a1c:	b196      	cbz	r6, 8019a44 <APP_LCD_Clear+0x104>
	APP_LCD_ExtPort_PinSet(2, 1); // DC
 8019a1e:	2002      	movs	r0, #2
 8019a20:	2101      	movs	r1, #1
 8019a22:	f7ff fa8d 	bl	8018f40 <APP_LCD_ExtPort_PinSet>

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
 8019a26:	2600      	movs	r6, #0
 8019a28:	4a14      	ldr	r2, [pc, #80]	; (8019a7c <APP_LCD_Clear+0x13c>)
 8019a2a:	8893      	ldrh	r3, [r2, #4]
 8019a2c:	42b3      	cmp	r3, r6
 8019a2e:	d906      	bls.n	8019a3e <APP_LCD_Clear+0xfe>
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
 8019a30:	2000      	movs	r0, #0
 8019a32:	4601      	mov	r1, r0
 8019a34:	f7ff fb04 	bl	8019040 <APP_LCD_ExtPort_SerDataShift>
      // alternative pinning option for applications which want to access CLCD and SER LCDs
      if( lcd_alt_pinning ) {
	APP_LCD_ExtPort_PinSet(2, 1); // DC

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
 8019a38:	1c70      	adds	r0, r6, #1
 8019a3a:	b2c6      	uxtb	r6, r0
 8019a3c:	e7f4      	b.n	8019a28 <APP_LCD_Clear+0xe8>

    // use default font
    MIOS32_LCD_FontInit((u8 *)GLCD_FONT_NORMAL);

    // send data
    for(y=0; y<mios32_lcd_parameters.height/8; ++y) {
 8019a3e:	3401      	adds	r4, #1
 8019a40:	b2e4      	uxtb	r4, r4
 8019a42:	e7dc      	b.n	80199fe <APP_LCD_Clear+0xbe>

	// send data
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC
 8019a44:	2001      	movs	r0, #1
 8019a46:	f7f9 fec9 	bl	80137dc <MIOS32_BOARD_J15_RS_Set>

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 8019a4a:	480c      	ldr	r0, [pc, #48]	; (8019a7c <APP_LCD_Clear+0x13c>)
 8019a4c:	8881      	ldrh	r1, [r0, #4]
 8019a4e:	42b1      	cmp	r1, r6
 8019a50:	d9f5      	bls.n	8019a3e <APP_LCD_Clear+0xfe>
	  MIOS32_BOARD_J15_SerDataShift(0x00);
 8019a52:	2000      	movs	r0, #0
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 8019a54:	3601      	adds	r6, #1
	  MIOS32_BOARD_J15_SerDataShift(0x00);
 8019a56:	f7f9 fe8d 	bl	8013774 <MIOS32_BOARD_J15_SerDataShift>
	for(x=0; x<mios32_lcd_parameters.width; ++x)
	  APP_LCD_ExtPort_SerDataShift(0x00, 0);
      } else {
	MIOS32_BOARD_J15_RS_Set(1); // RS pin used to control DC

	for(x=0; x<mios32_lcd_parameters.width; ++x)
 8019a5a:	b2f6      	uxtb	r6, r6
 8019a5c:	e7f5      	b.n	8019a4a <APP_LCD_Clear+0x10a>
	  MIOS32_BOARD_J15_SerDataShift(0x00);
      }
    }

    // set X=0, Y=0
    error |= MIOS32_LCD_CursorSet(0, 0);
 8019a5e:	4601      	mov	r1, r0
 8019a60:	f7f7 fcd0 	bl	8011404 <MIOS32_LCD_CursorSet>
 8019a64:	4328      	orrs	r0, r5

    return error;
 8019a66:	bd70      	pop	{r4, r5, r6, pc}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default:
    // -> send clear command
    return APP_LCD_Cmd(0x01);
 8019a68:	2001      	movs	r0, #1
  }

  return -3; // not supported
}
 8019a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  case MIOS32_LCD_TYPE_CLCD:
  case MIOS32_LCD_TYPE_CLCD_DOG:
  case MIOS32_LCD_TYPE_CLCD_PP:
  default:
    // -> send clear command
    return APP_LCD_Cmd(0x01);
 8019a6e:	f7ff bc27 	b.w	80192c0 <APP_LCD_Cmd>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_Clear(void)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 8019a72:	f04f 30ff 	mov.w	r0, #4294967295
    // -> send clear command
    return APP_LCD_Cmd(0x01);
  }

  return -3; // not supported
}
 8019a76:	bd70      	pop	{r4, r5, r6, pc}
 8019a78:	200005d1 	.word	0x200005d1
 8019a7c:	20010dd2 	.word	0x20010dd2
 8019a80:	0801c4d6 	.word	0x0801c4d6
 8019a84:	200005e0 	.word	0x200005e0

08019a88 <APP_LCD_GCursorSet>:
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 8019a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( lcd_testmode )
 8019a8a:	4b32      	ldr	r3, [pc, #200]	; (8019b54 <APP_LCD_GCursorSet+0xcc>)
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 8019a8c:	4604      	mov	r4, r0
  if( lcd_testmode )
 8019a8e:	7818      	ldrb	r0, [r3, #0]
// Sets graphical cursor to given position
// IN: <x> and <y>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
 8019a90:	460d      	mov	r5, r1
  if( lcd_testmode )
 8019a92:	2800      	cmp	r0, #0
 8019a94:	d158      	bne.n	8019b48 <APP_LCD_GCursorSet+0xc0>
    return -1; // direct access disabled in testmode

  switch( mios32_lcd_parameters.lcd_type ) {
 8019a96:	4e30      	ldr	r6, [pc, #192]	; (8019b58 <APP_LCD_GCursorSet+0xd0>)
 8019a98:	7831      	ldrb	r1, [r6, #0]
 8019a9a:	3981      	subs	r1, #129	; 0x81
 8019a9c:	2905      	cmp	r1, #5
 8019a9e:	d856      	bhi.n	8019b4e <APP_LCD_GCursorSet+0xc6>
 8019aa0:	e8df f001 	tbb	[pc, r1]
 8019aa4:	3d1b0303 	.word	0x3d1b0303
 8019aa8:	0d3d      	.short	0x0d3d
  case MIOS32_LCD_TYPE_GLCD_KS0108:
  case MIOS32_LCD_TYPE_GLCD_KS0108_INVCS: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x40 | (x % 64));
 8019aaa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8019aae:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 8019ab2:	f7ff fc05 	bl	80192c0 <APP_LCD_Cmd>
 8019ab6:	4604      	mov	r4, r0

    // set Y position
    error |= APP_LCD_Cmd(0xb8 | ((y>>3) & 0x7));
 8019ab8:	f3c5 00c2 	ubfx	r0, r5, #3, #3
 8019abc:	e00a      	b.n	8019ad4 <APP_LCD_GCursorSet+0x4c>
  case MIOS32_LCD_TYPE_GLCD_SED1520: {
    s32 error = 0;

    // set X position
#if SED1520_POLLIN_WINTEK_WD_G1203T
    error |= APP_LCD_Cmd(0x00 | (x % 61));
 8019abe:	233d      	movs	r3, #61	; 0x3d
 8019ac0:	fbb4 f2f3 	udiv	r2, r4, r3
 8019ac4:	fb03 4412 	mls	r4, r3, r2, r4
 8019ac8:	b2e0      	uxtb	r0, r4
 8019aca:	f7ff fbf9 	bl	80192c0 <APP_LCD_Cmd>
 8019ace:	4604      	mov	r4, r0
#else
    error |= APP_LCD_Cmd(0x00 | (x % 64));
#endif

    // set Y position
    error |= APP_LCD_Cmd(0xb8 | ((y>>3) & 0x3));
 8019ad0:	f3c5 00c1 	ubfx	r0, r5, #3, #2
 8019ad4:	f040 00b8 	orr.w	r0, r0, #184	; 0xb8
 8019ad8:	e032      	b.n	8019b40 <APP_LCD_GCursorSet+0xb8>

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
  
    // set X position
    error |= APP_LCD_Cmd(0x10 | (((x % mios32_lcd_parameters.width) >> 4) & 0x0f));   // First send MSB nibble
 8019ada:	88b7      	ldrh	r7, [r6, #4]
 8019adc:	fbb4 f2f7 	udiv	r2, r4, r7
 8019ae0:	fb07 4012 	mls	r0, r7, r2, r4
 8019ae4:	f3c0 1103 	ubfx	r1, r0, #4, #4
 8019ae8:	f041 0010 	orr.w	r0, r1, #16
 8019aec:	f7ff fbe8 	bl	80192c0 <APP_LCD_Cmd>
    error |= APP_LCD_Cmd(0x00 | ((x % mios32_lcd_parameters.width) & 0x0f)); // Then send LSB nibble
 8019af0:	88b3      	ldrh	r3, [r6, #4]
 8019af2:	fbb4 f2f3 	udiv	r2, r4, r3
 8019af6:	fb03 4412 	mls	r4, r3, r2, r4

  case MIOS32_LCD_TYPE_GLCD_DOG: {
    s32 error = 0;
  
    // set X position
    error |= APP_LCD_Cmd(0x10 | (((x % mios32_lcd_parameters.width) >> 4) & 0x0f));   // First send MSB nibble
 8019afa:	4607      	mov	r7, r0
    error |= APP_LCD_Cmd(0x00 | ((x % mios32_lcd_parameters.width) & 0x0f)); // Then send LSB nibble
 8019afc:	f004 000f 	and.w	r0, r4, #15
 8019b00:	f7ff fbde 	bl	80192c0 <APP_LCD_Cmd>
 8019b04:	ea40 0407 	orr.w	r4, r0, r7

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) % (mios32_lcd_parameters.height/8)));
 8019b08:	88f0      	ldrh	r0, [r6, #6]
 8019b0a:	08ed      	lsrs	r5, r5, #3
 8019b0c:	08c1      	lsrs	r1, r0, #3
 8019b0e:	fb95 f3f1 	sdiv	r3, r5, r1
 8019b12:	fb01 5513 	mls	r5, r1, r3, r5
 8019b16:	f065 024f 	orn	r2, r5, #79	; 0x4f
 8019b1a:	b2d0      	uxtb	r0, r2
 8019b1c:	e010      	b.n	8019b40 <APP_LCD_GCursorSet+0xb8>
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
 8019b1e:	f004 000f 	and.w	r0, r4, #15
 8019b22:	f7ff fbcd 	bl	80192c0 <APP_LCD_Cmd>
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 8019b26:	f3c4 1103 	ubfx	r1, r4, #4, #4
  case MIOS32_LCD_TYPE_GLCD_SSD1306:
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
 8019b2a:	4606      	mov	r6, r0
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 8019b2c:	f041 0010 	orr.w	r0, r1, #16
 8019b30:	f7ff fbc6 	bl	80192c0 <APP_LCD_Cmd>

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) & 7));
 8019b34:	f3c5 03c2 	ubfx	r3, r5, #3, #3
  case MIOS32_LCD_TYPE_GLCD_SSD1306_ROTATED: {
    s32 error = 0;

    // set X position
    error |= APP_LCD_Cmd(0x00 | (x & 0xf));
    error |= APP_LCD_Cmd(0x10 | ((x>>4) & 0xf));
 8019b38:	ea40 0406 	orr.w	r4, r0, r6

    // set Y position
    error |= APP_LCD_Cmd(0xb0 | ((y>>3) & 7));
 8019b3c:	f043 00b0 	orr.w	r0, r3, #176	; 0xb0
 8019b40:	f7ff fbbe 	bl	80192c0 <APP_LCD_Cmd>
 8019b44:	4320      	orrs	r0, r4

    return error;
 8019b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_GCursorSet(u16 x, u16 y)
{
  if( lcd_testmode )
    return -1; // direct access disabled in testmode
 8019b48:	f04f 30ff 	mov.w	r0, #4294967295
 8019b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    return error;
  } break;
  }

  return -3; // not supported
 8019b4e:	f06f 0002 	mvn.w	r0, #2
}
 8019b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b54:	200005d1 	.word	0x200005d1
 8019b58:	20010dd2 	.word	0x20010dd2

08019b5c <APP_LCD_CursorSet>:
// IN: <column> and <line>
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_CursorSet(u16 column, u16 line)
{
  if( lcd_testmode )
 8019b5c:	4b0d      	ldr	r3, [pc, #52]	; (8019b94 <APP_LCD_CursorSet+0x38>)
 8019b5e:	781a      	ldrb	r2, [r3, #0]
 8019b60:	2a00      	cmp	r2, #0
 8019b62:	d114      	bne.n	8019b8e <APP_LCD_CursorSet+0x32>
    return -1; // direct access disabled in testmode

  if( mios32_lcd_parameters.lcd_type >= 0x80 ) { // GLCD
 8019b64:	4b0c      	ldr	r3, [pc, #48]	; (8019b98 <APP_LCD_CursorSet+0x3c>)
 8019b66:	f993 2000 	ldrsb.w	r2, [r3]
 8019b6a:	2a00      	cmp	r2, #0
 8019b6c:	da05      	bge.n	8019b7a <APP_LCD_CursorSet+0x1e>
    // mios32_lcd_x/y set by MIOS32_LCD_CursorSet() function
    return APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 8019b6e:	4b0b      	ldr	r3, [pc, #44]	; (8019b9c <APP_LCD_CursorSet+0x40>)
 8019b70:	490b      	ldr	r1, [pc, #44]	; (8019ba0 <APP_LCD_CursorSet+0x44>)
 8019b72:	8818      	ldrh	r0, [r3, #0]
 8019b74:	8809      	ldrh	r1, [r1, #0]
 8019b76:	f7ff bf87 	b.w	8019a88 <APP_LCD_GCursorSet>
  } else { // CLCD
    // exit with error if line is not in allowed range
    if( line >= MIOS32_LCD_MAX_MAP_LINES )
 8019b7a:	2903      	cmp	r1, #3
 8019b7c:	d807      	bhi.n	8019b8e <APP_LCD_CursorSet+0x32>
      return -1;

    // -> set cursor address
    return APP_LCD_Cmd(0x80 | (mios32_lcd_cursor_map[line] + column));
 8019b7e:	4b09      	ldr	r3, [pc, #36]	; (8019ba4 <APP_LCD_CursorSet+0x48>)
 8019b80:	5c59      	ldrb	r1, [r3, r1]
 8019b82:	1808      	adds	r0, r1, r0
 8019b84:	f060 027f 	orn	r2, r0, #127	; 0x7f
 8019b88:	b2d0      	uxtb	r0, r2
 8019b8a:	f7ff bb99 	b.w	80192c0 <APP_LCD_Cmd>
  }

  return -3; // not supported
}
 8019b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b92:	4770      	bx	lr
 8019b94:	200005d1 	.word	0x200005d1
 8019b98:	20010dd2 	.word	0x20010dd2
 8019b9c:	20010de4 	.word	0x20010de4
 8019ba0:	20010dd0 	.word	0x20010dd0
 8019ba4:	20010dde 	.word	0x20010dde

08019ba8 <APP_LCD_BColourSet>:
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BColourSet(u32 rgb)
{
  return -3; // not supported
}
 8019ba8:	f06f 0002 	mvn.w	r0, #2
 8019bac:	4770      	bx	lr

08019bae <APP_LCD_FColourSet>:
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_FColourSet(u32 rgb)
{
  return -3; // not supported
}
 8019bae:	f06f 0002 	mvn.w	r0, #2
 8019bb2:	4770      	bx	lr

08019bb4 <APP_LCD_BitmapPrint>:
// Transfers a Bitmap within given boundaries to the LCD
// IN: bitmap
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BitmapPrint(mios32_lcd_bitmap_t bitmap)
{
 8019bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019bb8:	b085      	sub	sp, #20
 8019bba:	ab04      	add	r3, sp, #16
 8019bbc:	e903 0007 	stmdb	r3, {r0, r1, r2}
  if( lcd_testmode )
 8019bc0:	4823      	ldr	r0, [pc, #140]	; (8019c50 <APP_LCD_BitmapPrint+0x9c>)
 8019bc2:	7804      	ldrb	r4, [r0, #0]
 8019bc4:	b114      	cbz	r4, 8019bcc <APP_LCD_BitmapPrint+0x18>
    return -1; // direct access disabled in testmode
 8019bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8019bca:	e03d      	b.n	8019c48 <APP_LCD_BitmapPrint+0x94>

  if( !MIOS32_LCD_TypeIsGLCD() )
 8019bcc:	f7f7 fc0c 	bl	80113e8 <MIOS32_LCD_TypeIsGLCD>
 8019bd0:	2800      	cmp	r0, #0
 8019bd2:	d0f8      	beq.n	8019bc6 <APP_LCD_BitmapPrint+0x12>
    return -1; // no GLCD

  // abort if max. width reached
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
 8019bd4:	491f      	ldr	r1, [pc, #124]	; (8019c54 <APP_LCD_BitmapPrint+0xa0>)
 8019bd6:	4a20      	ldr	r2, [pc, #128]	; (8019c58 <APP_LCD_BitmapPrint+0xa4>)
 8019bd8:	880f      	ldrh	r7, [r1, #0]
 8019bda:	8893      	ldrh	r3, [r2, #4]
 8019bdc:	42bb      	cmp	r3, r7
 8019bde:	d92f      	bls.n	8019c40 <APP_LCD_BitmapPrint+0x8c>
  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
 8019be0:	481e      	ldr	r0, [pc, #120]	; (8019c5c <APP_LCD_BitmapPrint+0xa8>)
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;

  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);
 8019be2:	f8bd 600a 	ldrh.w	r6, [sp, #10]

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
 8019be6:	f8b0 8000 	ldrh.w	r8, [r0]
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;

  // all GLCDs support the same bitmap scrambling
  int line;
  int y_lines = (bitmap.height >> 3);
 8019bea:	08f6      	lsrs	r6, r6, #3

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
  for(line=0; line<y_lines; ++line) {
 8019bec:	42b4      	cmp	r4, r6
 8019bee:	da1c      	bge.n	8019c2a <APP_LCD_BitmapPrint+0x76>

    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;
 8019bf0:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8019bf4:	9d01      	ldr	r5, [sp, #4]
 8019bf6:	fb09 5904 	mla	r9, r9, r4, r5

    // set graphical cursor after second line has reached
    if( line > 0 ) {
 8019bfa:	b14c      	cbz	r4, 8019c10 <APP_LCD_BitmapPrint+0x5c>
      mios32_lcd_x = initial_x;
      mios32_lcd_y += 8;
 8019bfc:	4817      	ldr	r0, [pc, #92]	; (8019c5c <APP_LCD_BitmapPrint+0xa8>)
    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;

    // set graphical cursor after second line has reached
    if( line > 0 ) {
      mios32_lcd_x = initial_x;
 8019bfe:	4b15      	ldr	r3, [pc, #84]	; (8019c54 <APP_LCD_BitmapPrint+0xa0>)
      mios32_lcd_y += 8;
 8019c00:	8801      	ldrh	r1, [r0, #0]
    // calculate pointer to bitmap line
    u8 *memory_ptr = bitmap.memory + line * bitmap.line_offset;

    // set graphical cursor after second line has reached
    if( line > 0 ) {
      mios32_lcd_x = initial_x;
 8019c02:	801f      	strh	r7, [r3, #0]
      mios32_lcd_y += 8;
 8019c04:	3108      	adds	r1, #8
 8019c06:	b289      	uxth	r1, r1
 8019c08:	8001      	strh	r1, [r0, #0]
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 8019c0a:	4638      	mov	r0, r7
 8019c0c:	f7ff ff3c 	bl	8019a88 <APP_LCD_GCursorSet>
// Transfers a Bitmap within given boundaries to the LCD
// IN: bitmap
// OUT: returns < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 APP_LCD_BitmapPrint(mios32_lcd_bitmap_t bitmap)
{
 8019c10:	2500      	movs	r5, #0
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
    }

    // transfer character
    int x;
    for(x=0; x<bitmap.width; ++x)
 8019c12:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019c16:	4295      	cmp	r5, r2
 8019c18:	da05      	bge.n	8019c26 <APP_LCD_BitmapPrint+0x72>
      APP_LCD_Data(*memory_ptr++);
 8019c1a:	f819 0005 	ldrb.w	r0, [r9, r5]
 8019c1e:	f7ff fbe9 	bl	80193f4 <APP_LCD_Data>
      APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
    }

    // transfer character
    int x;
    for(x=0; x<bitmap.width; ++x)
 8019c22:	3501      	adds	r5, #1
 8019c24:	e7f5      	b.n	8019c12 <APP_LCD_BitmapPrint+0x5e>
  int line;
  int y_lines = (bitmap.height >> 3);

  u16 initial_x = mios32_lcd_x;
  u16 initial_y = mios32_lcd_y;
  for(line=0; line<y_lines; ++line) {
 8019c26:	3401      	adds	r4, #1
 8019c28:	e7e0      	b.n	8019bec <APP_LCD_BitmapPrint+0x38>
    for(x=0; x<bitmap.width; ++x)
      APP_LCD_Data(*memory_ptr++);
  }

  // fix graphical cursor if more than one line has been print
  if( y_lines >= 1 ) {
 8019c2a:	b166      	cbz	r6, 8019c46 <APP_LCD_BitmapPrint+0x92>
    mios32_lcd_y = initial_y;
 8019c2c:	490b      	ldr	r1, [pc, #44]	; (8019c5c <APP_LCD_BitmapPrint+0xa8>)
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 8019c2e:	4a09      	ldr	r2, [pc, #36]	; (8019c54 <APP_LCD_BitmapPrint+0xa0>)
      APP_LCD_Data(*memory_ptr++);
  }

  // fix graphical cursor if more than one line has been print
  if( y_lines >= 1 ) {
    mios32_lcd_y = initial_y;
 8019c30:	f8a1 8000 	strh.w	r8, [r1]
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
 8019c34:	8810      	ldrh	r0, [r2, #0]
 8019c36:	4641      	mov	r1, r8
 8019c38:	f7ff ff26 	bl	8019a88 <APP_LCD_GCursorSet>
  }

  return 0; // no error
 8019c3c:	2000      	movs	r0, #0
 8019c3e:	e003      	b.n	8019c48 <APP_LCD_BitmapPrint+0x94>
  if( !MIOS32_LCD_TypeIsGLCD() )
    return -1; // no GLCD

  // abort if max. width reached
  if( mios32_lcd_x >= mios32_lcd_parameters.width )
    return -2;
 8019c40:	f06f 0001 	mvn.w	r0, #1
 8019c44:	e000      	b.n	8019c48 <APP_LCD_BitmapPrint+0x94>
  if( y_lines >= 1 ) {
    mios32_lcd_y = initial_y;
    APP_LCD_GCursorSet(mios32_lcd_x, mios32_lcd_y);
  }

  return 0; // no error
 8019c46:	4630      	mov	r0, r6
}
 8019c48:	b005      	add	sp, #20
 8019c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c4e:	bf00      	nop
 8019c50:	200005d1 	.word	0x200005d1
 8019c54:	20010de4 	.word	0x20010de4
 8019c58:	20010dd2 	.word	0x20010dd2
 8019c5c:	20010dd0 	.word	0x20010dd0

08019c60 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Inidialize a Drive                                                    */
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive nmuber (0..) */
)
{
 8019c60:	b510      	push	{r4, lr}
  if( drv == SDCARD ) {
 8019c62:	4604      	mov	r4, r0
 8019c64:	b968      	cbnz	r0, 8019c82 <disk_initialize+0x22>
    // check availability of SD Card
    // we assume that it has been initialized by application
    sdcard_sector_count = 0xffffffff; // TODO
 8019c66:	4b09      	ldr	r3, [pc, #36]	; (8019c8c <disk_initialize+0x2c>)
 8019c68:	f04f 32ff 	mov.w	r2, #4294967295
#if DEBUG_VERBOSE_LEVEL >= 2
    MIOS32_MIDI_SendDebugMessage("[disk_init] size = %u\n", sdcard_sector_count);
#endif

    int status;
    if( (status=MIOS32_SDCARD_CheckAvailable(1)) < 1 ) {
 8019c6c:	2001      	movs	r0, #1
)
{
  if( drv == SDCARD ) {
    // check availability of SD Card
    // we assume that it has been initialized by application
    sdcard_sector_count = 0xffffffff; // TODO
 8019c6e:	601a      	str	r2, [r3, #0]
#if DEBUG_VERBOSE_LEVEL >= 2
    MIOS32_MIDI_SendDebugMessage("[disk_init] size = %u\n", sdcard_sector_count);
#endif

    int status;
    if( (status=MIOS32_SDCARD_CheckAvailable(1)) < 1 ) {
 8019c70:	f7f8 fd42 	bl	80126f8 <MIOS32_SDCARD_CheckAvailable>
 8019c74:	1e01      	subs	r1, r0, #0
 8019c76:	dc06      	bgt.n	8019c86 <disk_initialize+0x26>
#if DEBUG_VERBOSE_LEVEL >= 1
      MIOS32_MIDI_SendDebugMessage("[disk_initialize] error while checking for SD Card (status %d)\n", status);
 8019c78:	4805      	ldr	r0, [pc, #20]	; (8019c90 <disk_initialize+0x30>)
 8019c7a:	f7f7 fe8b 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
#endif
      return STA_NODISK;
 8019c7e:	2002      	movs	r0, #2
 8019c80:	bd10      	pop	{r4, pc}
    }

    return 0;
  }

  return STA_NOINIT;
 8019c82:	2001      	movs	r0, #1
 8019c84:	bd10      	pop	{r4, pc}
      MIOS32_MIDI_SendDebugMessage("[disk_initialize] error while checking for SD Card (status %d)\n", status);
#endif
      return STA_NODISK;
    }

    return 0;
 8019c86:	4620      	mov	r0, r4
  }

  return STA_NOINIT;
}
 8019c88:	bd10      	pop	{r4, pc}
 8019c8a:	bf00      	nop
 8019c8c:	200005e4 	.word	0x200005e4
 8019c90:	0801c7da 	.word	0x0801c7da

08019c94 <disk_status>:
    // we don't use MIOS32_SDCARD_CheckAvailable() here, since the status is checked very frequently!
    return 0;
  }

  return STA_NOINIT;
}
 8019c94:	3000      	adds	r0, #0
 8019c96:	bf18      	it	ne
 8019c98:	2001      	movne	r0, #1
 8019c9a:	4770      	bx	lr

08019c9c <disk_read>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
 8019c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ca0:	460e      	mov	r6, r1
 8019ca2:	4617      	mov	r7, r2
 8019ca4:	4698      	mov	r8, r3
  if( drv == SDCARD ) {
 8019ca6:	b110      	cbz	r0, 8019cae <disk_read+0x12>
    }

    return RES_OK;
  }

  return RES_PARERR;
 8019ca8:	2004      	movs	r0, #4
 8019caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
  if( drv == SDCARD ) {
 8019cae:	4604      	mov	r4, r0
    int i;

    for(i=0; i<count; ++i) {
 8019cb0:	4544      	cmp	r4, r8
 8019cb2:	da10      	bge.n	8019cd6 <disk_read+0x3a>


/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */

DRESULT disk_read (
 8019cb4:	19e5      	adds	r5, r4, r7
    for(i=0; i<count; ++i) {
#if DEBUG_VERBOSE_LEVEL >= 2
      MIOS32_MIDI_SendDebugMessage("[disk_read] sector %d (#%d/%d)\n", sector+i, i+1, count);
#endif

      if( MIOS32_SDCARD_SectorRead(sector + i, buff + i*512) < 0 ) {
 8019cb6:	4628      	mov	r0, r5
 8019cb8:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8019cbc:	f7f8 fd64 	bl	8012788 <MIOS32_SDCARD_SectorRead>
 8019cc0:	2800      	cmp	r0, #0
 8019cc2:	da06      	bge.n	8019cd2 <disk_read+0x36>
#if DEBUG_VERBOSE_LEVEL >= 1
	MIOS32_MIDI_SendDebugMessage("[disk_read] error while reading sector %d\n", sector+i);
 8019cc4:	4629      	mov	r1, r5
 8019cc6:	4805      	ldr	r0, [pc, #20]	; (8019cdc <disk_read+0x40>)
 8019cc8:	f7f7 fe64 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
#endif
	return RES_ERROR;
 8019ccc:	2001      	movs	r0, #1
 8019cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
)
{
  if( drv == SDCARD ) {
    int i;

    for(i=0; i<count; ++i) {
 8019cd2:	3401      	adds	r4, #1
 8019cd4:	e7ec      	b.n	8019cb0 <disk_read+0x14>
	MIOS32_MIDI_SendDebugMessage("[disk_read] sector %d (#%d/%d) finished\n", sector+i, i+1, count);
#endif
      }
    }

    return RES_OK;
 8019cd6:	2000      	movs	r0, #0
  }

  return RES_PARERR;
}
 8019cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cdc:	0801c81a 	.word	0x0801c81a

08019ce0 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
 8019ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ce4:	460e      	mov	r6, r1
 8019ce6:	4617      	mov	r7, r2
 8019ce8:	4698      	mov	r8, r3
  if( drv == SDCARD ) {
 8019cea:	b110      	cbz	r0, 8019cf2 <disk_write+0x12>
    }

    return RES_OK;
  }

  return RES_PARERR;
 8019cec:	2004      	movs	r0, #4
 8019cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
  if( drv == SDCARD ) {
 8019cf2:	4604      	mov	r4, r0
    int i;

    for(i=0; i<count; ++i) {
 8019cf4:	4544      	cmp	r4, r8
 8019cf6:	da10      	bge.n	8019d1a <disk_write+0x3a>

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */

#if _READONLY == 0
DRESULT disk_write (
 8019cf8:	19e5      	adds	r5, r4, r7

    for(i=0; i<count; ++i) {
#if DEBUG_VERBOSE_LEVEL >= 2
      MIOS32_MIDI_SendDebugMessage("[disk_write] sector %d (#%d/%d)\n", sector+i, i+1, count);
#endif
      if( MIOS32_SDCARD_SectorWrite(sector + i, (u8 *)buff + 512*i) < 0 ) {
 8019cfa:	4628      	mov	r0, r5
 8019cfc:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8019d00:	f7f8 fd8c 	bl	801281c <MIOS32_SDCARD_SectorWrite>
 8019d04:	2800      	cmp	r0, #0
 8019d06:	da06      	bge.n	8019d16 <disk_write+0x36>
#if DEBUG_VERBOSE_LEVEL >= 1
	MIOS32_MIDI_SendDebugMessage("[disk_write] error while writing to sector %d\n", sector+i);
 8019d08:	4629      	mov	r1, r5
 8019d0a:	4805      	ldr	r0, [pc, #20]	; (8019d20 <disk_write+0x40>)
 8019d0c:	f7f7 fe42 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
#endif
	return RES_ERROR;
 8019d10:	2001      	movs	r0, #1
 8019d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
)
{
  if( drv == SDCARD ) {
    int i;

    for(i=0; i<count; ++i) {
 8019d16:	3401      	adds	r4, #1
 8019d18:	e7ec      	b.n	8019cf4 <disk_write+0x14>
      MIOS32_MIDI_SendDebugMessage("[disk_write] sector %d (#%d/%d) finished\n", sector+i, i+1, count);
#endif
      }
    }

    return RES_OK;
 8019d1a:	2000      	movs	r0, #0
  }

  return RES_PARERR;
}
 8019d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d20:	0801c845 	.word	0x0801c845

08019d24 <get_fattime>:
DWORD __attribute__ ((weak)) get_fattime(void)
{
  /* 31-25: Year(0-127 org.1980), 24-21: Month(1-12), 20-16: Day(1-31) */
  /* 15-11: Hour(0-23), 10-5: Minute(0-59), 4-0: Second(0-29 *2) */
  return 0;
}
 8019d24:	2000      	movs	r0, #0
 8019d26:	4770      	bx	lr

08019d28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
 8019d28:	b510      	push	{r4, lr}
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	4293      	cmp	r3, r2
 8019d2e:	d003      	beq.n	8019d38 <mem_cpy+0x10>
 8019d30:	5ccc      	ldrb	r4, [r1, r3]
 8019d32:	54c4      	strb	r4, [r0, r3]
 8019d34:	3301      	adds	r3, #1
 8019d36:	e7f9      	b.n	8019d2c <mem_cpy+0x4>
}
 8019d38:	bd10      	pop	{r4, pc}

08019d3a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
 8019d3a:	1882      	adds	r2, r0, r2
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
 8019d3c:	4290      	cmp	r0, r2
 8019d3e:	d002      	beq.n	8019d46 <mem_set+0xc>
 8019d40:	f800 1b01 	strb.w	r1, [r0], #1
 8019d44:	e7fa      	b.n	8019d3c <mem_set+0x2>
}
 8019d46:	4770      	bx	lr

08019d48 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 8019d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	DWORD wsect;


	wsect = fs->winsect;
 8019d4c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
 8019d4e:	428d      	cmp	r5, r1
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 8019d50:	4604      	mov	r4, r0
 8019d52:	460e      	mov	r6, r1
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8019d54:	d102      	bne.n	8019d5c <move_window+0x14>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
 8019d56:	2000      	movs	r0, #0
 8019d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8019d5c:	7903      	ldrb	r3, [r0, #4]
 8019d5e:	b913      	cbnz	r3, 8019d66 <move_window+0x1e>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8019d60:	2e00      	cmp	r6, #0
 8019d62:	d0f8      	beq.n	8019d56 <move_window+0xe>
 8019d64:	e01f      	b.n	8019da6 <move_window+0x5e>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 8019d66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8019d6a:	4641      	mov	r1, r8
 8019d6c:	7840      	ldrb	r0, [r0, #1]
 8019d6e:	462a      	mov	r2, r5
 8019d70:	2301      	movs	r3, #1
 8019d72:	f7ff ffb5 	bl	8019ce0 <disk_write>
 8019d76:	b110      	cbz	r0, 8019d7e <move_window+0x36>
				return FR_DISK_ERR;
 8019d78:	2001      	movs	r0, #1
 8019d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fs->wflag = 0;
 8019d7e:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 8019d80:	69a2      	ldr	r2, [r4, #24]
 8019d82:	6a20      	ldr	r0, [r4, #32]
 8019d84:	1811      	adds	r1, r2, r0
 8019d86:	428d      	cmp	r5, r1
 8019d88:	d2ea      	bcs.n	8019d60 <move_window+0x18>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8019d8a:	78e7      	ldrb	r7, [r4, #3]
 8019d8c:	2f01      	cmp	r7, #1
 8019d8e:	d9e7      	bls.n	8019d60 <move_window+0x18>
					wsect += fs->sects_fat;
 8019d90:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drive, fs->win, wsect, 1);
 8019d92:	7860      	ldrb	r0, [r4, #1]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
					wsect += fs->sects_fat;
 8019d94:	18ed      	adds	r5, r5, r3
					disk_write(fs->drive, fs->win, wsect, 1);
 8019d96:	4641      	mov	r1, r8
 8019d98:	462a      	mov	r2, r5
 8019d9a:	2301      	movs	r3, #1
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8019d9c:	3f01      	subs	r7, #1
					wsect += fs->sects_fat;
					disk_write(fs->drive, fs->win, wsect, 1);
 8019d9e:	f7ff ff9f 	bl	8019ce0 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8019da2:	b2ff      	uxtb	r7, r7
 8019da4:	e7f2      	b.n	8019d8c <move_window+0x44>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 8019da6:	7860      	ldrb	r0, [r4, #1]
 8019da8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8019dac:	4632      	mov	r2, r6
 8019dae:	2301      	movs	r3, #1
 8019db0:	f7ff ff74 	bl	8019c9c <disk_read>
 8019db4:	2800      	cmp	r0, #0
 8019db6:	d1df      	bne.n	8019d78 <move_window+0x30>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8019db8:	62e6      	str	r6, [r4, #44]	; 0x2c
		}
	}

	return FR_OK;
}
 8019dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08019dc0 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8019dc0:	b510      	push	{r4, lr}
 8019dc2:	4604      	mov	r4, r0
 8019dc4:	460a      	mov	r2, r1
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8019dc6:	7840      	ldrb	r0, [r0, #1]
 8019dc8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8019dcc:	2301      	movs	r3, #1
 8019dce:	f7ff ff65 	bl	8019c9c <disk_read>
 8019dd2:	bb80      	cbnz	r0, 8019e36 <check_fs+0x76>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8019dd4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8019dd8:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 8019ddc:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
 8019de0:	4b17      	ldr	r3, [pc, #92]	; (8019e40 <check_fs+0x80>)
 8019de2:	b20a      	sxth	r2, r1
 8019de4:	429a      	cmp	r2, r3
 8019de6:	d128      	bne.n	8019e3a <check_fs+0x7a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8019de8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8019dec:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 8019df0:	0413      	lsls	r3, r2, #16
 8019df2:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 8019df6:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8019dfa:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019dfe:	4311      	orrs	r1, r2
 8019e00:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8019e04:	4b0f      	ldr	r3, [pc, #60]	; (8019e44 <check_fs+0x84>)
 8019e06:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8019e0a:	429a      	cmp	r2, r3
 8019e0c:	d016      	beq.n	8019e3c <check_fs+0x7c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 8019e0e:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 8019e12:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
 8019e16:	0402      	lsls	r2, r0, #16
 8019e18:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 8019e1c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8019e20:	f894 2083 	ldrb.w	r2, [r4, #131]	; 0x83
 8019e24:	4301      	orrs	r1, r0
 8019e26:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8019e2a:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
		return 0;
 8019e2e:	1ac0      	subs	r0, r0, r3
 8019e30:	bf18      	it	ne
 8019e32:	2001      	movne	r0, #1
 8019e34:	bd10      	pop	{r4, pc}
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
 8019e36:	2003      	movs	r0, #3
 8019e38:	bd10      	pop	{r4, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
 8019e3a:	2002      	movs	r0, #2
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
 8019e3c:	bd10      	pop	{r4, pc}
 8019e3e:	bf00      	nop
 8019e40:	ffffaa55 	.word	0xffffaa55
 8019e44:	00544146 	.word	0x00544146

08019e48 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 8019e48:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
 8019e4a:	b168      	cbz	r0, 8019e68 <validate+0x20>
 8019e4c:	7803      	ldrb	r3, [r0, #0]
 8019e4e:	b15b      	cbz	r3, 8019e68 <validate+0x20>
 8019e50:	88c2      	ldrh	r2, [r0, #6]
 8019e52:	428a      	cmp	r2, r1
 8019e54:	d108      	bne.n	8019e68 <validate+0x20>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
 8019e56:	7840      	ldrb	r0, [r0, #1]
 8019e58:	f7ff ff1c 	bl	8019c94 <disk_status>
 8019e5c:	f010 0f01 	tst.w	r0, #1
		return FR_NOT_READY;
 8019e60:	bf0c      	ite	eq
 8019e62:	2000      	moveq	r0, #0
 8019e64:	2003      	movne	r0, #3
 8019e66:	bd08      	pop	{r3, pc}
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
 8019e68:	2009      	movs	r0, #9

	if (disk_status(fs->drive) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
 8019e6a:	bd08      	pop	{r3, pc}

08019e6c <get_fat>:
{
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 8019e6c:	2901      	cmp	r1, #1

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8019e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e72:	4605      	mov	r5, r0
 8019e74:	460c      	mov	r4, r1
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 8019e76:	d95d      	bls.n	8019f34 <get_fat+0xc8>
 8019e78:	69c3      	ldr	r3, [r0, #28]
 8019e7a:	4299      	cmp	r1, r3
 8019e7c:	d25a      	bcs.n	8019f34 <get_fat+0xc8>
		return 1;

	fsect = fs->fatbase;
	switch (fs->fs_type) {
 8019e7e:	7801      	ldrb	r1, [r0, #0]


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;

	fsect = fs->fatbase;
 8019e80:	6a06      	ldr	r6, [r0, #32]
	switch (fs->fs_type) {
 8019e82:	2902      	cmp	r1, #2
 8019e84:	d028      	beq.n	8019ed8 <get_fat+0x6c>
 8019e86:	2903      	cmp	r1, #3
 8019e88:	d036      	beq.n	8019ef8 <get_fat+0x8c>
 8019e8a:	2901      	cmp	r1, #1
 8019e8c:	d14e      	bne.n	8019f2c <get_fat+0xc0>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
 8019e8e:	eb04 0754 	add.w	r7, r4, r4, lsr #1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8019e92:	eb06 2157 	add.w	r1, r6, r7, lsr #9
 8019e96:	f7ff ff57 	bl	8019d48 <move_window>
 8019e9a:	2800      	cmp	r0, #0
 8019e9c:	d146      	bne.n	8019f2c <get_fat+0xc0>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 8019e9e:	05f8      	lsls	r0, r7, #23
 8019ea0:	eb05 52d0 	add.w	r2, r5, r0, lsr #23
 8019ea4:	3701      	adds	r7, #1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8019ea6:	4628      	mov	r0, r5
 8019ea8:	eb06 2157 	add.w	r1, r6, r7, lsr #9
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 8019eac:	f892 8030 	ldrb.w	r8, [r2, #48]	; 0x30
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8019eb0:	f7ff ff4a 	bl	8019d48 <move_window>
 8019eb4:	2800      	cmp	r0, #0
 8019eb6:	d139      	bne.n	8019f2c <get_fat+0xc0>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 8019eb8:	05ff      	lsls	r7, r7, #23
 8019eba:	eb05 55d7 	add.w	r5, r5, r7, lsr #23
 8019ebe:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8019ec2:	ea48 2103 	orr.w	r1, r8, r3, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019ec6:	07e3      	lsls	r3, r4, #31
 8019ec8:	d502      	bpl.n	8019ed0 <get_fat+0x64>
 8019eca:	0908      	lsrs	r0, r1, #4
 8019ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ed0:	0508      	lsls	r0, r1, #20
 8019ed2:	0d00      	lsrs	r0, r0, #20
 8019ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 8019ed8:	eb06 2114 	add.w	r1, r6, r4, lsr #8
 8019edc:	f7ff ff34 	bl	8019d48 <move_window>
 8019ee0:	bb20      	cbnz	r0, 8019f2c <get_fat+0xc0>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 8019ee2:	0624      	lsls	r4, r4, #24
 8019ee4:	eb05 55d4 	add.w	r5, r5, r4, lsr #23
 8019ee8:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
 8019eec:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8019ef0:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8019ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 8019ef8:	eb06 11d4 	add.w	r1, r6, r4, lsr #7
 8019efc:	f7ff ff24 	bl	8019d48 <move_window>
 8019f00:	b9a0      	cbnz	r0, 8019f2c <get_fat+0xc0>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 8019f02:	0664      	lsls	r4, r4, #25
 8019f04:	eb05 55d4 	add.w	r5, r5, r4, lsr #23
 8019f08:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8019f0c:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
 8019f10:	0419      	lsls	r1, r3, #16
 8019f12:	ea41 6002 	orr.w	r0, r1, r2, lsl #24
 8019f16:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8019f1a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8019f1e:	4310      	orrs	r0, r2
 8019f20:	ea40 2103 	orr.w	r1, r0, r3, lsl #8
 8019f24:	f021 4070 	bic.w	r0, r1, #4026531840	; 0xf0000000
 8019f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
 8019f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;
 8019f34:	2001      	movs	r0, #1
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
 8019f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f3a <put_fat>:
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 8019f3a:	2901      	cmp	r1, #1
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8019f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f40:	4604      	mov	r4, r0
 8019f42:	460d      	mov	r5, r1
 8019f44:	4616      	mov	r6, r2
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 8019f46:	d96d      	bls.n	801a024 <put_fat+0xea>
 8019f48:	69c3      	ldr	r3, [r0, #28]
 8019f4a:	4299      	cmp	r1, r3
 8019f4c:	d26a      	bcs.n	801a024 <put_fat+0xea>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
		switch (fs->fs_type) {
 8019f4e:	7801      	ldrb	r1, [r0, #0]

	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
 8019f50:	6a07      	ldr	r7, [r0, #32]
		switch (fs->fs_type) {
 8019f52:	2902      	cmp	r1, #2
 8019f54:	d03d      	beq.n	8019fd2 <put_fat+0x98>
 8019f56:	2903      	cmp	r1, #3
 8019f58:	d04a      	beq.n	8019ff0 <put_fat+0xb6>
 8019f5a:	2901      	cmp	r1, #1
 8019f5c:	d15d      	bne.n	801a01a <put_fat+0xe0>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 8019f5e:	eb05 0855 	add.w	r8, r5, r5, lsr #1
			res = move_window(fs, fsect + (bc / SS(fs)));
 8019f62:	eb07 2158 	add.w	r1, r7, r8, lsr #9
 8019f66:	f7ff feef 	bl	8019d48 <move_window>
			if (res != FR_OK) break;
 8019f6a:	2800      	cmp	r0, #0
 8019f6c:	d156      	bne.n	801a01c <put_fat+0xe2>
			p = &fs->win[bc & (SS(fs) - 1)];
 8019f6e:	ea4f 52c8 	mov.w	r2, r8, lsl #23
 8019f72:	0dd0      	lsrs	r0, r2, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019f74:	f015 0501 	ands.w	r5, r5, #1
 8019f78:	b2f3      	uxtb	r3, r6
 8019f7a:	d007      	beq.n	8019f8c <put_fat+0x52>
 8019f7c:	1821      	adds	r1, r4, r0
 8019f7e:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8019f82:	f002 010f 	and.w	r1, r2, #15
 8019f86:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	1820      	adds	r0, r4, r0
			bc++;
 8019f8e:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
 8019f92:	2201      	movs	r2, #1
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fsect + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc & (SS(fs) - 1)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019f94:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			bc++;
			fs->wflag = 1;
 8019f98:	7122      	strb	r2, [r4, #4]
			res = move_window(fs, fsect + (bc / SS(fs)));
 8019f9a:	4620      	mov	r0, r4
 8019f9c:	eb07 2158 	add.w	r1, r7, r8, lsr #9
 8019fa0:	f7ff fed2 	bl	8019d48 <move_window>
			if (res != FR_OK) break;
 8019fa4:	bbd0      	cbnz	r0, 801a01c <put_fat+0xe2>
			p = &fs->win[bc & (SS(fs) - 1)];
 8019fa6:	ea4f 58c8 	mov.w	r8, r8, lsl #23
 8019faa:	ea4f 58d8 	mov.w	r8, r8, lsr #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019fae:	b115      	cbz	r5, 8019fb6 <put_fat+0x7c>
 8019fb0:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8019fb4:	e008      	b.n	8019fc8 <put_fat+0x8e>
 8019fb6:	eb04 0108 	add.w	r1, r4, r8
 8019fba:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8019fbe:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8019fc2:	f023 020f 	bic.w	r2, r3, #15
 8019fc6:	4316      	orrs	r6, r2
 8019fc8:	eb04 0108 	add.w	r1, r4, r8
 8019fcc:	f881 6030 	strb.w	r6, [r1, #48]	; 0x30
 8019fd0:	e024      	b.n	801a01c <put_fat+0xe2>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 8019fd2:	eb07 2115 	add.w	r1, r7, r5, lsr #8
 8019fd6:	f7ff feb7 	bl	8019d48 <move_window>
			if (res != FR_OK) break;
 8019fda:	b9f8      	cbnz	r0, 801a01c <put_fat+0xe2>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 8019fdc:	0629      	lsls	r1, r5, #24
 8019fde:	eb04 55d1 	add.w	r5, r4, r1, lsr #23
 8019fe2:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
 8019fe6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019fea:	f885 6031 	strb.w	r6, [r5, #49]	; 0x31
 8019fee:	e015      	b.n	801a01c <put_fat+0xe2>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 8019ff0:	eb07 11d5 	add.w	r1, r7, r5, lsr #7
 8019ff4:	f7ff fea8 	bl	8019d48 <move_window>
			if (res != FR_OK) break;
 8019ff8:	b980      	cbnz	r0, 801a01c <put_fat+0xe2>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 8019ffa:	066d      	lsls	r5, r5, #25
 8019ffc:	eb04 55d5 	add.w	r5, r4, r5, lsr #23
 801a000:	f3c6 2307 	ubfx	r3, r6, #8, #8
 801a004:	0c32      	lsrs	r2, r6, #16
 801a006:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
 801a00a:	0e36      	lsrs	r6, r6, #24
 801a00c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 801a010:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
 801a014:	f885 6033 	strb.w	r6, [r5, #51]	; 0x33
 801a018:	e000      	b.n	801a01c <put_fat+0xe2>
			break;

		default :
			res = FR_INT_ERR;
 801a01a:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
 801a01c:	2301      	movs	r3, #1
 801a01e:	7123      	strb	r3, [r4, #4]
 801a020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
		res = FR_INT_ERR;
 801a024:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
	}

	return res;
}
 801a026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a02a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 801a02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a02e:	4605      	mov	r5, r0
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
 801a030:	f8d0 801c 	ldr.w	r8, [r0, #28]
	if (clst == 0) {		/* Create new chain */
 801a034:	460f      	mov	r7, r1
 801a036:	b929      	cbnz	r1, 801a044 <create_chain+0x1a>
		scl = fs->last_clust;			/* Get suggested start point */
 801a038:	68c6      	ldr	r6, [r0, #12]
		if (scl == 0 || scl >= mcl) scl = 1;
 801a03a:	b176      	cbz	r6, 801a05a <create_chain+0x30>
 801a03c:	4546      	cmp	r6, r8
 801a03e:	bf28      	it	cs
 801a040:	2601      	movcs	r6, #1
 801a042:	e00b      	b.n	801a05c <create_chain+0x32>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 801a044:	f7ff ff12 	bl	8019e6c <get_fat>
		if (cs < 2) return 1;			/* It is an invalid cluster */
 801a048:	2801      	cmp	r0, #1
 801a04a:	d802      	bhi.n	801a052 <create_chain+0x28>
 801a04c:	2001      	movs	r0, #1
 801a04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 801a052:	4540      	cmp	r0, r8
 801a054:	d337      	bcc.n	801a0c6 <create_chain+0x9c>
 801a056:	463e      	mov	r6, r7
 801a058:	e000      	b.n	801a05c <create_chain+0x32>


	mcl = fs->max_clust;
	if (clst == 0) {		/* Create new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
 801a05a:	2601      	movs	r6, #1
 801a05c:	4634      	mov	r4, r6
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 801a05e:	3401      	adds	r4, #1
		if (ncl >= mcl) {				/* Wrap around */
 801a060:	4544      	cmp	r4, r8
 801a062:	d305      	bcc.n	801a070 <create_chain+0x46>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
 801a064:	2e01      	cmp	r6, #1
 801a066:	d802      	bhi.n	801a06e <create_chain+0x44>
 801a068:	2000      	movs	r0, #0
 801a06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
 801a06e:	2402      	movs	r4, #2
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 801a070:	4628      	mov	r0, r5
 801a072:	4621      	mov	r1, r4
 801a074:	f7ff fefa 	bl	8019e6c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 801a078:	b150      	cbz	r0, 801a090 <create_chain+0x66>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 801a07a:	1c41      	adds	r1, r0, #1
 801a07c:	d103      	bne.n	801a086 <create_chain+0x5c>
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
 801a07e:	f04f 30ff 	mov.w	r0, #4294967295
 801a082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 801a086:	2801      	cmp	r0, #1
 801a088:	d0e0      	beq.n	801a04c <create_chain+0x22>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
 801a08a:	42b4      	cmp	r4, r6
 801a08c:	d1e7      	bne.n	801a05e <create_chain+0x34>
 801a08e:	e7eb      	b.n	801a068 <create_chain+0x3e>
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 801a090:	4628      	mov	r0, r5
 801a092:	4621      	mov	r1, r4
 801a094:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 801a098:	f7ff ff4f 	bl	8019f3a <put_fat>
 801a09c:	2800      	cmp	r0, #0
 801a09e:	d1ee      	bne.n	801a07e <create_chain+0x54>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
 801a0a0:	b947      	cbnz	r7, 801a0b4 <create_chain+0x8a>
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
 801a0a2:	692b      	ldr	r3, [r5, #16]
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
 801a0a4:	60ec      	str	r4, [r5, #12]
	if (fs->free_clust != 0xFFFFFFFF) {
 801a0a6:	1c5a      	adds	r2, r3, #1
 801a0a8:	d00c      	beq.n	801a0c4 <create_chain+0x9a>
		fs->free_clust--;
 801a0aa:	1e58      	subs	r0, r3, #1
		fs->fsi_flag = 1;
 801a0ac:	2101      	movs	r1, #1
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
		fs->free_clust--;
 801a0ae:	6128      	str	r0, [r5, #16]
		fs->fsi_flag = 1;
 801a0b0:	7169      	strb	r1, [r5, #5]
 801a0b2:	e007      	b.n	801a0c4 <create_chain+0x9a>
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
 801a0b4:	4628      	mov	r0, r5
 801a0b6:	4639      	mov	r1, r7
 801a0b8:	4622      	mov	r2, r4
 801a0ba:	f7ff ff3e 	bl	8019f3a <put_fat>
 801a0be:	2800      	cmp	r0, #0
 801a0c0:	d1dd      	bne.n	801a07e <create_chain+0x54>
 801a0c2:	e7ee      	b.n	801a0a2 <create_chain+0x78>
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
		fs->free_clust--;
		fs->fsi_flag = 1;
 801a0c4:	4620      	mov	r0, r4
	}

	return ncl;		/* Return new cluster number */
}
 801a0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0ca <remove_chain>:
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 801a0ca:	2901      	cmp	r1, #1
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 801a0cc:	b570      	push	{r4, r5, r6, lr}
 801a0ce:	4604      	mov	r4, r0
 801a0d0:	460d      	mov	r5, r1
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 801a0d2:	d922      	bls.n	801a11a <remove_chain+0x50>
 801a0d4:	69c3      	ldr	r3, [r0, #28]
 801a0d6:	4299      	cmp	r1, r3
 801a0d8:	d21f      	bcs.n	801a11a <remove_chain+0x50>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
 801a0da:	69e0      	ldr	r0, [r4, #28]
 801a0dc:	4285      	cmp	r5, r0
 801a0de:	d205      	bcs.n	801a0ec <remove_chain+0x22>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 801a0e0:	4620      	mov	r0, r4
 801a0e2:	4629      	mov	r1, r5
 801a0e4:	f7ff fec2 	bl	8019e6c <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 801a0e8:	4606      	mov	r6, r0
 801a0ea:	b908      	cbnz	r0, 801a0f0 <remove_chain+0x26>
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 801a0ec:	2000      	movs	r0, #0
 801a0ee:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 801a0f0:	2801      	cmp	r0, #1
 801a0f2:	d012      	beq.n	801a11a <remove_chain+0x50>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 801a0f4:	1c43      	adds	r3, r0, #1
 801a0f6:	d00e      	beq.n	801a116 <remove_chain+0x4c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 801a0f8:	4620      	mov	r0, r4
 801a0fa:	4629      	mov	r1, r5
 801a0fc:	2200      	movs	r2, #0
 801a0fe:	f7ff ff1c 	bl	8019f3a <put_fat>
			if (res != FR_OK) break;
 801a102:	b958      	cbnz	r0, 801a11c <remove_chain+0x52>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 801a104:	6921      	ldr	r1, [r4, #16]
 801a106:	1c48      	adds	r0, r1, #1
 801a108:	d003      	beq.n	801a112 <remove_chain+0x48>
				fs->free_clust++;
 801a10a:	1c4a      	adds	r2, r1, #1
				fs->fsi_flag = 1;
 801a10c:	2501      	movs	r5, #1
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
 801a10e:	6122      	str	r2, [r4, #16]
				fs->fsi_flag = 1;
 801a110:	7165      	strb	r5, [r4, #5]
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 801a112:	4635      	mov	r5, r6
 801a114:	e7e1      	b.n	801a0da <remove_chain+0x10>
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 801a116:	2001      	movs	r0, #1
 801a118:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;
 801a11a:	2002      	movs	r0, #2
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
 801a11c:	bd70      	pop	{r4, r5, r6, pc}

0801a11e <clust2sect>:
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 801a11e:	69c3      	ldr	r3, [r0, #28]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 801a120:	3902      	subs	r1, #2
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 801a122:	1e9a      	subs	r2, r3, #2
 801a124:	4291      	cmp	r1, r2
 801a126:	d204      	bcs.n	801a132 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 801a128:	7882      	ldrb	r2, [r0, #2]
 801a12a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a12c:	fb02 0001 	mla	r0, r2, r1, r0
 801a130:	4770      	bx	lr
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 801a132:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
 801a134:	4770      	bx	lr

0801a136 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 801a136:	b570      	push	{r4, r5, r6, lr}
 801a138:	4604      	mov	r4, r0
 801a13a:	460d      	mov	r5, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
 801a13c:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
 801a13e:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 801a140:	2901      	cmp	r1, #1
 801a142:	d101      	bne.n	801a148 <dir_seek+0x12>
		return FR_INT_ERR;
 801a144:	2002      	movs	r0, #2
 801a146:	bd70      	pop	{r4, r5, r6, pc}
	WORD ic;


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 801a148:	6803      	ldr	r3, [r0, #0]
 801a14a:	69da      	ldr	r2, [r3, #28]
 801a14c:	4291      	cmp	r1, r2
 801a14e:	d2f9      	bcs.n	801a144 <dir_seek+0xe>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 801a150:	b971      	cbnz	r1, 801a170 <dir_seek+0x3a>
 801a152:	7818      	ldrb	r0, [r3, #0]
 801a154:	2803      	cmp	r0, #3
 801a156:	d101      	bne.n	801a15c <dir_seek+0x26>
		clst = dj->fs->dirbase;
 801a158:	6a59      	ldr	r1, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table */
 801a15a:	b949      	cbnz	r1, 801a170 <dir_seek+0x3a>
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 801a15c:	8919      	ldrh	r1, [r3, #8]
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table */
		dj->clust = clst;
 801a15e:	2000      	movs	r0, #0
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 801a160:	42a9      	cmp	r1, r5
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table */
		dj->clust = clst;
 801a162:	60e0      	str	r0, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 801a164:	d9ee      	bls.n	801a144 <dir_seek+0xe>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 801a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a168:	eb03 1215 	add.w	r2, r3, r5, lsr #4
 801a16c:	6122      	str	r2, [r4, #16]
 801a16e:	e019      	b.n	801a1a4 <dir_seek+0x6e>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 801a170:	789e      	ldrb	r6, [r3, #2]
 801a172:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 801a174:	42b5      	cmp	r5, r6
 801a176:	d30e      	bcc.n	801a196 <dir_seek+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 801a178:	6820      	ldr	r0, [r4, #0]
 801a17a:	f7ff fe77 	bl	8019e6c <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a17e:	1c42      	adds	r2, r0, #1
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 801a180:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a182:	d018      	beq.n	801a1b6 <dir_seek+0x80>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 801a184:	2801      	cmp	r0, #1
 801a186:	d9dd      	bls.n	801a144 <dir_seek+0xe>
 801a188:	6823      	ldr	r3, [r4, #0]
 801a18a:	69da      	ldr	r2, [r3, #28]
 801a18c:	4290      	cmp	r0, r2
 801a18e:	d2d9      	bcs.n	801a144 <dir_seek+0xe>
				return FR_INT_ERR;
			idx -= ic;
 801a190:	1bad      	subs	r5, r5, r6
 801a192:	b2ad      	uxth	r5, r5
 801a194:	e7ee      	b.n	801a174 <dir_seek+0x3e>
		}
		dj->clust = clst;
 801a196:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 801a198:	6820      	ldr	r0, [r4, #0]
 801a19a:	f7ff ffc0 	bl	801a11e <clust2sect>
 801a19e:	eb00 1115 	add.w	r1, r0, r5, lsr #4
 801a1a2:	6121      	str	r1, [r4, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 801a1a4:	f005 050f 	and.w	r5, r5, #15
 801a1a8:	6820      	ldr	r0, [r4, #0]
 801a1aa:	016d      	lsls	r5, r5, #5
 801a1ac:	3530      	adds	r5, #48	; 0x30
 801a1ae:	1941      	adds	r1, r0, r5
 801a1b0:	6161      	str	r1, [r4, #20]

	return FR_OK;	/* Seek succeeded */
 801a1b2:	2000      	movs	r0, #0
 801a1b4:	bd70      	pop	{r4, r5, r6, pc}
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a1b6:	2001      	movs	r0, #1
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
 801a1b8:	bd70      	pop	{r4, r5, r6, pc}

0801a1ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 801a1ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 801a1be:	88c6      	ldrh	r6, [r0, #6]
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 801a1c0:	4604      	mov	r4, r0
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 801a1c2:	1c70      	adds	r0, r6, #1
 801a1c4:	b286      	uxth	r6, r0
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 801a1c6:	460f      	mov	r7, r1
	DWORD clst;
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 801a1c8:	b916      	cbnz	r6, 801a1d0 <dir_next+0x16>
		return FR_NO_FILE;
 801a1ca:	2004      	movs	r0, #4
 801a1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	DWORD clst;
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 801a1d0:	6923      	ldr	r3, [r4, #16]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d0f9      	beq.n	801a1ca <dir_next+0x10>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 801a1d6:	f016 080f 	ands.w	r8, r6, #15
 801a1da:	d15c      	bne.n	801a296 <dir_next+0xdc>
		dj->sect++;					/* Next sector */
 801a1dc:	1c59      	adds	r1, r3, #1
 801a1de:	6121      	str	r1, [r4, #16]

		if (dj->clust == 0) {	/* Static table */
 801a1e0:	68e1      	ldr	r1, [r4, #12]
 801a1e2:	6820      	ldr	r0, [r4, #0]
 801a1e4:	b919      	cbnz	r1, 801a1ee <dir_next+0x34>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 801a1e6:	8901      	ldrh	r1, [r0, #8]
 801a1e8:	42b1      	cmp	r1, r6
 801a1ea:	d9ee      	bls.n	801a1ca <dir_next+0x10>
 801a1ec:	e053      	b.n	801a296 <dir_next+0xdc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 801a1ee:	7882      	ldrb	r2, [r0, #2]
 801a1f0:	1e53      	subs	r3, r2, #1
 801a1f2:	ea13 1216 	ands.w	r2, r3, r6, lsr #4
 801a1f6:	d14e      	bne.n	801a296 <dir_next+0xdc>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 801a1f8:	f7ff fe38 	bl	8019e6c <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 801a1fc:	2801      	cmp	r0, #1
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 801a1fe:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 801a200:	d802      	bhi.n	801a208 <dir_next+0x4e>
 801a202:	2002      	movs	r0, #2
 801a204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801a208:	3001      	adds	r0, #1
 801a20a:	d102      	bne.n	801a212 <dir_next+0x58>
 801a20c:	2001      	movs	r0, #1
 801a20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 801a212:	6820      	ldr	r0, [r4, #0]
 801a214:	69c1      	ldr	r1, [r0, #28]
 801a216:	428d      	cmp	r5, r1
 801a218:	d337      	bcc.n	801a28a <dir_next+0xd0>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 801a21a:	2f00      	cmp	r7, #0
 801a21c:	d0d5      	beq.n	801a1ca <dir_next+0x10>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
 801a21e:	68e1      	ldr	r1, [r4, #12]
 801a220:	f7ff ff03 	bl	801a02a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801a224:	4605      	mov	r5, r0
 801a226:	2800      	cmp	r0, #0
 801a228:	d041      	beq.n	801a2ae <dir_next+0xf4>
					if (clst == 1) return FR_INT_ERR;
 801a22a:	2801      	cmp	r0, #1
 801a22c:	d0e9      	beq.n	801a202 <dir_next+0x48>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801a22e:	1c41      	adds	r1, r0, #1
 801a230:	d0ec      	beq.n	801a20c <dir_next+0x52>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 801a232:	6820      	ldr	r0, [r4, #0]
 801a234:	2100      	movs	r1, #0
 801a236:	f7ff fd87 	bl	8019d48 <move_window>
 801a23a:	4607      	mov	r7, r0
 801a23c:	2800      	cmp	r0, #0
 801a23e:	d1e5      	bne.n	801a20c <dir_next+0x52>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 801a240:	6820      	ldr	r0, [r4, #0]
 801a242:	4639      	mov	r1, r7
 801a244:	3030      	adds	r0, #48	; 0x30
 801a246:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a24a:	f7ff fd76 	bl	8019d3a <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 801a24e:	f8d4 9000 	ldr.w	r9, [r4]
 801a252:	4629      	mov	r1, r5
 801a254:	4648      	mov	r0, r9
 801a256:	f7ff ff62 	bl	801a11e <clust2sect>
 801a25a:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801a25e:	6820      	ldr	r0, [r4, #0]
 801a260:	7882      	ldrb	r2, [r0, #2]
 801a262:	42ba      	cmp	r2, r7
 801a264:	d90e      	bls.n	801a284 <dir_next+0xca>
						dj->fs->wflag = 1;
 801a266:	2101      	movs	r1, #1
 801a268:	7101      	strb	r1, [r0, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 801a26a:	6820      	ldr	r0, [r4, #0]
 801a26c:	2100      	movs	r1, #0
 801a26e:	f7ff fd6b 	bl	8019d48 <move_window>
 801a272:	2800      	cmp	r0, #0
 801a274:	d1ca      	bne.n	801a20c <dir_next+0x52>
						dj->fs->winsect++;
 801a276:	6820      	ldr	r0, [r4, #0]
 801a278:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801a27a:	3701      	adds	r7, #1
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
 801a27c:	1c53      	adds	r3, r2, #1
 801a27e:	62c3      	str	r3, [r0, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801a280:	b2ff      	uxtb	r7, r7
 801a282:	e7ec      	b.n	801a25e <dir_next+0xa4>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 801a284:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801a286:	1bdf      	subs	r7, r3, r7
 801a288:	62c7      	str	r7, [r0, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 801a28a:	60e5      	str	r5, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
 801a28c:	6820      	ldr	r0, [r4, #0]
 801a28e:	4629      	mov	r1, r5
 801a290:	f7ff ff45 	bl	801a11e <clust2sect>
 801a294:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 801a296:	6820      	ldr	r0, [r4, #0]
				dj->sect = clust2sect(dj->fs, clst);
			}
		}
	}

	dj->index = i;
 801a298:	80e6      	strh	r6, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 801a29a:	ea4f 1848 	mov.w	r8, r8, lsl #5
 801a29e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 801a2a2:	eb00 0208 	add.w	r2, r0, r8
 801a2a6:	6162      	str	r2, [r4, #20]

	return FR_OK;
 801a2a8:	2000      	movs	r0, #0
 801a2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801a2ae:	2007      	movs	r0, #7

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;

	return FR_OK;
}
 801a2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a2b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
 801a2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2b8:	4604      	mov	r4, r0
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
 801a2ba:	780b      	ldrb	r3, [r1, #0]
 801a2bc:	460d      	mov	r5, r1
 801a2be:	3101      	adds	r1, #1
 801a2c0:	2b20      	cmp	r3, #32
 801a2c2:	d0fa      	beq.n	801a2ba <follow_path+0x6>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 801a2c4:	2b2f      	cmp	r3, #47	; 0x2f
 801a2c6:	d001      	beq.n	801a2cc <follow_path+0x18>
 801a2c8:	2b5c      	cmp	r3, #92	; 0x5c
 801a2ca:	d100      	bne.n	801a2ce <follow_path+0x1a>
		path++;
 801a2cc:	3501      	adds	r5, #1
	dj->sclust = 0;						/* Start from the root dir */
 801a2ce:	2600      	movs	r6, #0
 801a2d0:	60a6      	str	r6, [r4, #8]
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
 801a2d2:	7828      	ldrb	r0, [r5, #0]
 801a2d4:	281f      	cmp	r0, #31
 801a2d6:	d855      	bhi.n	801a384 <follow_path+0xd0>
		res = dir_seek(dj, 0);
 801a2d8:	4620      	mov	r0, r4
 801a2da:	4631      	mov	r1, r6
 801a2dc:	f7ff ff2b 	bl	801a136 <dir_seek>
		dj->dir = NULL;
 801a2e0:	6166      	str	r6, [r4, #20]
 801a2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 801a2e6:	2b2f      	cmp	r3, #47	; 0x2f
 801a2e8:	d00e      	beq.n	801a308 <follow_path+0x54>
 801a2ea:	2b5c      	cmp	r3, #92	; 0x5c
 801a2ec:	d00c      	beq.n	801a308 <follow_path+0x54>
		if (c == '.' || i >= ni) {
 801a2ee:	2b2e      	cmp	r3, #46	; 0x2e
 801a2f0:	d153      	bne.n	801a39a <follow_path+0xe6>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 801a2f2:	2808      	cmp	r0, #8
 801a2f4:	f040 808f 	bne.w	801a416 <follow_path+0x162>
			i = 8; ni = 11;
			b <<= 2; continue;
 801a2f8:	0092      	lsls	r2, r2, #2
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 801a2fa:	4601      	mov	r1, r0
			b <<= 2; continue;
 801a2fc:	b2d2      	uxtb	r2, r2
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 801a2fe:	200b      	movs	r0, #11
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
 801a300:	5deb      	ldrb	r3, [r5, r7]
 801a302:	3701      	adds	r7, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 801a304:	2b20      	cmp	r3, #32
 801a306:	d8ee      	bhi.n	801a2e6 <follow_path+0x32>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
 801a308:	19ed      	adds	r5, r5, r7
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 801a30a:	2b20      	cmp	r3, #32
 801a30c:	bf94      	ite	ls
 801a30e:	2304      	movls	r3, #4
 801a310:	2300      	movhi	r3, #0

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
 801a312:	2900      	cmp	r1, #0
 801a314:	d07f      	beq.n	801a416 <follow_path+0x162>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 801a316:	7831      	ldrb	r1, [r6, #0]
 801a318:	29e5      	cmp	r1, #229	; 0xe5
 801a31a:	d101      	bne.n	801a320 <follow_path+0x6c>
 801a31c:	2105      	movs	r1, #5
 801a31e:	7031      	strb	r1, [r6, #0]

	if (ni == 8) b <<= 2;
 801a320:	2808      	cmp	r0, #8
 801a322:	d101      	bne.n	801a328 <follow_path+0x74>
 801a324:	0090      	lsls	r0, r2, #2
 801a326:	b2c2      	uxtb	r2, r0
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801a328:	f002 0103 	and.w	r1, r2, #3
 801a32c:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801a32e:	f002 000c 	and.w	r0, r2, #12

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801a332:	bf08      	it	eq
 801a334:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801a338:	2804      	cmp	r0, #4
 801a33a:	bf08      	it	eq
 801a33c:	f043 0308 	orreq.w	r3, r3, #8

	sfn[NS] = c;		/* Store NT flag, File name is created */
 801a340:	72f3      	strb	r3, [r6, #11]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
 801a342:	4620      	mov	r0, r4
 801a344:	2100      	movs	r1, #0
 801a346:	f7ff fef6 	bl	801a136 <dir_seek>
	if (res != FR_OK) return res;
 801a34a:	2800      	cmp	r0, #0
 801a34c:	d039      	beq.n	801a3c2 <follow_path+0x10e>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
 801a34e:	69a1      	ldr	r1, [r4, #24]
 801a350:	7acb      	ldrb	r3, [r1, #11]
 801a352:	f003 0204 	and.w	r2, r3, #4
 801a356:	b2d1      	uxtb	r1, r2
			if (res != FR_OK) {				/* Could not find the object */
 801a358:	2800      	cmp	r0, #0
 801a35a:	d151      	bne.n	801a400 <follow_path+0x14c>
				if (res == FR_NO_FILE && !last)
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
 801a35c:	2900      	cmp	r1, #0
 801a35e:	d171      	bne.n	801a444 <follow_path+0x190>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
 801a360:	6960      	ldr	r0, [r4, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 801a362:	7ac3      	ldrb	r3, [r0, #11]
 801a364:	f003 0210 	and.w	r2, r3, #16
 801a368:	b2d1      	uxtb	r1, r2
 801a36a:	2900      	cmp	r1, #0
 801a36c:	d050      	beq.n	801a410 <follow_path+0x15c>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801a36e:	7d46      	ldrb	r6, [r0, #21]
 801a370:	7d07      	ldrb	r7, [r0, #20]
 801a372:	7ec1      	ldrb	r1, [r0, #27]
 801a374:	7e80      	ldrb	r0, [r0, #26]
 801a376:	ea47 2206 	orr.w	r2, r7, r6, lsl #8
 801a37a:	ea40 2301 	orr.w	r3, r0, r1, lsl #8
 801a37e:	ea43 4602 	orr.w	r6, r3, r2, lsl #16
 801a382:	60a6      	str	r6, [r4, #8]
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
 801a384:	69a6      	ldr	r6, [r4, #24]
	mem_set(sfn, ' ', 11);
 801a386:	2120      	movs	r1, #32
 801a388:	4630      	mov	r0, r6
 801a38a:	220b      	movs	r2, #11
 801a38c:	f7ff fcd5 	bl	8019d3a <mem_set>
	si = i = b = 0; ni = 8;
 801a390:	2100      	movs	r1, #0
 801a392:	460f      	mov	r7, r1
 801a394:	2008      	movs	r0, #8
 801a396:	460a      	mov	r2, r1
 801a398:	e7b2      	b.n	801a300 <follow_path+0x4c>
	}
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
 801a39a:	4281      	cmp	r1, r0
 801a39c:	da3b      	bge.n	801a416 <follow_path+0x162>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
 801a39e:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a3a2:	d004      	beq.n	801a3ae <follow_path+0xfa>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
 801a3a4:	3b80      	subs	r3, #128	; 0x80
 801a3a6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801a448 <follow_path+0x194>
 801a3aa:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801a3ae:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801a44c <follow_path+0x198>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 801a3b2:	f818 ef01 	ldrb.w	lr, [r8, #1]!
 801a3b6:	f1be 0f00 	cmp.w	lr, #0
 801a3ba:	d02f      	beq.n	801a41c <follow_path+0x168>
 801a3bc:	459e      	cmp	lr, r3
 801a3be:	d1f8      	bne.n	801a3b2 <follow_path+0xfe>
 801a3c0:	e029      	b.n	801a416 <follow_path+0x162>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 801a3c2:	6820      	ldr	r0, [r4, #0]
 801a3c4:	6921      	ldr	r1, [r4, #16]
 801a3c6:	f7ff fcbf 	bl	8019d48 <move_window>
		if (res != FR_OK) break;
 801a3ca:	2800      	cmp	r0, #0
 801a3cc:	d1bf      	bne.n	801a34e <follow_path+0x9a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 801a3ce:	6962      	ldr	r2, [r4, #20]
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a3d0:	7813      	ldrb	r3, [r2, #0]
 801a3d2:	b19b      	cbz	r3, 801a3fc <follow_path+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 801a3d4:	7ad1      	ldrb	r1, [r2, #11]
 801a3d6:	f001 0308 	and.w	r3, r1, #8
 801a3da:	b2d9      	uxtb	r1, r3
 801a3dc:	b949      	cbnz	r1, 801a3f2 <follow_path+0x13e>
 801a3de:	69a7      	ldr	r7, [r4, #24]
 801a3e0:	4603      	mov	r3, r0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 801a3e2:	5cd6      	ldrb	r6, [r2, r3]
 801a3e4:	5cf9      	ldrb	r1, [r7, r3]
 801a3e6:	3301      	adds	r3, #1
 801a3e8:	428e      	cmp	r6, r1
 801a3ea:	d102      	bne.n	801a3f2 <follow_path+0x13e>
 801a3ec:	2b0b      	cmp	r3, #11
 801a3ee:	d1f8      	bne.n	801a3e2 <follow_path+0x12e>
 801a3f0:	e7ad      	b.n	801a34e <follow_path+0x9a>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
 801a3f2:	4620      	mov	r0, r4
 801a3f4:	2100      	movs	r1, #0
 801a3f6:	f7ff fee0 	bl	801a1ba <dir_next>
 801a3fa:	e7a6      	b.n	801a34a <follow_path+0x96>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a3fc:	2004      	movs	r0, #4
 801a3fe:	e7a6      	b.n	801a34e <follow_path+0x9a>
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !last)
 801a400:	2804      	cmp	r0, #4
 801a402:	d11f      	bne.n	801a444 <follow_path+0x190>
					res = FR_NO_PATH;
 801a404:	2900      	cmp	r1, #0
 801a406:	bf14      	ite	ne
 801a408:	2004      	movne	r0, #4
 801a40a:	2005      	moveq	r0, #5
 801a40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
 801a410:	2005      	movs	r0, #5
 801a412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 801a416:	2006      	movs	r0, #6
 801a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
 801a41c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 801a420:	f1bc 0f19 	cmp.w	ip, #25
 801a424:	d802      	bhi.n	801a42c <follow_path+0x178>
				b |= 2;
 801a426:	f042 0202 	orr.w	r2, r2, #2
 801a42a:	e008      	b.n	801a43e <follow_path+0x18a>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 801a42c:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 801a430:	f1be 0f19 	cmp.w	lr, #25
 801a434:	d803      	bhi.n	801a43e <follow_path+0x18a>
					b |= 1; c -= 0x20;
 801a436:	3b20      	subs	r3, #32
 801a438:	f042 0201 	orr.w	r2, r2, #1
 801a43c:	b2db      	uxtb	r3, r3
				}
			}
			sfn[i++] = c;
 801a43e:	5473      	strb	r3, [r6, r1]
 801a440:	3101      	adds	r1, #1
 801a442:	e75d      	b.n	801a300 <follow_path+0x4c>
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
}
 801a444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a448:	0801c8ea 	.word	0x0801c8ea
 801a44c:	0801c8b6 	.word	0x0801c8b6

0801a450 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 801a450:	b570      	push	{r4, r5, r6, lr}
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
 801a452:	2100      	movs	r1, #0
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 801a454:	4604      	mov	r4, r0
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
 801a456:	f7ff fe6e 	bl	801a136 <dir_seek>
	if (res == FR_OK) {
 801a45a:	4605      	mov	r5, r0
 801a45c:	bb40      	cbnz	r0, 801a4b0 <dir_register+0x60>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
 801a45e:	6820      	ldr	r0, [r4, #0]
 801a460:	6921      	ldr	r1, [r4, #16]
 801a462:	f7ff fc71 	bl	8019d48 <move_window>
			if (res != FR_OK) break;
 801a466:	4605      	mov	r5, r0
 801a468:	bb10      	cbnz	r0, 801a4b0 <dir_register+0x60>
			c = *dj->dir;
 801a46a:	6963      	ldr	r3, [r4, #20]
 801a46c:	7818      	ldrb	r0, [r3, #0]
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 801a46e:	28e5      	cmp	r0, #229	; 0xe5
 801a470:	d005      	beq.n	801a47e <dir_register+0x2e>
 801a472:	b120      	cbz	r0, 801a47e <dir_register+0x2e>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
 801a474:	4620      	mov	r0, r4
 801a476:	2101      	movs	r1, #1
 801a478:	f7ff fe9f 	bl	801a1ba <dir_next>
 801a47c:	e7ed      	b.n	801a45a <dir_register+0xa>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
 801a47e:	6820      	ldr	r0, [r4, #0]
 801a480:	6921      	ldr	r1, [r4, #16]
 801a482:	f7ff fc61 	bl	8019d48 <move_window>
		if (res == FR_OK) {
 801a486:	4605      	mov	r5, r0
 801a488:	b990      	cbnz	r0, 801a4b0 <dir_register+0x60>
			dir = dj->dir;
 801a48a:	6966      	ldr	r6, [r4, #20]
			mem_set(dir, 0, 32);		/* Clean the entry */
 801a48c:	4629      	mov	r1, r5
 801a48e:	4630      	mov	r0, r6
 801a490:	2220      	movs	r2, #32
 801a492:	f7ff fc52 	bl	8019d3a <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 801a496:	4630      	mov	r0, r6
 801a498:	69a1      	ldr	r1, [r4, #24]
 801a49a:	220b      	movs	r2, #11
 801a49c:	f7ff fc44 	bl	8019d28 <mem_cpy>
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 801a4a0:	69a1      	ldr	r1, [r4, #24]
 801a4a2:	7aca      	ldrb	r2, [r1, #11]
 801a4a4:	f002 0318 	and.w	r3, r2, #24
 801a4a8:	7333      	strb	r3, [r6, #12]
			dj->fs->wflag = 1;
 801a4aa:	6820      	ldr	r0, [r4, #0]
 801a4ac:	2101      	movs	r1, #1
 801a4ae:	7101      	strb	r1, [r0, #4]
		}
	}

	return res;
}
 801a4b0:	4628      	mov	r0, r5
 801a4b2:	bd70      	pop	{r4, r5, r6, pc}

0801a4b4 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 801a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
 801a4b6:	6803      	ldr	r3, [r0, #0]
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 801a4b8:	4615      	mov	r5, r2
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
 801a4ba:	781a      	ldrb	r2, [r3, #0]
 801a4bc:	3a30      	subs	r2, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 801a4be:	2a09      	cmp	r2, #9
 801a4c0:	d904      	bls.n	801a4cc <chk_mounted+0x18>
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
 801a4c2:	489e      	ldr	r0, [pc, #632]	; (801a73c <chk_mounted+0x288>)
 801a4c4:	6804      	ldr	r4, [r0, #0]
 801a4c6:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
 801a4c8:	b94c      	cbnz	r4, 801a4de <chk_mounted+0x2a>
 801a4ca:	e0aa      	b.n	801a622 <chk_mounted+0x16e>
	const XCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 801a4cc:	785c      	ldrb	r4, [r3, #1]
 801a4ce:	2c3a      	cmp	r4, #58	; 0x3a
 801a4d0:	d1f7      	bne.n	801a4c2 <chk_mounted+0xe>
		p += 2; *path = p;			/* Return pointer to the path name */
 801a4d2:	3302      	adds	r3, #2
 801a4d4:	6003      	str	r3, [r0, #0]
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
 801a4d6:	2a00      	cmp	r2, #0
 801a4d8:	d0f3      	beq.n	801a4c2 <chk_mounted+0xe>
		return FR_INVALID_DRIVE;
 801a4da:	200b      	movs	r0, #11
 801a4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
 801a4de:	7821      	ldrb	r1, [r4, #0]
 801a4e0:	b179      	cbz	r1, 801a502 <chk_mounted+0x4e>
		stat = disk_status(fs->drive);
 801a4e2:	7860      	ldrb	r0, [r4, #1]
 801a4e4:	f7ff fbd6 	bl	8019c94 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
 801a4e8:	07c2      	lsls	r2, r0, #31
 801a4ea:	d40a      	bmi.n	801a502 <chk_mounted+0x4e>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 801a4ec:	2d00      	cmp	r5, #0
 801a4ee:	f000 809a 	beq.w	801a626 <chk_mounted+0x172>
 801a4f2:	f000 0004 	and.w	r0, r0, #4
 801a4f6:	b2c1      	uxtb	r1, r0
				return FR_WRITE_PROTECTED;
 801a4f8:	2900      	cmp	r1, #0
 801a4fa:	bf14      	ite	ne
 801a4fc:	200a      	movne	r0, #10
 801a4fe:	2000      	moveq	r0, #0
 801a500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
 801a502:	2000      	movs	r0, #0
 801a504:	7020      	strb	r0, [r4, #0]
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
 801a506:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
 801a508:	f7ff fbaa 	bl	8019c60 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
 801a50c:	07c3      	lsls	r3, r0, #31
 801a50e:	f100 808c 	bmi.w	801a62a <chk_mounted+0x176>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 801a512:	b12d      	cbz	r5, 801a520 <chk_mounted+0x6c>
 801a514:	f000 0204 	and.w	r2, r0, #4
 801a518:	b2d3      	uxtb	r3, r2
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	f040 8087 	bne.w	801a62e <chk_mounted+0x17a>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 801a520:	2100      	movs	r1, #0
 801a522:	4620      	mov	r0, r4
 801a524:	f7ff fc4c 	bl	8019dc0 <check_fs>

	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
 801a528:	2801      	cmp	r0, #1
 801a52a:	d117      	bne.n	801a55c <chk_mounted+0xa8>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
 801a52c:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
 801a530:	b908      	cbnz	r0, 801a536 <chk_mounted+0x82>
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
		return FR_NO_FILESYSTEM;
 801a532:	200d      	movs	r0, #13
 801a534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 801a536:	f894 61f8 	ldrb.w	r6, [r4, #504]	; 0x1f8
 801a53a:	f894 11f9 	ldrb.w	r1, [r4, #505]	; 0x1f9
 801a53e:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
 801a542:	0432      	lsls	r2, r6, #16
 801a544:	ea42 6001 	orr.w	r0, r2, r1, lsl #24
 801a548:	f894 11f7 	ldrb.w	r1, [r4, #503]	; 0x1f7
 801a54c:	4318      	orrs	r0, r3
 801a54e:	ea40 2601 	orr.w	r6, r0, r1, lsl #8
			fmt = check_fs(fs, bsect);					/* Check the partition */
 801a552:	4631      	mov	r1, r6
 801a554:	4620      	mov	r0, r4
 801a556:	f7ff fc33 	bl	8019dc0 <check_fs>
 801a55a:	e000      	b.n	801a55e <chk_mounted+0xaa>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 801a55c:	2600      	movs	r6, #0
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 801a55e:	2803      	cmp	r0, #3
 801a560:	d067      	beq.n	801a632 <chk_mounted+0x17e>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
 801a562:	2800      	cmp	r0, #0
 801a564:	d1e5      	bne.n	801a532 <chk_mounted+0x7e>
 801a566:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 801a56a:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
 801a56e:	ea40 2302 	orr.w	r3, r0, r2, lsl #8
 801a572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a576:	d1dc      	bne.n	801a532 <chk_mounted+0x7e>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 801a578:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
 801a57c:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
 801a580:	ea57 2205 	orrs.w	r2, r7, r5, lsl #8
 801a584:	d10d      	bne.n	801a5a2 <chk_mounted+0xee>
 801a586:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 801a58a:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
 801a58e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a592:	f894 7055 	ldrb.w	r7, [r4, #85]	; 0x55
 801a596:	0410      	lsls	r0, r2, #16
 801a598:	ea40 6501 	orr.w	r5, r0, r1, lsl #24
 801a59c:	431d      	orrs	r5, r3
 801a59e:	ea45 2207 	orr.w	r2, r5, r7, lsl #8
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 801a5a2:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 801a5a6:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
 801a5aa:	f894 503e 	ldrb.w	r5, [r4, #62]	; 0x3e
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 801a5ae:	f894 7042 	ldrb.w	r7, [r4, #66]	; 0x42
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
 801a5b2:	61a2      	str	r2, [r4, #24]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 801a5b4:	70e1      	strb	r1, [r4, #3]
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
 801a5b6:	434a      	muls	r2, r1
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 801a5b8:	ea45 2100 	orr.w	r1, r5, r0, lsl #8
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 801a5bc:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 801a5c0:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 801a5c4:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 801a5c8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 801a5cc:	f894 7043 	ldrb.w	r7, [r4, #67]	; 0x43
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 801a5d0:	70a5      	strb	r5, [r4, #2]
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 801a5d2:	1873      	adds	r3, r6, r1
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 801a5d4:	ea57 270c 	orrs.w	r7, r7, ip, lsl #8
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 801a5d8:	6223      	str	r3, [r4, #32]
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 801a5da:	8120      	strh	r0, [r4, #8]
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 801a5dc:	d10e      	bne.n	801a5fc <chk_mounted+0x148>
 801a5de:	f894 7052 	ldrb.w	r7, [r4, #82]	; 0x52
 801a5e2:	f894 e053 	ldrb.w	lr, [r4, #83]	; 0x53
 801a5e6:	f894 c050 	ldrb.w	ip, [r4, #80]	; 0x50
 801a5ea:	043f      	lsls	r7, r7, #16
 801a5ec:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 801a5f0:	f894 e051 	ldrb.w	lr, [r4, #81]	; 0x51
 801a5f4:	ea47 070c 	orr.w	r7, r7, ip
 801a5f8:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
 801a5fc:	1a79      	subs	r1, r7, r1
 801a5fe:	0900      	lsrs	r0, r0, #4
 801a600:	1a89      	subs	r1, r1, r2
 801a602:	1a09      	subs	r1, r1, r0
		) / fs->csize + 2;
 801a604:	fbb1 f5f5 	udiv	r5, r1, r5
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
 801a608:	1ca9      	adds	r1, r5, #2
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 801a60a:	f640 75f6 	movw	r5, #4086	; 0xff6
 801a60e:	42a9      	cmp	r1, r5
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
 801a610:	61e1      	str	r1, [r4, #28]
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 801a612:	f240 808f 	bls.w	801a734 <chk_mounted+0x280>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 801a616:	f505 4570 	add.w	r5, r5, #61440	; 0xf000
 801a61a:	42a9      	cmp	r1, r5
 801a61c:	d80b      	bhi.n	801a636 <chk_mounted+0x182>
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 801a61e:	2502      	movs	r5, #2
 801a620:	e089      	b.n	801a736 <chk_mounted+0x282>

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
 801a622:	200c      	movs	r0, #12
 801a624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;			/* The file system object is valid */
 801a626:	4628      	mov	r0, r5
 801a628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
		return FR_NOT_READY;
 801a62a:	2003      	movs	r0, #3
 801a62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
 801a62e:	200a      	movs	r0, #10
 801a630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 801a632:	2001      	movs	r0, #1
 801a634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 801a636:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
 801a63a:	f894 505f 	ldrb.w	r5, [r4, #95]	; 0x5f
 801a63e:	0409      	lsls	r1, r1, #16
 801a640:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 801a644:	f894 505c 	ldrb.w	r5, [r4, #92]	; 0x5c
 801a648:	4329      	orrs	r1, r5
 801a64a:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 801a64e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 801a652:	6261      	str	r1, [r4, #36]	; 0x24
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 801a654:	2503      	movs	r5, #3

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 801a656:	181b      	adds	r3, r3, r0

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
	fs->wflag = 0;
 801a658:	2100      	movs	r1, #0

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 801a65a:	189a      	adds	r2, r3, r2

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
 801a65c:	f04f 30ff 	mov.w	r0, #4294967295
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
 801a660:	2d03      	cmp	r5, #3

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 801a662:	62a2      	str	r2, [r4, #40]	; 0x28

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
 801a664:	6120      	str	r0, [r4, #16]
	fs->wflag = 0;
 801a666:	7121      	strb	r1, [r4, #4]
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
 801a668:	d15a      	bne.n	801a720 <chk_mounted+0x26c>
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 801a66a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 801a66e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
 801a672:	7161      	strb	r1, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 801a674:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
 801a678:	1832      	adds	r2, r6, r0
 801a67a:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 801a67c:	7860      	ldrb	r0, [r4, #1]
 801a67e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a682:	2301      	movs	r3, #1
 801a684:	f7ff fb0a 	bl	8019c9c <disk_read>
 801a688:	2800      	cmp	r0, #0
 801a68a:	d149      	bne.n	801a720 <chk_mounted+0x26c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 801a68c:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
 801a690:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
 801a694:	ea42 2301 	orr.w	r3, r2, r1, lsl #8
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 801a698:	4929      	ldr	r1, [pc, #164]	; (801a740 <chk_mounted+0x28c>)
 801a69a:	b218      	sxth	r0, r3
 801a69c:	4288      	cmp	r0, r1
 801a69e:	d13f      	bne.n	801a720 <chk_mounted+0x26c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 801a6a0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 801a6a4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 801a6a8:	0410      	lsls	r0, r2, #16
 801a6aa:	ea40 6103 	orr.w	r1, r0, r3, lsl #24
 801a6ae:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801a6b2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801a6b6:	4319      	orrs	r1, r3
 801a6b8:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 801a6bc:	4921      	ldr	r1, [pc, #132]	; (801a744 <chk_mounted+0x290>)
 801a6be:	4288      	cmp	r0, r1
 801a6c0:	d12e      	bne.n	801a720 <chk_mounted+0x26c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 801a6c2:	f894 2216 	ldrb.w	r2, [r4, #534]	; 0x216
 801a6c6:	f894 3217 	ldrb.w	r3, [r4, #535]	; 0x217
 801a6ca:	0410      	lsls	r0, r2, #16
 801a6cc:	ea40 6103 	orr.w	r1, r0, r3, lsl #24
 801a6d0:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
 801a6d4:	f894 2215 	ldrb.w	r2, [r4, #533]	; 0x215
 801a6d8:	4319      	orrs	r1, r3
 801a6da:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 801a6de:	491a      	ldr	r1, [pc, #104]	; (801a748 <chk_mounted+0x294>)
 801a6e0:	4288      	cmp	r0, r1
 801a6e2:	d11d      	bne.n	801a720 <chk_mounted+0x26c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 801a6e4:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 801a6e8:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
 801a6ec:	0418      	lsls	r0, r3, #16
 801a6ee:	ea40 6102 	orr.w	r1, r0, r2, lsl #24
 801a6f2:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
 801a6f6:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
 801a6fa:	4311      	orrs	r1, r2
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 801a6fc:	f894 221a 	ldrb.w	r2, [r4, #538]	; 0x21a
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 801a700:	ea41 2003 	orr.w	r0, r1, r3, lsl #8
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 801a704:	f894 121b 	ldrb.w	r1, [r4, #539]	; 0x21b
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 801a708:	60e0      	str	r0, [r4, #12]
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 801a70a:	0413      	lsls	r3, r2, #16
 801a70c:	ea43 6001 	orr.w	r0, r3, r1, lsl #24
 801a710:	f894 1218 	ldrb.w	r1, [r4, #536]	; 0x218
 801a714:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
 801a718:	4308      	orrs	r0, r1
 801a71a:	ea40 2302 	orr.w	r3, r0, r2, lsl #8
 801a71e:	6123      	str	r3, [r4, #16]
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->winsect = 0;		/* Invalidate sector cache */
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 801a720:	490a      	ldr	r1, [pc, #40]	; (801a74c <chk_mounted+0x298>)
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 801a722:	7025      	strb	r5, [r4, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 801a724:	880a      	ldrh	r2, [r1, #0]
 801a726:	1c53      	adds	r3, r2, #1
 801a728:	b29a      	uxth	r2, r3
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->winsect = 0;		/* Invalidate sector cache */
 801a72a:	2000      	movs	r0, #0
 801a72c:	62e0      	str	r0, [r4, #44]	; 0x2c
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 801a72e:	800a      	strh	r2, [r1, #0]
 801a730:	80e2      	strh	r2, [r4, #6]

	return FR_OK;
 801a732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
 801a734:	2501      	movs	r5, #1
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 801a736:	18d1      	adds	r1, r2, r3
 801a738:	6261      	str	r1, [r4, #36]	; 0x24
 801a73a:	e78c      	b.n	801a656 <chk_mounted+0x1a2>
 801a73c:	200005ec 	.word	0x200005ec
 801a740:	ffffaa55 	.word	0xffffaa55
 801a744:	41615252 	.word	0x41615252
 801a748:	61417272 	.word	0x61417272
 801a74c:	200005e8 	.word	0x200005e8

0801a750 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 801a750:	b948      	cbnz	r0, 801a766 <f_mount+0x16>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
 801a752:	4a06      	ldr	r2, [pc, #24]	; (801a76c <f_mount+0x1c>)
 801a754:	6813      	ldr	r3, [r2, #0]

	if (rfs) {
 801a756:	b103      	cbz	r3, 801a75a <f_mount+0xa>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 801a758:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
 801a75a:	b109      	cbz	r1, 801a760 <f_mount+0x10>
		fs->fs_type = 0;			/* Clear new fs object */
 801a75c:	2000      	movs	r0, #0
 801a75e:	7008      	strb	r0, [r1, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 801a760:	6011      	str	r1, [r2, #0]

	return FR_OK;
 801a762:	2000      	movs	r0, #0
 801a764:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
 801a766:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
 801a768:	4770      	bx	lr
 801a76a:	bf00      	nop
 801a76c:	200005ec 	.word	0x200005ec

0801a770 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801a770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a774:	b08c      	sub	sp, #48	; 0x30
 801a776:	4605      	mov	r5, r0
 801a778:	a80c      	add	r0, sp, #48	; 0x30
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
 801a77a:	2300      	movs	r3, #0
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801a77c:	f840 1d2c 	str.w	r1, [r0, #-44]!
 801a780:	4617      	mov	r7, r2
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
 801a782:	602b      	str	r3, [r5, #0]
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
 801a784:	a905      	add	r1, sp, #20
 801a786:	f002 021e 	and.w	r2, r2, #30
 801a78a:	f7ff fe93 	bl	801a4b4 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801a78e:	2800      	cmp	r0, #0
 801a790:	f040 80a0 	bne.w	801a8d4 <f_open+0x164>
	INITBUF(dj, sfn, lfn);
 801a794:	a802      	add	r0, sp, #8
 801a796:	900b      	str	r0, [sp, #44]	; 0x2c
	res = follow_path(&dj, path);	/* Follow the file path */
 801a798:	9901      	ldr	r1, [sp, #4]
 801a79a:	a805      	add	r0, sp, #20
 801a79c:	f7ff fd8a 	bl	801a2b4 <follow_path>

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801a7a0:	f017 0f1c 	tst.w	r7, #28
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 801a7a4:	f007 061f 	and.w	r6, r7, #31
	INITBUF(dj, sfn, lfn);
	res = follow_path(&dj, path);	/* Follow the file path */

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801a7a8:	d059      	beq.n	801a85e <f_open+0xee>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
 801a7aa:	b160      	cbz	r0, 801a7c6 <f_open+0x56>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
 801a7ac:	2804      	cmp	r0, #4
 801a7ae:	f040 8091 	bne.w	801a8d4 <f_open+0x164>
				res = dir_register(&dj);
 801a7b2:	a805      	add	r0, sp, #20
 801a7b4:	f7ff fe4c 	bl	801a450 <dir_register>
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801a7b8:	2800      	cmp	r0, #0
 801a7ba:	f040 808b 	bne.w	801a8d4 <f_open+0x164>
			mode |= FA_CREATE_ALWAYS;
 801a7be:	f046 0608 	orr.w	r6, r6, #8
			dir = dj.dir;			/* Created entry (SFN entry) */
 801a7c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a7c4:	e035      	b.n	801a832 <f_open+0xc2>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
 801a7c6:	f007 0004 	and.w	r0, r7, #4
 801a7ca:	b2c1      	uxtb	r1, r0
 801a7cc:	2900      	cmp	r1, #0
 801a7ce:	d17c      	bne.n	801a8ca <f_open+0x15a>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
 801a7d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 801a7d2:	2c00      	cmp	r4, #0
 801a7d4:	d07d      	beq.n	801a8d2 <f_open+0x162>
 801a7d6:	7ae2      	ldrb	r2, [r4, #11]
 801a7d8:	f012 0311 	ands.w	r3, r2, #17
 801a7dc:	d179      	bne.n	801a8d2 <f_open+0x162>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
 801a7de:	f007 0708 	and.w	r7, r7, #8
 801a7e2:	b2ff      	uxtb	r7, r7
 801a7e4:	b32f      	cbz	r7, 801a832 <f_open+0xc2>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 801a7e6:	7d60      	ldrb	r0, [r4, #21]
 801a7e8:	7d21      	ldrb	r1, [r4, #20]
 801a7ea:	7ea2      	ldrb	r2, [r4, #26]
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 801a7ec:	7523      	strb	r3, [r4, #20]
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 801a7ee:	ea41 2700 	orr.w	r7, r1, r0, lsl #8
 801a7f2:	7ee0      	ldrb	r0, [r4, #27]
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 801a7f4:	7563      	strb	r3, [r4, #21]
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 801a7f6:	ea42 2100 	orr.w	r1, r2, r0, lsl #8
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
				ST_WORD(dir+DIR_FstClusLO, 0);
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				dj.fs->wflag = 1;
 801a7fa:	9805      	ldr	r0, [sp, #20]
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
				ST_WORD(dir+DIR_FstClusLO, 0);
 801a7fc:	76a3      	strb	r3, [r4, #26]
 801a7fe:	76e3      	strb	r3, [r4, #27]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 801a800:	7723      	strb	r3, [r4, #28]
 801a802:	7763      	strb	r3, [r4, #29]
 801a804:	77a3      	strb	r3, [r4, #30]
 801a806:	77e3      	strb	r3, [r4, #31]
				dj.fs->wflag = 1;
 801a808:	2301      	movs	r3, #1
				ps = dj.fs->winsect;			/* Remove the cluster chain */
				if (cl) {
 801a80a:	ea51 4707 	orrs.w	r7, r1, r7, lsl #16
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
				ST_WORD(dir+DIR_FstClusLO, 0);
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				dj.fs->wflag = 1;
 801a80e:	7103      	strb	r3, [r0, #4]
				ps = dj.fs->winsect;			/* Remove the cluster chain */
 801a810:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				if (cl) {
 801a814:	d007      	beq.n	801a826 <f_open+0xb6>
					res = remove_chain(dj.fs, cl);
 801a816:	4639      	mov	r1, r7
 801a818:	f7ff fc57 	bl	801a0ca <remove_chain>
					if (res) LEAVE_FF(dj.fs, res);
 801a81c:	2800      	cmp	r0, #0
 801a81e:	d159      	bne.n	801a8d4 <f_open+0x164>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801a820:	9805      	ldr	r0, [sp, #20]
 801a822:	3f01      	subs	r7, #1
 801a824:	60c7      	str	r7, [r0, #12]
				}
				res = move_window(dj.fs, ps);
 801a826:	9805      	ldr	r0, [sp, #20]
 801a828:	4641      	mov	r1, r8
 801a82a:	f7ff fa8d 	bl	8019d48 <move_window>
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
 801a82e:	2800      	cmp	r0, #0
 801a830:	d150      	bne.n	801a8d4 <f_open+0x164>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
 801a832:	f006 0208 	and.w	r2, r6, #8
 801a836:	b2d1      	uxtb	r1, r2
 801a838:	b311      	cbz	r1, 801a880 <f_open+0x110>
			dir[DIR_Attr] = 0;					/* Reset attribute */
 801a83a:	2300      	movs	r3, #0
 801a83c:	72e3      	strb	r3, [r4, #11]
			ps = get_fattime();
 801a83e:	f7ff fa71 	bl	8019d24 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
			dj.fs->wflag = 1;
 801a842:	9b05      	ldr	r3, [sp, #20]
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 801a844:	73a0      	strb	r0, [r4, #14]
 801a846:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801a84a:	73e2      	strb	r2, [r4, #15]
 801a84c:	0c01      	lsrs	r1, r0, #16
			dj.fs->wflag = 1;
 801a84e:	2201      	movs	r2, #1
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 801a850:	0e00      	lsrs	r0, r0, #24
 801a852:	7421      	strb	r1, [r4, #16]
 801a854:	7460      	strb	r0, [r4, #17]
			dj.fs->wflag = 1;
			mode |= FA__WRITTEN;				/* Set file changed flag */
 801a856:	f046 0620 	orr.w	r6, r6, #32
		}
		if (mode & FA_CREATE_ALWAYS) {
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
			dj.fs->wflag = 1;
 801a85a:	711a      	strb	r2, [r3, #4]
 801a85c:	e010      	b.n	801a880 <f_open+0x110>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
 801a85e:	2800      	cmp	r0, #0
 801a860:	d138      	bne.n	801a8d4 <f_open+0x164>
		dir = dj.dir;
 801a862:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 801a864:	2c00      	cmp	r4, #0
 801a866:	d032      	beq.n	801a8ce <f_open+0x15e>
 801a868:	7ae1      	ldrb	r1, [r4, #11]
 801a86a:	f001 0210 	and.w	r2, r1, #16
 801a86e:	b2d3      	uxtb	r3, r2
 801a870:	2b00      	cmp	r3, #0
 801a872:	d12c      	bne.n	801a8ce <f_open+0x15e>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801a874:	f007 0702 	and.w	r7, r7, #2
 801a878:	b2ff      	uxtb	r7, r7
 801a87a:	b10f      	cbz	r7, 801a880 <f_open+0x110>
 801a87c:	07c9      	lsls	r1, r1, #31
 801a87e:	d428      	bmi.n	801a8d2 <f_open+0x162>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 801a880:	9b05      	ldr	r3, [sp, #20]
	fp->dir_ptr = dj.dir;
 801a882:	980a      	ldr	r0, [sp, #40]	; 0x28
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 801a884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
 801a886:	71ae      	strb	r6, [r5, #6]
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 801a888:	61e9      	str	r1, [r5, #28]
	fp->dir_ptr = dj.dir;
 801a88a:	6228      	str	r0, [r5, #32]
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801a88c:	7d22      	ldrb	r2, [r4, #20]
 801a88e:	7d61      	ldrb	r1, [r4, #21]
 801a890:	7ee0      	ldrb	r0, [r4, #27]
 801a892:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 801a896:	7ea2      	ldrb	r2, [r4, #26]
 801a898:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 801a89c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
 801a8a0:	6129      	str	r1, [r5, #16]
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 801a8a2:	7fa2      	ldrb	r2, [r4, #30]
 801a8a4:	7fe0      	ldrb	r0, [r4, #31]
 801a8a6:	0411      	lsls	r1, r2, #16
 801a8a8:	7f22      	ldrb	r2, [r4, #28]
 801a8aa:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 801a8ae:	4310      	orrs	r0, r2
 801a8b0:	7f61      	ldrb	r1, [r4, #29]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 801a8b2:	602b      	str	r3, [r5, #0]
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 801a8b4:	22ff      	movs	r2, #255	; 0xff
 801a8b6:	71ea      	strb	r2, [r5, #7]
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 801a8b8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 801a8bc:	88db      	ldrh	r3, [r3, #6]
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 801a8be:	60e8      	str	r0, [r5, #12]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 801a8c0:	2000      	movs	r0, #0
 801a8c2:	60a8      	str	r0, [r5, #8]
	fp->dsect = 0;
 801a8c4:	61a8      	str	r0, [r5, #24]
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 801a8c6:	80ab      	strh	r3, [r5, #4]
 801a8c8:	e004      	b.n	801a8d4 <f_open+0x164>
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;			/* Created entry (SFN entry) */
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
				LEAVE_FF(dj.fs, FR_EXIST);
 801a8ca:	2008      	movs	r0, #8
 801a8cc:	e002      	b.n	801a8d4 <f_open+0x164>
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
		dir = dj.dir;
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
			LEAVE_FF(dj.fs, FR_NO_FILE);
 801a8ce:	2004      	movs	r0, #4
 801a8d0:	e000      	b.n	801a8d4 <f_open+0x164>
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
				LEAVE_FF(dj.fs, FR_DENIED);
 801a8d2:	2007      	movs	r0, #7
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */

	LEAVE_FF(dj.fs, FR_OK);
}
 801a8d4:	b00c      	add	sp, #48	; 0x30
 801a8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a8da <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 801a8da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8de:	4604      	mov	r4, r0
 801a8e0:	469a      	mov	sl, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
 801a8e2:	2300      	movs	r3, #0
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 801a8e4:	4688      	mov	r8, r1
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
 801a8e6:	f8ca 3000 	str.w	r3, [sl]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 801a8ea:	6800      	ldr	r0, [r0, #0]
 801a8ec:	88a1      	ldrh	r1, [r4, #4]
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 801a8ee:	4617      	mov	r7, r2
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 801a8f0:	f7ff faaa 	bl	8019e48 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801a8f4:	4605      	mov	r5, r0
 801a8f6:	2800      	cmp	r0, #0
 801a8f8:	f040 80a2 	bne.w	801aa40 <f_read+0x166>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 801a8fc:	79a0      	ldrb	r0, [r4, #6]
 801a8fe:	0601      	lsls	r1, r0, #24
 801a900:	f100 809b 	bmi.w	801aa3a <f_read+0x160>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 801a904:	07c2      	lsls	r2, r0, #31
 801a906:	f140 809a 	bpl.w	801aa3e <f_read+0x164>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 801a90a:	68e1      	ldr	r1, [r4, #12]
 801a90c:	68a2      	ldr	r2, [r4, #8]
 801a90e:	1a8e      	subs	r6, r1, r2
 801a910:	42b7      	cmp	r7, r6
 801a912:	bf38      	it	cc
 801a914:	463e      	movcc	r6, r7
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
 801a916:	2e00      	cmp	r6, #0
 801a918:	f000 8092 	beq.w	801aa40 <f_read+0x166>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 801a91c:	68a3      	ldr	r3, [r4, #8]
 801a91e:	05da      	lsls	r2, r3, #23
 801a920:	d172      	bne.n	801aa08 <f_read+0x12e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 801a922:	6820      	ldr	r0, [r4, #0]
 801a924:	79e1      	ldrb	r1, [r4, #7]
 801a926:	7882      	ldrb	r2, [r0, #2]
 801a928:	4291      	cmp	r1, r2
 801a92a:	d30c      	bcc.n	801a946 <f_read+0x6c>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 801a92c:	b90b      	cbnz	r3, 801a932 <f_read+0x58>
 801a92e:	6920      	ldr	r0, [r4, #16]
 801a930:	e002      	b.n	801a938 <f_read+0x5e>
 801a932:	6961      	ldr	r1, [r4, #20]
 801a934:	f7ff fa9a 	bl	8019e6c <get_fat>
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 801a938:	2801      	cmp	r0, #1
 801a93a:	d90b      	bls.n	801a954 <f_read+0x7a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801a93c:	1c43      	adds	r3, r0, #1
 801a93e:	d058      	beq.n	801a9f2 <f_read+0x118>
				fp->curr_clust = clst;				/* Update current cluster */
 801a940:	6160      	str	r0, [r4, #20]
				fp->csect = 0;						/* Reset sector offset in the cluster */
 801a942:	2000      	movs	r0, #0
 801a944:	71e0      	strb	r0, [r4, #7]
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 801a946:	f8d4 b000 	ldr.w	fp, [r4]
 801a94a:	6961      	ldr	r1, [r4, #20]
 801a94c:	4658      	mov	r0, fp
 801a94e:	f7ff fbe6 	bl	801a11e <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801a952:	b920      	cbnz	r0, 801a95e <f_read+0x84>
 801a954:	79a0      	ldrb	r0, [r4, #6]
 801a956:	f060 037f 	orn	r3, r0, #127	; 0x7f
 801a95a:	71a3      	strb	r3, [r4, #6]
 801a95c:	e06d      	b.n	801aa3a <f_read+0x160>
			sect += fp->csect;
 801a95e:	79e3      	ldrb	r3, [r4, #7]
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Read maximum contiguous sectors directly */
 801a960:	0a77      	lsrs	r7, r6, #9
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += fp->csect;
 801a962:	eb00 0903 	add.w	r9, r0, r3
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Read maximum contiguous sectors directly */
 801a966:	d026      	beq.n	801a9b6 <f_read+0xdc>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801a968:	f89b 0002 	ldrb.w	r0, [fp, #2]
 801a96c:	18f9      	adds	r1, r7, r3
 801a96e:	4281      	cmp	r1, r0
					cc = fp->fs->csize - fp->csect;
 801a970:	bf88      	it	hi
 801a972:	ebc3 0700 	rsbhi	r7, r3, r0
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
 801a976:	4641      	mov	r1, r8
 801a978:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801a97c:	464a      	mov	r2, r9
 801a97e:	b2fb      	uxtb	r3, r7
 801a980:	f7ff f98c 	bl	8019c9c <disk_read>
 801a984:	79a1      	ldrb	r1, [r4, #6]
 801a986:	2800      	cmp	r0, #0
 801a988:	d134      	bne.n	801a9f4 <f_read+0x11a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
 801a98a:	f001 0340 	and.w	r3, r1, #64	; 0x40
 801a98e:	b2da      	uxtb	r2, r3
 801a990:	b162      	cbz	r2, 801a9ac <f_read+0xd2>
 801a992:	69a0      	ldr	r0, [r4, #24]
 801a994:	ebc9 0100 	rsb	r1, r9, r0
 801a998:	42b9      	cmp	r1, r7
 801a99a:	d207      	bcs.n	801a9ac <f_read+0xd2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 801a99c:	eb08 2041 	add.w	r0, r8, r1, lsl #9
 801a9a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a9a4:	f104 0124 	add.w	r1, r4, #36	; 0x24
 801a9a8:	f7ff f9be 	bl	8019d28 <mem_cpy>
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 801a9ac:	79e3      	ldrb	r3, [r4, #7]
 801a9ae:	18fa      	adds	r2, r7, r3
 801a9b0:	71e2      	strb	r2, [r4, #7]
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 801a9b2:	027f      	lsls	r7, r7, #9
				continue;
 801a9b4:	e036      	b.n	801aa24 <f_read+0x14a>
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
 801a9b6:	79a1      	ldrb	r1, [r4, #6]
 801a9b8:	f001 0240 	and.w	r2, r1, #64	; 0x40
 801a9bc:	b2d0      	uxtb	r0, r2
 801a9be:	b160      	cbz	r0, 801a9da <f_read+0x100>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 801a9c0:	f104 0124 	add.w	r1, r4, #36	; 0x24
 801a9c4:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801a9c8:	69a2      	ldr	r2, [r4, #24]
 801a9ca:	2301      	movs	r3, #1
 801a9cc:	f7ff f988 	bl	8019ce0 <disk_write>
 801a9d0:	79a1      	ldrb	r1, [r4, #6]
 801a9d2:	b978      	cbnz	r0, 801a9f4 <f_read+0x11a>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 801a9d4:	f021 0340 	bic.w	r3, r1, #64	; 0x40
 801a9d8:	71a3      	strb	r3, [r4, #6]
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
 801a9da:	69a1      	ldr	r1, [r4, #24]
 801a9dc:	4549      	cmp	r1, r9
 801a9de:	d00e      	beq.n	801a9fe <f_read+0x124>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 801a9e0:	4621      	mov	r1, r4
 801a9e2:	2301      	movs	r3, #1
 801a9e4:	f851 2b24 	ldr.w	r2, [r1], #36
 801a9e8:	7850      	ldrb	r0, [r2, #1]
 801a9ea:	464a      	mov	r2, r9
 801a9ec:	f7ff f956 	bl	8019c9c <disk_read>
 801a9f0:	b128      	cbz	r0, 801a9fe <f_read+0x124>
					ABORT(fp->fs, FR_DISK_ERR);
 801a9f2:	79a1      	ldrb	r1, [r4, #6]
 801a9f4:	f061 057f 	orn	r5, r1, #127	; 0x7f
 801a9f8:	71a5      	strb	r5, [r4, #6]
 801a9fa:	2501      	movs	r5, #1
 801a9fc:	e020      	b.n	801aa40 <f_read+0x166>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
 801a9fe:	79e7      	ldrb	r7, [r4, #7]
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 801aa00:	f8c4 9018 	str.w	r9, [r4, #24]
			fp->csect++;							/* Next sector address in the cluster */
 801aa04:	1c78      	adds	r0, r7, #1
 801aa06:	71e0      	strb	r0, [r4, #7]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 801aa08:	68a3      	ldr	r3, [r4, #8]
 801aa0a:	05d9      	lsls	r1, r3, #23
 801aa0c:	0dca      	lsrs	r2, r1, #23
 801aa0e:	f5c2 7700 	rsb	r7, r2, #512	; 0x200
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 801aa12:	18a1      	adds	r1, r4, r2
 801aa14:	42be      	cmp	r6, r7
 801aa16:	bf38      	it	cc
 801aa18:	4637      	movcc	r7, r6
 801aa1a:	4640      	mov	r0, r8
 801aa1c:	3124      	adds	r1, #36	; 0x24
 801aa1e:	463a      	mov	r2, r7
 801aa20:	f7ff f982 	bl	8019d28 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801aa24:	68a0      	ldr	r0, [r4, #8]
 801aa26:	f8da 3000 	ldr.w	r3, [sl]
 801aa2a:	19c1      	adds	r1, r0, r7
 801aa2c:	19da      	adds	r2, r3, r7
 801aa2e:	60a1      	str	r1, [r4, #8]
 801aa30:	44b8      	add	r8, r7
 801aa32:	f8ca 2000 	str.w	r2, [sl]
 801aa36:	1bf6      	subs	r6, r6, r7
 801aa38:	e76d      	b.n	801a916 <f_read+0x3c>
	*br = 0;	/* Initialize bytes read */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 801aa3a:	2502      	movs	r5, #2
 801aa3c:	e000      	b.n	801aa40 <f_read+0x166>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 801aa3e:	2507      	movs	r5, #7
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 801aa40:	4628      	mov	r0, r5
 801aa42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa46 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 801aa46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa4a:	4604      	mov	r4, r0
 801aa4c:	460d      	mov	r5, r1
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 801aa4e:	6800      	ldr	r0, [r0, #0]
 801aa50:	88a1      	ldrh	r1, [r4, #4]
 801aa52:	f7ff f9f9 	bl	8019e48 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801aa56:	4606      	mov	r6, r0
 801aa58:	2800      	cmp	r0, #0
 801aa5a:	f040 809c 	bne.w	801ab96 <f_lseek+0x150>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
 801aa5e:	79a2      	ldrb	r2, [r4, #6]
 801aa60:	0611      	lsls	r1, r2, #24
 801aa62:	f100 8097 	bmi.w	801ab94 <f_lseek+0x14e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 801aa66:	68e3      	ldr	r3, [r4, #12]
 801aa68:	429d      	cmp	r5, r3
 801aa6a:	d905      	bls.n	801aa78 <f_lseek+0x32>
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
 801aa6c:	f002 0002 	and.w	r0, r2, #2
 801aa70:	b2c1      	uxtb	r1, r0
 801aa72:	2900      	cmp	r1, #0
 801aa74:	bf08      	it	eq
 801aa76:	461d      	moveq	r5, r3
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
 801aa78:	2200      	movs	r2, #0
 801aa7a:	20ff      	movs	r0, #255	; 0xff
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
 801aa7c:	68a3      	ldr	r3, [r4, #8]
	fp->fptr = nsect = 0; fp->csect = 255;
 801aa7e:	71e0      	strb	r0, [r4, #7]
 801aa80:	60a2      	str	r2, [r4, #8]
	if (ofs > 0) {
 801aa82:	b90d      	cbnz	r5, 801aa88 <f_lseek+0x42>
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
 801aa84:	2500      	movs	r5, #0
 801aa86:	e054      	b.n	801ab32 <f_lseek+0xec>
	if (ofs > 0) {
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 801aa88:	6820      	ldr	r0, [r4, #0]
 801aa8a:	7887      	ldrb	r7, [r0, #2]
 801aa8c:	027f      	lsls	r7, r7, #9
		if (ifptr > 0 &&
 801aa8e:	b16b      	cbz	r3, 801aaac <f_lseek+0x66>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801aa90:	3b01      	subs	r3, #1
 801aa92:	1e69      	subs	r1, r5, #1
 801aa94:	fbb1 f1f7 	udiv	r1, r1, r7
 801aa98:	fbb3 f2f7 	udiv	r2, r3, r7

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
	if (ofs > 0) {
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
		if (ifptr > 0 &&
 801aa9c:	4291      	cmp	r1, r2
 801aa9e:	d305      	bcc.n	801aaac <f_lseek+0x66>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 801aaa0:	4278      	negs	r0, r7
 801aaa2:	4003      	ands	r3, r0
 801aaa4:	60a3      	str	r3, [r4, #8]
			ofs -= fp->fptr;
 801aaa6:	1aed      	subs	r5, r5, r3
			clst = fp->curr_clust;
 801aaa8:	6961      	ldr	r1, [r4, #20]
 801aaaa:	e00a      	b.n	801aac2 <f_lseek+0x7c>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
 801aaac:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
 801aaae:	b939      	cbnz	r1, 801aac0 <f_lseek+0x7a>
				clst = create_chain(fp->fs, 0);
 801aab0:	f7ff fabb 	bl	801a02a <create_chain>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801aab4:	2801      	cmp	r0, #1
			clst = fp->curr_clust;
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
				clst = create_chain(fp->fs, 0);
 801aab6:	4601      	mov	r1, r0
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801aab8:	d032      	beq.n	801ab20 <f_lseek+0xda>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801aaba:	1c43      	adds	r3, r0, #1
 801aabc:	d059      	beq.n	801ab72 <f_lseek+0x12c>
				fp->org_clust = clst;
 801aabe:	6120      	str	r0, [r4, #16]
			}
#endif
			fp->curr_clust = clst;
 801aac0:	6161      	str	r1, [r4, #20]
		}
		if (clst != 0) {
 801aac2:	2900      	cmp	r1, #0
 801aac4:	d0de      	beq.n	801aa84 <f_lseek+0x3e>
			while (ofs > bcs) {						/* Cluster following loop */
 801aac6:	42bd      	cmp	r5, r7
 801aac8:	d91c      	bls.n	801ab04 <f_lseek+0xbe>
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801aaca:	79a3      	ldrb	r3, [r4, #6]
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
 801aacc:	6820      	ldr	r0, [r4, #0]
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801aace:	f003 0202 	and.w	r2, r3, #2
 801aad2:	b2d3      	uxtb	r3, r2
 801aad4:	b123      	cbz	r3, 801aae0 <f_lseek+0x9a>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
 801aad6:	f7ff faa8 	bl	801a02a <create_chain>
					if (clst == 0) {				/* When disk gets full, clip file size */
 801aada:	4601      	mov	r1, r0
 801aadc:	b918      	cbnz	r0, 801aae6 <f_lseek+0xa0>
 801aade:	e010      	b.n	801ab02 <f_lseek+0xbc>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 801aae0:	f7ff f9c4 	bl	8019e6c <get_fat>
 801aae4:	4601      	mov	r1, r0
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801aae6:	1c48      	adds	r0, r1, #1
 801aae8:	d043      	beq.n	801ab72 <f_lseek+0x12c>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
 801aaea:	2901      	cmp	r1, #1
 801aaec:	d918      	bls.n	801ab20 <f_lseek+0xda>
 801aaee:	6820      	ldr	r0, [r4, #0]
 801aaf0:	69c2      	ldr	r2, [r0, #28]
 801aaf2:	4291      	cmp	r1, r2
 801aaf4:	d214      	bcs.n	801ab20 <f_lseek+0xda>
				fp->curr_clust = clst;
				fp->fptr += bcs;
 801aaf6:	68a3      	ldr	r3, [r4, #8]
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
 801aaf8:	6161      	str	r1, [r4, #20]
				fp->fptr += bcs;
 801aafa:	19d8      	adds	r0, r3, r7
 801aafc:	60a0      	str	r0, [r4, #8]
				ofs -= bcs;
 801aafe:	1bed      	subs	r5, r5, r7
 801ab00:	e7e1      	b.n	801aac6 <f_lseek+0x80>
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
					if (clst == 0) {				/* When disk gets full, clip file size */
 801ab02:	463d      	mov	r5, r7
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
 801ab04:	68a7      	ldr	r7, [r4, #8]
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 801ab06:	ea4f 2855 	mov.w	r8, r5, lsr #9
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
 801ab0a:	197a      	adds	r2, r7, r5
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 801ab0c:	fa5f f788 	uxtb.w	r7, r8
			if (ofs % SS(fp->fs)) {
 801ab10:	05ed      	lsls	r5, r5, #23
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
 801ab12:	60a2      	str	r2, [r4, #8]
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 801ab14:	71e7      	strb	r7, [r4, #7]
			if (ofs % SS(fp->fs)) {
 801ab16:	d0b5      	beq.n	801aa84 <f_lseek+0x3e>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
 801ab18:	6820      	ldr	r0, [r4, #0]
 801ab1a:	f7ff fb00 	bl	801a11e <clust2sect>
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 801ab1e:	b920      	cbnz	r0, 801ab2a <f_lseek+0xe4>
 801ab20:	79a3      	ldrb	r3, [r4, #6]
 801ab22:	f063 027f 	orn	r2, r3, #127	; 0x7f
 801ab26:	71a2      	strb	r2, [r4, #6]
 801ab28:	e034      	b.n	801ab94 <f_lseek+0x14e>
				nsect += fp->csect;
				fp->csect++;
 801ab2a:	3701      	adds	r7, #1
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
				nsect += fp->csect;
 801ab2c:	eb00 0508 	add.w	r5, r0, r8
				fp->csect++;
 801ab30:	71e7      	strb	r7, [r4, #7]
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
 801ab32:	68a1      	ldr	r1, [r4, #8]
 801ab34:	05cb      	lsls	r3, r1, #23
 801ab36:	d023      	beq.n	801ab80 <f_lseek+0x13a>
 801ab38:	69a2      	ldr	r2, [r4, #24]
 801ab3a:	4295      	cmp	r5, r2
 801ab3c:	d020      	beq.n	801ab80 <f_lseek+0x13a>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
 801ab3e:	79a3      	ldrb	r3, [r4, #6]
 801ab40:	f003 0040 	and.w	r0, r3, #64	; 0x40
 801ab44:	b2c1      	uxtb	r1, r0
 801ab46:	b159      	cbz	r1, 801ab60 <f_lseek+0x11a>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 801ab48:	4621      	mov	r1, r4
 801ab4a:	f851 3b24 	ldr.w	r3, [r1], #36
 801ab4e:	7858      	ldrb	r0, [r3, #1]
 801ab50:	2301      	movs	r3, #1
 801ab52:	f7ff f8c5 	bl	8019ce0 <disk_write>
 801ab56:	79a1      	ldrb	r1, [r4, #6]
 801ab58:	b960      	cbnz	r0, 801ab74 <f_lseek+0x12e>
				ABORT(fp->fs, FR_DISK_ERR);
			fp->flag &= ~FA__DIRTY;
 801ab5a:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 801ab5e:	71a2      	strb	r2, [r4, #6]
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
 801ab60:	4621      	mov	r1, r4
 801ab62:	462a      	mov	r2, r5
 801ab64:	f851 0b24 	ldr.w	r0, [r1], #36
 801ab68:	2301      	movs	r3, #1
 801ab6a:	7840      	ldrb	r0, [r0, #1]
 801ab6c:	f7ff f896 	bl	8019c9c <disk_read>
 801ab70:	b128      	cbz	r0, 801ab7e <f_lseek+0x138>
			ABORT(fp->fs, FR_DISK_ERR);
 801ab72:	79a1      	ldrb	r1, [r4, #6]
 801ab74:	f061 067f 	orn	r6, r1, #127	; 0x7f
 801ab78:	71a6      	strb	r6, [r4, #6]
 801ab7a:	2601      	movs	r6, #1
 801ab7c:	e00b      	b.n	801ab96 <f_lseek+0x150>
#endif
		fp->dsect = nsect;
 801ab7e:	61a5      	str	r5, [r4, #24]
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
 801ab80:	68a1      	ldr	r1, [r4, #8]
 801ab82:	68e3      	ldr	r3, [r4, #12]
 801ab84:	4299      	cmp	r1, r3
 801ab86:	d906      	bls.n	801ab96 <f_lseek+0x150>
		fp->fsize = fp->fptr;
		fp->flag |= FA__WRITTEN;
 801ab88:	79a2      	ldrb	r2, [r4, #6]
#endif
		fp->dsect = nsect;
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
		fp->fsize = fp->fptr;
 801ab8a:	60e1      	str	r1, [r4, #12]
		fp->flag |= FA__WRITTEN;
 801ab8c:	f042 0020 	orr.w	r0, r2, #32
 801ab90:	71a0      	strb	r0, [r4, #6]
 801ab92:	e000      	b.n	801ab96 <f_lseek+0x150>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 801ab94:	2602      	movs	r6, #2
		fp->flag |= FA__WRITTEN;
	}
#endif

	LEAVE_FF(fp->fs, res);
}
 801ab96:	4630      	mov	r0, r6
 801ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ab9c <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
 801ab9c:	b510      	push	{r4, lr}
 801ab9e:	b086      	sub	sp, #24
 801aba0:	4604      	mov	r4, r0
 801aba2:	a806      	add	r0, sp, #24
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
 801aba4:	2200      	movs	r2, #0

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
 801aba6:	f840 1d14 	str.w	r1, [r0, #-20]!
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
 801abaa:	4621      	mov	r1, r4
 801abac:	f7ff fc82 	bl	801a4b4 <chk_mounted>
	if (res == FR_OK) {
 801abb0:	bb20      	cbnz	r0, 801abfc <f_opendir+0x60>
		INITBUF((*dj), sfn, lfn);
 801abb2:	ab03      	add	r3, sp, #12
 801abb4:	61a3      	str	r3, [r4, #24]
		res = follow_path(dj, path);			/* Follow the path to the directory */
 801abb6:	4620      	mov	r0, r4
 801abb8:	9901      	ldr	r1, [sp, #4]
 801abba:	f7ff fb7b 	bl	801a2b4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 801abbe:	b9c0      	cbnz	r0, 801abf2 <f_opendir+0x56>
			dir = dj->dir;
 801abc0:	6960      	ldr	r0, [r4, #20]
			if (dir) {							/* It is not the root dir */
 801abc2:	b178      	cbz	r0, 801abe4 <f_opendir+0x48>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 801abc4:	7ac2      	ldrb	r2, [r0, #11]
 801abc6:	f002 0110 	and.w	r1, r2, #16
 801abca:	b2cb      	uxtb	r3, r1
 801abcc:	b1ab      	cbz	r3, 801abfa <f_opendir+0x5e>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 801abce:	7d41      	ldrb	r1, [r0, #21]
 801abd0:	7d02      	ldrb	r2, [r0, #20]
 801abd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801abd6:	7ec1      	ldrb	r1, [r0, #27]
 801abd8:	7e80      	ldrb	r0, [r0, #26]
 801abda:	ea40 2301 	orr.w	r3, r0, r1, lsl #8
 801abde:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801abe2:	60a2      	str	r2, [r4, #8]
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 801abe4:	6821      	ldr	r1, [r4, #0]
 801abe6:	88c8      	ldrh	r0, [r1, #6]
				res = dir_seek(dj, 0);			/* Rewind dir */
 801abe8:	2100      	movs	r1, #0
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 801abea:	80a0      	strh	r0, [r4, #4]
				res = dir_seek(dj, 0);			/* Rewind dir */
 801abec:	4620      	mov	r0, r4
 801abee:	f7ff faa2 	bl	801a136 <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801abf2:	2804      	cmp	r0, #4
 801abf4:	bf08      	it	eq
 801abf6:	2005      	moveq	r0, #5
 801abf8:	e000      	b.n	801abfc <f_opendir+0x60>
			dir = dj->dir;
			if (dir) {							/* It is not the root dir */
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
 801abfa:	2005      	movs	r0, #5
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
 801abfc:	b006      	add	sp, #24
 801abfe:	bd10      	pop	{r4, pc}

0801ac00 <FILE_MountFS>:
/////////////////////////////////////////////////////////////////////////////
//! Mount the file system
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
static s32 FILE_MountFS(void)
{
 801ac00:	b500      	push	{lr}
  FRESULT res;
  DIR dir;

  file_read_is_open = 0;
  file_write_is_open = 0;
 801ac02:	4912      	ldr	r1, [pc, #72]	; (801ac4c <FILE_MountFS+0x4c>)
static s32 FILE_MountFS(void)
{
  FRESULT res;
  DIR dir;

  file_read_is_open = 0;
 801ac04:	4b12      	ldr	r3, [pc, #72]	; (801ac50 <FILE_MountFS+0x50>)
 801ac06:	2000      	movs	r0, #0
  file_write_is_open = 0;
 801ac08:	7008      	strb	r0, [r1, #0]
/////////////////////////////////////////////////////////////////////////////
//! Mount the file system
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
static s32 FILE_MountFS(void)
{
 801ac0a:	b089      	sub	sp, #36	; 0x24
  DIR dir;

  file_read_is_open = 0;
  file_write_is_open = 0;

  if( (res=f_mount(0, &fs)) != FR_OK ) {
 801ac0c:	4911      	ldr	r1, [pc, #68]	; (801ac54 <FILE_MountFS+0x54>)
static s32 FILE_MountFS(void)
{
  FRESULT res;
  DIR dir;

  file_read_is_open = 0;
 801ac0e:	7018      	strb	r0, [r3, #0]
  file_write_is_open = 0;

  if( (res=f_mount(0, &fs)) != FR_OK ) {
 801ac10:	f7ff fd9e 	bl	801a750 <f_mount>
 801ac14:	4601      	mov	r1, r0
 801ac16:	b128      	cbz	r0, 801ac24 <FILE_MountFS+0x24>
    DEBUG_MSG("[FILE] Failed to mount SD Card - error status: %d\n", res);
 801ac18:	480f      	ldr	r0, [pc, #60]	; (801ac58 <FILE_MountFS+0x58>)
 801ac1a:	f7f6 febb 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
    return -1; // error
 801ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ac22:	e011      	b.n	801ac48 <FILE_MountFS+0x48>
  }

  if( (res=f_opendir(&dir, "/")) != FR_OK ) {
 801ac24:	490d      	ldr	r1, [pc, #52]	; (801ac5c <FILE_MountFS+0x5c>)
 801ac26:	a801      	add	r0, sp, #4
 801ac28:	f7ff ffb8 	bl	801ab9c <f_opendir>
 801ac2c:	4601      	mov	r1, r0
 801ac2e:	b128      	cbz	r0, 801ac3c <FILE_MountFS+0x3c>
    DEBUG_MSG("[FILE] Failed to open root directory - error status: %d\n", res);
 801ac30:	480b      	ldr	r0, [pc, #44]	; (801ac60 <FILE_MountFS+0x60>)
 801ac32:	f7f6 feaf 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
    return -2; // error
 801ac36:	f06f 0001 	mvn.w	r0, #1
 801ac3a:	e005      	b.n	801ac48 <FILE_MountFS+0x48>
  }

  // TODO: read from master sector
  disk_label[0] = 0;
 801ac3c:	4809      	ldr	r0, [pc, #36]	; (801ac64 <FILE_MountFS+0x64>)

  volume_available = 1;
 801ac3e:	4b0a      	ldr	r3, [pc, #40]	; (801ac68 <FILE_MountFS+0x68>)
    DEBUG_MSG("[FILE] Failed to open root directory - error status: %d\n", res);
    return -2; // error
  }

  // TODO: read from master sector
  disk_label[0] = 0;
 801ac40:	7001      	strb	r1, [r0, #0]

  volume_available = 1;
 801ac42:	2201      	movs	r2, #1
 801ac44:	701a      	strb	r2, [r3, #0]

  return 0; // no error
 801ac46:	4608      	mov	r0, r1
}
 801ac48:	b009      	add	sp, #36	; 0x24
 801ac4a:	bd00      	pop	{pc}
 801ac4c:	2000083b 	.word	0x2000083b
 801ac50:	2000083a 	.word	0x2000083a
 801ac54:	200005fc 	.word	0x200005fc
 801ac58:	0801c96a 	.word	0x0801c96a
 801ac5c:	0801c99d 	.word	0x0801c99d
 801ac60:	0801c99f 	.word	0x0801c99f
 801ac64:	200005f0 	.word	0x200005f0
 801ac68:	20000838 	.word	0x20000838

0801ac6c <FILE_Init>:

/////////////////////////////////////////////////////////////////////////////
//! Initialisation
/////////////////////////////////////////////////////////////////////////////
s32 FILE_Init(u32 mode)
{
 801ac6c:	b508      	push	{r3, lr}
  file_read_is_open = 0;
  file_write_is_open = 0;
 801ac6e:	4909      	ldr	r1, [pc, #36]	; (801ac94 <FILE_Init+0x28>)
/////////////////////////////////////////////////////////////////////////////
//! Initialisation
/////////////////////////////////////////////////////////////////////////////
s32 FILE_Init(u32 mode)
{
  file_read_is_open = 0;
 801ac70:	4b09      	ldr	r3, [pc, #36]	; (801ac98 <FILE_Init+0x2c>)
  file_write_is_open = 0;
  sdcard_available = 0;
 801ac72:	4a0a      	ldr	r2, [pc, #40]	; (801ac9c <FILE_Init+0x30>)
/////////////////////////////////////////////////////////////////////////////
//! Initialisation
/////////////////////////////////////////////////////////////////////////////
s32 FILE_Init(u32 mode)
{
  file_read_is_open = 0;
 801ac74:	2000      	movs	r0, #0
 801ac76:	7018      	strb	r0, [r3, #0]
  file_write_is_open = 0;
 801ac78:	7008      	strb	r0, [r1, #0]
  sdcard_available = 0;
 801ac7a:	7010      	strb	r0, [r2, #0]
  volume_available = 0;
 801ac7c:	4b08      	ldr	r3, [pc, #32]	; (801aca0 <FILE_Init+0x34>)
  volume_free_bytes = 0;
 801ac7e:	4909      	ldr	r1, [pc, #36]	; (801aca4 <FILE_Init+0x38>)

  browser_upload_callback_func = NULL;
 801ac80:	4a09      	ldr	r2, [pc, #36]	; (801aca8 <FILE_Init+0x3c>)
s32 FILE_Init(u32 mode)
{
  file_read_is_open = 0;
  file_write_is_open = 0;
  sdcard_available = 0;
  volume_available = 0;
 801ac82:	7018      	strb	r0, [r3, #0]
  volume_free_bytes = 0;
 801ac84:	6008      	str	r0, [r1, #0]

  browser_upload_callback_func = NULL;
 801ac86:	6010      	str	r0, [r2, #0]

  // init SDCard access
  s32 error = MIOS32_SDCARD_Init(0);
 801ac88:	f7f7 fc21 	bl	80124ce <MIOS32_SDCARD_Init>
#if DEBUG_VERBOSE_LEVEL >= 2
  DEBUG_MSG("[FILE] SD Card interface initialized, status: %d\n", error);
#endif

  // for status message
  status_msg_ctr = 5;
 801ac8c:	4b07      	ldr	r3, [pc, #28]	; (801acac <FILE_Init+0x40>)
 801ac8e:	2105      	movs	r1, #5
 801ac90:	7019      	strb	r1, [r3, #0]

  return error;
}
 801ac92:	bd08      	pop	{r3, pc}
 801ac94:	2000083b 	.word	0x2000083b
 801ac98:	2000083a 	.word	0x2000083a
 801ac9c:	2000082c 	.word	0x2000082c
 801aca0:	20000838 	.word	0x20000838
 801aca4:	20000834 	.word	0x20000834
 801aca8:	20000830 	.word	0x20000830
 801acac:	20000839 	.word	0x20000839

0801acb0 <FILE_CheckSDCard>:
//! \return 1 if SD card has been connected
//! \return 2 if SD card has been disconnected
//! \return 3 if new files should be loaded, e.g. after startup or SD Card change
/////////////////////////////////////////////////////////////////////////////
s32 FILE_CheckSDCard(void)
{
 801acb0:	b538      	push	{r3, r4, r5, lr}
  // check if SD card is available
  // High-speed access if SD card was previously available
  u8 prev_sdcard_available = sdcard_available;
 801acb2:	4d12      	ldr	r5, [pc, #72]	; (801acfc <FILE_CheckSDCard+0x4c>)
 801acb4:	782c      	ldrb	r4, [r5, #0]
  sdcard_available = MIOS32_SDCARD_CheckAvailable(prev_sdcard_available);
 801acb6:	4620      	mov	r0, r4
 801acb8:	f7f7 fd1e 	bl	80126f8 <MIOS32_SDCARD_CheckAvailable>
 801acbc:	b2c0      	uxtb	r0, r0
 801acbe:	7028      	strb	r0, [r5, #0]

  if( sdcard_available && !prev_sdcard_available ) {
 801acc0:	b160      	cbz	r0, 801acdc <FILE_CheckSDCard+0x2c>
 801acc2:	b984      	cbnz	r4, 801ace6 <FILE_CheckSDCard+0x36>
#if DEBUG_VERBOSE_LEVEL >= 2
    DEBUG_MSG("[FILE] SD Card has been connected!\n");
#endif

    s32 error = FILE_MountFS();
 801acc4:	f7ff ff9c 	bl	801ac00 <FILE_MountFS>
#if DEBUG_VERBOSE_LEVEL >= 2
    DEBUG_MSG("[FILE] Tried to mount file system, status: %d\n", error);
#endif

    if( error < 0 ) {
 801acc8:	2800      	cmp	r0, #0
 801acca:	da02      	bge.n	801acd2 <FILE_CheckSDCard+0x22>
      // ensure that volume flagged as not available
      volume_available = 0;
 801accc:	4a0c      	ldr	r2, [pc, #48]	; (801ad00 <FILE_CheckSDCard+0x50>)
 801acce:	7014      	strb	r4, [r2, #0]

      return error; // break here!
 801acd0:	bd38      	pop	{r3, r4, r5, pc}
    }

    // status message after 3 seconds
    status_msg_ctr = 3;
 801acd2:	4b0c      	ldr	r3, [pc, #48]	; (801ad04 <FILE_CheckSDCard+0x54>)
 801acd4:	2103      	movs	r1, #3
 801acd6:	7019      	strb	r1, [r3, #0]

    return 1; // SD card has been connected
 801acd8:	2001      	movs	r0, #1
 801acda:	bd38      	pop	{r3, r4, r5, pc}

  } else if( !sdcard_available && prev_sdcard_available ) {
 801acdc:	b11c      	cbz	r4, 801ace6 <FILE_CheckSDCard+0x36>
#if DEBUG_VERBOSE_LEVEL >= 2
    DEBUG_MSG("[FILE] SD Card disconnected!\n");
#endif
    volume_available = 0;
 801acde:	4b08      	ldr	r3, [pc, #32]	; (801ad00 <FILE_CheckSDCard+0x50>)
 801ace0:	7018      	strb	r0, [r3, #0]

    return 2; // SD card has been disconnected
 801ace2:	2002      	movs	r0, #2
 801ace4:	bd38      	pop	{r3, r4, r5, pc}
  }

  if( status_msg_ctr ) {
 801ace6:	4907      	ldr	r1, [pc, #28]	; (801ad04 <FILE_CheckSDCard+0x54>)
 801ace8:	7808      	ldrb	r0, [r1, #0]
 801acea:	b130      	cbz	r0, 801acfa <FILE_CheckSDCard+0x4a>
    if( !--status_msg_ctr )
 801acec:	1e42      	subs	r2, r0, #1
 801acee:	b2d0      	uxtb	r0, r2
 801acf0:	7008      	strb	r0, [r1, #0]
      return 3;
 801acf2:	2800      	cmp	r0, #0
 801acf4:	bf0c      	ite	eq
 801acf6:	2003      	moveq	r0, #3
 801acf8:	2000      	movne	r0, #0
  }

  return 0; // no error
}
 801acfa:	bd38      	pop	{r3, r4, r5, pc}
 801acfc:	2000082c 	.word	0x2000082c
 801ad00:	20000838 	.word	0x20000838
 801ad04:	20000839 	.word	0x20000839

0801ad08 <FILE_ReadOpen>:
//! time - always use FILE_ReadClose() before opening a new file!
//! Use FILE_ReadReOpen() to continue reading
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
s32 FILE_ReadOpen(file_t* file, char *filepath)
{
 801ad08:	b570      	push	{r4, r5, r6, lr}
#if DEBUG_VERBOSE_LEVEL >= 2
  DEBUG_MSG("[FILE] Opening file '%s'\n", filepath);
#endif

  if( file_read_is_open ) {
 801ad0a:	4b1e      	ldr	r3, [pc, #120]	; (801ad84 <FILE_ReadOpen+0x7c>)
//! time - always use FILE_ReadClose() before opening a new file!
//! Use FILE_ReadReOpen() to continue reading
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
s32 FILE_ReadOpen(file_t* file, char *filepath)
{
 801ad0c:	4604      	mov	r4, r0
#if DEBUG_VERBOSE_LEVEL >= 2
  DEBUG_MSG("[FILE] Opening file '%s'\n", filepath);
#endif

  if( file_read_is_open ) {
 801ad0e:	7818      	ldrb	r0, [r3, #0]
//! time - always use FILE_ReadClose() before opening a new file!
//! Use FILE_ReadReOpen() to continue reading
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
s32 FILE_ReadOpen(file_t* file, char *filepath)
{
 801ad10:	460e      	mov	r6, r1
#if DEBUG_VERBOSE_LEVEL >= 2
  DEBUG_MSG("[FILE] Opening file '%s'\n", filepath);
#endif

  if( file_read_is_open ) {
 801ad12:	b128      	cbz	r0, 801ad20 <FILE_ReadOpen+0x18>
#if DEBUG_VERBOSE_LEVEL >= 1
    DEBUG_MSG("[FILE] FAILURE: tried to open file '%s' for reading, but previous file hasn't been closed!\n", filepath);
 801ad14:	481c      	ldr	r0, [pc, #112]	; (801ad88 <FILE_ReadOpen+0x80>)
 801ad16:	f7f6 fe3d 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
#endif
    return FILE_ERR_OPEN_READ_WITHOUT_CLOSE;
 801ad1a:	f06f 0005 	mvn.w	r0, #5
 801ad1e:	bd70      	pop	{r4, r5, r6, pc}
  }

  if( (file_dfs_errno=f_open(&file_read, filepath, FA_OPEN_EXISTING | FA_READ)) != FR_OK ) {
 801ad20:	481a      	ldr	r0, [pc, #104]	; (801ad8c <FILE_ReadOpen+0x84>)
 801ad22:	4d1b      	ldr	r5, [pc, #108]	; (801ad90 <FILE_ReadOpen+0x88>)
 801ad24:	2201      	movs	r2, #1
 801ad26:	f7ff fd23 	bl	801a770 <f_open>
 801ad2a:	6028      	str	r0, [r5, #0]
 801ad2c:	b9b8      	cbnz	r0, 801ad5e <FILE_ReadOpen+0x56>
#if DEBUG_VERBOSE_LEVEL >= 2
  DEBUG_MSG("[FILE] found '%s' of length %u\n", filepath, file_read.fsize);
#endif

  // store current file variables in file_t
  file->flag = file_read.flag;
 801ad2e:	4917      	ldr	r1, [pc, #92]	; (801ad8c <FILE_ReadOpen+0x84>)
 801ad30:	798a      	ldrb	r2, [r1, #6]
 801ad32:	7022      	strb	r2, [r4, #0]
  file->csect = file_read.csect;
 801ad34:	79cb      	ldrb	r3, [r1, #7]
 801ad36:	7063      	strb	r3, [r4, #1]
  file->fptr = file_read.fptr;
  file->fsize = file_read.fsize;
 801ad38:	68ca      	ldr	r2, [r1, #12]
#endif

  // store current file variables in file_t
  file->flag = file_read.flag;
  file->csect = file_read.csect;
  file->fptr = file_read.fptr;
 801ad3a:	6888      	ldr	r0, [r1, #8]
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
 801ad3c:	690b      	ldr	r3, [r1, #16]

  // store current file variables in file_t
  file->flag = file_read.flag;
  file->csect = file_read.csect;
  file->fptr = file_read.fptr;
  file->fsize = file_read.fsize;
 801ad3e:	60a2      	str	r2, [r4, #8]
  file->org_clust = file_read.org_clust;
  file->curr_clust = file_read.curr_clust;
  file->dsect = file_read.dsect;
 801ad40:	698a      	ldr	r2, [r1, #24]
#endif

  // store current file variables in file_t
  file->flag = file_read.flag;
  file->csect = file_read.csect;
  file->fptr = file_read.fptr;
 801ad42:	6060      	str	r0, [r4, #4]
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
  file->curr_clust = file_read.curr_clust;
 801ad44:	6948      	ldr	r0, [r1, #20]
  // store current file variables in file_t
  file->flag = file_read.flag;
  file->csect = file_read.csect;
  file->fptr = file_read.fptr;
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
 801ad46:	60e3      	str	r3, [r4, #12]
  file->curr_clust = file_read.curr_clust;
  file->dsect = file_read.dsect;
 801ad48:	6162      	str	r2, [r4, #20]
  file->dir_sect = file_read.dir_sect;
 801ad4a:	69cb      	ldr	r3, [r1, #28]
  file->dir_ptr = file_read.dir_ptr;

  // file is opened
  file_read_is_open = 1;
 801ad4c:	4a0d      	ldr	r2, [pc, #52]	; (801ad84 <FILE_ReadOpen+0x7c>)
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
  file->curr_clust = file_read.curr_clust;
  file->dsect = file_read.dsect;
  file->dir_sect = file_read.dir_sect;
  file->dir_ptr = file_read.dir_ptr;
 801ad4e:	6a09      	ldr	r1, [r1, #32]
  file->flag = file_read.flag;
  file->csect = file_read.csect;
  file->fptr = file_read.fptr;
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
  file->curr_clust = file_read.curr_clust;
 801ad50:	6120      	str	r0, [r4, #16]
  file->dsect = file_read.dsect;
  file->dir_sect = file_read.dir_sect;
  file->dir_ptr = file_read.dir_ptr;

  // file is opened
  file_read_is_open = 1;
 801ad52:	2001      	movs	r0, #1
 801ad54:	7010      	strb	r0, [r2, #0]
  file->fptr = file_read.fptr;
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
  file->curr_clust = file_read.curr_clust;
  file->dsect = file_read.dsect;
  file->dir_sect = file_read.dir_sect;
 801ad56:	61a3      	str	r3, [r4, #24]
  file->dir_ptr = file_read.dir_ptr;
 801ad58:	61e1      	str	r1, [r4, #28]

  // file is opened
  file_read_is_open = 1;

  return 0;
 801ad5a:	2000      	movs	r0, #0
 801ad5c:	bd70      	pop	{r4, r5, r6, pc}
#if DEBUG_VERBOSE_LEVEL >= 2
    DEBUG_MSG("[FILE] Error opening file - try mounting the partition again\n");
#endif

    s32 error;
    if( (error = FILE_MountFS()) < 0 ) {
 801ad5e:	f7ff ff4f 	bl	801ac00 <FILE_MountFS>
 801ad62:	2800      	cmp	r0, #0
 801ad64:	db0a      	blt.n	801ad7c <FILE_ReadOpen+0x74>
      DEBUG_MSG("[FILE] mounting failed with status: %d\n", error);
#endif
      return FILE_ERR_SD_CARD;
    }

    if( (file_dfs_errno=f_open(&file_read, filepath, FA_OPEN_EXISTING | FA_READ)) != FR_OK ) {
 801ad66:	4809      	ldr	r0, [pc, #36]	; (801ad8c <FILE_ReadOpen+0x84>)
 801ad68:	4631      	mov	r1, r6
 801ad6a:	2201      	movs	r2, #1
 801ad6c:	f7ff fd00 	bl	801a770 <f_open>
 801ad70:	6028      	str	r0, [r5, #0]
 801ad72:	2800      	cmp	r0, #0
 801ad74:	d0db      	beq.n	801ad2e <FILE_ReadOpen+0x26>
#if DEBUG_VERBOSE_LEVEL >= 2
      DEBUG_MSG("[FILE] Still not able to open file - giving up!\n");
#endif
      return FILE_ERR_OPEN_READ;
 801ad76:	f06f 0004 	mvn.w	r0, #4
 801ad7a:	bd70      	pop	{r4, r5, r6, pc}
    s32 error;
    if( (error = FILE_MountFS()) < 0 ) {
#if DEBUG_VERBOSE_LEVEL >= 2
      DEBUG_MSG("[FILE] mounting failed with status: %d\n", error);
#endif
      return FILE_ERR_SD_CARD;
 801ad7c:	f04f 30ff 	mov.w	r0, #4294967295

  // file is opened
  file_read_is_open = 1;

  return 0;
}
 801ad80:	bd70      	pop	{r4, r5, r6, pc}
 801ad82:	bf00      	nop
 801ad84:	2000083a 	.word	0x2000083a
 801ad88:	0801ca4a 	.word	0x0801ca4a
 801ad8c:	2000083c 	.word	0x2000083c
 801ad90:	20011bac 	.word	0x20011bac

0801ad94 <FILE_ReadReOpen>:
/////////////////////////////////////////////////////////////////////////////
//! reopens a file for reading
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
s32 FILE_ReadReOpen(file_t* file)
{
 801ad94:	b538      	push	{r3, r4, r5, lr}
#if DEBUG_VERBOSE_LEVEL >= 2
  DEBUG_MSG("[FILE] Reopening file\n");
#endif

  if( file_read_is_open ) {
 801ad96:	4b16      	ldr	r3, [pc, #88]	; (801adf0 <FILE_ReadReOpen+0x5c>)
 801ad98:	7819      	ldrb	r1, [r3, #0]
 801ad9a:	b129      	cbz	r1, 801ada8 <FILE_ReadReOpen+0x14>
#if DEBUG_VERBOSE_LEVEL >= 1
    DEBUG_MSG("[FILE] FAILURE: tried to reopen file, but previous file hasn't been closed!\n");
 801ad9c:	4815      	ldr	r0, [pc, #84]	; (801adf4 <FILE_ReadReOpen+0x60>)
 801ad9e:	f7f6 fdf9 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
#endif
    return FILE_ERR_OPEN_READ_WITHOUT_CLOSE;
 801ada2:	f06f 0005 	mvn.w	r0, #5
 801ada6:	bd38      	pop	{r3, r4, r5, pc}

  // for later check if we need to reload the sector
  u32 prev_dsect = file_read.dsect;

  // restore file variables from file_t
  file_read.fs = &fs;
 801ada8:	4b13      	ldr	r3, [pc, #76]	; (801adf8 <FILE_ReadReOpen+0x64>)
#endif
    return FILE_ERR_OPEN_READ_WITHOUT_CLOSE;
  }

  // for later check if we need to reload the sector
  u32 prev_dsect = file_read.dsect;
 801adaa:	4914      	ldr	r1, [pc, #80]	; (801adfc <FILE_ReadReOpen+0x68>)

  // restore file variables from file_t
  file_read.fs = &fs;
  file_read.id = fs.id;
 801adac:	88da      	ldrh	r2, [r3, #6]

  // for later check if we need to reload the sector
  u32 prev_dsect = file_read.dsect;

  // restore file variables from file_t
  file_read.fs = &fs;
 801adae:	600b      	str	r3, [r1, #0]
  file_read.id = fs.id;
 801adb0:	808a      	strh	r2, [r1, #4]
  file_read.flag = file->flag;
 801adb2:	7804      	ldrb	r4, [r0, #0]
#endif
    return FILE_ERR_OPEN_READ_WITHOUT_CLOSE;
  }

  // for later check if we need to reload the sector
  u32 prev_dsect = file_read.dsect;
 801adb4:	698d      	ldr	r5, [r1, #24]

  // restore file variables from file_t
  file_read.fs = &fs;
  file_read.id = fs.id;
  file_read.flag = file->flag;
 801adb6:	718c      	strb	r4, [r1, #6]
  file_read.csect = file->csect;
 801adb8:	7842      	ldrb	r2, [r0, #1]
 801adba:	71ca      	strb	r2, [r1, #7]
  file_read.fptr = file->fptr;
  file_read.fsize = file->fsize;
 801adbc:	6882      	ldr	r2, [r0, #8]
  // restore file variables from file_t
  file_read.fs = &fs;
  file_read.id = fs.id;
  file_read.flag = file->flag;
  file_read.csect = file->csect;
  file_read.fptr = file->fptr;
 801adbe:	6844      	ldr	r4, [r0, #4]
  file_read.fsize = file->fsize;
 801adc0:	60ca      	str	r2, [r1, #12]
  file_read.org_clust = file->org_clust;
  file_read.curr_clust = file->curr_clust;
 801adc2:	6902      	ldr	r2, [r0, #16]
  // restore file variables from file_t
  file_read.fs = &fs;
  file_read.id = fs.id;
  file_read.flag = file->flag;
  file_read.csect = file->csect;
  file_read.fptr = file->fptr;
 801adc4:	608c      	str	r4, [r1, #8]
  file_read.fsize = file->fsize;
  file_read.org_clust = file->org_clust;
 801adc6:	68c4      	ldr	r4, [r0, #12]
  file_read.curr_clust = file->curr_clust;
 801adc8:	614a      	str	r2, [r1, #20]
  file_read.dsect = file->dsect;
 801adca:	6942      	ldr	r2, [r0, #20]
  file_read.id = fs.id;
  file_read.flag = file->flag;
  file_read.csect = file->csect;
  file_read.fptr = file->fptr;
  file_read.fsize = file->fsize;
  file_read.org_clust = file->org_clust;
 801adcc:	610c      	str	r4, [r1, #16]
  file_read.curr_clust = file->curr_clust;
  file_read.dsect = file->dsect;
  file_read.dir_sect = file->dir_sect;
 801adce:	6984      	ldr	r4, [r0, #24]
  file_read.dir_ptr = file->dir_ptr;
 801add0:	69c0      	ldr	r0, [r0, #28]
  file_read.csect = file->csect;
  file_read.fptr = file->fptr;
  file_read.fsize = file->fsize;
  file_read.org_clust = file->org_clust;
  file_read.curr_clust = file->curr_clust;
  file_read.dsect = file->dsect;
 801add2:	618a      	str	r2, [r1, #24]
  file_read.dir_sect = file->dir_sect;
  file_read.dir_ptr = file->dir_ptr;

  if( prev_dsect != file_read.dsect ) {
 801add4:	4295      	cmp	r5, r2
  file_read.fptr = file->fptr;
  file_read.fsize = file->fsize;
  file_read.org_clust = file->org_clust;
  file_read.curr_clust = file->curr_clust;
  file_read.dsect = file->dsect;
  file_read.dir_sect = file->dir_sect;
 801add6:	61cc      	str	r4, [r1, #28]
  file_read.dir_ptr = file->dir_ptr;
 801add8:	6208      	str	r0, [r1, #32]

  if( prev_dsect != file_read.dsect ) {
 801adda:	d004      	beq.n	801ade6 <FILE_ReadReOpen+0x52>
    disk_read(file_read.fs->drive, file_read.buf, file_read.dsect, 1);
 801addc:	7858      	ldrb	r0, [r3, #1]
 801adde:	3124      	adds	r1, #36	; 0x24
 801ade0:	2301      	movs	r3, #1
 801ade2:	f7fe ff5b 	bl	8019c9c <disk_read>
  }

  // file is opened (again)
  file_read_is_open = 1;
 801ade6:	4b02      	ldr	r3, [pc, #8]	; (801adf0 <FILE_ReadReOpen+0x5c>)
 801ade8:	2101      	movs	r1, #1
 801adea:	7019      	strb	r1, [r3, #0]

  return 0;
 801adec:	2000      	movs	r0, #0
}
 801adee:	bd38      	pop	{r3, r4, r5, pc}
 801adf0:	2000083a 	.word	0x2000083a
 801adf4:	0801caa6 	.word	0x0801caa6
 801adf8:	200005fc 	.word	0x200005fc
 801adfc:	2000083c 	.word	0x2000083c

0801ae00 <FILE_ReadClose>:
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
s32 FILE_ReadClose(file_t *file)
{
  // store current file variables in file_t
  file->flag = file_read.flag;
 801ae00:	4b0b      	ldr	r3, [pc, #44]	; (801ae30 <FILE_ReadClose+0x30>)
 801ae02:	799a      	ldrb	r2, [r3, #6]
 801ae04:	7002      	strb	r2, [r0, #0]
  file->csect = file_read.csect;
 801ae06:	79d9      	ldrb	r1, [r3, #7]
 801ae08:	7041      	strb	r1, [r0, #1]
  file->fptr = file_read.fptr;
 801ae0a:	689a      	ldr	r2, [r3, #8]
  file->fsize = file_read.fsize;
 801ae0c:	68d9      	ldr	r1, [r3, #12]
s32 FILE_ReadClose(file_t *file)
{
  // store current file variables in file_t
  file->flag = file_read.flag;
  file->csect = file_read.csect;
  file->fptr = file_read.fptr;
 801ae0e:	6042      	str	r2, [r0, #4]
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
 801ae10:	691a      	ldr	r2, [r3, #16]
{
  // store current file variables in file_t
  file->flag = file_read.flag;
  file->csect = file_read.csect;
  file->fptr = file_read.fptr;
  file->fsize = file_read.fsize;
 801ae12:	6081      	str	r1, [r0, #8]
  file->org_clust = file_read.org_clust;
  file->curr_clust = file_read.curr_clust;
 801ae14:	6959      	ldr	r1, [r3, #20]
  // store current file variables in file_t
  file->flag = file_read.flag;
  file->csect = file_read.csect;
  file->fptr = file_read.fptr;
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
 801ae16:	60c2      	str	r2, [r0, #12]
  file->curr_clust = file_read.curr_clust;
  file->dsect = file_read.dsect;
 801ae18:	699a      	ldr	r2, [r3, #24]
  file->flag = file_read.flag;
  file->csect = file_read.csect;
  file->fptr = file_read.fptr;
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
  file->curr_clust = file_read.curr_clust;
 801ae1a:	6101      	str	r1, [r0, #16]
  file->dsect = file_read.dsect;
  file->dir_sect = file_read.dir_sect;
 801ae1c:	69d9      	ldr	r1, [r3, #28]
  file->dir_ptr = file_read.dir_ptr;
 801ae1e:	6a1b      	ldr	r3, [r3, #32]
  file->csect = file_read.csect;
  file->fptr = file_read.fptr;
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
  file->curr_clust = file_read.curr_clust;
  file->dsect = file_read.dsect;
 801ae20:	6142      	str	r2, [r0, #20]
  file->dir_sect = file_read.dir_sect;
  file->dir_ptr = file_read.dir_ptr;

  // file has been closed
  file_read_is_open = 0;
 801ae22:	4a04      	ldr	r2, [pc, #16]	; (801ae34 <FILE_ReadClose+0x34>)
  file->fptr = file_read.fptr;
  file->fsize = file_read.fsize;
  file->org_clust = file_read.org_clust;
  file->curr_clust = file_read.curr_clust;
  file->dsect = file_read.dsect;
  file->dir_sect = file_read.dir_sect;
 801ae24:	6181      	str	r1, [r0, #24]
  file->dir_ptr = file_read.dir_ptr;
 801ae26:	61c3      	str	r3, [r0, #28]

  // file has been closed
  file_read_is_open = 0;
 801ae28:	2000      	movs	r0, #0
 801ae2a:	7010      	strb	r0, [r2, #0]


  // don't close file via f_close()! We allow to open the file again
  return 0;
}
 801ae2c:	4770      	bx	lr
 801ae2e:	bf00      	nop
 801ae30:	2000083c 	.word	0x2000083c
 801ae34:	2000083a 	.word	0x2000083a

0801ae38 <FILE_ReadSeek>:
/////////////////////////////////////////////////////////////////////////////
//! Changes to a new file position
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
s32 FILE_ReadSeek(u32 offset)
{
 801ae38:	b508      	push	{r3, lr}
 801ae3a:	4601      	mov	r1, r0
  if( (file_dfs_errno=f_lseek(&file_read, offset)) != FR_OK ) {
 801ae3c:	4805      	ldr	r0, [pc, #20]	; (801ae54 <FILE_ReadSeek+0x1c>)
 801ae3e:	f7ff fe02 	bl	801aa46 <f_lseek>
 801ae42:	4b05      	ldr	r3, [pc, #20]	; (801ae58 <FILE_ReadSeek+0x20>)
 801ae44:	2800      	cmp	r0, #0
 801ae46:	6018      	str	r0, [r3, #0]
    DEBUG_MSG("[FILE_ReadSeek] ERROR: seek to offset %u failed (FatFs status: %d)\n", offset, file_dfs_errno);
#endif
    return FILE_ERR_SEEK;
  }
  return 0; // no error
}
 801ae48:	bf14      	ite	ne
 801ae4a:	f06f 000f 	mvnne.w	r0, #15
 801ae4e:	2000      	moveq	r0, #0
 801ae50:	bd08      	pop	{r3, pc}
 801ae52:	bf00      	nop
 801ae54:	2000083c 	.word	0x2000083c
 801ae58:	20011bac 	.word	0x20011bac

0801ae5c <FILE_ReadGetCurrentSize>:
//! Returns current size of write file
/////////////////////////////////////////////////////////////////////////////
u32 FILE_ReadGetCurrentSize(void)
{
  return file_read.fsize;
}
 801ae5c:	4b01      	ldr	r3, [pc, #4]	; (801ae64 <FILE_ReadGetCurrentSize+0x8>)
 801ae5e:	68d8      	ldr	r0, [r3, #12]
 801ae60:	4770      	bx	lr
 801ae62:	bf00      	nop
 801ae64:	2000083c 	.word	0x2000083c

0801ae68 <FILE_ReadBuffer>:
/////////////////////////////////////////////////////////////////////////////
//! Read from file
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
s32 FILE_ReadBuffer(u8 *buffer, u32 len)
{
 801ae68:	b513      	push	{r0, r1, r4, lr}
  UINT successcount;

  // exit if volume not available
  if( !volume_available )
 801ae6a:	4a0d      	ldr	r2, [pc, #52]	; (801aea0 <FILE_ReadBuffer+0x38>)
/////////////////////////////////////////////////////////////////////////////
//! Read from file
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
s32 FILE_ReadBuffer(u8 *buffer, u32 len)
{
 801ae6c:	4603      	mov	r3, r0
  UINT successcount;

  // exit if volume not available
  if( !volume_available )
 801ae6e:	7810      	ldrb	r0, [r2, #0]
/////////////////////////////////////////////////////////////////////////////
//! Read from file
//! \return < 0 on errors (error codes are documented in file.h)
/////////////////////////////////////////////////////////////////////////////
s32 FILE_ReadBuffer(u8 *buffer, u32 len)
{
 801ae70:	460c      	mov	r4, r1
  UINT successcount;

  // exit if volume not available
  if( !volume_available )
 801ae72:	b178      	cbz	r0, 801ae94 <FILE_ReadBuffer+0x2c>
    return FILE_ERR_NO_VOLUME;

  if( (file_dfs_errno=f_read(&file_read, buffer, len, &successcount)) != FR_OK ) {
 801ae74:	4619      	mov	r1, r3
 801ae76:	480b      	ldr	r0, [pc, #44]	; (801aea4 <FILE_ReadBuffer+0x3c>)
 801ae78:	4622      	mov	r2, r4
 801ae7a:	ab01      	add	r3, sp, #4
 801ae7c:	f7ff fd2d 	bl	801a8da <f_read>
 801ae80:	4909      	ldr	r1, [pc, #36]	; (801aea8 <FILE_ReadBuffer+0x40>)
 801ae82:	6008      	str	r0, [r1, #0]
 801ae84:	b948      	cbnz	r0, 801ae9a <FILE_ReadBuffer+0x32>
#if DEBUG_VERBOSE_LEVEL >= 3
    DEBUG_MSG("[FILE] Failed to read sector at position 0x%08x, status: %u\n", file_read.fptr, file_dfs_errno);
#endif
      return FILE_ERR_READ;
  }
  if( successcount != len ) {
 801ae86:	9b01      	ldr	r3, [sp, #4]
 801ae88:	42a3      	cmp	r3, r4
#if DEBUG_VERBOSE_LEVEL >= 3
    DEBUG_MSG("[FILE] Wrong successcount while reading from position 0x%08x (count: %d)\n", file_read.fptr, successcount);
#endif
    return FILE_ERR_READCOUNT;
 801ae8a:	bf0c      	ite	eq
 801ae8c:	2000      	moveq	r0, #0
 801ae8e:	f06f 0007 	mvnne.w	r0, #7
 801ae92:	e004      	b.n	801ae9e <FILE_ReadBuffer+0x36>
{
  UINT successcount;

  // exit if volume not available
  if( !volume_available )
    return FILE_ERR_NO_VOLUME;
 801ae94:	f06f 0002 	mvn.w	r0, #2
 801ae98:	e001      	b.n	801ae9e <FILE_ReadBuffer+0x36>

  if( (file_dfs_errno=f_read(&file_read, buffer, len, &successcount)) != FR_OK ) {
#if DEBUG_VERBOSE_LEVEL >= 3
    DEBUG_MSG("[FILE] Failed to read sector at position 0x%08x, status: %u\n", file_read.fptr, file_dfs_errno);
#endif
      return FILE_ERR_READ;
 801ae9a:	f06f 0006 	mvn.w	r0, #6
#endif
    return FILE_ERR_READCOUNT;
  }

  return 0; // no error
}
 801ae9e:	bd1c      	pop	{r2, r3, r4, pc}
 801aea0:	20000838 	.word	0x20000838
 801aea4:	2000083c 	.word	0x2000083c
 801aea8:	20011bac 	.word	0x20011bac

0801aeac <Genesis_OPN2Write>:
void Genesis_OPN2Write(u8 board, u8 addrhi, u8 address, u8 data){
    board &= 0x03;
    addrhi &= 0x01;
    //Save chip state
    u8 chan, op, reg;
    if(address <= 0x2F){
 801aeac:	2a2f      	cmp	r2, #47	; 0x2f
    for(i=0; i<GENESIS_COUNT; i++){
        Genesis_Reset(i);
    }
}

void Genesis_OPN2Write(u8 board, u8 addrhi, u8 address, u8 data){
 801aeae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeb0:	4614      	mov	r4, r2
 801aeb2:	461e      	mov	r6, r3
    board &= 0x03;
 801aeb4:	f000 0703 	and.w	r7, r0, #3
    addrhi &= 0x01;
 801aeb8:	f001 0501 	and.w	r5, r1, #1
    //Save chip state
    u8 chan, op, reg;
    if(address <= 0x2F){
 801aebc:	d808      	bhi.n	801aed0 <Genesis_OPN2Write+0x24>
        if(address >= 0x20 && !addrhi){
 801aebe:	2a1f      	cmp	r2, #31
 801aec0:	d94f      	bls.n	801af62 <Genesis_OPN2Write+0xb6>
 801aec2:	2d00      	cmp	r5, #0
 801aec4:	d14d      	bne.n	801af62 <Genesis_OPN2Write+0xb6>
            //OPN2 global register
            reg = OPN2GlobalRegs[address - 0x20];
 801aec6:	4849      	ldr	r0, [pc, #292]	; (801afec <Genesis_OPN2Write+0x140>)
 801aec8:	1881      	adds	r1, r0, r2
 801aeca:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 801aece:	e029      	b.n	801af24 <Genesis_OPN2Write+0x78>
            if(reg < 0xFF){
                genesis[board].opn2.ALL[reg] = data;
            }
        }
    }else if(address <= 0x9F){
 801aed0:	2a9f      	cmp	r2, #159	; 0x9f
 801aed2:	d81e      	bhi.n	801af12 <Genesis_OPN2Write+0x66>
        chan = (address & 0x03);
 801aed4:	f002 0203 	and.w	r2, r2, #3
        if(chan != 0x03){ //No channel 4 in first half
 801aed8:	2a03      	cmp	r2, #3
 801aeda:	d042      	beq.n	801af62 <Genesis_OPN2Write+0xb6>
            chan += addrhi + (addrhi << 1); //Add 3 for channels 4, 5, 6
 801aedc:	eb02 0045 	add.w	r0, r2, r5, lsl #1
            reg = ((address & 0xF0) >> 4) - 3;
 801aee0:	0923      	lsrs	r3, r4, #4
            op = ((address & 0x80) >> 3) | ((address & 0x40) >> 1); //Ops 1,2,3,4: 0x30, 0x38, 0x34, 0x3C
            genesis[board].opn2.chan[chan].op[op].ALL[reg] = data;
 801aee2:	1941      	adds	r1, r0, r5
    }else if(address <= 0x9F){
        chan = (address & 0x03);
        if(chan != 0x03){ //No channel 4 in first half
            chan += addrhi + (addrhi << 1); //Add 3 for channels 4, 5, 6
            reg = ((address & 0xF0) >> 4) - 3;
            op = ((address & 0x80) >> 3) | ((address & 0x40) >> 1); //Ops 1,2,3,4: 0x30, 0x38, 0x34, 0x3C
 801aee4:	f024 007f 	bic.w	r0, r4, #127	; 0x7f
        }
    }else if(address <= 0x9F){
        chan = (address & 0x03);
        if(chan != 0x03){ //No channel 4 in first half
            chan += addrhi + (addrhi << 1); //Add 3 for channels 4, 5, 6
            reg = ((address & 0xF0) >> 4) - 3;
 801aee8:	1eda      	subs	r2, r3, #3
            op = ((address & 0x80) >> 3) | ((address & 0x40) >> 1); //Ops 1,2,3,4: 0x30, 0x38, 0x34, 0x3C
 801aeea:	08c0      	lsrs	r0, r0, #3
 801aeec:	f004 0340 	and.w	r3, r4, #64	; 0x40
            genesis[board].opn2.chan[chan].op[op].ALL[reg] = data;
 801aef0:	f04f 0eda 	mov.w	lr, #218	; 0xda
 801aef4:	ea40 0053 	orr.w	r0, r0, r3, lsr #1
 801aef8:	fb0e f307 	mul.w	r3, lr, r7
 801aefc:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 801af00:	2307      	movs	r3, #7
 801af02:	fb03 1000 	mla	r0, r3, r0, r1
 801af06:	493a      	ldr	r1, [pc, #232]	; (801aff0 <Genesis_OPN2Write+0x144>)
 801af08:	180b      	adds	r3, r1, r0
 801af0a:	fa53 f282 	uxtab	r2, r3, r2
 801af0e:	7516      	strb	r6, [r2, #20]
 801af10:	e027      	b.n	801af62 <Genesis_OPN2Write+0xb6>
        }
    }else if(address <= 0xAE && address >= 0xA8){
 801af12:	f102 0358 	add.w	r3, r2, #88	; 0x58
 801af16:	b2d8      	uxtb	r0, r3
 801af18:	2806      	cmp	r0, #6
 801af1a:	d80b      	bhi.n	801af34 <Genesis_OPN2Write+0x88>
        //Channel 3 extra frequency
        reg = OPN2Ch3Regs[address - 0xA8];
 801af1c:	4835      	ldr	r0, [pc, #212]	; (801aff4 <Genesis_OPN2Write+0x148>)
 801af1e:	1883      	adds	r3, r0, r2
 801af20:	f813 1ca8 	ldrb.w	r1, [r3, #-168]
        if(reg < 0xFF){
 801af24:	29ff      	cmp	r1, #255	; 0xff
 801af26:	d01c      	beq.n	801af62 <Genesis_OPN2Write+0xb6>
            genesis[board].opn2.ALL[reg] = data;
 801af28:	23da      	movs	r3, #218	; 0xda
 801af2a:	fb03 1007 	mla	r0, r3, r7, r1
 801af2e:	4a30      	ldr	r2, [pc, #192]	; (801aff0 <Genesis_OPN2Write+0x144>)
 801af30:	5416      	strb	r6, [r2, r0]
 801af32:	e016      	b.n	801af62 <Genesis_OPN2Write+0xb6>
        }
    }else if(address <= 0xB6){
 801af34:	2ab6      	cmp	r2, #182	; 0xb6
 801af36:	d814      	bhi.n	801af62 <Genesis_OPN2Write+0xb6>
        chan = (address & 0x03);
 801af38:	f002 0103 	and.w	r1, r2, #3
        if(chan != 0x03){ //No channel 4 in first half
 801af3c:	2903      	cmp	r1, #3
 801af3e:	d010      	beq.n	801af62 <Genesis_OPN2Write+0xb6>
            chan += addrhi + (addrhi << 1); //Add 3 for channels 4, 5, 6
 801af40:	eb01 0345 	add.w	r3, r1, r5, lsl #1
            reg = ((address & 0x10) >> 3) | ((address & 0x04) >> 2); //Regs 0,1,2,3: A0, A4, B0, B4
            genesis[board].opn2.chan[chan].ALL[reg] = data;
 801af44:	21da      	movs	r1, #218	; 0xda
        }
    }else if(address <= 0xB6){
        chan = (address & 0x03);
        if(chan != 0x03){ //No channel 4 in first half
            chan += addrhi + (addrhi << 1); //Add 3 for channels 4, 5, 6
            reg = ((address & 0x10) >> 3) | ((address & 0x04) >> 2); //Regs 0,1,2,3: A0, A4, B0, B4
 801af46:	f004 0010 	and.w	r0, r4, #16
            genesis[board].opn2.chan[chan].ALL[reg] = data;
 801af4a:	195b      	adds	r3, r3, r5
 801af4c:	4379      	muls	r1, r7
        }
    }else if(address <= 0xB6){
        chan = (address & 0x03);
        if(chan != 0x03){ //No channel 4 in first half
            chan += addrhi + (addrhi << 1); //Add 3 for channels 4, 5, 6
            reg = ((address & 0x10) >> 3) | ((address & 0x04) >> 2); //Regs 0,1,2,3: A0, A4, B0, B4
 801af4e:	f3c2 0280 	ubfx	r2, r2, #2, #1
            genesis[board].opn2.chan[chan].ALL[reg] = data;
 801af52:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 801af56:	eb01 1043 	add.w	r0, r1, r3, lsl #5
 801af5a:	4b25      	ldr	r3, [pc, #148]	; (801aff0 <Genesis_OPN2Write+0x144>)
 801af5c:	1819      	adds	r1, r3, r0
 801af5e:	188a      	adds	r2, r1, r2
 801af60:	7416      	strb	r6, [r2, #16]
        }
    }//else { not a register; }
    //Perform chip write
    MIOS32_IRQ_Disable(); //Turn off interrupts
 801af62:	f7f7 fe1d 	bl	8012ba0 <MIOS32_IRQ_Disable>
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs (in case not already)
 801af66:	4924      	ldr	r1, [pc, #144]	; (801aff8 <Genesis_OPN2Write+0x14c>)
 801af68:	680b      	ldr	r3, [r1, #0]
 801af6a:	b298      	uxth	r0, r3
 801af6c:	6008      	str	r0, [r1, #0]
    u32 porte = GPIOE->ODR;
 801af6e:	694a      	ldr	r2, [r1, #20]
    porte &= 0xFFFF000B; //Mask out the things we will set
    u32 a = address;
    a <<= 2; //Make room for board number
    a |= board;
 801af70:	ea47 0484 	orr.w	r4, r7, r4, lsl #2
    }//else { not a register; }
    //Perform chip write
    MIOS32_IRQ_Disable(); //Turn off interrupts
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs (in case not already)
    u32 porte = GPIOE->ODR;
    porte &= 0xFFFF000B; //Mask out the things we will set
 801af74:	f422 437f 	bic.w	r3, r2, #65280	; 0xff00
 801af78:	f023 00f4 	bic.w	r0, r3, #244	; 0xf4
    u32 a = address;
    a <<= 2; //Make room for board number
    a |= board;
    a <<= 2; //A2 = 0 for OPN2 write, A1 = addrhi
    a |= addrhi;
 801af7c:	ea45 0584 	orr.w	r5, r5, r4, lsl #2
    a <<= 4; //Move over into place, A0 = 0 for address write
    porte |= a; //Write to our temp copy
 801af80:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
    GPIOE->ODR = porte; //Write
 801af84:	6148      	str	r0, [r1, #20]
    GPIOE->MODER |= 0x55550000; //Set data pins to outputs
 801af86:	680a      	ldr	r2, [r1, #0]
 801af88:	f042 43aa 	orr.w	r3, r2, #1426063360	; 0x55000000
 801af8c:	f443 05aa 	orr.w	r5, r3, #5570560	; 0x550000
 801af90:	600d      	str	r5, [r1, #0]
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
 801af92:	491a      	ldr	r1, [pc, #104]	; (801affc <Genesis_OPN2Write+0x150>)
 801af94:	694a      	ldr	r2, [r1, #20]
 801af96:	f422 4320 	bic.w	r3, r2, #40960	; 0xa000
 801af9a:	614b      	str	r3, [r1, #20]
    GENESIS_OPN2_WRITEWAIT; //Wait for 1 OPN2 internal cycle
 801af9c:	2500      	movs	r5, #0
 801af9e:	3501      	adds	r5, #1
 801afa0:	2d40      	cmp	r5, #64	; 0x40
 801afa2:	d9fc      	bls.n	801af9e <Genesis_OPN2Write+0xf2>
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
 801afa4:	694a      	ldr	r2, [r1, #20]
    porte &= 0xFFFF00FF; //Get rid of address value
 801afa6:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    porte |= ((u32)data << 8); //Put in data value
 801afaa:	ea45 2606 	orr.w	r6, r5, r6, lsl #8
    porte |= 4; //A0 = 1 for data write
    GPIOE->ODR = porte; //Write
 801afae:	4812      	ldr	r0, [pc, #72]	; (801aff8 <Genesis_OPN2Write+0x14c>)
    porte |= a; //Write to our temp copy
    GPIOE->ODR = porte; //Write
    GPIOE->MODER |= 0x55550000; //Set data pins to outputs
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
    GENESIS_OPN2_WRITEWAIT; //Wait for 1 OPN2 internal cycle
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
 801afb0:	f442 4320 	orr.w	r3, r2, #40960	; 0xa000
    porte &= 0xFFFF00FF; //Get rid of address value
    porte |= ((u32)data << 8); //Put in data value
    porte |= 4; //A0 = 1 for data write
 801afb4:	f046 0604 	orr.w	r6, r6, #4
    porte |= a; //Write to our temp copy
    GPIOE->ODR = porte; //Write
    GPIOE->MODER |= 0x55550000; //Set data pins to outputs
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
    GENESIS_OPN2_WRITEWAIT; //Wait for 1 OPN2 internal cycle
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
 801afb8:	614b      	str	r3, [r1, #20]
    porte &= 0xFFFF00FF; //Get rid of address value
    porte |= ((u32)data << 8); //Put in data value
    porte |= 4; //A0 = 1 for data write
    GPIOE->ODR = porte; //Write
 801afba:	6146      	str	r6, [r0, #20]
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
 801afbc:	694a      	ldr	r2, [r1, #20]
 801afbe:	f422 4320 	bic.w	r3, r2, #40960	; 0xa000
 801afc2:	614b      	str	r3, [r1, #20]
    GENESIS_OPN2_WRITEWAIT; //Wait for 1 OPN2 internal cycle
 801afc4:	2100      	movs	r1, #0
 801afc6:	3101      	adds	r1, #1
 801afc8:	2940      	cmp	r1, #64	; 0x40
 801afca:	d9fc      	bls.n	801afc6 <Genesis_OPN2Write+0x11a>
 801afcc:	480c      	ldr	r0, [pc, #48]	; (801b000 <Genesis_OPN2Write+0x154>)
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
 801afce:	4b0b      	ldr	r3, [pc, #44]	; (801affc <Genesis_OPN2Write+0x150>)
 801afd0:	6001      	str	r1, [r0, #0]
 801afd2:	695a      	ldr	r2, [r3, #20]
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs
 801afd4:	f503 6000 	add.w	r0, r3, #2048	; 0x800
    porte |= ((u32)data << 8); //Put in data value
    porte |= 4; //A0 = 1 for data write
    GPIOE->ODR = porte; //Write
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
    GENESIS_OPN2_WRITEWAIT; //Wait for 1 OPN2 internal cycle
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
 801afd8:	f442 4120 	orr.w	r1, r2, #40960	; 0xa000
 801afdc:	6159      	str	r1, [r3, #20]
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs
 801afde:	6803      	ldr	r3, [r0, #0]
 801afe0:	b29a      	uxth	r2, r3
 801afe2:	6002      	str	r2, [r0, #0]
    MIOS32_IRQ_Enable(); //Turn on interrupts
}
 801afe4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    GPIOE->ODR = porte; //Write
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
    GENESIS_OPN2_WRITEWAIT; //Wait for 1 OPN2 internal cycle
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs
    MIOS32_IRQ_Enable(); //Turn on interrupts
 801afe8:	f7f7 bdee 	b.w	8012bc8 <MIOS32_IRQ_Enable>
 801afec:	0801d636 	.word	0x0801d636
 801aff0:	20011bb4 	.word	0x20011bb4
 801aff4:	0801d62e 	.word	0x0801d62e
 801aff8:	40021000 	.word	0x40021000
 801affc:	40020800 	.word	0x40020800
 801b000:	20011bb0 	.word	0x20011bb0

0801b004 <Genesis_PSGWrite>:

void Genesis_PSGWrite(u8 board, u8 data){
    board &= 0x03;
    //Save chip state
    u8 addr, voice;
    if(data & 0x80){
 801b004:	f011 0f80 	tst.w	r1, #128	; 0x80
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs
    MIOS32_IRQ_Enable(); //Turn on interrupts
}

void Genesis_PSGWrite(u8 board, u8 data){
 801b008:	b570      	push	{r4, r5, r6, lr}
 801b00a:	4b41      	ldr	r3, [pc, #260]	; (801b110 <Genesis_PSGWrite+0x10c>)
 801b00c:	460c      	mov	r4, r1
    board &= 0x03;
 801b00e:	f000 0503 	and.w	r5, r0, #3
    //Save chip state
    u8 addr, voice;
    if(data & 0x80){
 801b012:	d035      	beq.n	801b080 <Genesis_PSGWrite+0x7c>
        addr = (data & 0x70) >> 4;
        genesis[board].psg.latchedaddr = addr;
 801b014:	22da      	movs	r2, #218	; 0xda
 801b016:	fb02 3205 	mla	r2, r2, r5, r3
void Genesis_PSGWrite(u8 board, u8 data){
    board &= 0x03;
    //Save chip state
    u8 addr, voice;
    if(data & 0x80){
        addr = (data & 0x70) >> 4;
 801b01a:	f3c1 1002 	ubfx	r0, r1, #4, #3
        genesis[board].psg.latchedaddr = addr;
 801b01e:	32d0      	adds	r2, #208	; 0xd0
void Genesis_PSGWrite(u8 board, u8 data){
    board &= 0x03;
    //Save chip state
    u8 addr, voice;
    if(data & 0x80){
        addr = (data & 0x70) >> 4;
 801b020:	b2c1      	uxtb	r1, r0
        genesis[board].psg.latchedaddr = addr;
 801b022:	71d1      	strb	r1, [r2, #7]
        voice = (addr >> 1);
 801b024:	0849      	lsrs	r1, r1, #1
        if(addr & 1){
 801b026:	07c0      	lsls	r0, r0, #31
 801b028:	d510      	bpl.n	801b04c <Genesis_PSGWrite+0x48>
            //Attenuation
            if(voice == 3){
 801b02a:	2903      	cmp	r1, #3
 801b02c:	d103      	bne.n	801b036 <Genesis_PSGWrite+0x32>
                genesis[board].psg.noise.atten = (data & 0x0F);
 801b02e:	7991      	ldrb	r1, [r2, #6]
 801b030:	f364 1107 	bfi	r1, r4, #4, #4
 801b034:	e012      	b.n	801b05c <Genesis_PSGWrite+0x58>
            }else{
                genesis[board].psg.square[voice].atten = (data & 0x0F);
 801b036:	226d      	movs	r2, #109	; 0x6d
 801b038:	fb02 1005 	mla	r0, r2, r5, r1
 801b03c:	3068      	adds	r0, #104	; 0x68
 801b03e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801b042:	7859      	ldrb	r1, [r3, #1]
 801b044:	f364 1107 	bfi	r1, r4, #4, #4
 801b048:	7059      	strb	r1, [r3, #1]
 801b04a:	e031      	b.n	801b0b0 <Genesis_PSGWrite+0xac>
            }
        }else{
            if(voice == 3){
 801b04c:	2903      	cmp	r1, #3
 801b04e:	d107      	bne.n	801b060 <Genesis_PSGWrite+0x5c>
                //Noise parameters
                genesis[board].psg.noise.ALL = (genesis[board].psg.noise.ALL & 0xF0) | (data & 0x0F);
 801b050:	7993      	ldrb	r3, [r2, #6]
 801b052:	f004 010f 	and.w	r1, r4, #15
 801b056:	f023 000f 	bic.w	r0, r3, #15
 801b05a:	4301      	orrs	r1, r0
 801b05c:	7191      	strb	r1, [r2, #6]
 801b05e:	e027      	b.n	801b0b0 <Genesis_PSGWrite+0xac>
            }else{
                genesis[board].psg.square[voice].freq = (genesis[board].psg.square[voice].freq & 0xFFF0) | (data & 0x0F);
 801b060:	266d      	movs	r6, #109	; 0x6d
 801b062:	fb06 1105 	mla	r1, r6, r5, r1
 801b066:	3168      	adds	r1, #104	; 0x68
 801b068:	f004 060f 	and.w	r6, r4, #15
 801b06c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801b070:	f402 707c 	and.w	r0, r2, #1008	; 0x3f0
 801b074:	4330      	orrs	r0, r6
 801b076:	f360 0209 	bfi	r2, r0, #0, #10
 801b07a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 801b07e:	e017      	b.n	801b0b0 <Genesis_PSGWrite+0xac>
    }else{
        //TODO does the PSG ignore second byte frequency writes if the first byte
        //was the square's attenuation, not its frequency? I.e. does it latch just
        //the voice number, or the voice and also whether we are writing frequency
        //or attenuation?
        voice = (genesis[board].psg.latchedaddr >> 1);
 801b080:	22da      	movs	r2, #218	; 0xda
 801b082:	fb02 3005 	mla	r0, r2, r5, r3
 801b086:	f890 10d7 	ldrb.w	r1, [r0, #215]	; 0xd7
 801b08a:	084a      	lsrs	r2, r1, #1
        if(voice != 3){
 801b08c:	2a03      	cmp	r2, #3
 801b08e:	d00f      	beq.n	801b0b0 <Genesis_PSGWrite+0xac>
            genesis[board].psg.square[voice].freq = (genesis[board].psg.square[voice].freq & 0x000F) | ((u16)(data & 0x3F) << 4);
 801b090:	266d      	movs	r6, #109	; 0x6d
 801b092:	fb06 2205 	mla	r2, r6, r5, r2
 801b096:	3268      	adds	r2, #104	; 0x68
 801b098:	f004 063f 	and.w	r6, r4, #63	; 0x3f
 801b09c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801b0a0:	f001 000f 	and.w	r0, r1, #15
 801b0a4:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
 801b0a8:	f360 0109 	bfi	r1, r0, #0, #10
 801b0ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
    }
    //Perform chip write
    MIOS32_IRQ_Disable(); //Turn off interrupts
 801b0b0:	f7f7 fd76 	bl	8012ba0 <MIOS32_IRQ_Disable>
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs (in case not already)
 801b0b4:	4817      	ldr	r0, [pc, #92]	; (801b114 <Genesis_PSGWrite+0x110>)
 801b0b6:	6802      	ldr	r2, [r0, #0]
 801b0b8:	b293      	uxth	r3, r2
 801b0ba:	6003      	str	r3, [r0, #0]
    u32 porte = GPIOE->ODR;
 801b0bc:	6941      	ldr	r1, [r0, #20]
    porte &= 0xFFFF000B; //Mask out the things we will set
 801b0be:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 801b0c2:	f022 03f4 	bic.w	r3, r2, #244	; 0xf4
    u32 a = data;
    a <<= 2; //Make room for board number
    a |= board;
    a <<= 6; //Move into place
    a |= 0x20; //A2 = 1 for PSG write, A1 = 0 for PSG not output bits, A0 = -
 801b0c6:	f043 0120 	orr.w	r1, r3, #32
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs (in case not already)
    u32 porte = GPIOE->ODR;
    porte &= 0xFFFF000B; //Mask out the things we will set
    u32 a = data;
    a <<= 2; //Make room for board number
    a |= board;
 801b0ca:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
    a <<= 6; //Move into place
    a |= 0x20; //A2 = 1 for PSG write, A1 = 0 for PSG not output bits, A0 = -
    porte |= a; //Write to our temp copy
 801b0ce:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
    GPIOE->ODR = porte; //Write
 801b0d2:	6144      	str	r4, [r0, #20]
    GPIOE->MODER |= 0x55550000; //Set data pins to outputs
 801b0d4:	6802      	ldr	r2, [r0, #0]
 801b0d6:	f042 43aa 	orr.w	r3, r2, #1426063360	; 0x55000000
 801b0da:	f443 01aa 	orr.w	r1, r3, #5570560	; 0x550000
 801b0de:	6001      	str	r1, [r0, #0]
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
 801b0e0:	480d      	ldr	r0, [pc, #52]	; (801b118 <Genesis_PSGWrite+0x114>)
 801b0e2:	6942      	ldr	r2, [r0, #20]
 801b0e4:	f422 4320 	bic.w	r3, r2, #40960	; 0xa000
 801b0e8:	6143      	str	r3, [r0, #20]
    GENESIS_PSG_WRITEWAIT; //Wait for the glue logic to catch up
 801b0ea:	2200      	movs	r2, #0
 801b0ec:	3201      	adds	r2, #1
 801b0ee:	2a07      	cmp	r2, #7
 801b0f0:	d9fc      	bls.n	801b0ec <Genesis_PSGWrite+0xe8>
 801b0f2:	490a      	ldr	r1, [pc, #40]	; (801b11c <Genesis_PSGWrite+0x118>)
 801b0f4:	600a      	str	r2, [r1, #0]
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
 801b0f6:	6943      	ldr	r3, [r0, #20]
 801b0f8:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
 801b0fc:	6142      	str	r2, [r0, #20]
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs
 801b0fe:	4805      	ldr	r0, [pc, #20]	; (801b114 <Genesis_PSGWrite+0x110>)
 801b100:	6801      	ldr	r1, [r0, #0]
 801b102:	b28b      	uxth	r3, r1
 801b104:	6003      	str	r3, [r0, #0]
    MIOS32_IRQ_Enable(); //Turn on interrupts
}
 801b106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    GPIOE->MODER |= 0x55550000; //Set data pins to outputs
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
    GENESIS_PSG_WRITEWAIT; //Wait for the glue logic to catch up
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs
    MIOS32_IRQ_Enable(); //Turn on interrupts
 801b10a:	f7f7 bd5d 	b.w	8012bc8 <MIOS32_IRQ_Enable>
 801b10e:	bf00      	nop
 801b110:	20011bb4 	.word	0x20011bb4
 801b114:	40021000 	.word	0x40021000
 801b118:	40020800 	.word	0x40020800
 801b11c:	20011bb0 	.word	0x20011bb0

0801b120 <Genesis_WriteBoardBits>:
    GPIOC->ODR |= 0x00006000; //Write /CS and /RD high
    MIOS32_IRQ_Enable(); //Turn on interrupts
    return !(genesis[board].board.psg_ready);
}

void Genesis_WriteBoardBits(u8 board){
 801b120:	b510      	push	{r4, lr}
    board &= 0x03;
 801b122:	f000 0403 	and.w	r4, r0, #3
    MIOS32_IRQ_Disable(); //Turn off interrupts
 801b126:	f7f7 fd3b 	bl	8012ba0 <MIOS32_IRQ_Disable>
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs (in case not already)
 801b12a:	4b19      	ldr	r3, [pc, #100]	; (801b190 <Genesis_WriteBoardBits+0x70>)
    u32 porte = GPIOE->ODR;
    porte &= 0xFFFF000B; //Mask out the things we will set
    u32 a = genesis[board].board.writebits;
 801b12c:	4919      	ldr	r1, [pc, #100]	; (801b194 <Genesis_WriteBoardBits+0x74>)
}

void Genesis_WriteBoardBits(u8 board){
    board &= 0x03;
    MIOS32_IRQ_Disable(); //Turn off interrupts
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs (in case not already)
 801b12e:	681a      	ldr	r2, [r3, #0]
 801b130:	b290      	uxth	r0, r2
 801b132:	6018      	str	r0, [r3, #0]
    u32 porte = GPIOE->ODR;
    porte &= 0xFFFF000B; //Mask out the things we will set
    u32 a = genesis[board].board.writebits;
 801b134:	20da      	movs	r0, #218	; 0xda

void Genesis_WriteBoardBits(u8 board){
    board &= 0x03;
    MIOS32_IRQ_Disable(); //Turn off interrupts
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs (in case not already)
    u32 porte = GPIOE->ODR;
 801b136:	695a      	ldr	r2, [r3, #20]
    porte &= 0xFFFF000B; //Mask out the things we will set
    u32 a = genesis[board].board.writebits;
 801b138:	fb00 1004 	mla	r0, r0, r4, r1
void Genesis_WriteBoardBits(u8 board){
    board &= 0x03;
    MIOS32_IRQ_Disable(); //Turn off interrupts
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs (in case not already)
    u32 porte = GPIOE->ODR;
    porte &= 0xFFFF000B; //Mask out the things we will set
 801b13c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
    u32 a = genesis[board].board.writebits;
 801b140:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
void Genesis_WriteBoardBits(u8 board){
    board &= 0x03;
    MIOS32_IRQ_Disable(); //Turn off interrupts
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs (in case not already)
    u32 porte = GPIOE->ODR;
    porte &= 0xFFFF000B; //Mask out the things we will set
 801b144:	f022 00f4 	bic.w	r0, r2, #244	; 0xf4
    u32 a = genesis[board].board.writebits;
    a <<= 2; //Make room for board number
    a |= board;
 801b148:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
    a <<= 6; //Move into place
    a |= 0x30; //A2 = 1 for PSG write, A1 = 1 for board bits, A0 = -
 801b14c:	f040 0130 	orr.w	r1, r0, #48	; 0x30
    porte |= a; //Write to our temp copy
 801b150:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
    GPIOE->ODR = porte; //Write
 801b154:	615c      	str	r4, [r3, #20]
    GPIOE->MODER |= 0x55550000; //Set data pins to outputs
 801b156:	681a      	ldr	r2, [r3, #0]
 801b158:	f042 40aa 	orr.w	r0, r2, #1426063360	; 0x55000000
 801b15c:	f440 01aa 	orr.w	r1, r0, #5570560	; 0x550000
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
 801b160:	4a0d      	ldr	r2, [pc, #52]	; (801b198 <Genesis_WriteBoardBits+0x78>)
    a |= board;
    a <<= 6; //Move into place
    a |= 0x30; //A2 = 1 for PSG write, A1 = 1 for board bits, A0 = -
    porte |= a; //Write to our temp copy
    GPIOE->ODR = porte; //Write
    GPIOE->MODER |= 0x55550000; //Set data pins to outputs
 801b162:	6019      	str	r1, [r3, #0]
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
 801b164:	6953      	ldr	r3, [r2, #20]
 801b166:	f423 4020 	bic.w	r0, r3, #40960	; 0xa000
 801b16a:	6150      	str	r0, [r2, #20]
    GENESIS_PSG_WRITEWAIT; //Wait for the glue logic to catch up
 801b16c:	2300      	movs	r3, #0
 801b16e:	3301      	adds	r3, #1
 801b170:	2b07      	cmp	r3, #7
 801b172:	d9fc      	bls.n	801b16e <Genesis_WriteBoardBits+0x4e>
 801b174:	4909      	ldr	r1, [pc, #36]	; (801b19c <Genesis_WriteBoardBits+0x7c>)
 801b176:	600b      	str	r3, [r1, #0]
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
 801b178:	6950      	ldr	r0, [r2, #20]
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs
 801b17a:	4905      	ldr	r1, [pc, #20]	; (801b190 <Genesis_WriteBoardBits+0x70>)
    porte |= a; //Write to our temp copy
    GPIOE->ODR = porte; //Write
    GPIOE->MODER |= 0x55550000; //Set data pins to outputs
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
    GENESIS_PSG_WRITEWAIT; //Wait for the glue logic to catch up
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
 801b17c:	f440 4320 	orr.w	r3, r0, #40960	; 0xa000
 801b180:	6153      	str	r3, [r2, #20]
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs
 801b182:	680a      	ldr	r2, [r1, #0]
 801b184:	b290      	uxth	r0, r2
 801b186:	6008      	str	r0, [r1, #0]
    MIOS32_IRQ_Enable(); //Turn on interrupts
}
 801b188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GPIOE->MODER |= 0x55550000; //Set data pins to outputs
    GPIOC->ODR &= 0xFFFF5FFF; //Write /CS and /WR low
    GENESIS_PSG_WRITEWAIT; //Wait for the glue logic to catch up
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs
    MIOS32_IRQ_Enable(); //Turn on interrupts
 801b18c:	f7f7 bd1c 	b.w	8012bc8 <MIOS32_IRQ_Enable>
 801b190:	40021000 	.word	0x40021000
 801b194:	20011bb4 	.word	0x20011bb4
 801b198:	40020800 	.word	0x40020800
 801b19c:	20011bb0 	.word	0x20011bb0

0801b1a0 <Genesis_Reset>:
}

void Genesis_Reset(u8 board){
 801b1a0:	b570      	push	{r4, r5, r6, lr}
 801b1a2:	21da      	movs	r1, #218	; 0xda
    board &= 0x03;
 801b1a4:	f000 0403 	and.w	r4, r0, #3
    GPIOC->ODR |= 0x0000A000; //Write /CS and /WR high
    GPIOE->MODER &= 0x0000FFFF; //Set data pins to inputs
    MIOS32_IRQ_Enable(); //Turn on interrupts
}

void Genesis_Reset(u8 board){
 801b1a8:	4d41      	ldr	r5, [pc, #260]	; (801b2b0 <Genesis_Reset+0x110>)
 801b1aa:	fb14 f001 	smulbb	r0, r4, r1
 801b1ae:	1946      	adds	r6, r0, r5
 801b1b0:	2300      	movs	r3, #0
    board &= 0x03;
    //Clear internal state
    u8 i;
    for(i=0; i<154; i++){
        genesis[board].ALL[i] = 0;
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	54f2      	strb	r2, [r6, r3]
 801b1b6:	3301      	adds	r3, #1

void Genesis_Reset(u8 board){
    board &= 0x03;
    //Clear internal state
    u8 i;
    for(i=0; i<154; i++){
 801b1b8:	2b9a      	cmp	r3, #154	; 0x9a
 801b1ba:	d1fa      	bne.n	801b1b2 <Genesis_Reset+0x12>
        genesis[board].ALL[i] = 0;
    }
    for(i=0; i<6; i++){
        genesis[board].opn2.chan[i].lfooutreg = 0xE0; //Output bits initialized to 1
 801b1bc:	21da      	movs	r1, #218	; 0xda
 801b1be:	fb01 5504 	mla	r5, r1, r4, r5
 801b1c2:	26e0      	movs	r6, #224	; 0xe0
    }
    genesis[board].board.test_dir = 1;
 801b1c4:	f895 00d8 	ldrb.w	r0, [r5, #216]	; 0xd8
    u8 i;
    for(i=0; i<154; i++){
        genesis[board].ALL[i] = 0;
    }
    for(i=0; i<6; i++){
        genesis[board].opn2.chan[i].lfooutreg = 0xE0; //Output bits initialized to 1
 801b1c8:	74ee      	strb	r6, [r5, #19]
    }
    genesis[board].board.test_dir = 1;
    //Do chip reset
    genesis[board].board.reset = 0;
 801b1ca:	f040 0320 	orr.w	r3, r0, #32
 801b1ce:	f362 13c7 	bfi	r3, r2, #7, #1
 801b1d2:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
    Genesis_WriteBoardBits(board);
 801b1d6:	4620      	mov	r0, r4
    u8 i;
    for(i=0; i<154; i++){
        genesis[board].ALL[i] = 0;
    }
    for(i=0; i<6; i++){
        genesis[board].opn2.chan[i].lfooutreg = 0xE0; //Output bits initialized to 1
 801b1d8:	f885 6033 	strb.w	r6, [r5, #51]	; 0x33
 801b1dc:	f885 6053 	strb.w	r6, [r5, #83]	; 0x53
 801b1e0:	f885 6073 	strb.w	r6, [r5, #115]	; 0x73
 801b1e4:	f885 6093 	strb.w	r6, [r5, #147]	; 0x93
 801b1e8:	f885 60b3 	strb.w	r6, [r5, #179]	; 0xb3
    }
    genesis[board].board.test_dir = 1;
    //Do chip reset
    genesis[board].board.reset = 0;
    Genesis_WriteBoardBits(board);
 801b1ec:	f7ff ff98 	bl	801b120 <Genesis_WriteBoardBits>
    MIOS32_DELAY_Wait_uS(GENESIS_RESETTIMEOUTUS);
 801b1f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b1f4:	f7f8 fb8e 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    genesis[board].board.reset = 1;
 801b1f8:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
 801b1fc:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 801b200:	f885 10d8 	strb.w	r1, [r5, #216]	; 0xd8
    Genesis_WriteBoardBits(board);
 801b204:	4620      	mov	r0, r4
 801b206:	f7ff ff8b 	bl	801b120 <Genesis_WriteBoardBits>
    MIOS32_DELAY_Wait_uS(GENESIS_RESETTIMEOUTUS);
 801b20a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b20e:	f7f8 fb81 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    //Reset the PSG (turn off all voices and set all frequencies to lowest)
    Genesis_PSGWrite(board, 0b10001111); MIOS32_DELAY_Wait_uS(20);
 801b212:	218f      	movs	r1, #143	; 0x8f
 801b214:	4620      	mov	r0, r4
 801b216:	f7ff fef5 	bl	801b004 <Genesis_PSGWrite>
 801b21a:	2014      	movs	r0, #20
 801b21c:	f7f8 fb7a 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    Genesis_PSGWrite(board, 0b00111111); MIOS32_DELAY_Wait_uS(20);
 801b220:	213f      	movs	r1, #63	; 0x3f
 801b222:	4620      	mov	r0, r4
 801b224:	f7ff feee 	bl	801b004 <Genesis_PSGWrite>
 801b228:	2014      	movs	r0, #20
 801b22a:	f7f8 fb73 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    Genesis_PSGWrite(board, 0b10011111); MIOS32_DELAY_Wait_uS(20);
 801b22e:	219f      	movs	r1, #159	; 0x9f
 801b230:	4620      	mov	r0, r4
 801b232:	f7ff fee7 	bl	801b004 <Genesis_PSGWrite>
 801b236:	2014      	movs	r0, #20
 801b238:	f7f8 fb6c 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    Genesis_PSGWrite(board, 0b10101111); MIOS32_DELAY_Wait_uS(20);
 801b23c:	21af      	movs	r1, #175	; 0xaf
 801b23e:	4620      	mov	r0, r4
 801b240:	f7ff fee0 	bl	801b004 <Genesis_PSGWrite>
 801b244:	2014      	movs	r0, #20
 801b246:	f7f8 fb65 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    Genesis_PSGWrite(board, 0b00111111); MIOS32_DELAY_Wait_uS(20);
 801b24a:	213f      	movs	r1, #63	; 0x3f
 801b24c:	4620      	mov	r0, r4
 801b24e:	f7ff fed9 	bl	801b004 <Genesis_PSGWrite>
 801b252:	2014      	movs	r0, #20
 801b254:	f7f8 fb5e 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    Genesis_PSGWrite(board, 0b10111111); MIOS32_DELAY_Wait_uS(20);
 801b258:	21bf      	movs	r1, #191	; 0xbf
 801b25a:	4620      	mov	r0, r4
 801b25c:	f7ff fed2 	bl	801b004 <Genesis_PSGWrite>
 801b260:	2014      	movs	r0, #20
 801b262:	f7f8 fb57 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    Genesis_PSGWrite(board, 0b11001111); MIOS32_DELAY_Wait_uS(20);
 801b266:	4620      	mov	r0, r4
 801b268:	21cf      	movs	r1, #207	; 0xcf
 801b26a:	f7ff fecb 	bl	801b004 <Genesis_PSGWrite>
 801b26e:	2014      	movs	r0, #20
 801b270:	f7f8 fb50 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    Genesis_PSGWrite(board, 0b00111111); MIOS32_DELAY_Wait_uS(20);
 801b274:	213f      	movs	r1, #63	; 0x3f
 801b276:	4620      	mov	r0, r4
 801b278:	f7ff fec4 	bl	801b004 <Genesis_PSGWrite>
 801b27c:	2014      	movs	r0, #20
 801b27e:	f7f8 fb49 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    Genesis_PSGWrite(board, 0b11011111); MIOS32_DELAY_Wait_uS(20);
 801b282:	21df      	movs	r1, #223	; 0xdf
 801b284:	4620      	mov	r0, r4
 801b286:	f7ff febd 	bl	801b004 <Genesis_PSGWrite>
 801b28a:	2014      	movs	r0, #20
 801b28c:	f7f8 fb42 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    Genesis_PSGWrite(board, 0b11100000); MIOS32_DELAY_Wait_uS(20);
 801b290:	4631      	mov	r1, r6
 801b292:	4620      	mov	r0, r4
 801b294:	f7ff feb6 	bl	801b004 <Genesis_PSGWrite>
 801b298:	2014      	movs	r0, #20
 801b29a:	f7f8 fb3b 	bl	8013914 <MIOS32_DELAY_Wait_uS>
    Genesis_PSGWrite(board, 0b11111111); MIOS32_DELAY_Wait_uS(20);
 801b29e:	4620      	mov	r0, r4
 801b2a0:	21ff      	movs	r1, #255	; 0xff
 801b2a2:	f7ff feaf 	bl	801b004 <Genesis_PSGWrite>
 801b2a6:	2014      	movs	r0, #20
}
 801b2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Genesis_PSGWrite(board, 0b10111111); MIOS32_DELAY_Wait_uS(20);
    Genesis_PSGWrite(board, 0b11001111); MIOS32_DELAY_Wait_uS(20);
    Genesis_PSGWrite(board, 0b00111111); MIOS32_DELAY_Wait_uS(20);
    Genesis_PSGWrite(board, 0b11011111); MIOS32_DELAY_Wait_uS(20);
    Genesis_PSGWrite(board, 0b11100000); MIOS32_DELAY_Wait_uS(20);
    Genesis_PSGWrite(board, 0b11111111); MIOS32_DELAY_Wait_uS(20);
 801b2ac:	f7f8 bb32 	b.w	8013914 <MIOS32_DELAY_Wait_uS>
 801b2b0:	20011bb4 	.word	0x20011bb4

0801b2b4 <Genesis_Init>:
    A4                  J10B:D15        PE7
    Registers MODER, OSPEEDR, and PUPDR have two bits per I/O pin
    Register OTYPER has one (lower 16 bits only)
    */
    //Port E
    GPIOE->MODER &= 0x000000CF;     //Set 15 downto 4 & 2 to inputs
 801b2b4:	4b1a      	ldr	r3, [pc, #104]	; (801b320 <Genesis_Init+0x6c>)
 801b2b6:	681a      	ldr	r2, [r3, #0]
 801b2b8:	f002 00cf 	and.w	r0, r2, #207	; 0xcf
 801b2bc:	6018      	str	r0, [r3, #0]
    GPIOE->MODER |= 0x00005510;     //Set 7 downto 4 & 2 to outputs (don't care about initial state)
 801b2be:	6819      	ldr	r1, [r3, #0]
 801b2c0:	f441 42aa 	orr.w	r2, r1, #21760	; 0x5500
 801b2c4:	f042 0010 	orr.w	r0, r2, #16
 801b2c8:	6018      	str	r0, [r3, #0]
    GPIOE->OTYPER &= 0xFFFF000B;    //Set all to push-pull (D7:0 will be when outputs)
 801b2ca:	6859      	ldr	r1, [r3, #4]
 801b2cc:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 801b2d0:	f022 00f4 	bic.w	r0, r2, #244	; 0xf4
 801b2d4:	6058      	str	r0, [r3, #4]
    GPIOE->OSPEEDR |= 0xFFFFFF30;   //50 MHz GPIO speed (max)
 801b2d6:	6899      	ldr	r1, [r3, #8]
 801b2d8:	f061 02cf 	orn	r2, r1, #207	; 0xcf
 801b2dc:	609a      	str	r2, [r3, #8]
    GPIOE->PUPDR &= 0x000000CF;     //Turn off all pull-ups
 801b2de:	68d8      	ldr	r0, [r3, #12]
 801b2e0:	f000 01cf 	and.w	r1, r0, #207	; 0xcf
 801b2e4:	60d9      	str	r1, [r3, #12]
    //Port C
    GPIOC->ODR |= 0x0000E000;       //Set /CS, /RD, /WR all to 1
 801b2e6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801b2ea:	695a      	ldr	r2, [r3, #20]
 801b2ec:	f442 4060 	orr.w	r0, r2, #57344	; 0xe000
 801b2f0:	6158      	str	r0, [r3, #20]
    GPIOC->MODER &= 0x03FFFFFF;     //Set 15 downto 13 to inputs
 801b2f2:	6819      	ldr	r1, [r3, #0]
 801b2f4:	f021 427c 	bic.w	r2, r1, #4227858432	; 0xfc000000
 801b2f8:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= 0x54000000;     //Set 15 downto 13 to outputs
 801b2fa:	6818      	ldr	r0, [r3, #0]
 801b2fc:	f040 41a8 	orr.w	r1, r0, #1409286144	; 0x54000000
 801b300:	6019      	str	r1, [r3, #0]
    GPIOC->OTYPER &= 0xFFFF1FFF;    //Set all to push-pull
 801b302:	685a      	ldr	r2, [r3, #4]
 801b304:	f422 4060 	bic.w	r0, r2, #57344	; 0xe000
 801b308:	6058      	str	r0, [r3, #4]
    GPIOC->OSPEEDR |= 0xFC000000;   //GOTTA GO FAST
 801b30a:	6899      	ldr	r1, [r3, #8]
 801b30c:	f041 427c 	orr.w	r2, r1, #4227858432	; 0xfc000000
 801b310:	609a      	str	r2, [r3, #8]
    GPIOC->PUPDR &= 0x03FFFFFF;     //Turn off all pull-ups
 801b312:	68d8      	ldr	r0, [r3, #12]
 801b314:	f020 417c 	bic.w	r1, r0, #4227858432	; 0xfc000000
    //Reset all (also resets internal chip state)
    u8 i;
    for(i=0; i<GENESIS_COUNT; i++){
        Genesis_Reset(i);
 801b318:	2000      	movs	r0, #0
    GPIOC->ODR |= 0x0000E000;       //Set /CS, /RD, /WR all to 1
    GPIOC->MODER &= 0x03FFFFFF;     //Set 15 downto 13 to inputs
    GPIOC->MODER |= 0x54000000;     //Set 15 downto 13 to outputs
    GPIOC->OTYPER &= 0xFFFF1FFF;    //Set all to push-pull
    GPIOC->OSPEEDR |= 0xFC000000;   //GOTTA GO FAST
    GPIOC->PUPDR &= 0x03FFFFFF;     //Turn off all pull-ups
 801b31a:	60d9      	str	r1, [r3, #12]
    //Reset all (also resets internal chip state)
    u8 i;
    for(i=0; i<GENESIS_COUNT; i++){
        Genesis_Reset(i);
 801b31c:	f7ff bf40 	b.w	801b1a0 <Genesis_Reset>
 801b320:	40021000 	.word	0x40021000

0801b324 <APP_Init>:
// This hook is called after startup to initialize the application
// It's delcared as "extern C" so that the MIOS32 programming model can
// access this function - you can safely write your own functions in C++
// In other words: there is no need to add "extern C" to your own functions!
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_Init(void){
 801b324:	b508      	push	{r3, lr}
    DEBUGVAL = 117;
 801b326:	4b08      	ldr	r3, [pc, #32]	; (801b348 <APP_Init+0x24>)
 801b328:	2275      	movs	r2, #117	; 0x75
    // initialize all LEDs
    MIOS32_BOARD_LED_Init(0xffffffff);
 801b32a:	f04f 30ff 	mov.w	r0, #4294967295
// It's delcared as "extern C" so that the MIOS32 programming model can
// access this function - you can safely write your own functions in C++
// In other words: there is no need to add "extern C" to your own functions!
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_Init(void){
    DEBUGVAL = 117;
 801b32e:	601a      	str	r2, [r3, #0]
    // initialize all LEDs
    MIOS32_BOARD_LED_Init(0xffffffff);
 801b330:	f7f8 f8e4 	bl	80134fc <MIOS32_BOARD_LED_Init>

    // initialize SD card
    FILE_Init(0);
 801b334:	2000      	movs	r0, #0
 801b336:	f7ff fc99 	bl	801ac6c <FILE_Init>

    //Initialize MBHP_Genesis module
    Genesis_Init();
 801b33a:	f7ff ffbb 	bl	801b2b4 <Genesis_Init>

    //Initialize VGM Player component
    VgmPlayer_Init();
}
 801b33e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    //Initialize MBHP_Genesis module
    Genesis_Init();

    //Initialize VGM Player component
    VgmPlayer_Init();
 801b342:	f000 bca9 	b.w	801bc98 <VgmPlayer_Init()>
 801b346:	bf00      	nop
 801b348:	20000a68 	.word	0x20000a68

0801b34c <APP_Background>:
    static VgmSourceStream* vgms = NULL;
    static VgmHead* vgmh = NULL;
    static s32 res = 0;
    static u8 gotsdcard = 0;
    
    MIOS32_BOARD_LED_Set(0b1000, 0b1000);
 801b34c:	2008      	movs	r0, #8
 801b34e:	4601      	mov	r1, r0

/////////////////////////////////////////////////////////////////////////////
// This task is running endless in background
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_Background(void)
{
 801b350:	b570      	push	{r4, r5, r6, lr}
    static VgmSourceStream* vgms = NULL;
    static VgmHead* vgmh = NULL;
    static s32 res = 0;
    static u8 gotsdcard = 0;
    
    MIOS32_BOARD_LED_Set(0b1000, 0b1000);
 801b352:	f7f8 f8ff 	bl	8013554 <MIOS32_BOARD_LED_Set>
    
    if(count % 500000 == 0){
 801b356:	4b2d      	ldr	r3, [pc, #180]	; (801b40c <APP_Background+0xc0>)
 801b358:	482d      	ldr	r0, [pc, #180]	; (801b410 <APP_Background+0xc4>)
 801b35a:	681a      	ldr	r2, [r3, #0]
 801b35c:	fbb2 f1f0 	udiv	r1, r2, r0
 801b360:	fb00 2311 	mls	r3, r0, r1, r2
 801b364:	2b00      	cmp	r3, #0
 801b366:	d147      	bne.n	801b3f8 <APP_Background+0xac>
        if(!gotsdcard){
 801b368:	4c2a      	ldr	r4, [pc, #168]	; (801b414 <APP_Background+0xc8>)
 801b36a:	7822      	ldrb	r2, [r4, #0]
 801b36c:	b93a      	cbnz	r2, 801b37e <APP_Background+0x32>
            res = FILE_CheckSDCard();
 801b36e:	f7ff fc9f 	bl	801acb0 <FILE_CheckSDCard>
 801b372:	4929      	ldr	r1, [pc, #164]	; (801b418 <APP_Background+0xcc>)
            if(res == 3){
 801b374:	2803      	cmp	r0, #3
    
    MIOS32_BOARD_LED_Set(0b1000, 0b1000);
    
    if(count % 500000 == 0){
        if(!gotsdcard){
            res = FILE_CheckSDCard();
 801b376:	6008      	str	r0, [r1, #0]
            if(res == 3){
 801b378:	d101      	bne.n	801b37e <APP_Background+0x32>
                gotsdcard = 1;
 801b37a:	2001      	movs	r0, #1
 801b37c:	7020      	strb	r0, [r4, #0]
                //FILE_PrintSDCardInfos();
            }
        }
        if(gotsdcard){
 801b37e:	7823      	ldrb	r3, [r4, #0]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d039      	beq.n	801b3f8 <APP_Background+0xac>
            if(vgms == NULL){
 801b384:	4c25      	ldr	r4, [pc, #148]	; (801b41c <APP_Background+0xd0>)
 801b386:	6822      	ldr	r2, [r4, #0]
 801b388:	2a00      	cmp	r2, #0
 801b38a:	d135      	bne.n	801b3f8 <APP_Background+0xac>
                vgms = new VgmSourceStream();
 801b38c:	2058      	movs	r0, #88	; 0x58
 801b38e:	f000 fc93 	bl	801bcb8 <operator new(unsigned int)>
 801b392:	4605      	mov	r5, r0
 801b394:	f000 fa5f 	bl	801b856 <VgmSourceStream::VgmSourceStream()>
                char* filename = new char[50];
 801b398:	2032      	movs	r0, #50	; 0x32
                //FILE_PrintSDCardInfos();
            }
        }
        if(gotsdcard){
            if(vgms == NULL){
                vgms = new VgmSourceStream();
 801b39a:	6025      	str	r5, [r4, #0]
                char* filename = new char[50];
 801b39c:	f000 fc94 	bl	801bcc8 <operator new[](unsigned int)>
                sprintf(filename, "RKACREDS.VGM");
 801b3a0:	491f      	ldr	r1, [pc, #124]	; (801b420 <APP_Background+0xd4>)
            }
        }
        if(gotsdcard){
            if(vgms == NULL){
                vgms = new VgmSourceStream();
                char* filename = new char[50];
 801b3a2:	4605      	mov	r5, r0
                sprintf(filename, "RKACREDS.VGM");
 801b3a4:	f000 fce3 	bl	801bd6e <strcpy>
                //res = FILE_FileExists(filename);
                //DBG("File existence: %d", res);
                res = vgms->startStream(filename);
 801b3a8:	4629      	mov	r1, r5
 801b3aa:	6820      	ldr	r0, [r4, #0]
 801b3ac:	f000 fa6a 	bl	801b884 <VgmSourceStream::startStream(char*)>
 801b3b0:	4919      	ldr	r1, [pc, #100]	; (801b418 <APP_Background+0xcc>)
                if(res >= 0){
 801b3b2:	2800      	cmp	r0, #0
                vgms = new VgmSourceStream();
                char* filename = new char[50];
                sprintf(filename, "RKACREDS.VGM");
                //res = FILE_FileExists(filename);
                //DBG("File existence: %d", res);
                res = vgms->startStream(filename);
 801b3b4:	6008      	str	r0, [r1, #0]
                if(res >= 0){
 801b3b6:	db18      	blt.n	801b3ea <APP_Background+0x9e>
                    DBG("Loaded VGM!");
 801b3b8:	481a      	ldr	r0, [pc, #104]	; (801b424 <APP_Background+0xd8>)
 801b3ba:	f7f6 faeb 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
                    vgms->readHeader();
 801b3be:	6820      	ldr	r0, [r4, #0]
 801b3c0:	f000 fb0f 	bl	801b9e2 <VgmSourceStream::readHeader()>
                    vgmh = new VgmHead(vgms);
 801b3c4:	202c      	movs	r0, #44	; 0x2c
 801b3c6:	f000 fc77 	bl	801bcb8 <operator new(unsigned int)>
 801b3ca:	6821      	ldr	r1, [r4, #0]
 801b3cc:	4c16      	ldr	r4, [pc, #88]	; (801b428 <APP_Background+0xdc>)
 801b3ce:	4606      	mov	r6, r0
 801b3d0:	f000 f836 	bl	801b440 <VgmHead::VgmHead(VgmSourceStream*)>
 801b3d4:	6026      	str	r6, [r4, #0]
                    vgmh->restart(VgmPlayerLL_GetVGMTime());
 801b3d6:	f7f4 fe13 	bl	8010000 <VgmPlayerLL_GetVGMTime>
 801b3da:	4601      	mov	r1, r0
 801b3dc:	4630      	mov	r0, r6
 801b3de:	f000 fa33 	bl	801b848 <VgmHead::restart(unsigned long)>
                    VgmPlayer_AddHead(vgmh);
 801b3e2:	6820      	ldr	r0, [r4, #0]
 801b3e4:	f000 fc4a 	bl	801bc7c <VgmPlayer_AddHead(VgmHead*)>
 801b3e8:	e002      	b.n	801b3f0 <APP_Background+0xa4>
                }else{
                    DBG("Failed to load VGM");
 801b3ea:	4810      	ldr	r0, [pc, #64]	; (801b42c <APP_Background+0xe0>)
 801b3ec:	f7f6 fad2 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
                }
                delete[] filename;
 801b3f0:	b115      	cbz	r5, 801b3f8 <APP_Background+0xac>
 801b3f2:	4628      	mov	r0, r5
 801b3f4:	f000 fc6a 	bl	801bccc <operator delete[](void*)>
    MIOS32_DELAY_Wait_uS(0xFF00);
    MIOS32_DELAY_Wait_uS(0xFF00);
    */
    //Flash LEDs
    //MIOS32_BOARD_LED_Set(0xF, ((count >> 12) & 0xF));
    ++count;
 801b3f8:	4804      	ldr	r0, [pc, #16]	; (801b40c <APP_Background+0xc0>)
 801b3fa:	6803      	ldr	r3, [r0, #0]
 801b3fc:	1c5a      	adds	r2, r3, #1
 801b3fe:	6002      	str	r2, [r0, #0]
    MIOS32_BOARD_LED_Set(0b1000, 0b0000);
 801b400:	2100      	movs	r1, #0
 801b402:	2008      	movs	r0, #8
}
 801b404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MIOS32_DELAY_Wait_uS(0xFF00);
    */
    //Flash LEDs
    //MIOS32_BOARD_LED_Set(0xF, ((count >> 12) & 0xF));
    ++count;
    MIOS32_BOARD_LED_Set(0b1000, 0b0000);
 801b408:	f7f8 b8a4 	b.w	8013554 <MIOS32_BOARD_LED_Set>
 801b40c:	20000a64 	.word	0x20000a64
 801b410:	0007a120 	.word	0x0007a120
 801b414:	20000a70 	.word	0x20000a70
 801b418:	20000a74 	.word	0x20000a74
 801b41c:	20000a6c 	.word	0x20000a6c
 801b420:	0801d646 	.word	0x0801d646
 801b424:	0801d653 	.word	0x0801d653
 801b428:	20000a60 	.word	0x20000a60
 801b42c:	0801d65f 	.word	0x0801d65f

0801b430 <APP_Tick>:
// more than 300 uS to ensure the responsiveness of buttons, encoders, pots.
// Alternatively you could create a dedicated task for application specific
// jobs as explained in $MIOS32_PATH/apps/tutorials/006_rtos_tasks
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_Tick(void)
{
 801b430:	4770      	bx	lr

0801b432 <APP_MIDI_Tick>:
// This hook is called each mS from the MIDI task which checks for incoming
// MIDI events. You could add more MIDI related jobs here, but they shouldn't
// consume more than 300 uS to ensure the responsiveness of incoming MIDI.
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_MIDI_Tick(void)
{
 801b432:	4770      	bx	lr

0801b434 <APP_MIDI_NotifyPackage>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called when a MIDI package has been received
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_MIDI_NotifyPackage(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 801b434:	4770      	bx	lr

0801b436 <APP_SRIO_ServicePrepare>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called before the shift register chain is scanned
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_SRIO_ServicePrepare(void)
{
 801b436:	4770      	bx	lr

0801b438 <APP_SRIO_ServiceFinish>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called after the shift register chain has been scanned
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_SRIO_ServiceFinish(void)
{
 801b438:	4770      	bx	lr

0801b43a <APP_DIN_NotifyToggle>:
/////////////////////////////////////////////////////////////////////////////
// This hook is called when a button has been toggled
// pin_value is 1 when button released, and 0 when button pressed
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_DIN_NotifyToggle(u32 pin, u32 pin_value)
{
 801b43a:	4770      	bx	lr

0801b43c <APP_ENC_NotifyChange>:
// This hook is called when an encoder has been moved
// incrementer is positive when encoder has been turned clockwise, else
// it is negative
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_ENC_NotifyChange(u32 encoder, s32 incrementer)
{
 801b43c:	4770      	bx	lr

0801b43e <APP_AIN_NotifyChange>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called when a pot has been moved
/////////////////////////////////////////////////////////////////////////////
extern "C" void APP_AIN_NotifyChange(u32 pin, u32 pin_value)
{
 801b43e:	4770      	bx	lr

0801b440 <VgmHead::VgmHead(VgmSourceStream*)>:
#include <mios32.h>
#include "vgmhead.h"


VgmHead::VgmHead(VgmSourceStream* src){
    source = src;
 801b440:	6001      	str	r1, [r0, #0]
    srcaddr = 0;
    isdone = false;
    delay62 = 735;
 801b442:	f240 21df 	movw	r1, #735	; 0x2df
 801b446:	6201      	str	r1, [r0, #32]
    delay63 = 882;
 801b448:	3193      	adds	r1, #147	; 0x93
#include "vgmhead.h"


VgmHead::VgmHead(VgmSourceStream* src){
    source = src;
    srcaddr = 0;
 801b44a:	2200      	movs	r2, #0
    isdone = false;
    delay62 = 735;
    delay63 = 882;
 801b44c:	6241      	str	r1, [r0, #36]	; 0x24
    opn2mult = ((7670454 << 8) / 500000); //0x1000; //TODO adjust in real time
 801b44e:	f640 7157 	movw	r1, #3927	; 0xf57
#include "vgmhead.h"


VgmHead::VgmHead(VgmSourceStream* src){
    source = src;
    srcaddr = 0;
 801b452:	6042      	str	r2, [r0, #4]
    isdone = false;
 801b454:	77c2      	strb	r2, [r0, #31]
    delay62 = 735;
    delay63 = 882;
    opn2mult = ((7670454 << 8) / 500000); //0x1000; //TODO adjust in real time
 801b456:	6281      	str	r1, [r0, #40]	; 0x28
    subbufferlen = 0;
 801b458:	7702      	strb	r2, [r0, #28]
}
 801b45a:	4770      	bx	lr

0801b45c <fixOPN2Frequency(ChipWriteCmd*, unsigned long)>:

void fixOPN2Frequency(ChipWriteCmd* writecmd, u32 opn2mult){
    u8 block; u32 freq;
    if(!(writecmd->addr & 0x04)){
 801b45c:	7843      	ldrb	r3, [r0, #1]
 801b45e:	f003 0204 	and.w	r2, r3, #4
    delay63 = 882;
    opn2mult = ((7670454 << 8) / 500000); //0x1000; //TODO adjust in real time
    subbufferlen = 0;
}

void fixOPN2Frequency(ChipWriteCmd* writecmd, u32 opn2mult){
 801b462:	b510      	push	{r4, lr}
    u8 block; u32 freq;
    if(!(writecmd->addr & 0x04)){
 801b464:	b2d4      	uxtb	r4, r2
 801b466:	b934      	cbnz	r4, 801b476 <fixOPN2Frequency(ChipWriteCmd*, unsigned long)+0x1a>
        //The VGM wrote the LSB first, swap them
        writecmd->addr |= 0x04;
        block = writecmd->data;
 801b468:	7884      	ldrb	r4, [r0, #2]
        writecmd->data = writecmd->data2;
 801b46a:	78c2      	ldrb	r2, [r0, #3]
        writecmd->data2 = block;
 801b46c:	70c4      	strb	r4, [r0, #3]

void fixOPN2Frequency(ChipWriteCmd* writecmd, u32 opn2mult){
    u8 block; u32 freq;
    if(!(writecmd->addr & 0x04)){
        //The VGM wrote the LSB first, swap them
        writecmd->addr |= 0x04;
 801b46e:	f043 0304 	orr.w	r3, r3, #4
 801b472:	7043      	strb	r3, [r0, #1]
        block = writecmd->data;
        writecmd->data = writecmd->data2;
 801b474:	7082      	strb	r2, [r0, #2]
        writecmd->data2 = block;
    }
    block = (writecmd->data >> 3) & 0x07;
 801b476:	7883      	ldrb	r3, [r0, #2]
    freq = ((u32)(writecmd->data & 0x07) << 8) | writecmd->data2; //Up to 11 bits set
 801b478:	78c2      	ldrb	r2, [r0, #3]
 801b47a:	f003 0407 	and.w	r4, r3, #7
 801b47e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
        writecmd->addr |= 0x04;
        block = writecmd->data;
        writecmd->data = writecmd->data2;
        writecmd->data2 = block;
    }
    block = (writecmd->data >> 3) & 0x07;
 801b482:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    freq = ((u32)(writecmd->data & 0x07) << 8) | writecmd->data2; //Up to 11 bits set
    freq <<= block; //Up to 18 bits set
 801b486:	fa02 f203 	lsl.w	r2, r2, r3
    freq *= opn2mult; //If unity (0x1000), up to 30 bits set (29 downto 0)
 801b48a:	4351      	muls	r1, r2
    //Check for overflow
    if(freq & 0xC0000000){
        freq = 0x3FFFFFFF;
 801b48c:	f011 4f40 	tst.w	r1, #3221225472	; 0xc0000000
 801b490:	bf18      	it	ne
 801b492:	f06f 4140 	mvnne.w	r1, #3221225472	; 0xc0000000
 801b496:	2308      	movs	r3, #8
    }
    //To floating point: find most-significant 1
    for(block=8; block>1; --block){
        if(freq & 0x20000000) break;
 801b498:	008a      	lsls	r2, r1, #2
 801b49a:	d404      	bmi.n	801b4a6 <fixOPN2Frequency(ChipWriteCmd*, unsigned long)+0x4a>
    //Check for overflow
    if(freq & 0xC0000000){
        freq = 0x3FFFFFFF;
    }
    //To floating point: find most-significant 1
    for(block=8; block>1; --block){
 801b49c:	3b01      	subs	r3, #1
 801b49e:	b2db      	uxtb	r3, r3
        if(freq & 0x20000000) break;
        freq <<= 1;
 801b4a0:	0049      	lsls	r1, r1, #1
    //Check for overflow
    if(freq & 0xC0000000){
        freq = 0x3FFFFFFF;
    }
    //To floating point: find most-significant 1
    for(block=8; block>1; --block){
 801b4a2:	2b01      	cmp	r3, #1
 801b4a4:	d1f8      	bne.n	801b498 <fixOPN2Frequency(ChipWriteCmd*, unsigned long)+0x3c>
        if(freq & 0x20000000) break;
        freq <<= 1;
    }
    --block;
 801b4a6:	3b01      	subs	r3, #1
    freq >>= 19; //Previously up to 30 bits set, now up to 11 bits set
    writecmd->data = (freq >> 8) | (block << 3);
 801b4a8:	00db      	lsls	r3, r3, #3
    for(block=8; block>1; --block){
        if(freq & 0x20000000) break;
        freq <<= 1;
    }
    --block;
    freq >>= 19; //Previously up to 30 bits set, now up to 11 bits set
 801b4aa:	0cca      	lsrs	r2, r1, #19
    writecmd->data = (freq >> 8) | (block << 3);
 801b4ac:	ea43 61d1 	orr.w	r1, r3, r1, lsr #27
 801b4b0:	7081      	strb	r1, [r0, #2]
    writecmd->data2 = (freq & 0xFF);
 801b4b2:	70c2      	strb	r2, [r0, #3]
 801b4b4:	bd10      	pop	{r4, pc}
	...

0801b4b8 <VgmHead::cmdNext(unsigned long)>:
}

void VgmHead::cmdNext(u32 vgm_time){
    u8 type;
    iswait = iswrite = false;
 801b4b8:	2300      	movs	r3, #0
    freq >>= 19; //Previously up to 30 bits set, now up to 11 bits set
    writecmd->data = (freq >> 8) | (block << 3);
    writecmd->data2 = (freq & 0xFF);
}

void VgmHead::cmdNext(u32 vgm_time){
 801b4ba:	b570      	push	{r4, r5, r6, lr}
 801b4bc:	4604      	mov	r4, r0
    u8 type;
    iswait = iswrite = false;
 801b4be:	7343      	strb	r3, [r0, #13]
 801b4c0:	7303      	strb	r3, [r0, #12]
    while(!(iswait || iswrite)){
 801b4c2:	7b20      	ldrb	r0, [r4, #12]
 801b4c4:	2800      	cmp	r0, #0
 801b4c6:	f040 81ba 	bne.w	801b83e <VgmHead::cmdNext(unsigned long)+0x386>
 801b4ca:	7b61      	ldrb	r1, [r4, #13]
 801b4cc:	2900      	cmp	r1, #0
 801b4ce:	f040 81b6 	bne.w	801b83e <VgmHead::cmdNext(unsigned long)+0x386>
        if(subbufferlen > 0){
 801b4d2:	7f23      	ldrb	r3, [r4, #28]
 801b4d4:	b14b      	cbz	r3, 801b4ea <VgmHead::cmdNext(unsigned long)+0x32>
            type = subbuffer[0];
            subbuffer[0] = subbuffer[1];
 801b4d6:	7e61      	ldrb	r1, [r4, #25]
            subbuffer[1] = subbuffer[2];
 801b4d8:	7ea2      	ldrb	r2, [r4, #26]
void VgmHead::cmdNext(u32 vgm_time){
    u8 type;
    iswait = iswrite = false;
    while(!(iswait || iswrite)){
        if(subbufferlen > 0){
            type = subbuffer[0];
 801b4da:	7e20      	ldrb	r0, [r4, #24]
            subbuffer[0] = subbuffer[1];
 801b4dc:	7621      	strb	r1, [r4, #24]
            subbuffer[1] = subbuffer[2];
            subbuffer[2] = subbuffer[3];
 801b4de:	7ee1      	ldrb	r1, [r4, #27]
    iswait = iswrite = false;
    while(!(iswait || iswrite)){
        if(subbufferlen > 0){
            type = subbuffer[0];
            subbuffer[0] = subbuffer[1];
            subbuffer[1] = subbuffer[2];
 801b4e0:	7662      	strb	r2, [r4, #25]
            subbuffer[2] = subbuffer[3];
            --subbufferlen;
 801b4e2:	3b01      	subs	r3, #1
    while(!(iswait || iswrite)){
        if(subbufferlen > 0){
            type = subbuffer[0];
            subbuffer[0] = subbuffer[1];
            subbuffer[1] = subbuffer[2];
            subbuffer[2] = subbuffer[3];
 801b4e4:	76a1      	strb	r1, [r4, #26]
            --subbufferlen;
 801b4e6:	7723      	strb	r3, [r4, #28]
 801b4e8:	e005      	b.n	801b4f6 <VgmHead::cmdNext(unsigned long)+0x3e>
        }else{
            type = source->getByte(srcaddr++);
 801b4ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b4ee:	1c4a      	adds	r2, r1, #1
 801b4f0:	6062      	str	r2, [r4, #4]
 801b4f2:	f000 f9f8 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
        }
        if(type == 0x50){
 801b4f6:	2850      	cmp	r0, #80	; 0x50
 801b4f8:	d10a      	bne.n	801b510 <VgmHead::cmdNext(unsigned long)+0x58>
            //PSG write
            iswrite = true;
            writecmd.cmd = type;
 801b4fa:	7420      	strb	r0, [r4, #16]
            writecmd.data = source->getByte(srcaddr++);
 801b4fc:	e894 0003 	ldmia.w	r4, {r0, r1}
        }else{
            type = source->getByte(srcaddr++);
        }
        if(type == 0x50){
            //PSG write
            iswrite = true;
 801b500:	2201      	movs	r2, #1
            writecmd.cmd = type;
            writecmd.data = source->getByte(srcaddr++);
 801b502:	188b      	adds	r3, r1, r2
        }else{
            type = source->getByte(srcaddr++);
        }
        if(type == 0x50){
            //PSG write
            iswrite = true;
 801b504:	7362      	strb	r2, [r4, #13]
            writecmd.cmd = type;
            writecmd.data = source->getByte(srcaddr++);
 801b506:	6063      	str	r3, [r4, #4]
 801b508:	f000 f9ed 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b50c:	74a0      	strb	r0, [r4, #18]
 801b50e:	e7d8      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
            //TODO also adjust frequency on PSG write
        }else if((type & 0xFE) == 0x52){
 801b510:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 801b514:	2a52      	cmp	r2, #82	; 0x52
 801b516:	d17d      	bne.n	801b614 <VgmHead::cmdNext(unsigned long)+0x15c>
            //OPN2 write
            iswrite = true;
            writecmd.cmd = type;
            if(subbufferlen > 0){
 801b518:	7f21      	ldrb	r1, [r4, #28]
            writecmd.data = source->getByte(srcaddr++);
            //TODO also adjust frequency on PSG write
        }else if((type & 0xFE) == 0x52){
            //OPN2 write
            iswrite = true;
            writecmd.cmd = type;
 801b51a:	7420      	strb	r0, [r4, #16]
            writecmd.cmd = type;
            writecmd.data = source->getByte(srcaddr++);
            //TODO also adjust frequency on PSG write
        }else if((type & 0xFE) == 0x52){
            //OPN2 write
            iswrite = true;
 801b51c:	2301      	movs	r3, #1
 801b51e:	7363      	strb	r3, [r4, #13]
            writecmd.cmd = type;
            if(subbufferlen > 0){
 801b520:	b131      	cbz	r1, 801b530 <VgmHead::cmdNext(unsigned long)+0x78>
                writecmd.addr = subbuffer[0];
 801b522:	7e20      	ldrb	r0, [r4, #24]
                writecmd.data = subbuffer[1];
 801b524:	7e61      	ldrb	r1, [r4, #25]
        }else if((type & 0xFE) == 0x52){
            //OPN2 write
            iswrite = true;
            writecmd.cmd = type;
            if(subbufferlen > 0){
                writecmd.addr = subbuffer[0];
 801b526:	7460      	strb	r0, [r4, #17]
                writecmd.data = subbuffer[1];
                subbufferlen = 0;
 801b528:	2200      	movs	r2, #0
            //OPN2 write
            iswrite = true;
            writecmd.cmd = type;
            if(subbufferlen > 0){
                writecmd.addr = subbuffer[0];
                writecmd.data = subbuffer[1];
 801b52a:	74a1      	strb	r1, [r4, #18]
                subbufferlen = 0;
 801b52c:	7722      	strb	r2, [r4, #28]
 801b52e:	e00d      	b.n	801b54c <VgmHead::cmdNext(unsigned long)+0x94>
            }else{
                writecmd.addr = source->getByte(srcaddr++);
 801b530:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b534:	1c4a      	adds	r2, r1, #1
 801b536:	6062      	str	r2, [r4, #4]
 801b538:	f000 f9d5 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b53c:	7460      	strb	r0, [r4, #17]
                writecmd.data = source->getByte(srcaddr++);
 801b53e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b542:	1c4b      	adds	r3, r1, #1
 801b544:	6063      	str	r3, [r4, #4]
 801b546:	f000 f9ce 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b54a:	74a0      	strb	r0, [r4, #18]
            }
            if((writecmd.addr & 0xF0) == 0xA0){
 801b54c:	7c63      	ldrb	r3, [r4, #17]
 801b54e:	f003 00f0 	and.w	r0, r3, #240	; 0xf0
 801b552:	28a0      	cmp	r0, #160	; 0xa0
 801b554:	d1b5      	bne.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
                //Frequency write, read next command
                subbuffer[0] = source->getByte(srcaddr++);
 801b556:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b55a:	1c4a      	adds	r2, r1, #1
 801b55c:	6062      	str	r2, [r4, #4]
 801b55e:	f000 f9c2 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                subbufferlen = 1;
                if((subbuffer[0] & 0xFE) == 0x52){
 801b562:	f000 03fe 	and.w	r3, r0, #254	; 0xfe
                writecmd.data = source->getByte(srcaddr++);
            }
            if((writecmd.addr & 0xF0) == 0xA0){
                //Frequency write, read next command
                subbuffer[0] = source->getByte(srcaddr++);
                subbufferlen = 1;
 801b566:	2101      	movs	r1, #1
                if((subbuffer[0] & 0xFE) == 0x52){
 801b568:	2b52      	cmp	r3, #82	; 0x52
                writecmd.addr = source->getByte(srcaddr++);
                writecmd.data = source->getByte(srcaddr++);
            }
            if((writecmd.addr & 0xF0) == 0xA0){
                //Frequency write, read next command
                subbuffer[0] = source->getByte(srcaddr++);
 801b56a:	7620      	strb	r0, [r4, #24]
                subbufferlen = 1;
 801b56c:	7721      	strb	r1, [r4, #28]
                if((subbuffer[0] & 0xFE) == 0x52){
 801b56e:	d11f      	bne.n	801b5b0 <VgmHead::cmdNext(unsigned long)+0xf8>
                    //The next command is another frequency write
                    subbuffer[1] = source->getByte(srcaddr++); //Address
 801b570:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b574:	1c4a      	adds	r2, r1, #1
 801b576:	6062      	str	r2, [r4, #4]
 801b578:	f000 f9b5 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b57c:	7660      	strb	r0, [r4, #25]
                    subbuffer[2] = source->getByte(srcaddr++); //Data
 801b57e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b582:	1c4b      	adds	r3, r1, #1
 801b584:	6063      	str	r3, [r4, #4]
 801b586:	f000 f9ae 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                    subbufferlen = 3;
                    if((writecmd.addr & 0xFB) == (subbuffer[1] & 0xFB)){
 801b58a:	7e62      	ldrb	r2, [r4, #25]
 801b58c:	7c63      	ldrb	r3, [r4, #17]
                subbuffer[0] = source->getByte(srcaddr++);
                subbufferlen = 1;
                if((subbuffer[0] & 0xFE) == 0x52){
                    //The next command is another frequency write
                    subbuffer[1] = source->getByte(srcaddr++); //Address
                    subbuffer[2] = source->getByte(srcaddr++); //Data
 801b58e:	76a0      	strb	r0, [r4, #26]
                    subbufferlen = 3;
 801b590:	2103      	movs	r1, #3
 801b592:	7721      	strb	r1, [r4, #28]
                    if((writecmd.addr & 0xFB) == (subbuffer[1] & 0xFB)){
 801b594:	ea82 0103 	eor.w	r1, r2, r3
 801b598:	f011 0ffb 	tst.w	r1, #251	; 0xfb
 801b59c:	d191      	bne.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
                        //Both writes to the same channel
                        writecmd.data2 = subbuffer[2];
 801b59e:	74e0      	strb	r0, [r4, #19]
                        fixOPN2Frequency(&writecmd, opn2mult);
 801b5a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b5a2:	f104 0010 	add.w	r0, r4, #16
 801b5a6:	f7ff ff59 	bl	801b45c <fixOPN2Frequency(ChipWriteCmd*, unsigned long)>
                        //Reconstruct next command
                        subbuffer[2] = writecmd.data2;
 801b5aa:	7ce0      	ldrb	r0, [r4, #19]
 801b5ac:	76a0      	strb	r0, [r4, #26]
 801b5ae:	e788      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
                    }
                }else if((subbuffer[0] >= 0x70) && (subbuffer[0] <= 0x8F)){
 801b5b0:	3870      	subs	r0, #112	; 0x70
 801b5b2:	281f      	cmp	r0, #31
 801b5b4:	d885      	bhi.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
                    //The next command is a short wait or DAC write, read the one after that
                    subbuffer[1] = source->getByte(srcaddr++);
 801b5b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b5ba:	1c4a      	adds	r2, r1, #1
 801b5bc:	6062      	str	r2, [r4, #4]
 801b5be:	f000 f992 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b5c2:	7660      	strb	r0, [r4, #25]
                    subbufferlen = 2;
                    if((subbuffer[1] & 0xFE) == 0x52){
 801b5c4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
                        subbuffer[2] = writecmd.data2;
                    }
                }else if((subbuffer[0] >= 0x70) && (subbuffer[0] <= 0x8F)){
                    //The next command is a short wait or DAC write, read the one after that
                    subbuffer[1] = source->getByte(srcaddr++);
                    subbufferlen = 2;
 801b5c8:	2102      	movs	r1, #2
                    if((subbuffer[1] & 0xFE) == 0x52){
 801b5ca:	2852      	cmp	r0, #82	; 0x52
                        subbuffer[2] = writecmd.data2;
                    }
                }else if((subbuffer[0] >= 0x70) && (subbuffer[0] <= 0x8F)){
                    //The next command is a short wait or DAC write, read the one after that
                    subbuffer[1] = source->getByte(srcaddr++);
                    subbufferlen = 2;
 801b5cc:	7721      	strb	r1, [r4, #28]
                    if((subbuffer[1] & 0xFE) == 0x52){
 801b5ce:	f47f af78 	bne.w	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
                        //The command after that is a frequency write
                        subbuffer[2] = source->getByte(srcaddr++); //Address
 801b5d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b5d6:	1c4b      	adds	r3, r1, #1
 801b5d8:	6063      	str	r3, [r4, #4]
 801b5da:	f000 f984 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b5de:	76a0      	strb	r0, [r4, #26]
                        subbuffer[3] = source->getByte(srcaddr++); //Data
 801b5e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b5e4:	1c4a      	adds	r2, r1, #1
 801b5e6:	6062      	str	r2, [r4, #4]
 801b5e8:	f000 f97d 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                        subbufferlen = 4;
                        if((writecmd.addr & 0xFB) == (subbuffer[2] & 0xFB)){
 801b5ec:	7ea2      	ldrb	r2, [r4, #26]
 801b5ee:	7c63      	ldrb	r3, [r4, #17]
                    subbuffer[1] = source->getByte(srcaddr++);
                    subbufferlen = 2;
                    if((subbuffer[1] & 0xFE) == 0x52){
                        //The command after that is a frequency write
                        subbuffer[2] = source->getByte(srcaddr++); //Address
                        subbuffer[3] = source->getByte(srcaddr++); //Data
 801b5f0:	76e0      	strb	r0, [r4, #27]
                        subbufferlen = 4;
 801b5f2:	2104      	movs	r1, #4
 801b5f4:	7721      	strb	r1, [r4, #28]
                        if((writecmd.addr & 0xFB) == (subbuffer[2] & 0xFB)){
 801b5f6:	ea82 0103 	eor.w	r1, r2, r3
 801b5fa:	f011 0ffb 	tst.w	r1, #251	; 0xfb
 801b5fe:	f47f af60 	bne.w	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
                            //Both writes to the same channel
                            writecmd.data2 = subbuffer[3];
 801b602:	74e0      	strb	r0, [r4, #19]
                            fixOPN2Frequency(&writecmd, opn2mult);
 801b604:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b606:	f104 0010 	add.w	r0, r4, #16
 801b60a:	f7ff ff27 	bl	801b45c <fixOPN2Frequency(ChipWriteCmd*, unsigned long)>
                            //Reconstruct next command
                            subbuffer[3] = writecmd.data2;
 801b60e:	7ce0      	ldrb	r0, [r4, #19]
 801b610:	76e0      	strb	r0, [r4, #27]
 801b612:	e756      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
                        }
                    }
                }
            }
        }else if(type == 0xDE){
 801b614:	28de      	cmp	r0, #222	; 0xde
 801b616:	f43f af54 	beq.w	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
            writecmd.data = source->getByte(srcaddr++);
            writecmd.data2 = source->getByte(srcaddr++);
            fixOPN2Frequency(&writecmd, opn2mult);
            subbuffer[0] = 
            */
        }else if(type >= 0x80 && type <= 0x8F){
 801b61a:	f1a0 0180 	sub.w	r1, r0, #128	; 0x80
 801b61e:	b2cb      	uxtb	r3, r1
 801b620:	2b0f      	cmp	r3, #15
 801b622:	d820      	bhi.n	801b666 <VgmHead::cmdNext(unsigned long)+0x1ae>
            //iswait = true;
            //ticks += type - 0x80;
            //OPN2 DAC write
            iswrite = true;
 801b624:	2301      	movs	r3, #1
            writecmd.cmd = 0x52;
 801b626:	2252      	movs	r2, #82	; 0x52
            */
        }else if(type >= 0x80 && type <= 0x8F){
            //iswait = true;
            //ticks += type - 0x80;
            //OPN2 DAC write
            iswrite = true;
 801b628:	7363      	strb	r3, [r4, #13]
            writecmd.cmd = 0x52;
            writecmd.addr = 0x2A;
            writecmd.data = source->getBlockByte(srcblockaddr++);
 801b62a:	68a3      	ldr	r3, [r4, #8]
        }else if(type >= 0x80 && type <= 0x8F){
            //iswait = true;
            //ticks += type - 0x80;
            //OPN2 DAC write
            iswrite = true;
            writecmd.cmd = 0x52;
 801b62c:	7422      	strb	r2, [r4, #16]
            writecmd.addr = 0x2A;
 801b62e:	212a      	movs	r1, #42	; 0x2a
            writecmd.data = source->getBlockByte(srcblockaddr++);
 801b630:	6822      	ldr	r2, [r4, #0]
            //iswait = true;
            //ticks += type - 0x80;
            //OPN2 DAC write
            iswrite = true;
            writecmd.cmd = 0x52;
            writecmd.addr = 0x2A;
 801b632:	7461      	strb	r1, [r4, #17]
            writecmd.data = source->getBlockByte(srcblockaddr++);
 801b634:	1c59      	adds	r1, r3, #1
 801b636:	60a1      	str	r1, [r4, #8]
    ~VgmSourceStream();
    
    u8 getByte(u32 addr);
    inline u32 getSize() { return datalen; }
    
    inline u8 getBlockByte(u32 blockaddr) { return ((blockaddr < blocklen) ? (block[blockaddr]) : 0); }
 801b638:	6d11      	ldr	r1, [r2, #80]	; 0x50
 801b63a:	428b      	cmp	r3, r1
 801b63c:	bf3a      	itte	cc
 801b63e:	6cd2      	ldrcc	r2, [r2, #76]	; 0x4c
 801b640:	5cd3      	ldrbcc	r3, [r2, r3]
 801b642:	2300      	movcs	r3, #0
            if(type != 0x80){
 801b644:	2880      	cmp	r0, #128	; 0x80
            //ticks += type - 0x80;
            //OPN2 DAC write
            iswrite = true;
            writecmd.cmd = 0x52;
            writecmd.addr = 0x2A;
            writecmd.data = source->getBlockByte(srcblockaddr++);
 801b646:	74a3      	strb	r3, [r4, #18]
            if(type != 0x80){
 801b648:	f43f af3b 	beq.w	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
                if(subbufferlen != 0){
 801b64c:	7f23      	ldrb	r3, [r4, #28]
 801b64e:	b12b      	cbz	r3, 801b65c <VgmHead::cmdNext(unsigned long)+0x1a4>
                    //There's still a write command in there
                    subbuffer[3] = subbuffer[2];
 801b650:	7ea2      	ldrb	r2, [r4, #26]
                    subbuffer[2] = subbuffer[1];
 801b652:	7e61      	ldrb	r1, [r4, #25]
            writecmd.addr = 0x2A;
            writecmd.data = source->getBlockByte(srcblockaddr++);
            if(type != 0x80){
                if(subbufferlen != 0){
                    //There's still a write command in there
                    subbuffer[3] = subbuffer[2];
 801b654:	76e2      	strb	r2, [r4, #27]
                    subbuffer[2] = subbuffer[1];
                    subbuffer[1] = subbuffer[0];
 801b656:	7e22      	ldrb	r2, [r4, #24]
            writecmd.data = source->getBlockByte(srcblockaddr++);
            if(type != 0x80){
                if(subbufferlen != 0){
                    //There's still a write command in there
                    subbuffer[3] = subbuffer[2];
                    subbuffer[2] = subbuffer[1];
 801b658:	76a1      	strb	r1, [r4, #26]
                    subbuffer[1] = subbuffer[0];
 801b65a:	7662      	strb	r2, [r4, #25]
                }
                subbuffer[0] = type - 0x11;
 801b65c:	3811      	subs	r0, #17
 801b65e:	7620      	strb	r0, [r4, #24]
                ++subbufferlen;
 801b660:	1c58      	adds	r0, r3, #1
 801b662:	7720      	strb	r0, [r4, #28]
 801b664:	e72d      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
            } //else just do nothing afterwards
        }else if(type >= 0x70 && type <= 0x7F){
 801b666:	f1a0 0270 	sub.w	r2, r0, #112	; 0x70
 801b66a:	b2d1      	uxtb	r1, r2
 801b66c:	290f      	cmp	r1, #15
 801b66e:	d806      	bhi.n	801b67e <VgmHead::cmdNext(unsigned long)+0x1c6>
            //Short wait
            iswait = true;
            ticks += type - 0x6F;
 801b670:	6961      	ldr	r1, [r4, #20]
 801b672:	396f      	subs	r1, #111	; 0x6f
                subbuffer[0] = type - 0x11;
                ++subbufferlen;
            } //else just do nothing afterwards
        }else if(type >= 0x70 && type <= 0x7F){
            //Short wait
            iswait = true;
 801b674:	2201      	movs	r2, #1
            ticks += type - 0x6F;
 801b676:	1808      	adds	r0, r1, r0
                subbuffer[0] = type - 0x11;
                ++subbufferlen;
            } //else just do nothing afterwards
        }else if(type >= 0x70 && type <= 0x7F){
            //Short wait
            iswait = true;
 801b678:	7322      	strb	r2, [r4, #12]
            ticks += type - 0x6F;
 801b67a:	6160      	str	r0, [r4, #20]
 801b67c:	e721      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
        }else if(type == 0x61){
 801b67e:	2861      	cmp	r0, #97	; 0x61
 801b680:	d111      	bne.n	801b6a6 <VgmHead::cmdNext(unsigned long)+0x1ee>
            //Long wait
            iswait = true;
 801b682:	2501      	movs	r5, #1
 801b684:	7325      	strb	r5, [r4, #12]
            ticks += source->getByte(srcaddr) | ((u32)source->getByte(srcaddr+1) << 8);
 801b686:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b68a:	f000 f92c 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b68e:	4605      	mov	r5, r0
 801b690:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b694:	3101      	adds	r1, #1
 801b696:	f000 f926 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b69a:	ea45 2200 	orr.w	r2, r5, r0, lsl #8
 801b69e:	6960      	ldr	r0, [r4, #20]
 801b6a0:	1881      	adds	r1, r0, r2
 801b6a2:	6161      	str	r1, [r4, #20]
 801b6a4:	e0b9      	b.n	801b81a <VgmHead::cmdNext(unsigned long)+0x362>
            srcaddr += 2;
        }else if(type == 0x62){
 801b6a6:	2862      	cmp	r0, #98	; 0x62
 801b6a8:	d104      	bne.n	801b6b4 <VgmHead::cmdNext(unsigned long)+0x1fc>
            //60 Hz wait
            iswait = true;
 801b6aa:	2101      	movs	r1, #1
 801b6ac:	7321      	strb	r1, [r4, #12]
            ticks += delay62;
 801b6ae:	6962      	ldr	r2, [r4, #20]
 801b6b0:	6a20      	ldr	r0, [r4, #32]
 801b6b2:	e005      	b.n	801b6c0 <VgmHead::cmdNext(unsigned long)+0x208>
        }else if(type == 0x63){
 801b6b4:	2863      	cmp	r0, #99	; 0x63
 801b6b6:	d106      	bne.n	801b6c6 <VgmHead::cmdNext(unsigned long)+0x20e>
            //50 Hz wait
            iswait = true;
 801b6b8:	2301      	movs	r3, #1
            ticks += delay63;
 801b6ba:	6962      	ldr	r2, [r4, #20]
 801b6bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
            //60 Hz wait
            iswait = true;
            ticks += delay62;
        }else if(type == 0x63){
            //50 Hz wait
            iswait = true;
 801b6be:	7323      	strb	r3, [r4, #12]
            ticks += delay63;
 801b6c0:	1813      	adds	r3, r2, r0
 801b6c2:	6163      	str	r3, [r4, #20]
 801b6c4:	e6fd      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
        }else if(type == 0x64){
 801b6c6:	2864      	cmp	r0, #100	; 0x64
 801b6c8:	d11e      	bne.n	801b708 <VgmHead::cmdNext(unsigned long)+0x250>
            //Override wait lengths
            u8 tooverride = source->getByte(srcaddr++);
 801b6ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b6ce:	1c4e      	adds	r6, r1, #1
 801b6d0:	6066      	str	r6, [r4, #4]
 801b6d2:	f000 f908 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b6d6:	4605      	mov	r5, r0
            u32 newdelay = source->getByte(srcaddr) | ((u32)source->getByte(srcaddr+1) << 8);
 801b6d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b6dc:	f000 f903 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b6e0:	4606      	mov	r6, r0
 801b6e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b6e6:	3101      	adds	r1, #1
 801b6e8:	f000 f8fd 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b6ec:	ea46 2200 	orr.w	r2, r6, r0, lsl #8
            srcaddr += 2;
 801b6f0:	6860      	ldr	r0, [r4, #4]
 801b6f2:	1c81      	adds	r1, r0, #2
            if(tooverride == 0x62){
 801b6f4:	2d62      	cmp	r5, #98	; 0x62
            ticks += delay63;
        }else if(type == 0x64){
            //Override wait lengths
            u8 tooverride = source->getByte(srcaddr++);
            u32 newdelay = source->getByte(srcaddr) | ((u32)source->getByte(srcaddr+1) << 8);
            srcaddr += 2;
 801b6f6:	6061      	str	r1, [r4, #4]
            if(tooverride == 0x62){
 801b6f8:	d101      	bne.n	801b6fe <VgmHead::cmdNext(unsigned long)+0x246>
                delay62 = newdelay;
 801b6fa:	6222      	str	r2, [r4, #32]
 801b6fc:	e6e1      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
            }else if(tooverride == 0x63){
 801b6fe:	2d63      	cmp	r5, #99	; 0x63
 801b700:	f47f aedf 	bne.w	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
                delay63 = newdelay;
 801b704:	6262      	str	r2, [r4, #36]	; 0x24
 801b706:	e6dc      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
            }
        }else if(type == 0x65){
 801b708:	2865      	cmp	r0, #101	; 0x65
 801b70a:	f43f aeda 	beq.w	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
            //Nop [unofficial]
        }else if(type == 0x66){
 801b70e:	2866      	cmp	r0, #102	; 0x66
 801b710:	d009      	beq.n	801b726 <VgmHead::cmdNext(unsigned long)+0x26e>
            //End of data
            //Behaves like endless stream of 65535-tick waits
            isdone = true;
        }else if(type == 0x67){
 801b712:	2867      	cmp	r0, #103	; 0x67
 801b714:	d136      	bne.n	801b784 <VgmHead::cmdNext(unsigned long)+0x2cc>
            //Data block
            ++srcaddr; //Skip 0x66
            u32 a = source->getByte(srcaddr++);
 801b716:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b71a:	1c8a      	adds	r2, r1, #2
 801b71c:	6062      	str	r2, [r4, #4]
 801b71e:	3101      	adds	r1, #1
 801b720:	f000 f8e1 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
            if(a != 0){
 801b724:	b110      	cbz	r0, 801b72c <VgmHead::cmdNext(unsigned long)+0x274>
                isdone = true;
 801b726:	2301      	movs	r3, #1
 801b728:	77e3      	strb	r3, [r4, #31]
 801b72a:	e6ca      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
            }else{
                a = source->getByte(srcaddr) | ((u32)source->getByte(srcaddr+1) << 8)
 801b72c:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b730:	f000 f8d9 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b734:	4606      	mov	r6, r0
 801b736:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b73a:	3101      	adds	r1, #1
 801b73c:	f000 f8d3 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b740:	4605      	mov	r5, r0
                    | ((u32)source->getByte(srcaddr+2) << 16) | ((u32)source->getByte(srcaddr+3) << 24);
 801b742:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b746:	3102      	adds	r1, #2
 801b748:	f000 f8cd 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b74c:	0400      	lsls	r0, r0, #16
 801b74e:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
 801b752:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b756:	3103      	adds	r1, #3
 801b758:	f000 f8c5 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b75c:	4335      	orrs	r5, r6
 801b75e:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
                DBG("Loading data block from %x size %x", srcaddr, a);
 801b762:	462a      	mov	r2, r5
 801b764:	6861      	ldr	r1, [r4, #4]
 801b766:	4836      	ldr	r0, [pc, #216]	; (801b840 <VgmHead::cmdNext(unsigned long)+0x388>)
 801b768:	f7f6 f914 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
                source->loadBlock(srcaddr, a);
 801b76c:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b770:	462a      	mov	r2, r5
 801b772:	f000 f90d 	bl	801b990 <VgmSourceStream::loadBlock(unsigned long, unsigned long)>
                DBG("Block loaded!");
 801b776:	4833      	ldr	r0, [pc, #204]	; (801b844 <VgmHead::cmdNext(unsigned long)+0x38c>)
 801b778:	f7f6 f90c 	bl	8011994 <MIOS32_MIDI_SendDebugMessage>
                srcaddr += a;
 801b77c:	6861      	ldr	r1, [r4, #4]
 801b77e:	194d      	adds	r5, r1, r5
 801b780:	6065      	str	r5, [r4, #4]
 801b782:	e69e      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
            }
        }else if(type == 0xE0){
 801b784:	28e0      	cmp	r0, #224	; 0xe0
 801b786:	d11c      	bne.n	801b7c2 <VgmHead::cmdNext(unsigned long)+0x30a>
            //Seek in data block
            srcblockaddr = source->getByte(srcaddr) | ((u32)source->getByte(srcaddr+1) << 8)
 801b788:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b78c:	f000 f8ab 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b790:	4606      	mov	r6, r0
 801b792:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b796:	3101      	adds	r1, #1
 801b798:	f000 f8a5 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b79c:	4605      	mov	r5, r0
                | ((u32)source->getByte(srcaddr+2) << 16) | ((u32)source->getByte(srcaddr+3) << 24);
 801b79e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b7a2:	3102      	adds	r1, #2
 801b7a4:	f000 f89f 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b7a8:	0402      	lsls	r2, r0, #16
 801b7aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b7ae:	3103      	adds	r1, #3
 801b7b0:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 801b7b4:	f000 f897 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b7b8:	4335      	orrs	r5, r6
 801b7ba:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
 801b7be:	60a0      	str	r0, [r4, #8]
 801b7c0:	e039      	b.n	801b836 <VgmHead::cmdNext(unsigned long)+0x37e>
            srcaddr += 4;
        }else if(type == 0xDF){
 801b7c2:	28df      	cmp	r0, #223	; 0xdf
 801b7c4:	f43f ae7d 	beq.w	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
            //Loop within VGM [unofficial] FIXME scrap this there's loop info in the header
            //srcaddr = source->getByte(srcaddr) | ((u32)source->getByte(srcaddr+1) << 8)
            //    | ((u32)source->getByte(srcaddr+2) << 16);
        }else if(type == 0x90){
 801b7c8:	2890      	cmp	r0, #144	; 0x90
 801b7ca:	d034      	beq.n	801b836 <VgmHead::cmdNext(unsigned long)+0x37e>
            //Setup Stream Control not supported
            srcaddr += 4;
        }else if(type == 0x91){
 801b7cc:	2891      	cmp	r0, #145	; 0x91
 801b7ce:	d032      	beq.n	801b836 <VgmHead::cmdNext(unsigned long)+0x37e>
            //Set Stream Data not supported
            srcaddr += 4;
        }else if(type == 0x92){
 801b7d0:	2892      	cmp	r0, #146	; 0x92
 801b7d2:	d102      	bne.n	801b7da <VgmHead::cmdNext(unsigned long)+0x322>
            //Set Stream Frequency not supported
            srcaddr += 5;
 801b7d4:	6863      	ldr	r3, [r4, #4]
 801b7d6:	3305      	adds	r3, #5
 801b7d8:	e02f      	b.n	801b83a <VgmHead::cmdNext(unsigned long)+0x382>
        }else if(type == 0x93){
 801b7da:	2893      	cmp	r0, #147	; 0x93
 801b7dc:	d102      	bne.n	801b7e4 <VgmHead::cmdNext(unsigned long)+0x32c>
            //Start Stream not supported
            srcaddr += 10;
 801b7de:	6863      	ldr	r3, [r4, #4]
 801b7e0:	330a      	adds	r3, #10
 801b7e2:	e02a      	b.n	801b83a <VgmHead::cmdNext(unsigned long)+0x382>
        }else if(type == 0x94){
 801b7e4:	2894      	cmp	r0, #148	; 0x94
 801b7e6:	d00b      	beq.n	801b800 <VgmHead::cmdNext(unsigned long)+0x348>
            //Stop Stream not supported
            srcaddr++;
        }else if(type == 0x95){
 801b7e8:	2895      	cmp	r0, #149	; 0x95
 801b7ea:	d024      	beq.n	801b836 <VgmHead::cmdNext(unsigned long)+0x37e>
            //Start Stream fast not supported
            srcaddr += 4;
        }else if(type == 0x68){
 801b7ec:	2868      	cmp	r0, #104	; 0x68
 801b7ee:	d102      	bne.n	801b7f6 <VgmHead::cmdNext(unsigned long)+0x33e>
            //PCM RAM write, not supported
            srcaddr += 11;
 801b7f0:	6863      	ldr	r3, [r4, #4]
 801b7f2:	330b      	adds	r3, #11
 801b7f4:	e021      	b.n	801b83a <VgmHead::cmdNext(unsigned long)+0x382>
        }else if(type >= 0x30 && type <= 0x3F){
 801b7f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b7fa:	b2da      	uxtb	r2, r3
 801b7fc:	2a0f      	cmp	r2, #15
 801b7fe:	d802      	bhi.n	801b806 <VgmHead::cmdNext(unsigned long)+0x34e>
            //Unsupported single-byte command
            srcaddr++;
 801b800:	6861      	ldr	r1, [r4, #4]
 801b802:	1c4b      	adds	r3, r1, #1
 801b804:	e019      	b.n	801b83a <VgmHead::cmdNext(unsigned long)+0x382>
        }else if((type >= 0x40 && type <= 0x4E) || (type >= 0xA0 && type <= 0xBF)){
 801b806:	f1a0 0140 	sub.w	r1, r0, #64	; 0x40
 801b80a:	b2cb      	uxtb	r3, r1
 801b80c:	2b0e      	cmp	r3, #14
 801b80e:	d904      	bls.n	801b81a <VgmHead::cmdNext(unsigned long)+0x362>
 801b810:	f100 0260 	add.w	r2, r0, #96	; 0x60
 801b814:	b2d1      	uxtb	r1, r2
 801b816:	291f      	cmp	r1, #31
 801b818:	d802      	bhi.n	801b820 <VgmHead::cmdNext(unsigned long)+0x368>
            //Unsupported double-byte command
            srcaddr += 2;
 801b81a:	6863      	ldr	r3, [r4, #4]
 801b81c:	3302      	adds	r3, #2
 801b81e:	e00c      	b.n	801b83a <VgmHead::cmdNext(unsigned long)+0x382>
        }else if(type >= 0xC0 && type <= 0xDD){
 801b820:	f100 0340 	add.w	r3, r0, #64	; 0x40
 801b824:	b2da      	uxtb	r2, r3
 801b826:	2a1d      	cmp	r2, #29
 801b828:	d802      	bhi.n	801b830 <VgmHead::cmdNext(unsigned long)+0x378>
            //Unsupported triple-byte command
            srcaddr += 3;
 801b82a:	6860      	ldr	r0, [r4, #4]
 801b82c:	1cc3      	adds	r3, r0, #3
 801b82e:	e004      	b.n	801b83a <VgmHead::cmdNext(unsigned long)+0x382>
        }else if(type >= 0xE1 && type <= 0xFF){
 801b830:	28e0      	cmp	r0, #224	; 0xe0
 801b832:	f67f ae46 	bls.w	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
            //Unsupported quadruple-byte command
            srcaddr += 4;
 801b836:	6861      	ldr	r1, [r4, #4]
 801b838:	1d0b      	adds	r3, r1, #4
 801b83a:	6063      	str	r3, [r4, #4]
 801b83c:	e641      	b.n	801b4c2 <VgmHead::cmdNext(unsigned long)+0xa>
 801b83e:	bd70      	pop	{r4, r5, r6, pc}
 801b840:	0801d672 	.word	0x0801d672
 801b844:	0801d695 	.word	0x0801d695

0801b848 <VgmHead::restart(unsigned long)>:
        }
    }
}

void VgmHead::restart(u32 vgm_time){
    srcaddr = source->vgmdatastartaddr;
 801b848:	6803      	ldr	r3, [r0, #0]
 801b84a:	681a      	ldr	r2, [r3, #0]
    srcblockaddr = 0;
    ticks = vgm_time;
 801b84c:	6141      	str	r1, [r0, #20]
    }
}

void VgmHead::restart(u32 vgm_time){
    srcaddr = source->vgmdatastartaddr;
    srcblockaddr = 0;
 801b84e:	2300      	movs	r3, #0
        }
    }
}

void VgmHead::restart(u32 vgm_time){
    srcaddr = source->vgmdatastartaddr;
 801b850:	6042      	str	r2, [r0, #4]
    srcblockaddr = 0;
 801b852:	6083      	str	r3, [r0, #8]
    ticks = vgm_time;
 801b854:	4770      	bx	lr

0801b856 <VgmSourceStream::VgmSourceStream()>:
#include <mios32.h>
#include "vgmsourcestream.h"
#include "app.h"


VgmSourceStream::VgmSourceStream() {
 801b856:	b538      	push	{r3, r4, r5, lr}
    block = NULL;
 801b858:	2500      	movs	r5, #0
    blocklen = 0;
    blockorigaddr = 0xFFFFFFFF;
 801b85a:	f04f 33ff 	mov.w	r3, #4294967295
#include <mios32.h>
#include "vgmsourcestream.h"
#include "app.h"


VgmSourceStream::VgmSourceStream() {
 801b85e:	4604      	mov	r4, r0
    block = NULL;
    blocklen = 0;
    blockorigaddr = 0xFFFFFFFF;
 801b860:	6543      	str	r3, [r0, #84]	; 0x54
#include "vgmsourcestream.h"
#include "app.h"


VgmSourceStream::VgmSourceStream() {
    block = NULL;
 801b862:	64c5      	str	r5, [r0, #76]	; 0x4c
    blocklen = 0;
 801b864:	6505      	str	r5, [r0, #80]	; 0x50
    blockorigaddr = 0xFFFFFFFF;
    buffer1 = new u8[VGMSOURCESTREAM_BUFSIZE];
 801b866:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b86a:	f000 fa2d 	bl	801bcc8 <operator new[](unsigned int)>
 801b86e:	63a0      	str	r0, [r4, #56]	; 0x38
    buffer2 = new u8[VGMSOURCESTREAM_BUFSIZE];
 801b870:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b874:	f000 fa28 	bl	801bcc8 <operator new[](unsigned int)>
    datalen = 0;
 801b878:	6365      	str	r5, [r4, #52]	; 0x34
VgmSourceStream::VgmSourceStream() {
    block = NULL;
    blocklen = 0;
    blockorigaddr = 0xFFFFFFFF;
    buffer1 = new u8[VGMSOURCESTREAM_BUFSIZE];
    buffer2 = new u8[VGMSOURCESTREAM_BUFSIZE];
 801b87a:	63e0      	str	r0, [r4, #60]	; 0x3c
    datalen = 0;
    wantbuffer = 0;
 801b87c:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
 801b880:	4620      	mov	r0, r4
 801b882:	bd38      	pop	{r3, r4, r5, pc}

0801b884 <VgmSourceStream::startStream(char*)>:
    if(block != NULL){
        delete[] block;
    }
}

s32 VgmSourceStream::startStream(char* filename){
 801b884:	b570      	push	{r4, r5, r6, lr}
    s32 res = FILE_ReadOpen(&file, filename);
 801b886:	f100 0614 	add.w	r6, r0, #20
    if(block != NULL){
        delete[] block;
    }
}

s32 VgmSourceStream::startStream(char* filename){
 801b88a:	4604      	mov	r4, r0
    s32 res = FILE_ReadOpen(&file, filename);
 801b88c:	4630      	mov	r0, r6
 801b88e:	f7ff fa3b 	bl	801ad08 <FILE_ReadOpen>
    if(res < 0) return res;
 801b892:	2800      	cmp	r0, #0
 801b894:	db26      	blt.n	801b8e4 <VgmSourceStream::startStream(char*)+0x60>
    datalen = FILE_ReadGetCurrentSize();
 801b896:	f7ff fae1 	bl	801ae5c <FILE_ReadGetCurrentSize>
    //Fill both buffers
    buffer1addr = 0;
 801b89a:	2500      	movs	r5, #0
}

s32 VgmSourceStream::startStream(char* filename){
    s32 res = FILE_ReadOpen(&file, filename);
    if(res < 0) return res;
    datalen = FILE_ReadGetCurrentSize();
 801b89c:	6360      	str	r0, [r4, #52]	; 0x34
    //Fill both buffers
    buffer1addr = 0;
 801b89e:	6425      	str	r5, [r4, #64]	; 0x40
    res = FILE_ReadBuffer(buffer1, VGMSOURCESTREAM_BUFSIZE);
 801b8a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b8a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b8a6:	f7ff fadf 	bl	801ae68 <FILE_ReadBuffer>
    if(res < 0){datalen = 0; return -2;}
 801b8aa:	42a8      	cmp	r0, r5
 801b8ac:	da03      	bge.n	801b8b6 <VgmSourceStream::startStream(char*)+0x32>
 801b8ae:	6365      	str	r5, [r4, #52]	; 0x34
 801b8b0:	f06f 0001 	mvn.w	r0, #1
 801b8b4:	bd70      	pop	{r4, r5, r6, pc}
    buffer2addr = VGMSOURCESTREAM_BUFSIZE;
 801b8b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b8ba:	6461      	str	r1, [r4, #68]	; 0x44
    res = FILE_ReadBuffer(buffer2, VGMSOURCESTREAM_BUFSIZE);
 801b8bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801b8be:	f7ff fad3 	bl	801ae68 <FILE_ReadBuffer>
    if(res < 0){datalen = 0; return -3;}
 801b8c2:	2800      	cmp	r0, #0
 801b8c4:	da03      	bge.n	801b8ce <VgmSourceStream::startStream(char*)+0x4a>
 801b8c6:	6365      	str	r5, [r4, #52]	; 0x34
 801b8c8:	f06f 0002 	mvn.w	r0, #2
 801b8cc:	bd70      	pop	{r4, r5, r6, pc}
    //Close file and save for reopening
    res = FILE_ReadClose(&file);
 801b8ce:	4630      	mov	r0, r6
 801b8d0:	f7ff fa96 	bl	801ae00 <FILE_ReadClose>
    if(res < 0){datalen = 0; return -4;}
 801b8d4:	2800      	cmp	r0, #0
    return 0;
 801b8d6:	bfa8      	it	ge
 801b8d8:	4628      	movge	r0, r5
    buffer2addr = VGMSOURCESTREAM_BUFSIZE;
    res = FILE_ReadBuffer(buffer2, VGMSOURCESTREAM_BUFSIZE);
    if(res < 0){datalen = 0; return -3;}
    //Close file and save for reopening
    res = FILE_ReadClose(&file);
    if(res < 0){datalen = 0; return -4;}
 801b8da:	da03      	bge.n	801b8e4 <VgmSourceStream::startStream(char*)+0x60>
 801b8dc:	6365      	str	r5, [r4, #52]	; 0x34
 801b8de:	f06f 0003 	mvn.w	r0, #3
 801b8e2:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
}
 801b8e4:	bd70      	pop	{r4, r5, r6, pc}

0801b8e6 <VgmSourceStream::getByte(unsigned long)>:
    
u8 VgmSourceStream::getByte(u32 addr){    
 801b8e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(addr >= datalen) return 0;
 801b8e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801b8ea:	4299      	cmp	r1, r3
    res = FILE_ReadClose(&file);
    if(res < 0){datalen = 0; return -4;}
    return 0;
}
    
u8 VgmSourceStream::getByte(u32 addr){    
 801b8ec:	4604      	mov	r4, r0
 801b8ee:	460d      	mov	r5, r1
    if(addr >= datalen) return 0;
 801b8f0:	d24c      	bcs.n	801b98c <VgmSourceStream::getByte(unsigned long)+0xa6>
    if(addr >= buffer1addr && addr < (buffer1addr + VGMSOURCESTREAM_BUFSIZE)){
 801b8f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801b8f4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b8f6:	4291      	cmp	r1, r2
 801b8f8:	d30d      	bcc.n	801b916 <VgmSourceStream::getByte(unsigned long)+0x30>
 801b8fa:	f502 7100 	add.w	r1, r2, #512	; 0x200
 801b8fe:	428d      	cmp	r5, r1
 801b900:	d209      	bcs.n	801b916 <VgmSourceStream::getByte(unsigned long)+0x30>
        if(buffer2addr != buffer1addr + VGMSOURCESTREAM_BUFSIZE){
 801b902:	4288      	cmp	r0, r1
 801b904:	d004      	beq.n	801b910 <VgmSourceStream::getByte(unsigned long)+0x2a>
            //Set up to background buffer next
            wantbuffer = 2;
 801b906:	2002      	movs	r0, #2
 801b908:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
            wantbufferaddr = buffer1addr + VGMSOURCESTREAM_BUFSIZE;
 801b90c:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
        }
        return buffer1[addr - buffer1addr];
 801b910:	1aad      	subs	r5, r5, r2
 801b912:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b914:	e00e      	b.n	801b934 <VgmSourceStream::getByte(unsigned long)+0x4e>
    }
    if(addr >= buffer2addr && addr < (buffer2addr + VGMSOURCESTREAM_BUFSIZE)){
 801b916:	4285      	cmp	r5, r0
 801b918:	d30e      	bcc.n	801b938 <VgmSourceStream::getByte(unsigned long)+0x52>
 801b91a:	f500 7300 	add.w	r3, r0, #512	; 0x200
 801b91e:	429d      	cmp	r5, r3
 801b920:	d20a      	bcs.n	801b938 <VgmSourceStream::getByte(unsigned long)+0x52>
        if(buffer1addr != buffer2addr + VGMSOURCESTREAM_BUFSIZE){
 801b922:	429a      	cmp	r2, r3
 801b924:	d004      	beq.n	801b930 <VgmSourceStream::getByte(unsigned long)+0x4a>
            //Set up to background buffer next
            wantbuffer = 1;
 801b926:	2101      	movs	r1, #1
 801b928:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
            wantbufferaddr = buffer2addr + VGMSOURCESTREAM_BUFSIZE;
 801b92c:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
        }
        return buffer2[addr - buffer2addr];
 801b930:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b932:	1a2d      	subs	r5, r5, r0
 801b934:	5d58      	ldrb	r0, [r3, r5]
 801b936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    //Have to load something right now
    u8 leds = MIOS32_BOARD_LED_Get();
 801b938:	f7f7 fe3e 	bl	80135b8 <MIOS32_BOARD_LED_Get>
    MIOS32_BOARD_LED_Set(0b1111, 0b0100);
    s32 res = FILE_ReadReOpen(&file);
 801b93c:	f104 0614 	add.w	r6, r4, #20
        }
        return buffer2[addr - buffer2addr];
    }
    //Have to load something right now
    u8 leds = MIOS32_BOARD_LED_Get();
    MIOS32_BOARD_LED_Set(0b1111, 0b0100);
 801b940:	2104      	movs	r1, #4
            wantbufferaddr = buffer2addr + VGMSOURCESTREAM_BUFSIZE;
        }
        return buffer2[addr - buffer2addr];
    }
    //Have to load something right now
    u8 leds = MIOS32_BOARD_LED_Get();
 801b942:	4607      	mov	r7, r0
    MIOS32_BOARD_LED_Set(0b1111, 0b0100);
 801b944:	200f      	movs	r0, #15
 801b946:	f7f7 fe05 	bl	8013554 <MIOS32_BOARD_LED_Set>
    s32 res = FILE_ReadReOpen(&file);
 801b94a:	4630      	mov	r0, r6
 801b94c:	f7ff fa22 	bl	801ad94 <FILE_ReadReOpen>
    if(res < 0) return 0;
 801b950:	2800      	cmp	r0, #0
 801b952:	db1b      	blt.n	801b98c <VgmSourceStream::getByte(unsigned long)+0xa6>
    res = FILE_ReadSeek(addr);
 801b954:	4628      	mov	r0, r5
 801b956:	f7ff fa6f 	bl	801ae38 <FILE_ReadSeek>
    if(res < 0) return 0;
 801b95a:	2800      	cmp	r0, #0
 801b95c:	db16      	blt.n	801b98c <VgmSourceStream::getByte(unsigned long)+0xa6>
    res = FILE_ReadBuffer(buffer1, VGMSOURCESTREAM_BUFSIZE);
 801b95e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b960:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b964:	f7ff fa80 	bl	801ae68 <FILE_ReadBuffer>
    if(res < 0) return 0;
 801b968:	2800      	cmp	r0, #0
 801b96a:	db0f      	blt.n	801b98c <VgmSourceStream::getByte(unsigned long)+0xa6>
    buffer1addr = addr;
 801b96c:	6425      	str	r5, [r4, #64]	; 0x40
    FILE_ReadClose(&file);
 801b96e:	4630      	mov	r0, r6
 801b970:	f7ff fa46 	bl	801ae00 <FILE_ReadClose>
    //Set up to load the next buffer next
    wantbuffer = 2;
 801b974:	2202      	movs	r2, #2
 801b976:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
    wantbufferaddr = addr + VGMSOURCESTREAM_BUFSIZE;
 801b97a:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
    //Done
    MIOS32_BOARD_LED_Set(0b1111, leds);
 801b97e:	200f      	movs	r0, #15
 801b980:	b2f9      	uxtb	r1, r7
 801b982:	f7f7 fde7 	bl	8013554 <MIOS32_BOARD_LED_Set>
    return buffer1[0];
 801b986:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b988:	7800      	ldrb	r0, [r0, #0]
 801b98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(res < 0){datalen = 0; return -4;}
    return 0;
}
    
u8 VgmSourceStream::getByte(u32 addr){    
    if(addr >= datalen) return 0;
 801b98c:	2000      	movs	r0, #0
    wantbuffer = 2;
    wantbufferaddr = addr + VGMSOURCESTREAM_BUFSIZE;
    //Done
    MIOS32_BOARD_LED_Set(0b1111, leds);
    return buffer1[0];
}
 801b98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b990 <VgmSourceStream::loadBlock(unsigned long, unsigned long)>:
        DEBUGVAL = 0;
        MIOS32_IRQ_Enable();
    }
}

void VgmSourceStream::loadBlock(u32 startaddr, u32 len){
 801b990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(startaddr == blockorigaddr && len == blocklen) return; //Don't reload existing block
 801b992:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801b994:	4299      	cmp	r1, r3
        DEBUGVAL = 0;
        MIOS32_IRQ_Enable();
    }
}

void VgmSourceStream::loadBlock(u32 startaddr, u32 len){
 801b996:	4604      	mov	r4, r0
 801b998:	460f      	mov	r7, r1
 801b99a:	4615      	mov	r5, r2
    if(startaddr == blockorigaddr && len == blocklen) return; //Don't reload existing block
 801b99c:	d102      	bne.n	801b9a4 <VgmSourceStream::loadBlock(unsigned long, unsigned long)+0x14>
 801b99e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801b9a0:	4282      	cmp	r2, r0
 801b9a2:	d01d      	beq.n	801b9e0 <VgmSourceStream::loadBlock(unsigned long, unsigned long)+0x50>
    if(block != NULL){
 801b9a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801b9a6:	b108      	cbz	r0, 801b9ac <VgmSourceStream::loadBlock(unsigned long, unsigned long)+0x1c>
        delete[] block;
 801b9a8:	f000 f990 	bl	801bccc <operator delete[](void*)>
    }
    block = new u8[len];
 801b9ac:	4628      	mov	r0, r5
 801b9ae:	f000 f98b 	bl	801bcc8 <operator new[](unsigned int)>
    s32 res = FILE_ReadReOpen(&file);
 801b9b2:	f104 0614 	add.w	r6, r4, #20
void VgmSourceStream::loadBlock(u32 startaddr, u32 len){
    if(startaddr == blockorigaddr && len == blocklen) return; //Don't reload existing block
    if(block != NULL){
        delete[] block;
    }
    block = new u8[len];
 801b9b6:	64e0      	str	r0, [r4, #76]	; 0x4c
    s32 res = FILE_ReadReOpen(&file);
 801b9b8:	4630      	mov	r0, r6
 801b9ba:	f7ff f9eb 	bl	801ad94 <FILE_ReadReOpen>
    if(res < 0) return;
 801b9be:	2800      	cmp	r0, #0
 801b9c0:	db0e      	blt.n	801b9e0 <VgmSourceStream::loadBlock(unsigned long, unsigned long)+0x50>
    res = FILE_ReadSeek(startaddr);
 801b9c2:	4638      	mov	r0, r7
 801b9c4:	f7ff fa38 	bl	801ae38 <FILE_ReadSeek>
    if(res < 0) return;
 801b9c8:	2800      	cmp	r0, #0
 801b9ca:	db09      	blt.n	801b9e0 <VgmSourceStream::loadBlock(unsigned long, unsigned long)+0x50>
    res = FILE_ReadBuffer(block, len);
 801b9cc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801b9ce:	4629      	mov	r1, r5
 801b9d0:	f7ff fa4a 	bl	801ae68 <FILE_ReadBuffer>
    if(res < 0) return;
 801b9d4:	2800      	cmp	r0, #0
 801b9d6:	db03      	blt.n	801b9e0 <VgmSourceStream::loadBlock(unsigned long, unsigned long)+0x50>
    FILE_ReadClose(&file);
 801b9d8:	4630      	mov	r0, r6
 801b9da:	f7ff fa11 	bl	801ae00 <FILE_ReadClose>
    blocklen = len;
 801b9de:	6525      	str	r5, [r4, #80]	; 0x50
 801b9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b9e2 <VgmSourceStream::readHeader()>:
}

void VgmSourceStream::readHeader(){
 801b9e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(getByte(0) == 'V' && getByte(1) == 'g' && getByte(2) == 'm' && getByte(3) == ' '){
 801b9e6:	2100      	movs	r1, #0
    if(res < 0) return;
    FILE_ReadClose(&file);
    blocklen = len;
}

void VgmSourceStream::readHeader(){
 801b9e8:	4604      	mov	r4, r0
    if(getByte(0) == 'V' && getByte(1) == 'g' && getByte(2) == 'm' && getByte(3) == ' '){
 801b9ea:	f7ff ff7c 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b9ee:	2856      	cmp	r0, #86	; 0x56
 801b9f0:	f040 80af 	bne.w	801bb52 <VgmSourceStream::readHeader()+0x170>
 801b9f4:	2101      	movs	r1, #1
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	f7ff ff75 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801b9fc:	2867      	cmp	r0, #103	; 0x67
 801b9fe:	f040 80a8 	bne.w	801bb52 <VgmSourceStream::readHeader()+0x170>
 801ba02:	2102      	movs	r1, #2
 801ba04:	4620      	mov	r0, r4
 801ba06:	f7ff ff6e 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801ba0a:	286d      	cmp	r0, #109	; 0x6d
 801ba0c:	f040 80a1 	bne.w	801bb52 <VgmSourceStream::readHeader()+0x170>
 801ba10:	2103      	movs	r1, #3
 801ba12:	4620      	mov	r0, r4
 801ba14:	f7ff ff67 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801ba18:	2820      	cmp	r0, #32
 801ba1a:	4606      	mov	r6, r0
 801ba1c:	f040 8099 	bne.w	801bb52 <VgmSourceStream::readHeader()+0x170>
        //File has header
        //Get version
        u8 ver_lo = getByte(8);
 801ba20:	2108      	movs	r1, #8
 801ba22:	4620      	mov	r0, r4
 801ba24:	f7ff ff5f 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
        u8 ver_hi = getByte(9);
 801ba28:	2109      	movs	r1, #9

void VgmSourceStream::readHeader(){
    if(getByte(0) == 'V' && getByte(1) == 'g' && getByte(2) == 'm' && getByte(3) == ' '){
        //File has header
        //Get version
        u8 ver_lo = getByte(8);
 801ba2a:	4680      	mov	r8, r0
        u8 ver_hi = getByte(9);
 801ba2c:	4620      	mov	r0, r4
 801ba2e:	f7ff ff5a 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
        psgclock = ((u32)getByte(0x0C)) | ((u32)getByte(0x0D) << 8)
 801ba32:	210c      	movs	r1, #12
void VgmSourceStream::readHeader(){
    if(getByte(0) == 'V' && getByte(1) == 'g' && getByte(2) == 'm' && getByte(3) == ' '){
        //File has header
        //Get version
        u8 ver_lo = getByte(8);
        u8 ver_hi = getByte(9);
 801ba34:	4605      	mov	r5, r0
        psgclock = ((u32)getByte(0x0C)) | ((u32)getByte(0x0D) << 8)
 801ba36:	4620      	mov	r0, r4
 801ba38:	f7ff ff55 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801ba3c:	210d      	movs	r1, #13
 801ba3e:	4681      	mov	r9, r0
 801ba40:	4620      	mov	r0, r4
 801ba42:	f7ff ff50 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                 | ((u32)getByte(0x0E) << 16) | ((u32)getByte(0x0F) << 24);
 801ba46:	210e      	movs	r1, #14
    if(getByte(0) == 'V' && getByte(1) == 'g' && getByte(2) == 'm' && getByte(3) == ' '){
        //File has header
        //Get version
        u8 ver_lo = getByte(8);
        u8 ver_hi = getByte(9);
        psgclock = ((u32)getByte(0x0C)) | ((u32)getByte(0x0D) << 8)
 801ba48:	4607      	mov	r7, r0
                 | ((u32)getByte(0x0E) << 16) | ((u32)getByte(0x0F) << 24);
 801ba4a:	4620      	mov	r0, r4
 801ba4c:	f7ff ff4b 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801ba50:	0400      	lsls	r0, r0, #16
 801ba52:	ea40 2107 	orr.w	r1, r0, r7, lsl #8
 801ba56:	ea41 0709 	orr.w	r7, r1, r9
 801ba5a:	4620      	mov	r0, r4
 801ba5c:	210f      	movs	r1, #15
 801ba5e:	f7ff ff42 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801ba62:	ea47 6200 	orr.w	r2, r7, r0, lsl #24
 801ba66:	60a2      	str	r2, [r4, #8]
        loopaddr = (((u32)getByte(0x1C)) | ((u32)getByte(0x1D) << 8)
 801ba68:	211c      	movs	r1, #28
 801ba6a:	4620      	mov	r0, r4
 801ba6c:	f7ff ff3b 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801ba70:	211d      	movs	r1, #29
 801ba72:	4681      	mov	r9, r0
 801ba74:	4620      	mov	r0, r4
 801ba76:	f7ff ff36 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                 | ((u32)getByte(0x1E) << 16) | ((u32)getByte(0x1F) << 24))
 801ba7a:	211e      	movs	r1, #30
        //Get version
        u8 ver_lo = getByte(8);
        u8 ver_hi = getByte(9);
        psgclock = ((u32)getByte(0x0C)) | ((u32)getByte(0x0D) << 8)
                 | ((u32)getByte(0x0E) << 16) | ((u32)getByte(0x0F) << 24);
        loopaddr = (((u32)getByte(0x1C)) | ((u32)getByte(0x1D) << 8)
 801ba7c:	4607      	mov	r7, r0
                 | ((u32)getByte(0x1E) << 16) | ((u32)getByte(0x1F) << 24))
 801ba7e:	4620      	mov	r0, r4
 801ba80:	f7ff ff31 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                 + 0x1C;
 801ba84:	0403      	lsls	r3, r0, #16
 801ba86:	ea43 2007 	orr.w	r0, r3, r7, lsl #8
 801ba8a:	ea40 0709 	orr.w	r7, r0, r9
        u8 ver_lo = getByte(8);
        u8 ver_hi = getByte(9);
        psgclock = ((u32)getByte(0x0C)) | ((u32)getByte(0x0D) << 8)
                 | ((u32)getByte(0x0E) << 16) | ((u32)getByte(0x0F) << 24);
        loopaddr = (((u32)getByte(0x1C)) | ((u32)getByte(0x1D) << 8)
                 | ((u32)getByte(0x1E) << 16) | ((u32)getByte(0x1F) << 24))
 801ba8e:	211f      	movs	r1, #31
 801ba90:	4620      	mov	r0, r4
 801ba92:	f7ff ff28 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                 + 0x1C;
 801ba96:	ea47 6100 	orr.w	r1, r7, r0, lsl #24
 801ba9a:	f101 021c 	add.w	r2, r1, #28
 801ba9e:	60e2      	str	r2, [r4, #12]
        loopsamples = ((u32)getByte(0x20)) | ((u32)getByte(0x21) << 8)
 801baa0:	4631      	mov	r1, r6
 801baa2:	4620      	mov	r0, r4
 801baa4:	f7ff ff1f 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801baa8:	2121      	movs	r1, #33	; 0x21
 801baaa:	4607      	mov	r7, r0
 801baac:	4620      	mov	r0, r4
 801baae:	f7ff ff1a 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                 | ((u32)getByte(0x22) << 16) | ((u32)getByte(0x23) << 24);
 801bab2:	2122      	movs	r1, #34	; 0x22
        psgclock = ((u32)getByte(0x0C)) | ((u32)getByte(0x0D) << 8)
                 | ((u32)getByte(0x0E) << 16) | ((u32)getByte(0x0F) << 24);
        loopaddr = (((u32)getByte(0x1C)) | ((u32)getByte(0x1D) << 8)
                 | ((u32)getByte(0x1E) << 16) | ((u32)getByte(0x1F) << 24))
                 + 0x1C;
        loopsamples = ((u32)getByte(0x20)) | ((u32)getByte(0x21) << 8)
 801bab4:	4606      	mov	r6, r0
                 | ((u32)getByte(0x22) << 16) | ((u32)getByte(0x23) << 24);
 801bab6:	4620      	mov	r0, r4
 801bab8:	f7ff ff15 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801babc:	2123      	movs	r1, #35	; 0x23
 801babe:	0403      	lsls	r3, r0, #16
 801bac0:	4620      	mov	r0, r4
 801bac2:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 801bac6:	f7ff ff0e 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801baca:	433e      	orrs	r6, r7
 801bacc:	ea46 6000 	orr.w	r0, r6, r0, lsl #24
        opn2clock = ((u32)getByte(0x2C)) | ((u32)getByte(0x2D) << 8)
 801bad0:	212c      	movs	r1, #44	; 0x2c
                 | ((u32)getByte(0x0E) << 16) | ((u32)getByte(0x0F) << 24);
        loopaddr = (((u32)getByte(0x1C)) | ((u32)getByte(0x1D) << 8)
                 | ((u32)getByte(0x1E) << 16) | ((u32)getByte(0x1F) << 24))
                 + 0x1C;
        loopsamples = ((u32)getByte(0x20)) | ((u32)getByte(0x21) << 8)
                 | ((u32)getByte(0x22) << 16) | ((u32)getByte(0x23) << 24);
 801bad2:	6120      	str	r0, [r4, #16]
        opn2clock = ((u32)getByte(0x2C)) | ((u32)getByte(0x2D) << 8)
 801bad4:	4620      	mov	r0, r4
 801bad6:	f7ff ff06 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801bada:	212d      	movs	r1, #45	; 0x2d
 801badc:	4607      	mov	r7, r0
 801bade:	4620      	mov	r0, r4
 801bae0:	f7ff ff01 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                 | ((u32)getByte(0x2E) << 16) | ((u32)getByte(0x2F) << 24);
 801bae4:	212e      	movs	r1, #46	; 0x2e
        loopaddr = (((u32)getByte(0x1C)) | ((u32)getByte(0x1D) << 8)
                 | ((u32)getByte(0x1E) << 16) | ((u32)getByte(0x1F) << 24))
                 + 0x1C;
        loopsamples = ((u32)getByte(0x20)) | ((u32)getByte(0x21) << 8)
                 | ((u32)getByte(0x22) << 16) | ((u32)getByte(0x23) << 24);
        opn2clock = ((u32)getByte(0x2C)) | ((u32)getByte(0x2D) << 8)
 801bae6:	4606      	mov	r6, r0
                 | ((u32)getByte(0x2E) << 16) | ((u32)getByte(0x2F) << 24);
 801bae8:	4620      	mov	r0, r4
 801baea:	f7ff fefc 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801baee:	0401      	lsls	r1, r0, #16
 801baf0:	ea41 2606 	orr.w	r6, r1, r6, lsl #8
 801baf4:	4620      	mov	r0, r4
 801baf6:	212f      	movs	r1, #47	; 0x2f
 801baf8:	f7ff fef5 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801bafc:	433e      	orrs	r6, r7
 801bafe:	ea46 6200 	orr.w	r2, r6, r0, lsl #24
 801bb02:	6062      	str	r2, [r4, #4]
        if(ver_hi < 1 || (ver_hi == 1 && ver_lo < 0x50)){
 801bb04:	b125      	cbz	r5, 801bb10 <VgmSourceStream::readHeader()+0x12e>
 801bb06:	2d01      	cmp	r5, #1
 801bb08:	d106      	bne.n	801bb18 <VgmSourceStream::readHeader()+0x136>
 801bb0a:	f1b8 0f4f 	cmp.w	r8, #79	; 0x4f
 801bb0e:	d803      	bhi.n	801bb18 <VgmSourceStream::readHeader()+0x136>
            vgmdatastartaddr = 0x40;
 801bb10:	2140      	movs	r1, #64	; 0x40
 801bb12:	6021      	str	r1, [r4, #0]
 801bb14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }else{
            vgmdatastartaddr = (((u32)getByte(0x34)) | ((u32)getByte(0x35) << 8)
 801bb18:	2134      	movs	r1, #52	; 0x34
 801bb1a:	4620      	mov	r0, r4
 801bb1c:	f7ff fee3 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801bb20:	2135      	movs	r1, #53	; 0x35
 801bb22:	4606      	mov	r6, r0
 801bb24:	4620      	mov	r0, r4
 801bb26:	f7ff fede 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                 | ((u32)getByte(0x36) << 16) | ((u32)getByte(0x37) << 24))
 801bb2a:	2136      	movs	r1, #54	; 0x36
        opn2clock = ((u32)getByte(0x2C)) | ((u32)getByte(0x2D) << 8)
                 | ((u32)getByte(0x2E) << 16) | ((u32)getByte(0x2F) << 24);
        if(ver_hi < 1 || (ver_hi == 1 && ver_lo < 0x50)){
            vgmdatastartaddr = 0x40;
        }else{
            vgmdatastartaddr = (((u32)getByte(0x34)) | ((u32)getByte(0x35) << 8)
 801bb2c:	4605      	mov	r5, r0
                 | ((u32)getByte(0x36) << 16) | ((u32)getByte(0x37) << 24))
 801bb2e:	4620      	mov	r0, r4
 801bb30:	f7ff fed9 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
 801bb34:	2137      	movs	r1, #55	; 0x37
                 + 0x34;
 801bb36:	0403      	lsls	r3, r0, #16
                 | ((u32)getByte(0x2E) << 16) | ((u32)getByte(0x2F) << 24);
        if(ver_hi < 1 || (ver_hi == 1 && ver_lo < 0x50)){
            vgmdatastartaddr = 0x40;
        }else{
            vgmdatastartaddr = (((u32)getByte(0x34)) | ((u32)getByte(0x35) << 8)
                 | ((u32)getByte(0x36) << 16) | ((u32)getByte(0x37) << 24))
 801bb38:	4620      	mov	r0, r4
                 + 0x34;
 801bb3a:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
                 | ((u32)getByte(0x2E) << 16) | ((u32)getByte(0x2F) << 24);
        if(ver_hi < 1 || (ver_hi == 1 && ver_lo < 0x50)){
            vgmdatastartaddr = 0x40;
        }else{
            vgmdatastartaddr = (((u32)getByte(0x34)) | ((u32)getByte(0x35) << 8)
                 | ((u32)getByte(0x36) << 16) | ((u32)getByte(0x37) << 24))
 801bb3e:	f7ff fed2 	bl	801b8e6 <VgmSourceStream::getByte(unsigned long)>
                 + 0x34;
 801bb42:	4335      	orrs	r5, r6
 801bb44:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
 801bb48:	f100 0534 	add.w	r5, r0, #52	; 0x34
 801bb4c:	6025      	str	r5, [r4, #0]
 801bb4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
    }else{
        vgmdatastartaddr = 0;
 801bb52:	2300      	movs	r3, #0
 801bb54:	6023      	str	r3, [r4, #0]
        opn2clock = psgclock = 0;
 801bb56:	60a3      	str	r3, [r4, #8]
 801bb58:	6063      	str	r3, [r4, #4]
 801bb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801bb60 <VgmPlayer_WorkCallback(unsigned long, unsigned long)>:
void VgmPlayer_RemoveHead(VgmHead* vgmh){
    vgmp_head = NULL;
}

// Where all the work gets done.
u16 VgmPlayer_WorkCallback(u32 hr_time, u32 vgm_time){
 801bb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb64:	460f      	mov	r7, r1
 801bb66:	4606      	mov	r6, r0
    /*
    if(hr_time % 10000 == 0){
        DBG("WorkCallback at hr_time=%d, vgm_time=%d", hr_time, vgm_time);
    }
    */
    u8 leds = MIOS32_BOARD_LED_Get();
 801bb68:	f7f7 fd26 	bl	80135b8 <MIOS32_BOARD_LED_Get>
    MIOS32_BOARD_LED_Set(0b1111, 0b0010);
 801bb6c:	2102      	movs	r1, #2
    /*
    if(hr_time % 10000 == 0){
        DBG("WorkCallback at hr_time=%d, vgm_time=%d", hr_time, vgm_time);
    }
    */
    u8 leds = MIOS32_BOARD_LED_Get();
 801bb6e:	4681      	mov	r9, r0
    MIOS32_BOARD_LED_Set(0b1111, 0b0010);
 801bb70:	200f      	movs	r0, #15
 801bb72:	f7f7 fcef 	bl	8013554 <MIOS32_BOARD_LED_Set>
    VgmHead* h;
    u32 minwait = 0xFFFFFFFF; s32 s; u32 u;
    ChipWriteCmd cmd;
    u8 wrotetochip;
    //Scan all VGMs for delays
    if(vgmp_head != NULL){
 801bb76:	4b3f      	ldr	r3, [pc, #252]	; (801bc74 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x114>)
 801bb78:	6818      	ldr	r0, [r3, #0]
 801bb7a:	b158      	cbz	r0, 801bb94 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x34>
    ~VgmHead();
    
    void restart(u32 vgm_time);
    
    void cmdNext(u32 vgm_time);
    inline bool cmdIsWait() {return iswait || isdone;}
 801bb7c:	7b01      	ldrb	r1, [r0, #12]
 801bb7e:	7fc2      	ldrb	r2, [r0, #31]
 801bb80:	b901      	cbnz	r1, 801bb84 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x24>
 801bb82:	b13a      	cbz	r2, 801bb94 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x34>
    inline s32 cmdGetWaitRemaining(u32 vgm_time) {return (isdone ? 65535 : ((s32)ticks - (s32)vgm_time));}
 801bb84:	b94a      	cbnz	r2, 801bb9a <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x3a>
 801bb86:	6944      	ldr	r4, [r0, #20]
 801bb88:	1be4      	subs	r4, r4, r7
        h = vgmp_head;
        //Check for delay
        if(h->cmdIsWait()){
            s = h->cmdGetWaitRemaining(vgm_time);
            if(s <= 0){
 801bb8a:	2c00      	cmp	r4, #0
 801bb8c:	dc07      	bgt.n	801bb9e <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x3e>
                //Advance to next command
                h->cmdNext(vgm_time);
 801bb8e:	4639      	mov	r1, r7
 801bb90:	f7ff fc92 	bl	801b4b8 <VgmHead::cmdNext(unsigned long)>
    }
    */
    u8 leds = MIOS32_BOARD_LED_Get();
    MIOS32_BOARD_LED_Set(0b1111, 0b0010);
    VgmHead* h;
    u32 minwait = 0xFFFFFFFF; s32 s; u32 u;
 801bb94:	f04f 34ff 	mov.w	r4, #4294967295
 801bb98:	e004      	b.n	801bba4 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x44>
 801bb9a:	f64f 74ff 	movw	r4, #65535	; 0xffff
            s = h->cmdGetWaitRemaining(vgm_time);
            if(s <= 0){
                //Advance to next command
                h->cmdNext(vgm_time);
            }else{
                u = s * VGMP_HRTICKSPERSAMPLE;
 801bb9e:	f240 7071 	movw	r0, #1905	; 0x771
 801bba2:	4344      	muls	r4, r0
    }
    //Scan all VGMs for pending chip write commands
    wrotetochip = 1;
    while(wrotetochip){
        wrotetochip = 0;
        if(vgmp_head != NULL){
 801bba4:	4d33      	ldr	r5, [pc, #204]	; (801bc74 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x114>)
 801bba6:	682d      	ldr	r5, [r5, #0]
 801bba8:	b93d      	cbnz	r5, 801bbba <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x5a>
                }
            }
        }
    }
    //Set up next delay
    if(minwait < 100){
 801bbaa:	2c63      	cmp	r4, #99	; 0x63
 801bbac:	d90c      	bls.n	801bbc8 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x68>
 801bbae:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 801bbb2:	bf28      	it	cs
 801bbb4:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
 801bbb8:	e007      	b.n	801bbca <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x6a>
    inline bool cmdIsChipWrite() {return iswrite && !isdone;}
 801bbba:	7b6b      	ldrb	r3, [r5, #13]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d0f4      	beq.n	801bbaa <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x4a>
 801bbc0:	7fe8      	ldrb	r0, [r5, #31]
 801bbc2:	2800      	cmp	r0, #0
 801bbc4:	d1f1      	bne.n	801bbaa <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x4a>
 801bbc6:	e008      	b.n	801bbda <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x7a>
        //TODO loop instead of returning and re-timing
        minwait = 100;
 801bbc8:	2464      	movs	r4, #100	; 0x64
    }else if(minwait > VGMP_MAXDELAY){
        minwait = VGMP_MAXDELAY;
    }
    //minwait = 1000;
    MIOS32_BOARD_LED_Set(0b1111, leds);
 801bbca:	200f      	movs	r0, #15
 801bbcc:	fa5f f189 	uxtb.w	r1, r9
 801bbd0:	f7f7 fcc0 	bl	8013554 <MIOS32_BOARD_LED_Set>
    return minwait;
 801bbd4:	b2a0      	uxth	r0, r4
 801bbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    inline ChipWriteCmd cmdGetChipWrite() {return writecmd;}
 801bbda:	6929      	ldr	r1, [r5, #16]
 801bbdc:	b2ca      	uxtb	r2, r1
        if(vgmp_head != NULL){
            h = vgmp_head;
            //Check for command
            if(h->cmdIsChipWrite()){
                cmd = h->cmdGetChipWrite();
                if(cmd.cmd == 0x50){
 801bbde:	2a50      	cmp	r2, #80	; 0x50
 801bbe0:	f3c1 2807 	ubfx	r8, r1, #8, #8
 801bbe4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801bbe8:	d117      	bne.n	801bc1a <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0xba>
                    //PSG write
                    u = hr_time - chipdata[0].psg_lastwritetime;
 801bbea:	f8df 808c 	ldr.w	r8, [pc, #140]	; 801bc78 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x118>
 801bbee:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801bbf2:	1ab1      	subs	r1, r6, r2
                    if(u < VGMP_PSGBUSYDELAY){
 801bbf4:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 801bbf8:	d205      	bcs.n	801bc06 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0xa6>
                        u = VGMP_PSGBUSYDELAY - u;
 801bbfa:	f5c1 60fa 	rsb	r0, r1, #2000	; 0x7d0
                        if(u < minwait){
 801bbfe:	4284      	cmp	r4, r0
 801bc00:	bf28      	it	cs
 801bc02:	4604      	movcs	r4, r0
 801bc04:	e7d1      	b.n	801bbaa <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x4a>
                            minwait = u;
                        }
                    }else{
                        Genesis_PSGWrite(0, cmd.data);
 801bc06:	4619      	mov	r1, r3
 801bc08:	f7ff f9fc 	bl	801b004 <Genesis_PSGWrite>
                        h->cmdNext(vgm_time);
 801bc0c:	4628      	mov	r0, r5
 801bc0e:	4639      	mov	r1, r7
 801bc10:	f7ff fc52 	bl	801b4b8 <VgmHead::cmdNext(unsigned long)>
                        chipdata[0].psg_lastwritetime = hr_time;
 801bc14:	f8c8 6004 	str.w	r6, [r8, #4]
 801bc18:	e7c4      	b.n	801bba4 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x44>
                        wrotetochip = 1;
                    }
                }else if((cmd.cmd & 0xFE) == 0x52){
 801bc1a:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
 801bc1e:	2952      	cmp	r1, #82	; 0x52
 801bc20:	d1c3      	bne.n	801bbaa <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x4a>
                    //OPN2 write
                    u = hr_time - chipdata[0].opn2_lastwritetime;
 801bc22:	f8df a054 	ldr.w	sl, [pc, #84]	; 801bc78 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x118>
 801bc26:	f8da 1000 	ldr.w	r1, [sl]
                    if(u < VGMP_OPN2BUSYDELAY){
 801bc2a:	f640 0e33 	movw	lr, #2099	; 0x833
                        chipdata[0].psg_lastwritetime = hr_time;
                        wrotetochip = 1;
                    }
                }else if((cmd.cmd & 0xFE) == 0x52){
                    //OPN2 write
                    u = hr_time - chipdata[0].opn2_lastwritetime;
 801bc2e:	1a71      	subs	r1, r6, r1
                    if(u < VGMP_OPN2BUSYDELAY){
 801bc30:	4571      	cmp	r1, lr
 801bc32:	d806      	bhi.n	801bc42 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0xe2>
                        u = VGMP_OPN2BUSYDELAY - u;
 801bc34:	f5c1 6203 	rsb	r2, r1, #2096	; 0x830
 801bc38:	1d11      	adds	r1, r2, #4
                        if(u < minwait){
 801bc3a:	428c      	cmp	r4, r1
 801bc3c:	bf28      	it	cs
 801bc3e:	460c      	movcs	r4, r1
 801bc40:	e7b3      	b.n	801bbaa <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x4a>
                            minwait = u;
                        }
                    }else{
                        Genesis_OPN2Write(0, (cmd.cmd & 0x01), cmd.addr, cmd.data);
 801bc42:	f002 0101 	and.w	r1, r2, #1
 801bc46:	4642      	mov	r2, r8
 801bc48:	f7ff f930 	bl	801aeac <Genesis_OPN2Write>
                        h->cmdNext(vgm_time);
 801bc4c:	4628      	mov	r0, r5
 801bc4e:	4639      	mov	r1, r7
 801bc50:	f7ff fc32 	bl	801b4b8 <VgmHead::cmdNext(unsigned long)>
                        //Don't delay after 0x2x commands
                        if(cmd.addr >= 0x20 && cmd.addr < 0x2F && cmd.addr != 0x28){
 801bc54:	f1a8 0020 	sub.w	r0, r8, #32
 801bc58:	280e      	cmp	r0, #14
 801bc5a:	d807      	bhi.n	801bc6c <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x10c>
 801bc5c:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 801bc60:	d004      	beq.n	801bc6c <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x10c>
                            chipdata[0].opn2_lastwritetime = hr_time - VGMP_OPN2BUSYDELAY;
 801bc62:	f6a6 0334 	subw	r3, r6, #2100	; 0x834
 801bc66:	f8ca 3000 	str.w	r3, [sl]
 801bc6a:	e79b      	b.n	801bba4 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x44>
                        }else{
                            chipdata[0].opn2_lastwritetime = hr_time;
 801bc6c:	4d02      	ldr	r5, [pc, #8]	; (801bc78 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x118>)
 801bc6e:	602e      	str	r6, [r5, #0]
 801bc70:	e798      	b.n	801bba4 <VgmPlayer_WorkCallback(unsigned long, unsigned long)+0x44>
 801bc72:	bf00      	nop
 801bc74:	20000a78 	.word	0x20000a78
 801bc78:	20000a7c 	.word	0x20000a7c

0801bc7c <VgmPlayer_AddHead(VgmHead*)>:

// For this test software, there's only one head.
VgmHead* vgmp_head;

void VgmPlayer_AddHead(VgmHead* vgmh){
    vgmp_head = vgmh;
 801bc7c:	4b05      	ldr	r3, [pc, #20]	; (801bc94 <VgmPlayer_AddHead(VgmHead*)+0x18>)
vgmp_chipdata chipdata[GENESIS_COUNT];

// For this test software, there's only one head.
VgmHead* vgmp_head;

void VgmPlayer_AddHead(VgmHead* vgmh){
 801bc7e:	b510      	push	{r4, lr}
 801bc80:	4604      	mov	r4, r0
    vgmp_head = vgmh;
 801bc82:	6018      	str	r0, [r3, #0]
    //Start it!
    vgmp_head->cmdNext(VgmPlayerLL_GetVGMTime());
 801bc84:	f7f4 f9bc 	bl	8010000 <VgmPlayerLL_GetVGMTime>
 801bc88:	4601      	mov	r1, r0
 801bc8a:	4620      	mov	r0, r4
}
 801bc8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
VgmHead* vgmp_head;

void VgmPlayer_AddHead(VgmHead* vgmh){
    vgmp_head = vgmh;
    //Start it!
    vgmp_head->cmdNext(VgmPlayerLL_GetVGMTime());
 801bc90:	f7ff bc12 	b.w	801b4b8 <VgmHead::cmdNext(unsigned long)>
 801bc94:	20000a78 	.word	0x20000a78

0801bc98 <VgmPlayer_Init()>:
    MIOS32_BOARD_LED_Set(0b1111, leds);
    return minwait;
}


void VgmPlayer_Init(){
 801bc98:	b508      	push	{r3, lr}
    vgmp_head = NULL;
 801bc9a:	4b05      	ldr	r3, [pc, #20]	; (801bcb0 <VgmPlayer_Init()+0x18>)
    VgmPlayerLL_RegisterCallback(VgmPlayer_WorkCallback);
 801bc9c:	4805      	ldr	r0, [pc, #20]	; (801bcb4 <VgmPlayer_Init()+0x1c>)
    return minwait;
}


void VgmPlayer_Init(){
    vgmp_head = NULL;
 801bc9e:	2200      	movs	r2, #0
 801bca0:	601a      	str	r2, [r3, #0]
    VgmPlayerLL_RegisterCallback(VgmPlayer_WorkCallback);
 801bca2:	f7f4 f9d9 	bl	8010058 <VgmPlayerLL_RegisterCallback>
    VgmPlayerLL_Init();
}
 801bca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}


void VgmPlayer_Init(){
    vgmp_head = NULL;
    VgmPlayerLL_RegisterCallback(VgmPlayer_WorkCallback);
    VgmPlayerLL_Init();
 801bcaa:	f7f4 b9db 	b.w	8010064 <VgmPlayerLL_Init>
 801bcae:	bf00      	nop
 801bcb0:	20000a78 	.word	0x20000a78
 801bcb4:	0801bb61 	.word	0x0801bb61

0801bcb8 <operator new(unsigned int)>:

#include <stdlib.h>                   // for prototypes of malloc() and free()

//............................................................................
void *operator new(size_t size) throw() {
	return malloc(size); // note: will use FreeRTOS based malloc() in freertos_malloc.cpp
 801bcb8:	f000 b802 	b.w	801bcc0 <malloc>

0801bcbc <operator delete(void*)>:
}
//............................................................................
void operator delete(void *p) throw() {
	free(p); // note: will use FreeRTOS based free() in freertos_malloc.cpp
 801bcbc:	f000 b802 	b.w	801bcc4 <free>

0801bcc0 <malloc>:
#include <stdlib.h>	// for prototypes of malloc(), calloc() and free()

//............................................................................
extern "C" void *malloc(size_t size)
{
  return pvPortMalloc(size);
 801bcc0:	f7f4 bfc4 	b.w	8010c4c <pvPortMalloc>

0801bcc4 <free>:
}
#endif
//............................................................................
extern "C" void free(void *p)
{
  vPortFree(p);
 801bcc4:	f7f4 bf88 	b.w	8010bd8 <vPortFree>

0801bcc8 <operator new[](unsigned int)>:
 801bcc8:	f7ff bff6 	b.w	801bcb8 <operator new(unsigned int)>

0801bccc <operator delete[](void*)>:
 801bccc:	f7ff bff6 	b.w	801bcbc <operator delete(void*)>

0801bcd0 <__aeabi_llsr>:
 801bcd0:	40d0      	lsrs	r0, r2
 801bcd2:	1c0b      	adds	r3, r1, #0
 801bcd4:	40d1      	lsrs	r1, r2
 801bcd6:	469c      	mov	ip, r3
 801bcd8:	3a20      	subs	r2, #32
 801bcda:	40d3      	lsrs	r3, r2
 801bcdc:	4318      	orrs	r0, r3
 801bcde:	4252      	negs	r2, r2
 801bce0:	4663      	mov	r3, ip
 801bce2:	4093      	lsls	r3, r2
 801bce4:	4318      	orrs	r0, r3
 801bce6:	4770      	bx	lr

0801bce8 <__aeabi_llsl>:
 801bce8:	4091      	lsls	r1, r2
 801bcea:	1c03      	adds	r3, r0, #0
 801bcec:	4090      	lsls	r0, r2
 801bcee:	469c      	mov	ip, r3
 801bcf0:	3a20      	subs	r2, #32
 801bcf2:	4093      	lsls	r3, r2
 801bcf4:	4319      	orrs	r1, r3
 801bcf6:	4252      	negs	r2, r2
 801bcf8:	4663      	mov	r3, ip
 801bcfa:	40d3      	lsrs	r3, r2
 801bcfc:	4319      	orrs	r1, r3
 801bcfe:	4770      	bx	lr

0801bd00 <__libc_init_array>:
 801bd00:	b538      	push	{r3, r4, r5, lr}
 801bd02:	4d0e      	ldr	r5, [pc, #56]	; (801bd3c <__libc_init_array+0x3c>)
 801bd04:	4b0e      	ldr	r3, [pc, #56]	; (801bd40 <__libc_init_array+0x40>)
 801bd06:	1ae8      	subs	r0, r5, r3
 801bd08:	1085      	asrs	r5, r0, #2
 801bd0a:	2400      	movs	r4, #0
 801bd0c:	42ac      	cmp	r4, r5
 801bd0e:	d005      	beq.n	801bd1c <__libc_init_array+0x1c>
 801bd10:	490b      	ldr	r1, [pc, #44]	; (801bd40 <__libc_init_array+0x40>)
 801bd12:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 801bd16:	4790      	blx	r2
 801bd18:	3401      	adds	r4, #1
 801bd1a:	e7f7      	b.n	801bd0c <__libc_init_array+0xc>
 801bd1c:	f7f5 f84c 	bl	8010db8 <_init>
 801bd20:	4908      	ldr	r1, [pc, #32]	; (801bd44 <__libc_init_array+0x44>)
 801bd22:	4a09      	ldr	r2, [pc, #36]	; (801bd48 <__libc_init_array+0x48>)
 801bd24:	1a54      	subs	r4, r2, r1
 801bd26:	10a5      	asrs	r5, r4, #2
 801bd28:	2400      	movs	r4, #0
 801bd2a:	42ac      	cmp	r4, r5
 801bd2c:	d005      	beq.n	801bd3a <__libc_init_array+0x3a>
 801bd2e:	4b05      	ldr	r3, [pc, #20]	; (801bd44 <__libc_init_array+0x44>)
 801bd30:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bd34:	4780      	blx	r0
 801bd36:	3401      	adds	r4, #1
 801bd38:	e7f7      	b.n	801bd2a <__libc_init_array+0x2a>
 801bd3a:	bd38      	pop	{r3, r4, r5, pc}
 801bd3c:	0801d6a4 	.word	0x0801d6a4
 801bd40:	0801d6a4 	.word	0x0801d6a4
 801bd44:	0801d6a4 	.word	0x0801d6a4
 801bd48:	0801d6a4 	.word	0x0801d6a4

0801bd4c <memcpy>:
 801bd4c:	b510      	push	{r4, lr}
 801bd4e:	2300      	movs	r3, #0
 801bd50:	4293      	cmp	r3, r2
 801bd52:	d003      	beq.n	801bd5c <memcpy+0x10>
 801bd54:	5ccc      	ldrb	r4, [r1, r3]
 801bd56:	54c4      	strb	r4, [r0, r3]
 801bd58:	3301      	adds	r3, #1
 801bd5a:	e7f9      	b.n	801bd50 <memcpy+0x4>
 801bd5c:	bd10      	pop	{r4, pc}

0801bd5e <memset>:
 801bd5e:	1882      	adds	r2, r0, r2
 801bd60:	4603      	mov	r3, r0
 801bd62:	4293      	cmp	r3, r2
 801bd64:	d002      	beq.n	801bd6c <memset+0xe>
 801bd66:	f803 1b01 	strb.w	r1, [r3], #1
 801bd6a:	e7fa      	b.n	801bd62 <memset+0x4>
 801bd6c:	4770      	bx	lr

0801bd6e <strcpy>:
 801bd6e:	4603      	mov	r3, r0
 801bd70:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bd74:	f803 2b01 	strb.w	r2, [r3], #1
 801bd78:	2a00      	cmp	r2, #0
 801bd7a:	d1f9      	bne.n	801bd70 <strcpy+0x2>
 801bd7c:	4770      	bx	lr

0801bd7e <strlen>:
 801bd7e:	4603      	mov	r3, r0
 801bd80:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd84:	2a00      	cmp	r2, #0
 801bd86:	d1fb      	bne.n	801bd80 <strlen+0x2>
 801bd88:	1a18      	subs	r0, r3, r0
 801bd8a:	3801      	subs	r0, #1
 801bd8c:	4770      	bx	lr

0801bd8e <strncpy>:
 801bd8e:	b530      	push	{r4, r5, lr}
 801bd90:	3901      	subs	r1, #1
 801bd92:	4603      	mov	r3, r0
 801bd94:	461c      	mov	r4, r3
 801bd96:	b13a      	cbz	r2, 801bda8 <strncpy+0x1a>
 801bd98:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801bd9c:	f803 5b01 	strb.w	r5, [r3], #1
 801bda0:	3a01      	subs	r2, #1
 801bda2:	461c      	mov	r4, r3
 801bda4:	2d00      	cmp	r5, #0
 801bda6:	d1f5      	bne.n	801bd94 <strncpy+0x6>
 801bda8:	1899      	adds	r1, r3, r2
 801bdaa:	428c      	cmp	r4, r1
 801bdac:	d003      	beq.n	801bdb6 <strncpy+0x28>
 801bdae:	2200      	movs	r2, #0
 801bdb0:	f804 2b01 	strb.w	r2, [r4], #1
 801bdb4:	e7f9      	b.n	801bdaa <strncpy+0x1c>
 801bdb6:	bd30      	pop	{r4, r5, pc}
